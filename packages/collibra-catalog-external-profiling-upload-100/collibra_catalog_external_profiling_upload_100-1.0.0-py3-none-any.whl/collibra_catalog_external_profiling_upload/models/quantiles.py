# coding: utf-8

"""
    Collibra Catalog External Profiling Upload API

    <p>This API is used to manually push profiling data.</p>  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Quantiles(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'percentile1': 'str',
        'percentile5': 'str',
        'decile1': 'str',
        'quartile1': 'str',
        'median': 'str',
        'quartile3': 'str',
        'decile9': 'str',
        'percentile95': 'str',
        'percentile99': 'str'
    }

    attribute_map = {
        'percentile1': 'percentile1',
        'percentile5': 'percentile5',
        'decile1': 'decile1',
        'quartile1': 'quartile1',
        'median': 'median',
        'quartile3': 'quartile3',
        'decile9': 'decile9',
        'percentile95': 'percentile95',
        'percentile99': 'percentile99'
    }

    def __init__(self, percentile1=None, percentile5=None, decile1=None, quartile1=None, median=None, quartile3=None, decile9=None, percentile95=None, percentile99=None):  # noqa: E501
        """Quantiles - a model defined in Swagger"""  # noqa: E501
        self._percentile1 = None
        self._percentile5 = None
        self._decile1 = None
        self._quartile1 = None
        self._median = None
        self._quartile3 = None
        self._decile9 = None
        self._percentile95 = None
        self._percentile99 = None
        self.discriminator = None
        if percentile1 is not None:
            self.percentile1 = percentile1
        if percentile5 is not None:
            self.percentile5 = percentile5
        if decile1 is not None:
            self.decile1 = decile1
        if quartile1 is not None:
            self.quartile1 = quartile1
        if median is not None:
            self.median = median
        if quartile3 is not None:
            self.quartile3 = quartile3
        if decile9 is not None:
            self.decile9 = decile9
        if percentile95 is not None:
            self.percentile95 = percentile95
        if percentile99 is not None:
            self.percentile99 = percentile99

    @property
    def percentile1(self):
        """Gets the percentile1 of this Quantiles.  # noqa: E501


        :return: The percentile1 of this Quantiles.  # noqa: E501
        :rtype: str
        """
        return self._percentile1

    @percentile1.setter
    def percentile1(self, percentile1):
        """Sets the percentile1 of this Quantiles.


        :param percentile1: The percentile1 of this Quantiles.  # noqa: E501
        :type: str
        """

        self._percentile1 = percentile1

    @property
    def percentile5(self):
        """Gets the percentile5 of this Quantiles.  # noqa: E501


        :return: The percentile5 of this Quantiles.  # noqa: E501
        :rtype: str
        """
        return self._percentile5

    @percentile5.setter
    def percentile5(self, percentile5):
        """Sets the percentile5 of this Quantiles.


        :param percentile5: The percentile5 of this Quantiles.  # noqa: E501
        :type: str
        """

        self._percentile5 = percentile5

    @property
    def decile1(self):
        """Gets the decile1 of this Quantiles.  # noqa: E501


        :return: The decile1 of this Quantiles.  # noqa: E501
        :rtype: str
        """
        return self._decile1

    @decile1.setter
    def decile1(self, decile1):
        """Sets the decile1 of this Quantiles.


        :param decile1: The decile1 of this Quantiles.  # noqa: E501
        :type: str
        """

        self._decile1 = decile1

    @property
    def quartile1(self):
        """Gets the quartile1 of this Quantiles.  # noqa: E501


        :return: The quartile1 of this Quantiles.  # noqa: E501
        :rtype: str
        """
        return self._quartile1

    @quartile1.setter
    def quartile1(self, quartile1):
        """Sets the quartile1 of this Quantiles.


        :param quartile1: The quartile1 of this Quantiles.  # noqa: E501
        :type: str
        """

        self._quartile1 = quartile1

    @property
    def median(self):
        """Gets the median of this Quantiles.  # noqa: E501


        :return: The median of this Quantiles.  # noqa: E501
        :rtype: str
        """
        return self._median

    @median.setter
    def median(self, median):
        """Sets the median of this Quantiles.


        :param median: The median of this Quantiles.  # noqa: E501
        :type: str
        """

        self._median = median

    @property
    def quartile3(self):
        """Gets the quartile3 of this Quantiles.  # noqa: E501


        :return: The quartile3 of this Quantiles.  # noqa: E501
        :rtype: str
        """
        return self._quartile3

    @quartile3.setter
    def quartile3(self, quartile3):
        """Sets the quartile3 of this Quantiles.


        :param quartile3: The quartile3 of this Quantiles.  # noqa: E501
        :type: str
        """

        self._quartile3 = quartile3

    @property
    def decile9(self):
        """Gets the decile9 of this Quantiles.  # noqa: E501


        :return: The decile9 of this Quantiles.  # noqa: E501
        :rtype: str
        """
        return self._decile9

    @decile9.setter
    def decile9(self, decile9):
        """Sets the decile9 of this Quantiles.


        :param decile9: The decile9 of this Quantiles.  # noqa: E501
        :type: str
        """

        self._decile9 = decile9

    @property
    def percentile95(self):
        """Gets the percentile95 of this Quantiles.  # noqa: E501


        :return: The percentile95 of this Quantiles.  # noqa: E501
        :rtype: str
        """
        return self._percentile95

    @percentile95.setter
    def percentile95(self, percentile95):
        """Sets the percentile95 of this Quantiles.


        :param percentile95: The percentile95 of this Quantiles.  # noqa: E501
        :type: str
        """

        self._percentile95 = percentile95

    @property
    def percentile99(self):
        """Gets the percentile99 of this Quantiles.  # noqa: E501


        :return: The percentile99 of this Quantiles.  # noqa: E501
        :rtype: str
        """
        return self._percentile99

    @percentile99.setter
    def percentile99(self, percentile99):
        """Sets the percentile99 of this Quantiles.


        :param percentile99: The percentile99 of this Quantiles.  # noqa: E501
        :type: str
        """

        self._percentile99 = percentile99

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Quantiles, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Quantiles):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Collibra Catalog External Profiling Upload API

    <p>This API is used to manually push profiling data.</p>  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Statistics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mean': 'float',
        'variance': 'float',
        'standard_deviation': 'float',
        'minimum': 'str',
        'maximum': 'str',
        'minimum_text_length': 'int',
        'maximum_text_length': 'int'
    }

    attribute_map = {
        'mean': 'mean',
        'variance': 'variance',
        'standard_deviation': 'standardDeviation',
        'minimum': 'minimum',
        'maximum': 'maximum',
        'minimum_text_length': 'minimumTextLength',
        'maximum_text_length': 'maximumTextLength'
    }

    def __init__(self, mean=None, variance=None, standard_deviation=None, minimum=None, maximum=None, minimum_text_length=None, maximum_text_length=None):  # noqa: E501
        """Statistics - a model defined in Swagger"""  # noqa: E501
        self._mean = None
        self._variance = None
        self._standard_deviation = None
        self._minimum = None
        self._maximum = None
        self._minimum_text_length = None
        self._maximum_text_length = None
        self.discriminator = None
        if mean is not None:
            self.mean = mean
        if variance is not None:
            self.variance = variance
        if standard_deviation is not None:
            self.standard_deviation = standard_deviation
        if minimum is not None:
            self.minimum = minimum
        if maximum is not None:
            self.maximum = maximum
        if minimum_text_length is not None:
            self.minimum_text_length = minimum_text_length
        if maximum_text_length is not None:
            self.maximum_text_length = maximum_text_length

    @property
    def mean(self):
        """Gets the mean of this Statistics.  # noqa: E501


        :return: The mean of this Statistics.  # noqa: E501
        :rtype: float
        """
        return self._mean

    @mean.setter
    def mean(self, mean):
        """Sets the mean of this Statistics.


        :param mean: The mean of this Statistics.  # noqa: E501
        :type: float
        """

        self._mean = mean

    @property
    def variance(self):
        """Gets the variance of this Statistics.  # noqa: E501


        :return: The variance of this Statistics.  # noqa: E501
        :rtype: float
        """
        return self._variance

    @variance.setter
    def variance(self, variance):
        """Sets the variance of this Statistics.


        :param variance: The variance of this Statistics.  # noqa: E501
        :type: float
        """

        self._variance = variance

    @property
    def standard_deviation(self):
        """Gets the standard_deviation of this Statistics.  # noqa: E501


        :return: The standard_deviation of this Statistics.  # noqa: E501
        :rtype: float
        """
        return self._standard_deviation

    @standard_deviation.setter
    def standard_deviation(self, standard_deviation):
        """Sets the standard_deviation of this Statistics.


        :param standard_deviation: The standard_deviation of this Statistics.  # noqa: E501
        :type: float
        """

        self._standard_deviation = standard_deviation

    @property
    def minimum(self):
        """Gets the minimum of this Statistics.  # noqa: E501


        :return: The minimum of this Statistics.  # noqa: E501
        :rtype: str
        """
        return self._minimum

    @minimum.setter
    def minimum(self, minimum):
        """Sets the minimum of this Statistics.


        :param minimum: The minimum of this Statistics.  # noqa: E501
        :type: str
        """

        self._minimum = minimum

    @property
    def maximum(self):
        """Gets the maximum of this Statistics.  # noqa: E501


        :return: The maximum of this Statistics.  # noqa: E501
        :rtype: str
        """
        return self._maximum

    @maximum.setter
    def maximum(self, maximum):
        """Sets the maximum of this Statistics.


        :param maximum: The maximum of this Statistics.  # noqa: E501
        :type: str
        """

        self._maximum = maximum

    @property
    def minimum_text_length(self):
        """Gets the minimum_text_length of this Statistics.  # noqa: E501


        :return: The minimum_text_length of this Statistics.  # noqa: E501
        :rtype: int
        """
        return self._minimum_text_length

    @minimum_text_length.setter
    def minimum_text_length(self, minimum_text_length):
        """Sets the minimum_text_length of this Statistics.


        :param minimum_text_length: The minimum_text_length of this Statistics.  # noqa: E501
        :type: int
        """

        self._minimum_text_length = minimum_text_length

    @property
    def maximum_text_length(self):
        """Gets the maximum_text_length of this Statistics.  # noqa: E501


        :return: The maximum_text_length of this Statistics.  # noqa: E501
        :rtype: int
        """
        return self._maximum_text_length

    @maximum_text_length.setter
    def maximum_text_length(self, maximum_text_length):
        """Sets the maximum_text_length of this Statistics.


        :param maximum_text_length: The maximum_text_length of this Statistics.  # noqa: E501
        :type: int
        """

        self._maximum_text_length = maximum_text_length

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Statistics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Statistics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

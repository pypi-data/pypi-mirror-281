# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _SimpleITKFiltersPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkHessianImageFilterPython
else:
    import _itkHessianImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkImageToImageFilterBPython
import itk.itkImageToImageFilterCommonPython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.itkCovariantVectorPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkVectorImagePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkVariableLengthVectorPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkImageRegionPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython

def itkHessianImageFilterID2_New():
    return itkHessianImageFilterID2.New()

class itkHessianImageFilterID2(itk.itkImageToImageFilterBPython.itkImageToImageFilterID2ISSRTD22):
    r"""Proxy of C++ itkHessianImageFilterID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHessianImageFilterID2_Pointer"""
        return _itkHessianImageFilterPython.itkHessianImageFilterID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHessianImageFilterID2_Pointer"""
        return _itkHessianImageFilterPython.itkHessianImageFilterID2_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkHessianImageFilterPython.itkHessianImageFilterID2_GenerateInputRequestedRegion(self)
    InputHasNumericTraitsCheck = _itkHessianImageFilterPython.itkHessianImageFilterID2_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianImageFilterPython.itkHessianImageFilterID2_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianImageFilterPython.delete_itkHessianImageFilterID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHessianImageFilterID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHessianImageFilterPython.itkHessianImageFilterID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHessianImageFilterID2

        Create a new object of the class itkHessianImageFilterID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianImageFilterID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianImageFilterID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianImageFilterID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianImageFilterID2 in _itkHessianImageFilterPython:
_itkHessianImageFilterPython.itkHessianImageFilterID2_swigregister(itkHessianImageFilterID2)

def itkHessianImageFilterID3_New():
    return itkHessianImageFilterID3.New()

class itkHessianImageFilterID3(itk.itkImageToImageFilterBPython.itkImageToImageFilterID3ISSRTD33):
    r"""Proxy of C++ itkHessianImageFilterID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHessianImageFilterID3_Pointer"""
        return _itkHessianImageFilterPython.itkHessianImageFilterID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHessianImageFilterID3_Pointer"""
        return _itkHessianImageFilterPython.itkHessianImageFilterID3_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkHessianImageFilterPython.itkHessianImageFilterID3_GenerateInputRequestedRegion(self)
    InputHasNumericTraitsCheck = _itkHessianImageFilterPython.itkHessianImageFilterID3_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianImageFilterPython.itkHessianImageFilterID3_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianImageFilterPython.delete_itkHessianImageFilterID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHessianImageFilterID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHessianImageFilterPython.itkHessianImageFilterID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHessianImageFilterID3

        Create a new object of the class itkHessianImageFilterID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianImageFilterID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianImageFilterID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianImageFilterID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianImageFilterID3 in _itkHessianImageFilterPython:
_itkHessianImageFilterPython.itkHessianImageFilterID3_swigregister(itkHessianImageFilterID3)

def itkHessianImageFilterID4_New():
    return itkHessianImageFilterID4.New()

class itkHessianImageFilterID4(itk.itkImageToImageFilterBPython.itkImageToImageFilterID4ISSRTD44):
    r"""Proxy of C++ itkHessianImageFilterID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHessianImageFilterID4_Pointer"""
        return _itkHessianImageFilterPython.itkHessianImageFilterID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHessianImageFilterID4_Pointer"""
        return _itkHessianImageFilterPython.itkHessianImageFilterID4_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkHessianImageFilterPython.itkHessianImageFilterID4_GenerateInputRequestedRegion(self)
    InputHasNumericTraitsCheck = _itkHessianImageFilterPython.itkHessianImageFilterID4_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianImageFilterPython.itkHessianImageFilterID4_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianImageFilterPython.delete_itkHessianImageFilterID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHessianImageFilterID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHessianImageFilterPython.itkHessianImageFilterID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHessianImageFilterID4

        Create a new object of the class itkHessianImageFilterID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianImageFilterID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianImageFilterID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianImageFilterID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianImageFilterID4 in _itkHessianImageFilterPython:
_itkHessianImageFilterPython.itkHessianImageFilterID4_swigregister(itkHessianImageFilterID4)

def itkHessianImageFilterIF2_New():
    return itkHessianImageFilterIF2.New()

class itkHessianImageFilterIF2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF2ISSRTD22):
    r"""Proxy of C++ itkHessianImageFilterIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHessianImageFilterIF2_Pointer"""
        return _itkHessianImageFilterPython.itkHessianImageFilterIF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHessianImageFilterIF2_Pointer"""
        return _itkHessianImageFilterPython.itkHessianImageFilterIF2_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkHessianImageFilterPython.itkHessianImageFilterIF2_GenerateInputRequestedRegion(self)
    InputHasNumericTraitsCheck = _itkHessianImageFilterPython.itkHessianImageFilterIF2_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianImageFilterPython.itkHessianImageFilterIF2_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianImageFilterPython.delete_itkHessianImageFilterIF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHessianImageFilterIF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHessianImageFilterPython.itkHessianImageFilterIF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHessianImageFilterIF2

        Create a new object of the class itkHessianImageFilterIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianImageFilterIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianImageFilterIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianImageFilterIF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianImageFilterIF2 in _itkHessianImageFilterPython:
_itkHessianImageFilterPython.itkHessianImageFilterIF2_swigregister(itkHessianImageFilterIF2)

def itkHessianImageFilterIF3_New():
    return itkHessianImageFilterIF3.New()

class itkHessianImageFilterIF3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF3ISSRTD33):
    r"""Proxy of C++ itkHessianImageFilterIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHessianImageFilterIF3_Pointer"""
        return _itkHessianImageFilterPython.itkHessianImageFilterIF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHessianImageFilterIF3_Pointer"""
        return _itkHessianImageFilterPython.itkHessianImageFilterIF3_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkHessianImageFilterPython.itkHessianImageFilterIF3_GenerateInputRequestedRegion(self)
    InputHasNumericTraitsCheck = _itkHessianImageFilterPython.itkHessianImageFilterIF3_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianImageFilterPython.itkHessianImageFilterIF3_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianImageFilterPython.delete_itkHessianImageFilterIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHessianImageFilterIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHessianImageFilterPython.itkHessianImageFilterIF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHessianImageFilterIF3

        Create a new object of the class itkHessianImageFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianImageFilterIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianImageFilterIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianImageFilterIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianImageFilterIF3 in _itkHessianImageFilterPython:
_itkHessianImageFilterPython.itkHessianImageFilterIF3_swigregister(itkHessianImageFilterIF3)

def itkHessianImageFilterIF4_New():
    return itkHessianImageFilterIF4.New()

class itkHessianImageFilterIF4(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF4ISSRTD44):
    r"""Proxy of C++ itkHessianImageFilterIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHessianImageFilterIF4_Pointer"""
        return _itkHessianImageFilterPython.itkHessianImageFilterIF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHessianImageFilterIF4_Pointer"""
        return _itkHessianImageFilterPython.itkHessianImageFilterIF4_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkHessianImageFilterPython.itkHessianImageFilterIF4_GenerateInputRequestedRegion(self)
    InputHasNumericTraitsCheck = _itkHessianImageFilterPython.itkHessianImageFilterIF4_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianImageFilterPython.itkHessianImageFilterIF4_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianImageFilterPython.delete_itkHessianImageFilterIF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHessianImageFilterIF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHessianImageFilterPython.itkHessianImageFilterIF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHessianImageFilterIF4

        Create a new object of the class itkHessianImageFilterIF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianImageFilterIF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianImageFilterIF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianImageFilterIF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianImageFilterIF4 in _itkHessianImageFilterPython:
_itkHessianImageFilterPython.itkHessianImageFilterIF4_swigregister(itkHessianImageFilterIF4)

def itkHessianImageFilterISS2_New():
    return itkHessianImageFilterISS2.New()

class itkHessianImageFilterISS2(itk.itkImageToImageFilterBPython.itkImageToImageFilterISS2ISSRTD22):
    r"""Proxy of C++ itkHessianImageFilterISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHessianImageFilterISS2_Pointer"""
        return _itkHessianImageFilterPython.itkHessianImageFilterISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHessianImageFilterISS2_Pointer"""
        return _itkHessianImageFilterPython.itkHessianImageFilterISS2_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkHessianImageFilterPython.itkHessianImageFilterISS2_GenerateInputRequestedRegion(self)
    InputHasNumericTraitsCheck = _itkHessianImageFilterPython.itkHessianImageFilterISS2_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianImageFilterPython.itkHessianImageFilterISS2_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianImageFilterPython.delete_itkHessianImageFilterISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHessianImageFilterISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHessianImageFilterPython.itkHessianImageFilterISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHessianImageFilterISS2

        Create a new object of the class itkHessianImageFilterISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianImageFilterISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianImageFilterISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianImageFilterISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianImageFilterISS2 in _itkHessianImageFilterPython:
_itkHessianImageFilterPython.itkHessianImageFilterISS2_swigregister(itkHessianImageFilterISS2)

def itkHessianImageFilterISS3_New():
    return itkHessianImageFilterISS3.New()

class itkHessianImageFilterISS3(itk.itkImageToImageFilterBPython.itkImageToImageFilterISS3ISSRTD33):
    r"""Proxy of C++ itkHessianImageFilterISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHessianImageFilterISS3_Pointer"""
        return _itkHessianImageFilterPython.itkHessianImageFilterISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHessianImageFilterISS3_Pointer"""
        return _itkHessianImageFilterPython.itkHessianImageFilterISS3_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkHessianImageFilterPython.itkHessianImageFilterISS3_GenerateInputRequestedRegion(self)
    InputHasNumericTraitsCheck = _itkHessianImageFilterPython.itkHessianImageFilterISS3_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianImageFilterPython.itkHessianImageFilterISS3_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianImageFilterPython.delete_itkHessianImageFilterISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHessianImageFilterISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHessianImageFilterPython.itkHessianImageFilterISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHessianImageFilterISS3

        Create a new object of the class itkHessianImageFilterISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianImageFilterISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianImageFilterISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianImageFilterISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianImageFilterISS3 in _itkHessianImageFilterPython:
_itkHessianImageFilterPython.itkHessianImageFilterISS3_swigregister(itkHessianImageFilterISS3)

def itkHessianImageFilterISS4_New():
    return itkHessianImageFilterISS4.New()

class itkHessianImageFilterISS4(itk.itkImageToImageFilterBPython.itkImageToImageFilterISS4ISSRTD44):
    r"""Proxy of C++ itkHessianImageFilterISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHessianImageFilterISS4_Pointer"""
        return _itkHessianImageFilterPython.itkHessianImageFilterISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHessianImageFilterISS4_Pointer"""
        return _itkHessianImageFilterPython.itkHessianImageFilterISS4_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkHessianImageFilterPython.itkHessianImageFilterISS4_GenerateInputRequestedRegion(self)
    InputHasNumericTraitsCheck = _itkHessianImageFilterPython.itkHessianImageFilterISS4_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianImageFilterPython.itkHessianImageFilterISS4_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianImageFilterPython.delete_itkHessianImageFilterISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHessianImageFilterISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHessianImageFilterPython.itkHessianImageFilterISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHessianImageFilterISS4

        Create a new object of the class itkHessianImageFilterISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianImageFilterISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianImageFilterISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianImageFilterISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianImageFilterISS4 in _itkHessianImageFilterPython:
_itkHessianImageFilterPython.itkHessianImageFilterISS4_swigregister(itkHessianImageFilterISS4)

def itkHessianImageFilterIUC2_New():
    return itkHessianImageFilterIUC2.New()

class itkHessianImageFilterIUC2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC2ISSRTD22):
    r"""Proxy of C++ itkHessianImageFilterIUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHessianImageFilterIUC2_Pointer"""
        return _itkHessianImageFilterPython.itkHessianImageFilterIUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHessianImageFilterIUC2_Pointer"""
        return _itkHessianImageFilterPython.itkHessianImageFilterIUC2_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkHessianImageFilterPython.itkHessianImageFilterIUC2_GenerateInputRequestedRegion(self)
    InputHasNumericTraitsCheck = _itkHessianImageFilterPython.itkHessianImageFilterIUC2_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianImageFilterPython.itkHessianImageFilterIUC2_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianImageFilterPython.delete_itkHessianImageFilterIUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHessianImageFilterIUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHessianImageFilterPython.itkHessianImageFilterIUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHessianImageFilterIUC2

        Create a new object of the class itkHessianImageFilterIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianImageFilterIUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianImageFilterIUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianImageFilterIUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianImageFilterIUC2 in _itkHessianImageFilterPython:
_itkHessianImageFilterPython.itkHessianImageFilterIUC2_swigregister(itkHessianImageFilterIUC2)

def itkHessianImageFilterIUC3_New():
    return itkHessianImageFilterIUC3.New()

class itkHessianImageFilterIUC3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC3ISSRTD33):
    r"""Proxy of C++ itkHessianImageFilterIUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHessianImageFilterIUC3_Pointer"""
        return _itkHessianImageFilterPython.itkHessianImageFilterIUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHessianImageFilterIUC3_Pointer"""
        return _itkHessianImageFilterPython.itkHessianImageFilterIUC3_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkHessianImageFilterPython.itkHessianImageFilterIUC3_GenerateInputRequestedRegion(self)
    InputHasNumericTraitsCheck = _itkHessianImageFilterPython.itkHessianImageFilterIUC3_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianImageFilterPython.itkHessianImageFilterIUC3_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianImageFilterPython.delete_itkHessianImageFilterIUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHessianImageFilterIUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHessianImageFilterPython.itkHessianImageFilterIUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHessianImageFilterIUC3

        Create a new object of the class itkHessianImageFilterIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianImageFilterIUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianImageFilterIUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianImageFilterIUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianImageFilterIUC3 in _itkHessianImageFilterPython:
_itkHessianImageFilterPython.itkHessianImageFilterIUC3_swigregister(itkHessianImageFilterIUC3)

def itkHessianImageFilterIUC4_New():
    return itkHessianImageFilterIUC4.New()

class itkHessianImageFilterIUC4(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC4ISSRTD44):
    r"""Proxy of C++ itkHessianImageFilterIUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHessianImageFilterIUC4_Pointer"""
        return _itkHessianImageFilterPython.itkHessianImageFilterIUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHessianImageFilterIUC4_Pointer"""
        return _itkHessianImageFilterPython.itkHessianImageFilterIUC4_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkHessianImageFilterPython.itkHessianImageFilterIUC4_GenerateInputRequestedRegion(self)
    InputHasNumericTraitsCheck = _itkHessianImageFilterPython.itkHessianImageFilterIUC4_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianImageFilterPython.itkHessianImageFilterIUC4_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianImageFilterPython.delete_itkHessianImageFilterIUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHessianImageFilterIUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHessianImageFilterPython.itkHessianImageFilterIUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHessianImageFilterIUC4

        Create a new object of the class itkHessianImageFilterIUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianImageFilterIUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianImageFilterIUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianImageFilterIUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianImageFilterIUC4 in _itkHessianImageFilterPython:
_itkHessianImageFilterPython.itkHessianImageFilterIUC4_swigregister(itkHessianImageFilterIUC4)

def itkHessianImageFilterIUS2_New():
    return itkHessianImageFilterIUS2.New()

class itkHessianImageFilterIUS2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUS2ISSRTD22):
    r"""Proxy of C++ itkHessianImageFilterIUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHessianImageFilterIUS2_Pointer"""
        return _itkHessianImageFilterPython.itkHessianImageFilterIUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHessianImageFilterIUS2_Pointer"""
        return _itkHessianImageFilterPython.itkHessianImageFilterIUS2_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkHessianImageFilterPython.itkHessianImageFilterIUS2_GenerateInputRequestedRegion(self)
    InputHasNumericTraitsCheck = _itkHessianImageFilterPython.itkHessianImageFilterIUS2_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianImageFilterPython.itkHessianImageFilterIUS2_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianImageFilterPython.delete_itkHessianImageFilterIUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHessianImageFilterIUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHessianImageFilterPython.itkHessianImageFilterIUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHessianImageFilterIUS2

        Create a new object of the class itkHessianImageFilterIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianImageFilterIUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianImageFilterIUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianImageFilterIUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianImageFilterIUS2 in _itkHessianImageFilterPython:
_itkHessianImageFilterPython.itkHessianImageFilterIUS2_swigregister(itkHessianImageFilterIUS2)

def itkHessianImageFilterIUS3_New():
    return itkHessianImageFilterIUS3.New()

class itkHessianImageFilterIUS3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUS3ISSRTD33):
    r"""Proxy of C++ itkHessianImageFilterIUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHessianImageFilterIUS3_Pointer"""
        return _itkHessianImageFilterPython.itkHessianImageFilterIUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHessianImageFilterIUS3_Pointer"""
        return _itkHessianImageFilterPython.itkHessianImageFilterIUS3_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkHessianImageFilterPython.itkHessianImageFilterIUS3_GenerateInputRequestedRegion(self)
    InputHasNumericTraitsCheck = _itkHessianImageFilterPython.itkHessianImageFilterIUS3_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianImageFilterPython.itkHessianImageFilterIUS3_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianImageFilterPython.delete_itkHessianImageFilterIUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHessianImageFilterIUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHessianImageFilterPython.itkHessianImageFilterIUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHessianImageFilterIUS3

        Create a new object of the class itkHessianImageFilterIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianImageFilterIUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianImageFilterIUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianImageFilterIUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianImageFilterIUS3 in _itkHessianImageFilterPython:
_itkHessianImageFilterPython.itkHessianImageFilterIUS3_swigregister(itkHessianImageFilterIUS3)

def itkHessianImageFilterIUS4_New():
    return itkHessianImageFilterIUS4.New()

class itkHessianImageFilterIUS4(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUS4ISSRTD44):
    r"""Proxy of C++ itkHessianImageFilterIUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHessianImageFilterIUS4_Pointer"""
        return _itkHessianImageFilterPython.itkHessianImageFilterIUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHessianImageFilterIUS4_Pointer"""
        return _itkHessianImageFilterPython.itkHessianImageFilterIUS4_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkHessianImageFilterPython.itkHessianImageFilterIUS4_GenerateInputRequestedRegion(self)
    InputHasNumericTraitsCheck = _itkHessianImageFilterPython.itkHessianImageFilterIUS4_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianImageFilterPython.itkHessianImageFilterIUS4_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianImageFilterPython.delete_itkHessianImageFilterIUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHessianImageFilterIUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHessianImageFilterPython.itkHessianImageFilterIUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHessianImageFilterIUS4

        Create a new object of the class itkHessianImageFilterIUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianImageFilterIUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianImageFilterIUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianImageFilterIUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianImageFilterIUS4 in _itkHessianImageFilterPython:
_itkHessianImageFilterPython.itkHessianImageFilterIUS4_swigregister(itkHessianImageFilterIUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def hessian_image_filter(*args: itkt.ImageLike, **kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for HessianImageFilter"""
    import itk

    kwarg_typehints = {  }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.HessianImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def hessian_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.SimpleITKFilters.HessianImageFilter
    hessian_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    hessian_image_filter.__doc__ = filter_object.__doc__




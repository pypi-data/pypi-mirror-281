# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _SimpleITKFiltersPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkDICOMOrientationPython
else:
    import _itkDICOMOrientationPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrix_fixedPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
class itkDICOMOrientation(object):
    r"""Proxy of C++ itkDICOMOrientation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    CoordinateEnum_UNKNOWN = _itkDICOMOrientationPython.itkDICOMOrientation_CoordinateEnum_UNKNOWN
    
    CoordinateEnum_Right = _itkDICOMOrientationPython.itkDICOMOrientation_CoordinateEnum_Right
    
    CoordinateEnum_Left = _itkDICOMOrientationPython.itkDICOMOrientation_CoordinateEnum_Left
    
    CoordinateEnum_Anterior = _itkDICOMOrientationPython.itkDICOMOrientation_CoordinateEnum_Anterior
    
    CoordinateEnum_Posterior = _itkDICOMOrientationPython.itkDICOMOrientation_CoordinateEnum_Posterior
    
    CoordinateEnum_Inferior = _itkDICOMOrientationPython.itkDICOMOrientation_CoordinateEnum_Inferior
    
    CoordinateEnum_Superior = _itkDICOMOrientationPython.itkDICOMOrientation_CoordinateEnum_Superior
    
    OrientationEnum_INVALID = _itkDICOMOrientationPython.itkDICOMOrientation_OrientationEnum_INVALID
    
    OrientationEnum_RIP = _itkDICOMOrientationPython.itkDICOMOrientation_OrientationEnum_RIP
    
    OrientationEnum_LIP = _itkDICOMOrientationPython.itkDICOMOrientation_OrientationEnum_LIP
    
    OrientationEnum_RSP = _itkDICOMOrientationPython.itkDICOMOrientation_OrientationEnum_RSP
    
    OrientationEnum_LSP = _itkDICOMOrientationPython.itkDICOMOrientation_OrientationEnum_LSP
    
    OrientationEnum_RIA = _itkDICOMOrientationPython.itkDICOMOrientation_OrientationEnum_RIA
    
    OrientationEnum_LIA = _itkDICOMOrientationPython.itkDICOMOrientation_OrientationEnum_LIA
    
    OrientationEnum_RSA = _itkDICOMOrientationPython.itkDICOMOrientation_OrientationEnum_RSA
    
    OrientationEnum_LSA = _itkDICOMOrientationPython.itkDICOMOrientation_OrientationEnum_LSA
    
    OrientationEnum_IRP = _itkDICOMOrientationPython.itkDICOMOrientation_OrientationEnum_IRP
    
    OrientationEnum_ILP = _itkDICOMOrientationPython.itkDICOMOrientation_OrientationEnum_ILP
    
    OrientationEnum_SRP = _itkDICOMOrientationPython.itkDICOMOrientation_OrientationEnum_SRP
    
    OrientationEnum_SLP = _itkDICOMOrientationPython.itkDICOMOrientation_OrientationEnum_SLP
    
    OrientationEnum_IRA = _itkDICOMOrientationPython.itkDICOMOrientation_OrientationEnum_IRA
    
    OrientationEnum_ILA = _itkDICOMOrientationPython.itkDICOMOrientation_OrientationEnum_ILA
    
    OrientationEnum_SRA = _itkDICOMOrientationPython.itkDICOMOrientation_OrientationEnum_SRA
    
    OrientationEnum_SLA = _itkDICOMOrientationPython.itkDICOMOrientation_OrientationEnum_SLA
    
    OrientationEnum_RPI = _itkDICOMOrientationPython.itkDICOMOrientation_OrientationEnum_RPI
    
    OrientationEnum_LPI = _itkDICOMOrientationPython.itkDICOMOrientation_OrientationEnum_LPI
    
    OrientationEnum_RAI = _itkDICOMOrientationPython.itkDICOMOrientation_OrientationEnum_RAI
    
    OrientationEnum_LAI = _itkDICOMOrientationPython.itkDICOMOrientation_OrientationEnum_LAI
    
    OrientationEnum_RPS = _itkDICOMOrientationPython.itkDICOMOrientation_OrientationEnum_RPS
    
    OrientationEnum_LPS = _itkDICOMOrientationPython.itkDICOMOrientation_OrientationEnum_LPS
    
    OrientationEnum_RAS = _itkDICOMOrientationPython.itkDICOMOrientation_OrientationEnum_RAS
    
    OrientationEnum_LAS = _itkDICOMOrientationPython.itkDICOMOrientation_OrientationEnum_LAS
    
    OrientationEnum_PRI = _itkDICOMOrientationPython.itkDICOMOrientation_OrientationEnum_PRI
    
    OrientationEnum_PLI = _itkDICOMOrientationPython.itkDICOMOrientation_OrientationEnum_PLI
    
    OrientationEnum_ARI = _itkDICOMOrientationPython.itkDICOMOrientation_OrientationEnum_ARI
    
    OrientationEnum_ALI = _itkDICOMOrientationPython.itkDICOMOrientation_OrientationEnum_ALI
    
    OrientationEnum_PRS = _itkDICOMOrientationPython.itkDICOMOrientation_OrientationEnum_PRS
    
    OrientationEnum_PLS = _itkDICOMOrientationPython.itkDICOMOrientation_OrientationEnum_PLS
    
    OrientationEnum_ARS = _itkDICOMOrientationPython.itkDICOMOrientation_OrientationEnum_ARS
    
    OrientationEnum_ALS = _itkDICOMOrientationPython.itkDICOMOrientation_OrientationEnum_ALS
    
    OrientationEnum_IPR = _itkDICOMOrientationPython.itkDICOMOrientation_OrientationEnum_IPR
    
    OrientationEnum_SPR = _itkDICOMOrientationPython.itkDICOMOrientation_OrientationEnum_SPR
    
    OrientationEnum_IAR = _itkDICOMOrientationPython.itkDICOMOrientation_OrientationEnum_IAR
    
    OrientationEnum_SAR = _itkDICOMOrientationPython.itkDICOMOrientation_OrientationEnum_SAR
    
    OrientationEnum_IPL = _itkDICOMOrientationPython.itkDICOMOrientation_OrientationEnum_IPL
    
    OrientationEnum_SPL = _itkDICOMOrientationPython.itkDICOMOrientation_OrientationEnum_SPL
    
    OrientationEnum_IAL = _itkDICOMOrientationPython.itkDICOMOrientation_OrientationEnum_IAL
    
    OrientationEnum_SAL = _itkDICOMOrientationPython.itkDICOMOrientation_OrientationEnum_SAL
    
    OrientationEnum_PIR = _itkDICOMOrientationPython.itkDICOMOrientation_OrientationEnum_PIR
    
    OrientationEnum_PSR = _itkDICOMOrientationPython.itkDICOMOrientation_OrientationEnum_PSR
    
    OrientationEnum_AIR = _itkDICOMOrientationPython.itkDICOMOrientation_OrientationEnum_AIR
    
    OrientationEnum_ASR = _itkDICOMOrientationPython.itkDICOMOrientation_OrientationEnum_ASR
    
    OrientationEnum_PIL = _itkDICOMOrientationPython.itkDICOMOrientation_OrientationEnum_PIL
    
    OrientationEnum_PSL = _itkDICOMOrientationPython.itkDICOMOrientation_OrientationEnum_PSL
    
    OrientationEnum_AIL = _itkDICOMOrientationPython.itkDICOMOrientation_OrientationEnum_AIL
    
    OrientationEnum_ASL = _itkDICOMOrientationPython.itkDICOMOrientation_OrientationEnum_ASL
    

    def GetAsString(self):
        r"""GetAsString(self) -> std::string const &"""
        return _itkDICOMOrientationPython.itkDICOMOrientation_GetAsString(self)

    def GetAsDirection(self):
        r"""GetAsDirection(self) -> itkMatrixD33"""
        return _itkDICOMOrientationPython.itkDICOMOrientation_GetAsDirection(self)

    def GetAsOrientation(self):
        r"""GetAsOrientation(self) -> itkDICOMOrientation::OrientationEnum"""
        return _itkDICOMOrientationPython.itkDICOMOrientation_GetAsOrientation(self)

    def GetPrimaryTerm(self):
        r"""GetPrimaryTerm(self) -> itkDICOMOrientation::CoordinateEnum"""
        return _itkDICOMOrientationPython.itkDICOMOrientation_GetPrimaryTerm(self)

    def GetSecondaryTerm(self):
        r"""GetSecondaryTerm(self) -> itkDICOMOrientation::CoordinateEnum"""
        return _itkDICOMOrientationPython.itkDICOMOrientation_GetSecondaryTerm(self)

    def GetTertiaryTerm(self):
        r"""GetTertiaryTerm(self) -> itkDICOMOrientation::CoordinateEnum"""
        return _itkDICOMOrientationPython.itkDICOMOrientation_GetTertiaryTerm(self)

    @staticmethod
    def SameOrientationAxes(a, b):
        r"""
        SameOrientationAxes(a, b) -> bool

        Parameters
        ----------
        a: enum itkDICOMOrientation::CoordinateEnum
        b: enum itkDICOMOrientation::CoordinateEnum

        """
        return _itkDICOMOrientationPython.itkDICOMOrientation_SameOrientationAxes(a, b)

    @staticmethod
    def DirectionCosinesToOrientation(dir):
        r"""
        DirectionCosinesToOrientation(dir) -> itkDICOMOrientation::OrientationEnum

        Parameters
        ----------
        dir: itkMatrixD33 const &

        """
        return _itkDICOMOrientationPython.itkDICOMOrientation_DirectionCosinesToOrientation(dir)

    @staticmethod
    def OrientationToDirectionCosines(arg0):
        r"""
        OrientationToDirectionCosines(arg0) -> itkMatrixD33

        Parameters
        ----------
        arg0: enum itkDICOMOrientation::OrientationEnum

        """
        return _itkDICOMOrientationPython.itkDICOMOrientation_OrientationToDirectionCosines(arg0)

    def __init__(self, *args):
        r"""
        __init__(self, primary, secondary, tertiary) -> itkDICOMOrientation

        Parameters
        ----------
        primary: enum itkDICOMOrientation::CoordinateEnum
        secondary: enum itkDICOMOrientation::CoordinateEnum
        tertiary: enum itkDICOMOrientation::CoordinateEnum

        __init__(self, orientation) -> itkDICOMOrientation

        Parameters
        ----------
        orientation: enum itkDICOMOrientation::OrientationEnum

        __init__(self, d) -> itkDICOMOrientation

        Parameters
        ----------
        d: itkMatrixD33 const &

        __init__(self, str) -> itkDICOMOrientation

        Parameters
        ----------
        str: std::string

        __init__(self, arg0) -> itkDICOMOrientation

        Parameters
        ----------
        arg0: itkDICOMOrientation const &

        """
        _itkDICOMOrientationPython.itkDICOMOrientation_swiginit(self, _itkDICOMOrientationPython.new_itkDICOMOrientation(*args))
    __swig_destroy__ = _itkDICOMOrientationPython.delete_itkDICOMOrientation

# Register itkDICOMOrientation in _itkDICOMOrientationPython:
_itkDICOMOrientationPython.itkDICOMOrientation_swigregister(itkDICOMOrientation)


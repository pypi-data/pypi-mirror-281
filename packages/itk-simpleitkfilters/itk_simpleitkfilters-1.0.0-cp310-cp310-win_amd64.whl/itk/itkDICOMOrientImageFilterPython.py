# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _SimpleITKFiltersPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkDICOMOrientImageFilterPython
else:
    import _itkDICOMOrientImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_vector_refPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.itkImageToImageFilterBPython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkDICOMOrientationPython
import itk.itkImageToImageFilterAPython

def itkDICOMOrientImageFilterICD3_New():
    return itkDICOMOrientImageFilterICD3.New()

class itkDICOMOrientImageFilterICD3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICD3ICD3):
    r"""Proxy of C++ itkDICOMOrientImageFilterICD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDICOMOrientImageFilterICD3_Pointer"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDICOMOrientImageFilterICD3_Pointer"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICD3_Clone(self)

    def GetInputCoordinateOrientation(self):
        r"""GetInputCoordinateOrientation(self) -> itkDICOMOrientation::OrientationEnum"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICD3_GetInputCoordinateOrientation(self)

    def GetDesiredCoordinateOrientation(self):
        r"""GetDesiredCoordinateOrientation(self) -> itkDICOMOrientation::OrientationEnum"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICD3_GetDesiredCoordinateOrientation(self)

    def SetDesiredCoordinateOrientation(self, *args):
        r"""
        SetDesiredCoordinateOrientation(self, newCode)

        Parameters
        ----------
        newCode: enum itkDICOMOrientation::OrientationEnum

        SetDesiredCoordinateOrientation(self, desired)

        Parameters
        ----------
        desired: std::string const &

        """
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICD3_SetDesiredCoordinateOrientation(self, *args)

    def SetDesiredCoordinateDirection(self, DesiredDirection):
        r"""
        SetDesiredCoordinateDirection(self, DesiredDirection)

        Parameters
        ----------
        DesiredDirection: itkMatrixD33 const &

        """
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICD3_SetDesiredCoordinateDirection(self, DesiredDirection)

    def GetPermuteOrder(self):
        r"""GetPermuteOrder(self) -> itkFixedArrayUI3"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICD3_GetPermuteOrder(self)

    def GetFlipAxes(self):
        r"""GetFlipAxes(self) -> itkFixedArrayB3"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICD3_GetFlipAxes(self)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICD3_GenerateOutputInformation(self)
    __swig_destroy__ = _itkDICOMOrientImageFilterPython.delete_itkDICOMOrientImageFilterICD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDICOMOrientImageFilterICD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICD3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDICOMOrientImageFilterICD3

        Create a new object of the class itkDICOMOrientImageFilterICD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDICOMOrientImageFilterICD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDICOMOrientImageFilterICD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDICOMOrientImageFilterICD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDICOMOrientImageFilterICD3 in _itkDICOMOrientImageFilterPython:
_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICD3_swigregister(itkDICOMOrientImageFilterICD3)

def itkDICOMOrientImageFilterICF3_New():
    return itkDICOMOrientImageFilterICF3.New()

class itkDICOMOrientImageFilterICF3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF3):
    r"""Proxy of C++ itkDICOMOrientImageFilterICF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDICOMOrientImageFilterICF3_Pointer"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDICOMOrientImageFilterICF3_Pointer"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICF3_Clone(self)

    def GetInputCoordinateOrientation(self):
        r"""GetInputCoordinateOrientation(self) -> itkDICOMOrientation::OrientationEnum"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICF3_GetInputCoordinateOrientation(self)

    def GetDesiredCoordinateOrientation(self):
        r"""GetDesiredCoordinateOrientation(self) -> itkDICOMOrientation::OrientationEnum"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICF3_GetDesiredCoordinateOrientation(self)

    def SetDesiredCoordinateOrientation(self, *args):
        r"""
        SetDesiredCoordinateOrientation(self, newCode)

        Parameters
        ----------
        newCode: enum itkDICOMOrientation::OrientationEnum

        SetDesiredCoordinateOrientation(self, desired)

        Parameters
        ----------
        desired: std::string const &

        """
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICF3_SetDesiredCoordinateOrientation(self, *args)

    def SetDesiredCoordinateDirection(self, DesiredDirection):
        r"""
        SetDesiredCoordinateDirection(self, DesiredDirection)

        Parameters
        ----------
        DesiredDirection: itkMatrixD33 const &

        """
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICF3_SetDesiredCoordinateDirection(self, DesiredDirection)

    def GetPermuteOrder(self):
        r"""GetPermuteOrder(self) -> itkFixedArrayUI3"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICF3_GetPermuteOrder(self)

    def GetFlipAxes(self):
        r"""GetFlipAxes(self) -> itkFixedArrayB3"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICF3_GetFlipAxes(self)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICF3_GenerateOutputInformation(self)
    __swig_destroy__ = _itkDICOMOrientImageFilterPython.delete_itkDICOMOrientImageFilterICF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDICOMOrientImageFilterICF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDICOMOrientImageFilterICF3

        Create a new object of the class itkDICOMOrientImageFilterICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDICOMOrientImageFilterICF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDICOMOrientImageFilterICF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDICOMOrientImageFilterICF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDICOMOrientImageFilterICF3 in _itkDICOMOrientImageFilterPython:
_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICF3_swigregister(itkDICOMOrientImageFilterICF3)

def itkDICOMOrientImageFilterICVF23_New():
    return itkDICOMOrientImageFilterICVF23.New()

class itkDICOMOrientImageFilterICVF23(itk.itkImageToImageFilterAPython.itkImageToImageFilterICVF23ICVF23):
    r"""Proxy of C++ itkDICOMOrientImageFilterICVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDICOMOrientImageFilterICVF23_Pointer"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF23___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDICOMOrientImageFilterICVF23_Pointer"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF23_Clone(self)

    def GetInputCoordinateOrientation(self):
        r"""GetInputCoordinateOrientation(self) -> itkDICOMOrientation::OrientationEnum"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF23_GetInputCoordinateOrientation(self)

    def GetDesiredCoordinateOrientation(self):
        r"""GetDesiredCoordinateOrientation(self) -> itkDICOMOrientation::OrientationEnum"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF23_GetDesiredCoordinateOrientation(self)

    def SetDesiredCoordinateOrientation(self, *args):
        r"""
        SetDesiredCoordinateOrientation(self, newCode)

        Parameters
        ----------
        newCode: enum itkDICOMOrientation::OrientationEnum

        SetDesiredCoordinateOrientation(self, desired)

        Parameters
        ----------
        desired: std::string const &

        """
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF23_SetDesiredCoordinateOrientation(self, *args)

    def SetDesiredCoordinateDirection(self, DesiredDirection):
        r"""
        SetDesiredCoordinateDirection(self, DesiredDirection)

        Parameters
        ----------
        DesiredDirection: itkMatrixD33 const &

        """
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF23_SetDesiredCoordinateDirection(self, DesiredDirection)

    def GetPermuteOrder(self):
        r"""GetPermuteOrder(self) -> itkFixedArrayUI3"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF23_GetPermuteOrder(self)

    def GetFlipAxes(self):
        r"""GetFlipAxes(self) -> itkFixedArrayB3"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF23_GetFlipAxes(self)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF23_GenerateOutputInformation(self)
    __swig_destroy__ = _itkDICOMOrientImageFilterPython.delete_itkDICOMOrientImageFilterICVF23

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDICOMOrientImageFilterICVF23

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF23_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDICOMOrientImageFilterICVF23

        Create a new object of the class itkDICOMOrientImageFilterICVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDICOMOrientImageFilterICVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDICOMOrientImageFilterICVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDICOMOrientImageFilterICVF23.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDICOMOrientImageFilterICVF23 in _itkDICOMOrientImageFilterPython:
_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF23_swigregister(itkDICOMOrientImageFilterICVF23)

def itkDICOMOrientImageFilterICVF33_New():
    return itkDICOMOrientImageFilterICVF33.New()

class itkDICOMOrientImageFilterICVF33(itk.itkImageToImageFilterAPython.itkImageToImageFilterICVF33ICVF33):
    r"""Proxy of C++ itkDICOMOrientImageFilterICVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDICOMOrientImageFilterICVF33_Pointer"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF33___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDICOMOrientImageFilterICVF33_Pointer"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF33_Clone(self)

    def GetInputCoordinateOrientation(self):
        r"""GetInputCoordinateOrientation(self) -> itkDICOMOrientation::OrientationEnum"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF33_GetInputCoordinateOrientation(self)

    def GetDesiredCoordinateOrientation(self):
        r"""GetDesiredCoordinateOrientation(self) -> itkDICOMOrientation::OrientationEnum"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF33_GetDesiredCoordinateOrientation(self)

    def SetDesiredCoordinateOrientation(self, *args):
        r"""
        SetDesiredCoordinateOrientation(self, newCode)

        Parameters
        ----------
        newCode: enum itkDICOMOrientation::OrientationEnum

        SetDesiredCoordinateOrientation(self, desired)

        Parameters
        ----------
        desired: std::string const &

        """
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF33_SetDesiredCoordinateOrientation(self, *args)

    def SetDesiredCoordinateDirection(self, DesiredDirection):
        r"""
        SetDesiredCoordinateDirection(self, DesiredDirection)

        Parameters
        ----------
        DesiredDirection: itkMatrixD33 const &

        """
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF33_SetDesiredCoordinateDirection(self, DesiredDirection)

    def GetPermuteOrder(self):
        r"""GetPermuteOrder(self) -> itkFixedArrayUI3"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF33_GetPermuteOrder(self)

    def GetFlipAxes(self):
        r"""GetFlipAxes(self) -> itkFixedArrayB3"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF33_GetFlipAxes(self)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF33_GenerateOutputInformation(self)
    __swig_destroy__ = _itkDICOMOrientImageFilterPython.delete_itkDICOMOrientImageFilterICVF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDICOMOrientImageFilterICVF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF33_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDICOMOrientImageFilterICVF33

        Create a new object of the class itkDICOMOrientImageFilterICVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDICOMOrientImageFilterICVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDICOMOrientImageFilterICVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDICOMOrientImageFilterICVF33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDICOMOrientImageFilterICVF33 in _itkDICOMOrientImageFilterPython:
_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF33_swigregister(itkDICOMOrientImageFilterICVF33)

def itkDICOMOrientImageFilterICVF43_New():
    return itkDICOMOrientImageFilterICVF43.New()

class itkDICOMOrientImageFilterICVF43(itk.itkImageToImageFilterAPython.itkImageToImageFilterICVF43ICVF43):
    r"""Proxy of C++ itkDICOMOrientImageFilterICVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDICOMOrientImageFilterICVF43_Pointer"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF43___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDICOMOrientImageFilterICVF43_Pointer"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF43_Clone(self)

    def GetInputCoordinateOrientation(self):
        r"""GetInputCoordinateOrientation(self) -> itkDICOMOrientation::OrientationEnum"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF43_GetInputCoordinateOrientation(self)

    def GetDesiredCoordinateOrientation(self):
        r"""GetDesiredCoordinateOrientation(self) -> itkDICOMOrientation::OrientationEnum"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF43_GetDesiredCoordinateOrientation(self)

    def SetDesiredCoordinateOrientation(self, *args):
        r"""
        SetDesiredCoordinateOrientation(self, newCode)

        Parameters
        ----------
        newCode: enum itkDICOMOrientation::OrientationEnum

        SetDesiredCoordinateOrientation(self, desired)

        Parameters
        ----------
        desired: std::string const &

        """
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF43_SetDesiredCoordinateOrientation(self, *args)

    def SetDesiredCoordinateDirection(self, DesiredDirection):
        r"""
        SetDesiredCoordinateDirection(self, DesiredDirection)

        Parameters
        ----------
        DesiredDirection: itkMatrixD33 const &

        """
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF43_SetDesiredCoordinateDirection(self, DesiredDirection)

    def GetPermuteOrder(self):
        r"""GetPermuteOrder(self) -> itkFixedArrayUI3"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF43_GetPermuteOrder(self)

    def GetFlipAxes(self):
        r"""GetFlipAxes(self) -> itkFixedArrayB3"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF43_GetFlipAxes(self)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF43_GenerateOutputInformation(self)
    __swig_destroy__ = _itkDICOMOrientImageFilterPython.delete_itkDICOMOrientImageFilterICVF43

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDICOMOrientImageFilterICVF43

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF43_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDICOMOrientImageFilterICVF43

        Create a new object of the class itkDICOMOrientImageFilterICVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDICOMOrientImageFilterICVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDICOMOrientImageFilterICVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDICOMOrientImageFilterICVF43.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDICOMOrientImageFilterICVF43 in _itkDICOMOrientImageFilterPython:
_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterICVF43_swigregister(itkDICOMOrientImageFilterICVF43)

def itkDICOMOrientImageFilterID3_New():
    return itkDICOMOrientImageFilterID3.New()

class itkDICOMOrientImageFilterID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""Proxy of C++ itkDICOMOrientImageFilterID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDICOMOrientImageFilterID3_Pointer"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDICOMOrientImageFilterID3_Pointer"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterID3_Clone(self)

    def GetInputCoordinateOrientation(self):
        r"""GetInputCoordinateOrientation(self) -> itkDICOMOrientation::OrientationEnum"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterID3_GetInputCoordinateOrientation(self)

    def GetDesiredCoordinateOrientation(self):
        r"""GetDesiredCoordinateOrientation(self) -> itkDICOMOrientation::OrientationEnum"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterID3_GetDesiredCoordinateOrientation(self)

    def SetDesiredCoordinateOrientation(self, *args):
        r"""
        SetDesiredCoordinateOrientation(self, newCode)

        Parameters
        ----------
        newCode: enum itkDICOMOrientation::OrientationEnum

        SetDesiredCoordinateOrientation(self, desired)

        Parameters
        ----------
        desired: std::string const &

        """
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterID3_SetDesiredCoordinateOrientation(self, *args)

    def SetDesiredCoordinateDirection(self, DesiredDirection):
        r"""
        SetDesiredCoordinateDirection(self, DesiredDirection)

        Parameters
        ----------
        DesiredDirection: itkMatrixD33 const &

        """
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterID3_SetDesiredCoordinateDirection(self, DesiredDirection)

    def GetPermuteOrder(self):
        r"""GetPermuteOrder(self) -> itkFixedArrayUI3"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterID3_GetPermuteOrder(self)

    def GetFlipAxes(self):
        r"""GetFlipAxes(self) -> itkFixedArrayB3"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterID3_GetFlipAxes(self)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterID3_GenerateOutputInformation(self)
    __swig_destroy__ = _itkDICOMOrientImageFilterPython.delete_itkDICOMOrientImageFilterID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDICOMOrientImageFilterID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDICOMOrientImageFilterID3

        Create a new object of the class itkDICOMOrientImageFilterID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDICOMOrientImageFilterID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDICOMOrientImageFilterID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDICOMOrientImageFilterID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDICOMOrientImageFilterID3 in _itkDICOMOrientImageFilterPython:
_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterID3_swigregister(itkDICOMOrientImageFilterID3)

def itkDICOMOrientImageFilterIF3_New():
    return itkDICOMOrientImageFilterIF3.New()

class itkDICOMOrientImageFilterIF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""Proxy of C++ itkDICOMOrientImageFilterIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDICOMOrientImageFilterIF3_Pointer"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDICOMOrientImageFilterIF3_Pointer"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIF3_Clone(self)

    def GetInputCoordinateOrientation(self):
        r"""GetInputCoordinateOrientation(self) -> itkDICOMOrientation::OrientationEnum"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIF3_GetInputCoordinateOrientation(self)

    def GetDesiredCoordinateOrientation(self):
        r"""GetDesiredCoordinateOrientation(self) -> itkDICOMOrientation::OrientationEnum"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIF3_GetDesiredCoordinateOrientation(self)

    def SetDesiredCoordinateOrientation(self, *args):
        r"""
        SetDesiredCoordinateOrientation(self, newCode)

        Parameters
        ----------
        newCode: enum itkDICOMOrientation::OrientationEnum

        SetDesiredCoordinateOrientation(self, desired)

        Parameters
        ----------
        desired: std::string const &

        """
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIF3_SetDesiredCoordinateOrientation(self, *args)

    def SetDesiredCoordinateDirection(self, DesiredDirection):
        r"""
        SetDesiredCoordinateDirection(self, DesiredDirection)

        Parameters
        ----------
        DesiredDirection: itkMatrixD33 const &

        """
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIF3_SetDesiredCoordinateDirection(self, DesiredDirection)

    def GetPermuteOrder(self):
        r"""GetPermuteOrder(self) -> itkFixedArrayUI3"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIF3_GetPermuteOrder(self)

    def GetFlipAxes(self):
        r"""GetFlipAxes(self) -> itkFixedArrayB3"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIF3_GetFlipAxes(self)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIF3_GenerateOutputInformation(self)
    __swig_destroy__ = _itkDICOMOrientImageFilterPython.delete_itkDICOMOrientImageFilterIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDICOMOrientImageFilterIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDICOMOrientImageFilterIF3

        Create a new object of the class itkDICOMOrientImageFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDICOMOrientImageFilterIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDICOMOrientImageFilterIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDICOMOrientImageFilterIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDICOMOrientImageFilterIF3 in _itkDICOMOrientImageFilterPython:
_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIF3_swigregister(itkDICOMOrientImageFilterIF3)

def itkDICOMOrientImageFilterIRGBAUC3_New():
    return itkDICOMOrientImageFilterIRGBAUC3.New()

class itkDICOMOrientImageFilterIRGBAUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIRGBAUC3IRGBAUC3):
    r"""Proxy of C++ itkDICOMOrientImageFilterIRGBAUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDICOMOrientImageFilterIRGBAUC3_Pointer"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIRGBAUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDICOMOrientImageFilterIRGBAUC3_Pointer"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIRGBAUC3_Clone(self)

    def GetInputCoordinateOrientation(self):
        r"""GetInputCoordinateOrientation(self) -> itkDICOMOrientation::OrientationEnum"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIRGBAUC3_GetInputCoordinateOrientation(self)

    def GetDesiredCoordinateOrientation(self):
        r"""GetDesiredCoordinateOrientation(self) -> itkDICOMOrientation::OrientationEnum"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIRGBAUC3_GetDesiredCoordinateOrientation(self)

    def SetDesiredCoordinateOrientation(self, *args):
        r"""
        SetDesiredCoordinateOrientation(self, newCode)

        Parameters
        ----------
        newCode: enum itkDICOMOrientation::OrientationEnum

        SetDesiredCoordinateOrientation(self, desired)

        Parameters
        ----------
        desired: std::string const &

        """
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIRGBAUC3_SetDesiredCoordinateOrientation(self, *args)

    def SetDesiredCoordinateDirection(self, DesiredDirection):
        r"""
        SetDesiredCoordinateDirection(self, DesiredDirection)

        Parameters
        ----------
        DesiredDirection: itkMatrixD33 const &

        """
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIRGBAUC3_SetDesiredCoordinateDirection(self, DesiredDirection)

    def GetPermuteOrder(self):
        r"""GetPermuteOrder(self) -> itkFixedArrayUI3"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIRGBAUC3_GetPermuteOrder(self)

    def GetFlipAxes(self):
        r"""GetFlipAxes(self) -> itkFixedArrayB3"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIRGBAUC3_GetFlipAxes(self)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIRGBAUC3_GenerateOutputInformation(self)
    __swig_destroy__ = _itkDICOMOrientImageFilterPython.delete_itkDICOMOrientImageFilterIRGBAUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDICOMOrientImageFilterIRGBAUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIRGBAUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDICOMOrientImageFilterIRGBAUC3

        Create a new object of the class itkDICOMOrientImageFilterIRGBAUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDICOMOrientImageFilterIRGBAUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDICOMOrientImageFilterIRGBAUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDICOMOrientImageFilterIRGBAUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDICOMOrientImageFilterIRGBAUC3 in _itkDICOMOrientImageFilterPython:
_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIRGBAUC3_swigregister(itkDICOMOrientImageFilterIRGBAUC3)

def itkDICOMOrientImageFilterIRGBUC3_New():
    return itkDICOMOrientImageFilterIRGBUC3.New()

class itkDICOMOrientImageFilterIRGBUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIRGBUC3IRGBUC3):
    r"""Proxy of C++ itkDICOMOrientImageFilterIRGBUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDICOMOrientImageFilterIRGBUC3_Pointer"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIRGBUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDICOMOrientImageFilterIRGBUC3_Pointer"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIRGBUC3_Clone(self)

    def GetInputCoordinateOrientation(self):
        r"""GetInputCoordinateOrientation(self) -> itkDICOMOrientation::OrientationEnum"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIRGBUC3_GetInputCoordinateOrientation(self)

    def GetDesiredCoordinateOrientation(self):
        r"""GetDesiredCoordinateOrientation(self) -> itkDICOMOrientation::OrientationEnum"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIRGBUC3_GetDesiredCoordinateOrientation(self)

    def SetDesiredCoordinateOrientation(self, *args):
        r"""
        SetDesiredCoordinateOrientation(self, newCode)

        Parameters
        ----------
        newCode: enum itkDICOMOrientation::OrientationEnum

        SetDesiredCoordinateOrientation(self, desired)

        Parameters
        ----------
        desired: std::string const &

        """
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIRGBUC3_SetDesiredCoordinateOrientation(self, *args)

    def SetDesiredCoordinateDirection(self, DesiredDirection):
        r"""
        SetDesiredCoordinateDirection(self, DesiredDirection)

        Parameters
        ----------
        DesiredDirection: itkMatrixD33 const &

        """
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIRGBUC3_SetDesiredCoordinateDirection(self, DesiredDirection)

    def GetPermuteOrder(self):
        r"""GetPermuteOrder(self) -> itkFixedArrayUI3"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIRGBUC3_GetPermuteOrder(self)

    def GetFlipAxes(self):
        r"""GetFlipAxes(self) -> itkFixedArrayB3"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIRGBUC3_GetFlipAxes(self)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIRGBUC3_GenerateOutputInformation(self)
    __swig_destroy__ = _itkDICOMOrientImageFilterPython.delete_itkDICOMOrientImageFilterIRGBUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDICOMOrientImageFilterIRGBUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIRGBUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDICOMOrientImageFilterIRGBUC3

        Create a new object of the class itkDICOMOrientImageFilterIRGBUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDICOMOrientImageFilterIRGBUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDICOMOrientImageFilterIRGBUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDICOMOrientImageFilterIRGBUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDICOMOrientImageFilterIRGBUC3 in _itkDICOMOrientImageFilterPython:
_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIRGBUC3_swigregister(itkDICOMOrientImageFilterIRGBUC3)

def itkDICOMOrientImageFilterISS3_New():
    return itkDICOMOrientImageFilterISS3.New()

class itkDICOMOrientImageFilterISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""Proxy of C++ itkDICOMOrientImageFilterISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDICOMOrientImageFilterISS3_Pointer"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDICOMOrientImageFilterISS3_Pointer"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterISS3_Clone(self)

    def GetInputCoordinateOrientation(self):
        r"""GetInputCoordinateOrientation(self) -> itkDICOMOrientation::OrientationEnum"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterISS3_GetInputCoordinateOrientation(self)

    def GetDesiredCoordinateOrientation(self):
        r"""GetDesiredCoordinateOrientation(self) -> itkDICOMOrientation::OrientationEnum"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterISS3_GetDesiredCoordinateOrientation(self)

    def SetDesiredCoordinateOrientation(self, *args):
        r"""
        SetDesiredCoordinateOrientation(self, newCode)

        Parameters
        ----------
        newCode: enum itkDICOMOrientation::OrientationEnum

        SetDesiredCoordinateOrientation(self, desired)

        Parameters
        ----------
        desired: std::string const &

        """
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterISS3_SetDesiredCoordinateOrientation(self, *args)

    def SetDesiredCoordinateDirection(self, DesiredDirection):
        r"""
        SetDesiredCoordinateDirection(self, DesiredDirection)

        Parameters
        ----------
        DesiredDirection: itkMatrixD33 const &

        """
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterISS3_SetDesiredCoordinateDirection(self, DesiredDirection)

    def GetPermuteOrder(self):
        r"""GetPermuteOrder(self) -> itkFixedArrayUI3"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterISS3_GetPermuteOrder(self)

    def GetFlipAxes(self):
        r"""GetFlipAxes(self) -> itkFixedArrayB3"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterISS3_GetFlipAxes(self)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterISS3_GenerateOutputInformation(self)
    __swig_destroy__ = _itkDICOMOrientImageFilterPython.delete_itkDICOMOrientImageFilterISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDICOMOrientImageFilterISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDICOMOrientImageFilterISS3

        Create a new object of the class itkDICOMOrientImageFilterISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDICOMOrientImageFilterISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDICOMOrientImageFilterISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDICOMOrientImageFilterISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDICOMOrientImageFilterISS3 in _itkDICOMOrientImageFilterPython:
_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterISS3_swigregister(itkDICOMOrientImageFilterISS3)

def itkDICOMOrientImageFilterIUC3_New():
    return itkDICOMOrientImageFilterIUC3.New()

class itkDICOMOrientImageFilterIUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""Proxy of C++ itkDICOMOrientImageFilterIUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDICOMOrientImageFilterIUC3_Pointer"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDICOMOrientImageFilterIUC3_Pointer"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIUC3_Clone(self)

    def GetInputCoordinateOrientation(self):
        r"""GetInputCoordinateOrientation(self) -> itkDICOMOrientation::OrientationEnum"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIUC3_GetInputCoordinateOrientation(self)

    def GetDesiredCoordinateOrientation(self):
        r"""GetDesiredCoordinateOrientation(self) -> itkDICOMOrientation::OrientationEnum"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIUC3_GetDesiredCoordinateOrientation(self)

    def SetDesiredCoordinateOrientation(self, *args):
        r"""
        SetDesiredCoordinateOrientation(self, newCode)

        Parameters
        ----------
        newCode: enum itkDICOMOrientation::OrientationEnum

        SetDesiredCoordinateOrientation(self, desired)

        Parameters
        ----------
        desired: std::string const &

        """
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIUC3_SetDesiredCoordinateOrientation(self, *args)

    def SetDesiredCoordinateDirection(self, DesiredDirection):
        r"""
        SetDesiredCoordinateDirection(self, DesiredDirection)

        Parameters
        ----------
        DesiredDirection: itkMatrixD33 const &

        """
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIUC3_SetDesiredCoordinateDirection(self, DesiredDirection)

    def GetPermuteOrder(self):
        r"""GetPermuteOrder(self) -> itkFixedArrayUI3"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIUC3_GetPermuteOrder(self)

    def GetFlipAxes(self):
        r"""GetFlipAxes(self) -> itkFixedArrayB3"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIUC3_GetFlipAxes(self)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIUC3_GenerateOutputInformation(self)
    __swig_destroy__ = _itkDICOMOrientImageFilterPython.delete_itkDICOMOrientImageFilterIUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDICOMOrientImageFilterIUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDICOMOrientImageFilterIUC3

        Create a new object of the class itkDICOMOrientImageFilterIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDICOMOrientImageFilterIUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDICOMOrientImageFilterIUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDICOMOrientImageFilterIUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDICOMOrientImageFilterIUC3 in _itkDICOMOrientImageFilterPython:
_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIUC3_swigregister(itkDICOMOrientImageFilterIUC3)

def itkDICOMOrientImageFilterIUS3_New():
    return itkDICOMOrientImageFilterIUS3.New()

class itkDICOMOrientImageFilterIUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""Proxy of C++ itkDICOMOrientImageFilterIUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDICOMOrientImageFilterIUS3_Pointer"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDICOMOrientImageFilterIUS3_Pointer"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIUS3_Clone(self)

    def GetInputCoordinateOrientation(self):
        r"""GetInputCoordinateOrientation(self) -> itkDICOMOrientation::OrientationEnum"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIUS3_GetInputCoordinateOrientation(self)

    def GetDesiredCoordinateOrientation(self):
        r"""GetDesiredCoordinateOrientation(self) -> itkDICOMOrientation::OrientationEnum"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIUS3_GetDesiredCoordinateOrientation(self)

    def SetDesiredCoordinateOrientation(self, *args):
        r"""
        SetDesiredCoordinateOrientation(self, newCode)

        Parameters
        ----------
        newCode: enum itkDICOMOrientation::OrientationEnum

        SetDesiredCoordinateOrientation(self, desired)

        Parameters
        ----------
        desired: std::string const &

        """
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIUS3_SetDesiredCoordinateOrientation(self, *args)

    def SetDesiredCoordinateDirection(self, DesiredDirection):
        r"""
        SetDesiredCoordinateDirection(self, DesiredDirection)

        Parameters
        ----------
        DesiredDirection: itkMatrixD33 const &

        """
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIUS3_SetDesiredCoordinateDirection(self, DesiredDirection)

    def GetPermuteOrder(self):
        r"""GetPermuteOrder(self) -> itkFixedArrayUI3"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIUS3_GetPermuteOrder(self)

    def GetFlipAxes(self):
        r"""GetFlipAxes(self) -> itkFixedArrayB3"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIUS3_GetFlipAxes(self)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIUS3_GenerateOutputInformation(self)
    __swig_destroy__ = _itkDICOMOrientImageFilterPython.delete_itkDICOMOrientImageFilterIUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDICOMOrientImageFilterIUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDICOMOrientImageFilterIUS3

        Create a new object of the class itkDICOMOrientImageFilterIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDICOMOrientImageFilterIUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDICOMOrientImageFilterIUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDICOMOrientImageFilterIUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDICOMOrientImageFilterIUS3 in _itkDICOMOrientImageFilterPython:
_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIUS3_swigregister(itkDICOMOrientImageFilterIUS3)

def itkDICOMOrientImageFilterIVF23_New():
    return itkDICOMOrientImageFilterIVF23.New()

class itkDICOMOrientImageFilterIVF23(itk.itkImageToImageFilterAPython.itkImageToImageFilterIVF23IVF23):
    r"""Proxy of C++ itkDICOMOrientImageFilterIVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDICOMOrientImageFilterIVF23_Pointer"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF23___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDICOMOrientImageFilterIVF23_Pointer"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF23_Clone(self)

    def GetInputCoordinateOrientation(self):
        r"""GetInputCoordinateOrientation(self) -> itkDICOMOrientation::OrientationEnum"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF23_GetInputCoordinateOrientation(self)

    def GetDesiredCoordinateOrientation(self):
        r"""GetDesiredCoordinateOrientation(self) -> itkDICOMOrientation::OrientationEnum"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF23_GetDesiredCoordinateOrientation(self)

    def SetDesiredCoordinateOrientation(self, *args):
        r"""
        SetDesiredCoordinateOrientation(self, newCode)

        Parameters
        ----------
        newCode: enum itkDICOMOrientation::OrientationEnum

        SetDesiredCoordinateOrientation(self, desired)

        Parameters
        ----------
        desired: std::string const &

        """
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF23_SetDesiredCoordinateOrientation(self, *args)

    def SetDesiredCoordinateDirection(self, DesiredDirection):
        r"""
        SetDesiredCoordinateDirection(self, DesiredDirection)

        Parameters
        ----------
        DesiredDirection: itkMatrixD33 const &

        """
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF23_SetDesiredCoordinateDirection(self, DesiredDirection)

    def GetPermuteOrder(self):
        r"""GetPermuteOrder(self) -> itkFixedArrayUI3"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF23_GetPermuteOrder(self)

    def GetFlipAxes(self):
        r"""GetFlipAxes(self) -> itkFixedArrayB3"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF23_GetFlipAxes(self)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF23_GenerateOutputInformation(self)
    __swig_destroy__ = _itkDICOMOrientImageFilterPython.delete_itkDICOMOrientImageFilterIVF23

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDICOMOrientImageFilterIVF23

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF23_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDICOMOrientImageFilterIVF23

        Create a new object of the class itkDICOMOrientImageFilterIVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDICOMOrientImageFilterIVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDICOMOrientImageFilterIVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDICOMOrientImageFilterIVF23.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDICOMOrientImageFilterIVF23 in _itkDICOMOrientImageFilterPython:
_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF23_swigregister(itkDICOMOrientImageFilterIVF23)

def itkDICOMOrientImageFilterIVF33_New():
    return itkDICOMOrientImageFilterIVF33.New()

class itkDICOMOrientImageFilterIVF33(itk.itkImageToImageFilterAPython.itkImageToImageFilterIVF33IVF33):
    r"""Proxy of C++ itkDICOMOrientImageFilterIVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDICOMOrientImageFilterIVF33_Pointer"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF33___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDICOMOrientImageFilterIVF33_Pointer"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF33_Clone(self)

    def GetInputCoordinateOrientation(self):
        r"""GetInputCoordinateOrientation(self) -> itkDICOMOrientation::OrientationEnum"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF33_GetInputCoordinateOrientation(self)

    def GetDesiredCoordinateOrientation(self):
        r"""GetDesiredCoordinateOrientation(self) -> itkDICOMOrientation::OrientationEnum"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF33_GetDesiredCoordinateOrientation(self)

    def SetDesiredCoordinateOrientation(self, *args):
        r"""
        SetDesiredCoordinateOrientation(self, newCode)

        Parameters
        ----------
        newCode: enum itkDICOMOrientation::OrientationEnum

        SetDesiredCoordinateOrientation(self, desired)

        Parameters
        ----------
        desired: std::string const &

        """
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF33_SetDesiredCoordinateOrientation(self, *args)

    def SetDesiredCoordinateDirection(self, DesiredDirection):
        r"""
        SetDesiredCoordinateDirection(self, DesiredDirection)

        Parameters
        ----------
        DesiredDirection: itkMatrixD33 const &

        """
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF33_SetDesiredCoordinateDirection(self, DesiredDirection)

    def GetPermuteOrder(self):
        r"""GetPermuteOrder(self) -> itkFixedArrayUI3"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF33_GetPermuteOrder(self)

    def GetFlipAxes(self):
        r"""GetFlipAxes(self) -> itkFixedArrayB3"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF33_GetFlipAxes(self)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF33_GenerateOutputInformation(self)
    __swig_destroy__ = _itkDICOMOrientImageFilterPython.delete_itkDICOMOrientImageFilterIVF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDICOMOrientImageFilterIVF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF33_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDICOMOrientImageFilterIVF33

        Create a new object of the class itkDICOMOrientImageFilterIVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDICOMOrientImageFilterIVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDICOMOrientImageFilterIVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDICOMOrientImageFilterIVF33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDICOMOrientImageFilterIVF33 in _itkDICOMOrientImageFilterPython:
_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF33_swigregister(itkDICOMOrientImageFilterIVF33)

def itkDICOMOrientImageFilterIVF43_New():
    return itkDICOMOrientImageFilterIVF43.New()

class itkDICOMOrientImageFilterIVF43(itk.itkImageToImageFilterAPython.itkImageToImageFilterIVF43IVF43):
    r"""Proxy of C++ itkDICOMOrientImageFilterIVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDICOMOrientImageFilterIVF43_Pointer"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF43___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDICOMOrientImageFilterIVF43_Pointer"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF43_Clone(self)

    def GetInputCoordinateOrientation(self):
        r"""GetInputCoordinateOrientation(self) -> itkDICOMOrientation::OrientationEnum"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF43_GetInputCoordinateOrientation(self)

    def GetDesiredCoordinateOrientation(self):
        r"""GetDesiredCoordinateOrientation(self) -> itkDICOMOrientation::OrientationEnum"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF43_GetDesiredCoordinateOrientation(self)

    def SetDesiredCoordinateOrientation(self, *args):
        r"""
        SetDesiredCoordinateOrientation(self, newCode)

        Parameters
        ----------
        newCode: enum itkDICOMOrientation::OrientationEnum

        SetDesiredCoordinateOrientation(self, desired)

        Parameters
        ----------
        desired: std::string const &

        """
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF43_SetDesiredCoordinateOrientation(self, *args)

    def SetDesiredCoordinateDirection(self, DesiredDirection):
        r"""
        SetDesiredCoordinateDirection(self, DesiredDirection)

        Parameters
        ----------
        DesiredDirection: itkMatrixD33 const &

        """
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF43_SetDesiredCoordinateDirection(self, DesiredDirection)

    def GetPermuteOrder(self):
        r"""GetPermuteOrder(self) -> itkFixedArrayUI3"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF43_GetPermuteOrder(self)

    def GetFlipAxes(self):
        r"""GetFlipAxes(self) -> itkFixedArrayB3"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF43_GetFlipAxes(self)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF43_GenerateOutputInformation(self)
    __swig_destroy__ = _itkDICOMOrientImageFilterPython.delete_itkDICOMOrientImageFilterIVF43

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDICOMOrientImageFilterIVF43

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF43_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDICOMOrientImageFilterIVF43

        Create a new object of the class itkDICOMOrientImageFilterIVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDICOMOrientImageFilterIVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDICOMOrientImageFilterIVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDICOMOrientImageFilterIVF43.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDICOMOrientImageFilterIVF43 in _itkDICOMOrientImageFilterPython:
_itkDICOMOrientImageFilterPython.itkDICOMOrientImageFilterIVF43_swigregister(itkDICOMOrientImageFilterIVF43)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def dicom_orient_image_filter(*args: itkt.ImageLike,  desired_coordinate_orientation: str=..., desired_coordinate_direction=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for DICOMOrientImageFilter"""
    import itk

    kwarg_typehints = { 'desired_coordinate_orientation':desired_coordinate_orientation,'desired_coordinate_direction':desired_coordinate_direction }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.DICOMOrientImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def dicom_orient_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.SimpleITKFilters.DICOMOrientImageFilter
    dicom_orient_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    dicom_orient_image_filter.__doc__ = filter_object.__doc__




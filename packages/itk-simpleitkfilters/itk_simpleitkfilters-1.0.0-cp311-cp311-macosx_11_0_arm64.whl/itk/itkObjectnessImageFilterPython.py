# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _SimpleITKFiltersPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkObjectnessImageFilterPython
else:
    import _itkObjectnessImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.vnl_vectorPython
import itk.itkPointPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkImagePython
import itk.itkImageRegionPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageSourceCommonPython

def itkObjectnessMeasureImageFilterID2ID2_New():
    return itkObjectnessMeasureImageFilterID2ID2.New()

class itkObjectnessMeasureImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""Proxy of C++ itkObjectnessMeasureImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkObjectnessMeasureImageFilterID2ID2_Pointer"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkObjectnessMeasureImageFilterID2ID2_Pointer"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID2ID2_Clone(self)

    def SetAlpha(self, _arg):
        r"""
        SetAlpha(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID2ID2_SetAlpha(self, _arg)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID2ID2_GetAlpha(self)

    def SetBeta(self, _arg):
        r"""
        SetBeta(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID2ID2_SetBeta(self, _arg)

    def GetBeta(self):
        r"""GetBeta(self) -> double"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID2ID2_GetBeta(self)

    def SetGamma(self, _arg):
        r"""
        SetGamma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID2ID2_SetGamma(self, _arg)

    def GetGamma(self):
        r"""GetGamma(self) -> double"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID2ID2_GetGamma(self)

    def SetScaleObjectnessMeasure(self, _arg):
        r"""
        SetScaleObjectnessMeasure(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID2ID2_SetScaleObjectnessMeasure(self, _arg)

    def GetScaleObjectnessMeasure(self):
        r"""GetScaleObjectnessMeasure(self) -> bool"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID2ID2_GetScaleObjectnessMeasure(self)

    def ScaleObjectnessMeasureOn(self):
        r"""ScaleObjectnessMeasureOn(self)"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID2ID2_ScaleObjectnessMeasureOn(self)

    def ScaleObjectnessMeasureOff(self):
        r"""ScaleObjectnessMeasureOff(self)"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID2ID2_ScaleObjectnessMeasureOff(self)

    def SetObjectDimension(self, _arg):
        r"""
        SetObjectDimension(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID2ID2_SetObjectDimension(self, _arg)

    def GetObjectDimension(self):
        r"""GetObjectDimension(self) -> unsigned int"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID2ID2_GetObjectDimension(self)

    def SetBrightObject(self, _arg):
        r"""
        SetBrightObject(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID2ID2_SetBrightObject(self, _arg)

    def GetBrightObject(self):
        r"""GetBrightObject(self) -> bool"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID2ID2_GetBrightObject(self)

    def BrightObjectOn(self):
        r"""BrightObjectOn(self)"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID2ID2_BrightObjectOn(self)

    def BrightObjectOff(self):
        r"""BrightObjectOff(self)"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID2ID2_BrightObjectOff(self)
    __swig_destroy__ = _itkObjectnessImageFilterPython.delete_itkObjectnessMeasureImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkObjectnessMeasureImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkObjectnessMeasureImageFilterID2ID2

        Create a new object of the class itkObjectnessMeasureImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkObjectnessMeasureImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkObjectnessMeasureImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkObjectnessMeasureImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkObjectnessMeasureImageFilterID2ID2 in _itkObjectnessImageFilterPython:
_itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID2ID2_swigregister(itkObjectnessMeasureImageFilterID2ID2)

def itkObjectnessMeasureImageFilterID3ID3_New():
    return itkObjectnessMeasureImageFilterID3ID3.New()

class itkObjectnessMeasureImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""Proxy of C++ itkObjectnessMeasureImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkObjectnessMeasureImageFilterID3ID3_Pointer"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkObjectnessMeasureImageFilterID3ID3_Pointer"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID3ID3_Clone(self)

    def SetAlpha(self, _arg):
        r"""
        SetAlpha(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID3ID3_SetAlpha(self, _arg)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID3ID3_GetAlpha(self)

    def SetBeta(self, _arg):
        r"""
        SetBeta(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID3ID3_SetBeta(self, _arg)

    def GetBeta(self):
        r"""GetBeta(self) -> double"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID3ID3_GetBeta(self)

    def SetGamma(self, _arg):
        r"""
        SetGamma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID3ID3_SetGamma(self, _arg)

    def GetGamma(self):
        r"""GetGamma(self) -> double"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID3ID3_GetGamma(self)

    def SetScaleObjectnessMeasure(self, _arg):
        r"""
        SetScaleObjectnessMeasure(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID3ID3_SetScaleObjectnessMeasure(self, _arg)

    def GetScaleObjectnessMeasure(self):
        r"""GetScaleObjectnessMeasure(self) -> bool"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID3ID3_GetScaleObjectnessMeasure(self)

    def ScaleObjectnessMeasureOn(self):
        r"""ScaleObjectnessMeasureOn(self)"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID3ID3_ScaleObjectnessMeasureOn(self)

    def ScaleObjectnessMeasureOff(self):
        r"""ScaleObjectnessMeasureOff(self)"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID3ID3_ScaleObjectnessMeasureOff(self)

    def SetObjectDimension(self, _arg):
        r"""
        SetObjectDimension(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID3ID3_SetObjectDimension(self, _arg)

    def GetObjectDimension(self):
        r"""GetObjectDimension(self) -> unsigned int"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID3ID3_GetObjectDimension(self)

    def SetBrightObject(self, _arg):
        r"""
        SetBrightObject(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID3ID3_SetBrightObject(self, _arg)

    def GetBrightObject(self):
        r"""GetBrightObject(self) -> bool"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID3ID3_GetBrightObject(self)

    def BrightObjectOn(self):
        r"""BrightObjectOn(self)"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID3ID3_BrightObjectOn(self)

    def BrightObjectOff(self):
        r"""BrightObjectOff(self)"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID3ID3_BrightObjectOff(self)
    __swig_destroy__ = _itkObjectnessImageFilterPython.delete_itkObjectnessMeasureImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkObjectnessMeasureImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkObjectnessMeasureImageFilterID3ID3

        Create a new object of the class itkObjectnessMeasureImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkObjectnessMeasureImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkObjectnessMeasureImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkObjectnessMeasureImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkObjectnessMeasureImageFilterID3ID3 in _itkObjectnessImageFilterPython:
_itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID3ID3_swigregister(itkObjectnessMeasureImageFilterID3ID3)

def itkObjectnessMeasureImageFilterID4ID4_New():
    return itkObjectnessMeasureImageFilterID4ID4.New()

class itkObjectnessMeasureImageFilterID4ID4(itk.itkImageToImageFilterAPython.itkImageToImageFilterID4ID4):
    r"""Proxy of C++ itkObjectnessMeasureImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkObjectnessMeasureImageFilterID4ID4_Pointer"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkObjectnessMeasureImageFilterID4ID4_Pointer"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID4ID4_Clone(self)

    def SetAlpha(self, _arg):
        r"""
        SetAlpha(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID4ID4_SetAlpha(self, _arg)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID4ID4_GetAlpha(self)

    def SetBeta(self, _arg):
        r"""
        SetBeta(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID4ID4_SetBeta(self, _arg)

    def GetBeta(self):
        r"""GetBeta(self) -> double"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID4ID4_GetBeta(self)

    def SetGamma(self, _arg):
        r"""
        SetGamma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID4ID4_SetGamma(self, _arg)

    def GetGamma(self):
        r"""GetGamma(self) -> double"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID4ID4_GetGamma(self)

    def SetScaleObjectnessMeasure(self, _arg):
        r"""
        SetScaleObjectnessMeasure(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID4ID4_SetScaleObjectnessMeasure(self, _arg)

    def GetScaleObjectnessMeasure(self):
        r"""GetScaleObjectnessMeasure(self) -> bool"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID4ID4_GetScaleObjectnessMeasure(self)

    def ScaleObjectnessMeasureOn(self):
        r"""ScaleObjectnessMeasureOn(self)"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID4ID4_ScaleObjectnessMeasureOn(self)

    def ScaleObjectnessMeasureOff(self):
        r"""ScaleObjectnessMeasureOff(self)"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID4ID4_ScaleObjectnessMeasureOff(self)

    def SetObjectDimension(self, _arg):
        r"""
        SetObjectDimension(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID4ID4_SetObjectDimension(self, _arg)

    def GetObjectDimension(self):
        r"""GetObjectDimension(self) -> unsigned int"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID4ID4_GetObjectDimension(self)

    def SetBrightObject(self, _arg):
        r"""
        SetBrightObject(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID4ID4_SetBrightObject(self, _arg)

    def GetBrightObject(self):
        r"""GetBrightObject(self) -> bool"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID4ID4_GetBrightObject(self)

    def BrightObjectOn(self):
        r"""BrightObjectOn(self)"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID4ID4_BrightObjectOn(self)

    def BrightObjectOff(self):
        r"""BrightObjectOff(self)"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID4ID4_BrightObjectOff(self)
    __swig_destroy__ = _itkObjectnessImageFilterPython.delete_itkObjectnessMeasureImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkObjectnessMeasureImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkObjectnessMeasureImageFilterID4ID4

        Create a new object of the class itkObjectnessMeasureImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkObjectnessMeasureImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkObjectnessMeasureImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkObjectnessMeasureImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkObjectnessMeasureImageFilterID4ID4 in _itkObjectnessImageFilterPython:
_itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterID4ID4_swigregister(itkObjectnessMeasureImageFilterID4ID4)

def itkObjectnessMeasureImageFilterIF2IF2_New():
    return itkObjectnessMeasureImageFilterIF2IF2.New()

class itkObjectnessMeasureImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""Proxy of C++ itkObjectnessMeasureImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkObjectnessMeasureImageFilterIF2IF2_Pointer"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkObjectnessMeasureImageFilterIF2IF2_Pointer"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF2IF2_Clone(self)

    def SetAlpha(self, _arg):
        r"""
        SetAlpha(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF2IF2_SetAlpha(self, _arg)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF2IF2_GetAlpha(self)

    def SetBeta(self, _arg):
        r"""
        SetBeta(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF2IF2_SetBeta(self, _arg)

    def GetBeta(self):
        r"""GetBeta(self) -> double"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF2IF2_GetBeta(self)

    def SetGamma(self, _arg):
        r"""
        SetGamma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF2IF2_SetGamma(self, _arg)

    def GetGamma(self):
        r"""GetGamma(self) -> double"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF2IF2_GetGamma(self)

    def SetScaleObjectnessMeasure(self, _arg):
        r"""
        SetScaleObjectnessMeasure(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF2IF2_SetScaleObjectnessMeasure(self, _arg)

    def GetScaleObjectnessMeasure(self):
        r"""GetScaleObjectnessMeasure(self) -> bool"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF2IF2_GetScaleObjectnessMeasure(self)

    def ScaleObjectnessMeasureOn(self):
        r"""ScaleObjectnessMeasureOn(self)"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF2IF2_ScaleObjectnessMeasureOn(self)

    def ScaleObjectnessMeasureOff(self):
        r"""ScaleObjectnessMeasureOff(self)"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF2IF2_ScaleObjectnessMeasureOff(self)

    def SetObjectDimension(self, _arg):
        r"""
        SetObjectDimension(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF2IF2_SetObjectDimension(self, _arg)

    def GetObjectDimension(self):
        r"""GetObjectDimension(self) -> unsigned int"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF2IF2_GetObjectDimension(self)

    def SetBrightObject(self, _arg):
        r"""
        SetBrightObject(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF2IF2_SetBrightObject(self, _arg)

    def GetBrightObject(self):
        r"""GetBrightObject(self) -> bool"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF2IF2_GetBrightObject(self)

    def BrightObjectOn(self):
        r"""BrightObjectOn(self)"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF2IF2_BrightObjectOn(self)

    def BrightObjectOff(self):
        r"""BrightObjectOff(self)"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF2IF2_BrightObjectOff(self)
    __swig_destroy__ = _itkObjectnessImageFilterPython.delete_itkObjectnessMeasureImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkObjectnessMeasureImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkObjectnessMeasureImageFilterIF2IF2

        Create a new object of the class itkObjectnessMeasureImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkObjectnessMeasureImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkObjectnessMeasureImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkObjectnessMeasureImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkObjectnessMeasureImageFilterIF2IF2 in _itkObjectnessImageFilterPython:
_itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF2IF2_swigregister(itkObjectnessMeasureImageFilterIF2IF2)

def itkObjectnessMeasureImageFilterIF3IF3_New():
    return itkObjectnessMeasureImageFilterIF3IF3.New()

class itkObjectnessMeasureImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""Proxy of C++ itkObjectnessMeasureImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkObjectnessMeasureImageFilterIF3IF3_Pointer"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkObjectnessMeasureImageFilterIF3IF3_Pointer"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF3IF3_Clone(self)

    def SetAlpha(self, _arg):
        r"""
        SetAlpha(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF3IF3_SetAlpha(self, _arg)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF3IF3_GetAlpha(self)

    def SetBeta(self, _arg):
        r"""
        SetBeta(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF3IF3_SetBeta(self, _arg)

    def GetBeta(self):
        r"""GetBeta(self) -> double"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF3IF3_GetBeta(self)

    def SetGamma(self, _arg):
        r"""
        SetGamma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF3IF3_SetGamma(self, _arg)

    def GetGamma(self):
        r"""GetGamma(self) -> double"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF3IF3_GetGamma(self)

    def SetScaleObjectnessMeasure(self, _arg):
        r"""
        SetScaleObjectnessMeasure(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF3IF3_SetScaleObjectnessMeasure(self, _arg)

    def GetScaleObjectnessMeasure(self):
        r"""GetScaleObjectnessMeasure(self) -> bool"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF3IF3_GetScaleObjectnessMeasure(self)

    def ScaleObjectnessMeasureOn(self):
        r"""ScaleObjectnessMeasureOn(self)"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF3IF3_ScaleObjectnessMeasureOn(self)

    def ScaleObjectnessMeasureOff(self):
        r"""ScaleObjectnessMeasureOff(self)"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF3IF3_ScaleObjectnessMeasureOff(self)

    def SetObjectDimension(self, _arg):
        r"""
        SetObjectDimension(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF3IF3_SetObjectDimension(self, _arg)

    def GetObjectDimension(self):
        r"""GetObjectDimension(self) -> unsigned int"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF3IF3_GetObjectDimension(self)

    def SetBrightObject(self, _arg):
        r"""
        SetBrightObject(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF3IF3_SetBrightObject(self, _arg)

    def GetBrightObject(self):
        r"""GetBrightObject(self) -> bool"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF3IF3_GetBrightObject(self)

    def BrightObjectOn(self):
        r"""BrightObjectOn(self)"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF3IF3_BrightObjectOn(self)

    def BrightObjectOff(self):
        r"""BrightObjectOff(self)"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF3IF3_BrightObjectOff(self)
    __swig_destroy__ = _itkObjectnessImageFilterPython.delete_itkObjectnessMeasureImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkObjectnessMeasureImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkObjectnessMeasureImageFilterIF3IF3

        Create a new object of the class itkObjectnessMeasureImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkObjectnessMeasureImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkObjectnessMeasureImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkObjectnessMeasureImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkObjectnessMeasureImageFilterIF3IF3 in _itkObjectnessImageFilterPython:
_itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF3IF3_swigregister(itkObjectnessMeasureImageFilterIF3IF3)

def itkObjectnessMeasureImageFilterIF4IF4_New():
    return itkObjectnessMeasureImageFilterIF4IF4.New()

class itkObjectnessMeasureImageFilterIF4IF4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF4IF4):
    r"""Proxy of C++ itkObjectnessMeasureImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkObjectnessMeasureImageFilterIF4IF4_Pointer"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkObjectnessMeasureImageFilterIF4IF4_Pointer"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF4IF4_Clone(self)

    def SetAlpha(self, _arg):
        r"""
        SetAlpha(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF4IF4_SetAlpha(self, _arg)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF4IF4_GetAlpha(self)

    def SetBeta(self, _arg):
        r"""
        SetBeta(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF4IF4_SetBeta(self, _arg)

    def GetBeta(self):
        r"""GetBeta(self) -> double"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF4IF4_GetBeta(self)

    def SetGamma(self, _arg):
        r"""
        SetGamma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF4IF4_SetGamma(self, _arg)

    def GetGamma(self):
        r"""GetGamma(self) -> double"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF4IF4_GetGamma(self)

    def SetScaleObjectnessMeasure(self, _arg):
        r"""
        SetScaleObjectnessMeasure(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF4IF4_SetScaleObjectnessMeasure(self, _arg)

    def GetScaleObjectnessMeasure(self):
        r"""GetScaleObjectnessMeasure(self) -> bool"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF4IF4_GetScaleObjectnessMeasure(self)

    def ScaleObjectnessMeasureOn(self):
        r"""ScaleObjectnessMeasureOn(self)"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF4IF4_ScaleObjectnessMeasureOn(self)

    def ScaleObjectnessMeasureOff(self):
        r"""ScaleObjectnessMeasureOff(self)"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF4IF4_ScaleObjectnessMeasureOff(self)

    def SetObjectDimension(self, _arg):
        r"""
        SetObjectDimension(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF4IF4_SetObjectDimension(self, _arg)

    def GetObjectDimension(self):
        r"""GetObjectDimension(self) -> unsigned int"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF4IF4_GetObjectDimension(self)

    def SetBrightObject(self, _arg):
        r"""
        SetBrightObject(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF4IF4_SetBrightObject(self, _arg)

    def GetBrightObject(self):
        r"""GetBrightObject(self) -> bool"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF4IF4_GetBrightObject(self)

    def BrightObjectOn(self):
        r"""BrightObjectOn(self)"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF4IF4_BrightObjectOn(self)

    def BrightObjectOff(self):
        r"""BrightObjectOff(self)"""
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF4IF4_BrightObjectOff(self)
    __swig_destroy__ = _itkObjectnessImageFilterPython.delete_itkObjectnessMeasureImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkObjectnessMeasureImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkObjectnessMeasureImageFilterIF4IF4

        Create a new object of the class itkObjectnessMeasureImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkObjectnessMeasureImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkObjectnessMeasureImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkObjectnessMeasureImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkObjectnessMeasureImageFilterIF4IF4 in _itkObjectnessImageFilterPython:
_itkObjectnessImageFilterPython.itkObjectnessMeasureImageFilterIF4IF4_swigregister(itkObjectnessMeasureImageFilterIF4IF4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def objectness_measure_image_filter(*args: itkt.ImageLike,  alpha: float=..., beta: float=..., gamma: float=..., scale_objectness_measure: bool=..., object_dimension: int=..., bright_object: bool=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ObjectnessMeasureImageFilter"""
    import itk

    kwarg_typehints = { 'alpha':alpha,'beta':beta,'gamma':gamma,'scale_objectness_measure':scale_objectness_measure,'object_dimension':object_dimension,'bright_object':bright_object }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ObjectnessMeasureImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def objectness_measure_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.SimpleITKFilters.ObjectnessMeasureImageFilter
    objectness_measure_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    objectness_measure_image_filter.__doc__ = filter_object.__doc__




# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

import httpx

from .core.api_error import ApiError
from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .core.jsonable_encoder import jsonable_encoder
from .core.pydantic_utilities import pydantic_v1
from .core.request_options import RequestOptions
from .environment import Deeptune234ApiEnvironment
from .types.post_v_1_api_text_to_speech_voice_id_request_voice_settings import (
    PostV1ApiTextToSpeechVoiceIdRequestVoiceSettings,
)
from .types.post_v_1_api_text_to_speech_voice_id_response import PostV1ApiTextToSpeechVoiceIdResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class Deeptune234Api:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : Deeptune234ApiEnvironment
        The environment to use for requests from the client. from .environment import Deeptune234ApiEnvironment



        Defaults to Deeptune234ApiEnvironment.DEFAULT



    xi_api_key : str
    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.Client]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from deeptune234.client import Deeptune234Api

    client = Deeptune234Api(
        xi_api_key="YOUR_XI_API_KEY",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: Deeptune234ApiEnvironment = Deeptune234ApiEnvironment.DEFAULT,
        xi_api_key: str,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.Client] = None,
    ):
        _defaulted_timeout = timeout if timeout is not None else 60 if httpx_client is None else None
        self._client_wrapper = SyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            xi_api_key=xi_api_key,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.Client(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.Client(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )

    def perform_inference_on_speech_data(
        self,
        voice_id: str,
        *,
        text: str,
        model_id: typing.Optional[str] = OMIT,
        voice_settings: typing.Optional[PostV1ApiTextToSpeechVoiceIdRequestVoiceSettings] = OMIT,
        seed: typing.Optional[int] = OMIT,
        previous_text: typing.Optional[str] = OMIT,
        next_text: typing.Optional[str] = OMIT,
        previous_request_ids: typing.Optional[typing.Sequence[str]] = OMIT,
        next_request_ids: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PostV1ApiTextToSpeechVoiceIdResponse:
        """
        Parameters
        ----------
        voice_id : str
            The ID of the voice to use

        text : str

        model_id : typing.Optional[str]

        voice_settings : typing.Optional[PostV1ApiTextToSpeechVoiceIdRequestVoiceSettings]

        seed : typing.Optional[int]

        previous_text : typing.Optional[str]

        next_text : typing.Optional[str]

        previous_request_ids : typing.Optional[typing.Sequence[str]]

        next_request_ids : typing.Optional[typing.Sequence[str]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PostV1ApiTextToSpeechVoiceIdResponse
            Successful response

        Examples
        --------
        from deeptune234.client import Deeptune234Api

        client = Deeptune234Api(
            xi_api_key="YOUR_XI_API_KEY",
        )
        client.perform_inference_on_speech_data(
            voice_id="voice_id",
            text="text",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/api/text-to-speech/{jsonable_encoder(voice_id)}",
            method="POST",
            json={
                "text": text,
                "model_id": model_id,
                "voice_settings": voice_settings,
                "seed": seed,
                "previous_text": previous_text,
                "next_text": next_text,
                "previous_request_ids": previous_request_ids,
                "next_request_ids": next_request_ids,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(PostV1ApiTextToSpeechVoiceIdResponse, _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncDeeptune234Api:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : Deeptune234ApiEnvironment
        The environment to use for requests from the client. from .environment import Deeptune234ApiEnvironment



        Defaults to Deeptune234ApiEnvironment.DEFAULT



    xi_api_key : str
    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.AsyncClient]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from deeptune234.client import AsyncDeeptune234Api

    client = AsyncDeeptune234Api(
        xi_api_key="YOUR_XI_API_KEY",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: Deeptune234ApiEnvironment = Deeptune234ApiEnvironment.DEFAULT,
        xi_api_key: str,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.AsyncClient] = None,
    ):
        _defaulted_timeout = timeout if timeout is not None else 60 if httpx_client is None else None
        self._client_wrapper = AsyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            xi_api_key=xi_api_key,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )

    async def perform_inference_on_speech_data(
        self,
        voice_id: str,
        *,
        text: str,
        model_id: typing.Optional[str] = OMIT,
        voice_settings: typing.Optional[PostV1ApiTextToSpeechVoiceIdRequestVoiceSettings] = OMIT,
        seed: typing.Optional[int] = OMIT,
        previous_text: typing.Optional[str] = OMIT,
        next_text: typing.Optional[str] = OMIT,
        previous_request_ids: typing.Optional[typing.Sequence[str]] = OMIT,
        next_request_ids: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PostV1ApiTextToSpeechVoiceIdResponse:
        """
        Parameters
        ----------
        voice_id : str
            The ID of the voice to use

        text : str

        model_id : typing.Optional[str]

        voice_settings : typing.Optional[PostV1ApiTextToSpeechVoiceIdRequestVoiceSettings]

        seed : typing.Optional[int]

        previous_text : typing.Optional[str]

        next_text : typing.Optional[str]

        previous_request_ids : typing.Optional[typing.Sequence[str]]

        next_request_ids : typing.Optional[typing.Sequence[str]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PostV1ApiTextToSpeechVoiceIdResponse
            Successful response

        Examples
        --------
        from deeptune234.client import AsyncDeeptune234Api

        client = AsyncDeeptune234Api(
            xi_api_key="YOUR_XI_API_KEY",
        )
        await client.perform_inference_on_speech_data(
            voice_id="voice_id",
            text="text",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/api/text-to-speech/{jsonable_encoder(voice_id)}",
            method="POST",
            json={
                "text": text,
                "model_id": model_id,
                "voice_settings": voice_settings,
                "seed": seed,
                "previous_text": previous_text,
                "next_text": next_text,
                "previous_request_ids": previous_request_ids,
                "next_request_ids": next_request_ids,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(PostV1ApiTextToSpeechVoiceIdResponse, _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


def _get_base_url(*, base_url: typing.Optional[str] = None, environment: Deeptune234ApiEnvironment) -> str:
    if base_url is not None:
        return base_url
    elif environment is not None:
        return environment.value
    else:
        raise Exception("Please pass in either base_url or environment to construct the client")

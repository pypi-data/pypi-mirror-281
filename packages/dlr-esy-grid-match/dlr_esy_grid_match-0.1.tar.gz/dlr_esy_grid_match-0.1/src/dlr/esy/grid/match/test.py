'''
# Design

`dlr.esy.grid.match` is primarily designed as a library and the command-line
interface is only a shallow layer above the library functions.

The primary data used as arguments are `numpy.record` arrays.
There are two types of these arrays, one to represent the buses and one to
represent the lines. Conversion functions from and to CSV are available.

The command-line interface exposes most of the library functions in a tree of
subcommands.

# Development

Development should advance via merge requests. New functionality should include
tests written in `doctest` and documented using `pdoc`.

To execute tests run:

```console
$ PYTHONPATH=src python -m doctest src/dlr.esy.grid.match/*.py
```

To compute the code coverage of tests run:

```console
$ PYTHONPATH=src coverage run --source src -m doctest src/dlr.esy.grid.match/*.py
```

To check coverage run:

```console
$ coverage report
```

To build the documentation run (note that the documentation depends on figures
generated by the doctests above):

```console
$ PYTHONPATH=src pdoc --math --output public dlr.esy.grid.match
```

## Quality assurance

The code quality is assured exclusively using `doctest`. All tests are written
in docstrings. While writing doctests is a bit cumbersome, it motivates short
and concise tests which in-turn supports a modular design. As all code examples
are automatically tested, a consistent documentation is guaranteed.

The command-line interface is tested as well. `doctest` doesn't support console
prompts and as a workaround, the `doctest_console` function will rewrite console
code blocks in docstrings and execute them using `doctest`. There are some
caveats, console code blocks are executed in a session and cannot depend on
side-effects from python code blocks. Console code blocks should not be mixed
with python code blocks.

Documentation figures are generated in doctests as well and should not be
committed to the repository.

An exception are figures referenced in the README. These figures should be
presented in the code forgeries project page and thus need to available in the
repository.

To avoid inconsistencies and duplication, the README page is an almost verbatim
copy of the `dlr.esy.grid.match.__init__.__doc__` string. The `check_readme`
function will ensure that this is the case. There are caveats however: The
README file is located in another folder, so links to figures have to be
manually adjusted. `check_readme` accounts for this.
'''

import os, shlex, doctest

import dlr.esy.grid.match.cli


def sh(cmd):
    '''
    Emulates command-line interface by forwarding `cmd` to
    `dlr.esy.grid.match.cli()`.

    Only `dlr.esy.grid.match` is accepted as valid command:

    >>> sh('spam')
    Traceback (most recent call last):
      ...
    ValueError: Unexpected command name

    '''
    import matplotlib

    # Configure matplotlib as much reproducability as possible. Set
    # SOURCE_DATE_EPOCH environment variable to enforce a fixed date in
    # figure metadata. To ensure reproducible ids in svg, use a static
    # svg.hashsalt.
    matplotlib.rcParams['svg.hashsalt'] = '0'
    os.environ['SOURCE_DATE_EPOCH'] = '0'

    prog, *argv = shlex.split(cmd)
    if prog != 'dlr.esy.grid.match':
        raise ValueError('Unexpected command name')

    try:
        dlr.esy.grid.match.cli.main(argv, prog=prog)
    except SystemExit as e:
        # Ignore system exit of argparser.
        if e.code != 0:
            raise e #pragma: nocover


def check_readme():
    '''
    Ensures README.md is uptodate with module documentation. Links in the
    documentation are patched to absolute paths, so that README.md is displayed
    properly on gitlab.com and pypi.org.

    >>> check_readme()

    '''
    import re, difflib, dlr.esy.grid.match

    doc = dlr.esy.grid.match.__doc__
    project_url = 'https://gitlab.com/dlr-ve/esy/dlr.esy.grid.match/-/raw/main'
    doc_url = 'https://dlr-ve.gitlab.io/esy/dlr.esy.grid.match'

    # Replace figure links.
    doc = doc.replace('../../../../../figure', f'{project_url}/figure')

    # Replace documentation links.
    for item in set(
        m.group(0) for m in re.finditer('`dlr.esy.grid.match.*?`', doc)
    ):
        link = f'[{item}]({doc_url}/{item[1:-1].replace(".", "/")}.html)'
        doc = doc.replace(item, link)

    readme = open('README.md').read()
    for line in difflib.unified_diff(
        doc.splitlines(keepends=True), readme.splitlines(keepends=True),
        '<docstring>', 'README.md'
    ):
        # Add a prefix character to suppress doctests <BLANKLINE> markers.
        print('|', line, end='') #pragma: nocover


def doctest_console(doc):
    '''
    Tests ` ```console...``` ` code blocks in `doc` via `sh`.

    `doc` is transformed into a doctest by replacing all `$ <cmd>` lines with
    `>>> sh('<cmd>')`.
    '''

    sh_example, rewrite = False, []
    for line in doc.split('\n'):
        sh_example = line != '```' if sh_example else line == '```console'

        if not sh_example or line.startswith('```'):
            line = ''
        elif line.startswith('$ '):
            line = f'>>> sh(\'{line[2:]}\')'

        rewrite.append(line)
    rewrite = '\n'.join(rewrite)

    doctest.run_docstring_examples(
        rewrite, dict(sh=dlr.esy.grid.match.test.sh),
        optionflags=doctest.ELLIPSIS
    )

"""
    Chart Generation Service

    This is a service for generating charts in a node environment that were created using web charting and get back images in form of `PNGs` and `JPEGs` as response.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401
from multiprocessing.pool import ApplyResult
import typing

from fds.sdk.ChartGenerationService.api_client import ApiClient, Endpoint as _Endpoint
from fds.sdk.ChartGenerationService.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from fds.sdk.ChartGenerationService.exceptions import ApiException
from fds.sdk.ChartGenerationService.model.categories_error_response import CategoriesErrorResponse
from fds.sdk.ChartGenerationService.model.categorized_chart_list import CategorizedChartList
from fds.sdk.ChartGenerationService.model.category_list_response import CategoryListResponse
from fds.sdk.ChartGenerationService.model.chart_list_error_response import ChartListErrorResponse
from fds.sdk.ChartGenerationService.model.error_response import ErrorResponse
from fds.sdk.ChartGenerationService.model.unauthorized_response import UnauthorizedResponse





class ChartTemplatesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        self.get_category_list_endpoint = _Endpoint(
            settings={
                'response_type': (
                  { 200: (CategoryListResponse,), 400: (CategoriesErrorResponse,),  },
                  None
                ),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/v1/catalog/categories',
                'operation_id': 'get_category_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

        self.get_chart_list_endpoint = _Endpoint(
            settings={
                'response_type': (
                  { 200: (CategorizedChartList,), 400: (ChartListErrorResponse,),  },
                  None
                ),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/v1/catalog/charts',
                'operation_id': 'get_chart_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'categories',
                    'type',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('type',): {

                        "JSON": "json",
                        "PDF": "pdf"
                    },
                },
                'openapi_types': {
                    'categories':
                        (str,),
                    'type':
                        (str,),
                },
                'attribute_map': {
                    'categories': 'categories',
                    'type': 'type',
                },
                'location_map': {
                    'categories': 'query',
                    'type': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/pdf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

        self.images_endpoint = _Endpoint(
            settings={
                'response_type': (
                  { 200: (str,), 400: (ErrorResponse,), 401: (UnauthorizedResponse,),  },
                  None
                ),
                'auth': [
                    'FactSetApiKey',
                    'FactSetOAuth2'
                ],
                'endpoint_path': '/v1/image',
                'operation_id': 'images',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'chart',
                    'ids',
                    'sd',
                    'ed',
                    'width',
                    'height',
                    'freq',
                    'ccy',
                    'split',
                    'spin',
                    'cal',
                    'title',
                    'font_size',
                    'type',
                    'grid_lines',
                ],
                'required': [
                    'chart',
                ],
                'nullable': [
                ],
                'enum': [
                    'split',
                    'spin',
                    'cal',
                    'type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('split',): {

                        "SPLIT": "SPLIT",
                        "UNSPLIT": "UNSPLIT"
                    },
                    ('spin',): {

                        "0": 0,
                        "1": 1,
                        "4": 4,
                        "9": 9
                    },
                    ('cal',): {

                        "LOCAL": "local",
                        "FIVEDAY": "fiveDay",
                        "SEVENDAY": "sevenDay"
                    },
                    ('type',): {

                        "PNG": "png",
                        "JPG": "jpg"
                    },
                },
                'openapi_types': {
                    'chart':
                        (str,),
                    'ids':
                        (str,),
                    'sd':
                        (str,),
                    'ed':
                        (str,),
                    'width':
                        (int,),
                    'height':
                        (int,),
                    'freq':
                        (str,),
                    'ccy':
                        (str,),
                    'split':
                        (str,),
                    'spin':
                        (float,),
                    'cal':
                        (str,),
                    'title':
                        (str,),
                    'font_size':
                        (float,),
                    'type':
                        (str,),
                    'grid_lines':
                        (bool,),
                },
                'attribute_map': {
                    'chart': 'chart',
                    'ids': 'ids',
                    'sd': 'sd',
                    'ed': 'ed',
                    'width': 'width',
                    'height': 'height',
                    'freq': 'freq',
                    'ccy': 'ccy',
                    'split': 'split',
                    'spin': 'spin',
                    'cal': 'cal',
                    'title': 'title',
                    'font_size': 'fontSize',
                    'type': 'type',
                    'grid_lines': 'gridLines',
                },
                'location_map': {
                    'chart': 'query',
                    'ids': 'query',
                    'sd': 'query',
                    'ed': 'query',
                    'width': 'query',
                    'height': 'query',
                    'freq': 'query',
                    'ccy': 'query',
                    'split': 'query',
                    'spin': 'query',
                    'cal': 'query',
                    'title': 'query',
                    'font_size': 'query',
                    'type': 'query',
                    'grid_lines': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'img/png',
                    'img/jpeg',
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )


    @staticmethod
    def apply_kwargs_defaults(kwargs, return_http_data_only, async_req):
        kwargs["async_req"] = async_req
        kwargs["_return_http_data_only"] = return_http_data_only
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")


    def get_category_list(
        self,
        **kwargs
    ) -> CategoryListResponse:
        """Get a list of chart categories  # noqa: E501

        This method makes a synchronous HTTP request. Returns the http data only


        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            CategoryListResponse
                Response Object
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=False)
        return self.get_category_list_endpoint.call_with_http_info(**kwargs)

    def get_category_list_with_http_info(
        self,
        **kwargs
    ) -> typing.Tuple[CategoryListResponse, int, typing.MutableMapping]:
        """Get a list of chart categories  # noqa: E501

        This method makes a synchronous HTTP request. Returns http data, http status and headers


        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            CategoryListResponse
                Response Object
            int
                Http Status Code
            dict
                Dictionary of the response headers
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=False)
        return self.get_category_list_endpoint.call_with_http_info(**kwargs)

    def get_category_list_async(
        self,
        **kwargs
    ) -> "ApplyResult[CategoryListResponse]":
        """Get a list of chart categories  # noqa: E501

        This method makes a asynchronous HTTP request. Returns the http data, wrapped in ApplyResult


        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[CategoryListResponse]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=True)
        return self.get_category_list_endpoint.call_with_http_info(**kwargs)

    def get_category_list_with_http_info_async(
        self,
        **kwargs
    ) -> "ApplyResult[typing.Tuple[CategoryListResponse, int, typing.MutableMapping]]":
        """Get a list of chart categories  # noqa: E501

        This method makes a asynchronous HTTP request. Returns http data, http status and headers, wrapped in ApplyResult


        Keyword Args:
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[(CategoryListResponse, int, typing.Dict)]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=True)
        return self.get_category_list_endpoint.call_with_http_info(**kwargs)


    def get_chart_list(
        self,
        **kwargs
    ) -> CategorizedChartList:
        """Get a list of chart templates that can be used for getting the image from the service.  # noqa: E501

        You can get all the charts present or can just get the information by categories. The response includes the name of the chart, description, tags and any additional input specific to that chart. Use the information from this response to determine what charts you want and get its image from /images endpoint. Additionally you can also get back a auto generated PDF for the categories you requested for.  # noqa: E501
        This method makes a synchronous HTTP request. Returns the http data only


        Keyword Args:
            categories (str): A comma delimited string of catgory names to limit the response to certain categories. If nothing is provided, all charts under every category would be listed out.. [optional]
            type (str): return type of the response. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            CategorizedChartList
                Response Object
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=False)
        return self.get_chart_list_endpoint.call_with_http_info(**kwargs)

    def get_chart_list_with_http_info(
        self,
        **kwargs
    ) -> typing.Tuple[CategorizedChartList, int, typing.MutableMapping]:
        """Get a list of chart templates that can be used for getting the image from the service.  # noqa: E501

        You can get all the charts present or can just get the information by categories. The response includes the name of the chart, description, tags and any additional input specific to that chart. Use the information from this response to determine what charts you want and get its image from /images endpoint. Additionally you can also get back a auto generated PDF for the categories you requested for.  # noqa: E501
        This method makes a synchronous HTTP request. Returns http data, http status and headers


        Keyword Args:
            categories (str): A comma delimited string of catgory names to limit the response to certain categories. If nothing is provided, all charts under every category would be listed out.. [optional]
            type (str): return type of the response. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            CategorizedChartList
                Response Object
            int
                Http Status Code
            dict
                Dictionary of the response headers
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=False)
        return self.get_chart_list_endpoint.call_with_http_info(**kwargs)

    def get_chart_list_async(
        self,
        **kwargs
    ) -> "ApplyResult[CategorizedChartList]":
        """Get a list of chart templates that can be used for getting the image from the service.  # noqa: E501

        You can get all the charts present or can just get the information by categories. The response includes the name of the chart, description, tags and any additional input specific to that chart. Use the information from this response to determine what charts you want and get its image from /images endpoint. Additionally you can also get back a auto generated PDF for the categories you requested for.  # noqa: E501
        This method makes a asynchronous HTTP request. Returns the http data, wrapped in ApplyResult


        Keyword Args:
            categories (str): A comma delimited string of catgory names to limit the response to certain categories. If nothing is provided, all charts under every category would be listed out.. [optional]
            type (str): return type of the response. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[CategorizedChartList]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=True)
        return self.get_chart_list_endpoint.call_with_http_info(**kwargs)

    def get_chart_list_with_http_info_async(
        self,
        **kwargs
    ) -> "ApplyResult[typing.Tuple[CategorizedChartList, int, typing.MutableMapping]]":
        """Get a list of chart templates that can be used for getting the image from the service.  # noqa: E501

        You can get all the charts present or can just get the information by categories. The response includes the name of the chart, description, tags and any additional input specific to that chart. Use the information from this response to determine what charts you want and get its image from /images endpoint. Additionally you can also get back a auto generated PDF for the categories you requested for.  # noqa: E501
        This method makes a asynchronous HTTP request. Returns http data, http status and headers, wrapped in ApplyResult


        Keyword Args:
            categories (str): A comma delimited string of catgory names to limit the response to certain categories. If nothing is provided, all charts under every category would be listed out.. [optional]
            type (str): return type of the response. [optional]
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[(CategorizedChartList, int, typing.Dict)]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=True)
        return self.get_chart_list_endpoint.call_with_http_info(**kwargs)


    def images(
        self,
        chart,
        **kwargs
    ) -> str:
        """Get chart image back in PNG or JPEG formats  # noqa: E501

        This method makes a synchronous HTTP request. Returns the http data only

        Args:
            chart (str): Path to the saved chart. For any of the default charts, the option should be `categoryName + '/' + chartName`. For charts under the Client or Personal directories, the option should be `directoryName + ':/' + pathTotheChart`.  

        Keyword Args:
            ids (str): List of identifiers to be charted in a comma(,) separated string. Only the first one would be considered as primary and rest would be added as comps. Check the catalog for more information on which charts require a ticker.. [optional]
            sd (str): Option for overriding the startDate of the chart. For absolute dates provide a string in `YYYYMMDD` format. We can also specify relative date options. [optional]
            ed (str): Option for overriding the endDate of the chart. For absolute dates provide a string in `YYYYMMDD` format. We can also specify relative date options. [optional]
            width (int): Option for setting the width of the image. [optional] if omitted the server will use the default value of 1056
            height (int): Option for setting the height of the image. [optional] if omitted the server will use the default value of 816
            freq (str): A shorthand string for the overall frequency of the chart like `D` (daily), `W` (weekly), `Y` (yearly) and `Q` (Quarterly). This will default to frequency stored in the document.. [optional]
            ccy (str): Currency ISO code for the overall currency of the chart. The API doesn't allow per series currency at this point in time.. [optional]
            split (str): Option to specify the splits adjustment. [optional]
            spin (float): Numeric option to specify the spinOffs adjustment. Possible options include `0` (When we only want spits adjustment), `1` (spinOffs), `4` (spinOffs and cash dividends) and `9` (No adjustments). [optional]
            cal (str): Option for the calendarType of the chart. [optional] if omitted the server will use the default value of "local"
            title (str): Option to customize the title. If you don't customize the title, then it displays by default the security name.. [optional]
            font_size (float): Option to adjust chart's fontSize. [optional]
            type (str): The type of image to be generated by the service. [optional] if omitted the server will use the default value of "png"
            grid_lines (bool): Option to toggle gridLines on/off on the chart. [optional] if omitted the server will use the default value of True
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            str
                Response Object
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=False)
        kwargs['chart'] = \
            chart
        return self.images_endpoint.call_with_http_info(**kwargs)

    def images_with_http_info(
        self,
        chart,
        **kwargs
    ) -> typing.Tuple[str, int, typing.MutableMapping]:
        """Get chart image back in PNG or JPEG formats  # noqa: E501

        This method makes a synchronous HTTP request. Returns http data, http status and headers

        Args:
            chart (str): Path to the saved chart. For any of the default charts, the option should be `categoryName + '/' + chartName`. For charts under the Client or Personal directories, the option should be `directoryName + ':/' + pathTotheChart`.  

        Keyword Args:
            ids (str): List of identifiers to be charted in a comma(,) separated string. Only the first one would be considered as primary and rest would be added as comps. Check the catalog for more information on which charts require a ticker.. [optional]
            sd (str): Option for overriding the startDate of the chart. For absolute dates provide a string in `YYYYMMDD` format. We can also specify relative date options. [optional]
            ed (str): Option for overriding the endDate of the chart. For absolute dates provide a string in `YYYYMMDD` format. We can also specify relative date options. [optional]
            width (int): Option for setting the width of the image. [optional] if omitted the server will use the default value of 1056
            height (int): Option for setting the height of the image. [optional] if omitted the server will use the default value of 816
            freq (str): A shorthand string for the overall frequency of the chart like `D` (daily), `W` (weekly), `Y` (yearly) and `Q` (Quarterly). This will default to frequency stored in the document.. [optional]
            ccy (str): Currency ISO code for the overall currency of the chart. The API doesn't allow per series currency at this point in time.. [optional]
            split (str): Option to specify the splits adjustment. [optional]
            spin (float): Numeric option to specify the spinOffs adjustment. Possible options include `0` (When we only want spits adjustment), `1` (spinOffs), `4` (spinOffs and cash dividends) and `9` (No adjustments). [optional]
            cal (str): Option for the calendarType of the chart. [optional] if omitted the server will use the default value of "local"
            title (str): Option to customize the title. If you don't customize the title, then it displays by default the security name.. [optional]
            font_size (float): Option to adjust chart's fontSize. [optional]
            type (str): The type of image to be generated by the service. [optional] if omitted the server will use the default value of "png"
            grid_lines (bool): Option to toggle gridLines on/off on the chart. [optional] if omitted the server will use the default value of True
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            str
                Response Object
            int
                Http Status Code
            dict
                Dictionary of the response headers
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=False)
        kwargs['chart'] = \
            chart
        return self.images_endpoint.call_with_http_info(**kwargs)

    def images_async(
        self,
        chart,
        **kwargs
    ) -> "ApplyResult[str]":
        """Get chart image back in PNG or JPEG formats  # noqa: E501

        This method makes a asynchronous HTTP request. Returns the http data, wrapped in ApplyResult

        Args:
            chart (str): Path to the saved chart. For any of the default charts, the option should be `categoryName + '/' + chartName`. For charts under the Client or Personal directories, the option should be `directoryName + ':/' + pathTotheChart`.  

        Keyword Args:
            ids (str): List of identifiers to be charted in a comma(,) separated string. Only the first one would be considered as primary and rest would be added as comps. Check the catalog for more information on which charts require a ticker.. [optional]
            sd (str): Option for overriding the startDate of the chart. For absolute dates provide a string in `YYYYMMDD` format. We can also specify relative date options. [optional]
            ed (str): Option for overriding the endDate of the chart. For absolute dates provide a string in `YYYYMMDD` format. We can also specify relative date options. [optional]
            width (int): Option for setting the width of the image. [optional] if omitted the server will use the default value of 1056
            height (int): Option for setting the height of the image. [optional] if omitted the server will use the default value of 816
            freq (str): A shorthand string for the overall frequency of the chart like `D` (daily), `W` (weekly), `Y` (yearly) and `Q` (Quarterly). This will default to frequency stored in the document.. [optional]
            ccy (str): Currency ISO code for the overall currency of the chart. The API doesn't allow per series currency at this point in time.. [optional]
            split (str): Option to specify the splits adjustment. [optional]
            spin (float): Numeric option to specify the spinOffs adjustment. Possible options include `0` (When we only want spits adjustment), `1` (spinOffs), `4` (spinOffs and cash dividends) and `9` (No adjustments). [optional]
            cal (str): Option for the calendarType of the chart. [optional] if omitted the server will use the default value of "local"
            title (str): Option to customize the title. If you don't customize the title, then it displays by default the security name.. [optional]
            font_size (float): Option to adjust chart's fontSize. [optional]
            type (str): The type of image to be generated by the service. [optional] if omitted the server will use the default value of "png"
            grid_lines (bool): Option to toggle gridLines on/off on the chart. [optional] if omitted the server will use the default value of True
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[str]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=True, async_req=True)
        kwargs['chart'] = \
            chart
        return self.images_endpoint.call_with_http_info(**kwargs)

    def images_with_http_info_async(
        self,
        chart,
        **kwargs
    ) -> "ApplyResult[typing.Tuple[str, int, typing.MutableMapping]]":
        """Get chart image back in PNG or JPEG formats  # noqa: E501

        This method makes a asynchronous HTTP request. Returns http data, http status and headers, wrapped in ApplyResult

        Args:
            chart (str): Path to the saved chart. For any of the default charts, the option should be `categoryName + '/' + chartName`. For charts under the Client or Personal directories, the option should be `directoryName + ':/' + pathTotheChart`.  

        Keyword Args:
            ids (str): List of identifiers to be charted in a comma(,) separated string. Only the first one would be considered as primary and rest would be added as comps. Check the catalog for more information on which charts require a ticker.. [optional]
            sd (str): Option for overriding the startDate of the chart. For absolute dates provide a string in `YYYYMMDD` format. We can also specify relative date options. [optional]
            ed (str): Option for overriding the endDate of the chart. For absolute dates provide a string in `YYYYMMDD` format. We can also specify relative date options. [optional]
            width (int): Option for setting the width of the image. [optional] if omitted the server will use the default value of 1056
            height (int): Option for setting the height of the image. [optional] if omitted the server will use the default value of 816
            freq (str): A shorthand string for the overall frequency of the chart like `D` (daily), `W` (weekly), `Y` (yearly) and `Q` (Quarterly). This will default to frequency stored in the document.. [optional]
            ccy (str): Currency ISO code for the overall currency of the chart. The API doesn't allow per series currency at this point in time.. [optional]
            split (str): Option to specify the splits adjustment. [optional]
            spin (float): Numeric option to specify the spinOffs adjustment. Possible options include `0` (When we only want spits adjustment), `1` (spinOffs), `4` (spinOffs and cash dividends) and `9` (No adjustments). [optional]
            cal (str): Option for the calendarType of the chart. [optional] if omitted the server will use the default value of "local"
            title (str): Option to customize the title. If you don't customize the title, then it displays by default the security name.. [optional]
            font_size (float): Option to adjust chart's fontSize. [optional]
            type (str): The type of image to be generated by the service. [optional] if omitted the server will use the default value of "png"
            grid_lines (bool): Option to toggle gridLines on/off on the chart. [optional] if omitted the server will use the default value of True
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True. NOTE: if this API returns a file, it is the responsibility
                of the caller to close the file stream.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
        Returns:
            ApplyResult[(str, int, typing.Dict)]
        """
        self.apply_kwargs_defaults(kwargs=kwargs, return_http_data_only=False, async_req=True)
        kwargs['chart'] = \
            chart
        return self.images_endpoint.call_with_http_info(**kwargs)



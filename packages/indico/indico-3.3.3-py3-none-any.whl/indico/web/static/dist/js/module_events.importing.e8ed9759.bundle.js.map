{"version":3,"file":"js/module_events.importing.e8ed9759.bundle.js","mappings":"2IAgHGA,OApGMC,kBAAoB,WACzB,MAAMC,EAAiBC,EAAE,gCACnBC,EAAQD,EAAE,sBACVE,EAAgBF,EAAE,kBAAkBG,OACpCC,EAAeJ,EAAE,iBAAiBG,OAClCE,EAAcL,EAAE,wBAChBM,EAAOP,EAAeQ,KAAK,QAC3BC,EAAqBT,EAAeQ,KAAK,sBAoBzCE,EAAqBC,KAAW,SAASC,GAC7C,MAAMC,EAAiBZ,EAAEa,MAAMZ,EAAMa,kBAAkB,IAGlDH,GAASC,IAAmBX,EAAMM,KAAK,kBAM5CN,EAAMM,KAAK,cAAeK,GAE1BX,EAAMc,WAAW,CACfC,IAAKjB,EAAeQ,KAAK,qBACzBU,OAAQ,OACRC,OAAAA,CAAQX,GACN,GAAIA,EAAKW,QAAS,KAAAC,EAChB,MAAMC,EAAclB,EAAcmB,KAAK,uBACjCC,EAAiBpB,EAAcmB,KAAK,0BACpCE,EAAcrB,EAAcmB,KAAK,uBACvCD,EAAYI,KAAKjB,EAAKkB,MAAMC,OAC5BJ,EAAeE,KAA8B,QAA1BL,EAACZ,EAAKkB,MAAME,sBAAc,IAAAR,OAAA,EAAzBA,EAA2BS,KAAK,QACpDN,EAAeO,SAAStB,EAAKkB,MAAME,gBACnCJ,EAAYC,MAAKM,EAAAA,EAAAA,wBAAuBvB,EAAKkB,MAAMM,SAAUxB,EAAKkB,MAAMO,SACxE5B,EAAaD,OACbD,EAAc+B,OACd5B,EAAY6B,KAAK,YAAY,EAC/B,MACE9B,EACG6B,OACAZ,KAAK,iBACLc,KAhDY,iBADFC,EAiDO7B,EAAK6B,MAAMC,SA/C5BD,EAEApC,EAAE,SAASsC,OAChBF,EAAMG,KAAI,SAASC,GACjB,MAAMC,EAAQzC,EAAE,YAAYsC,OAAOE,EAAK,IAClCE,EAAQ1C,EAAE,QAAQsC,OACtBE,EAAK,GAAGD,KAAI,SAASF,GACnB,OAAOrC,EAAE,QAAQwB,KAAKa,EACxB,KAEF,OAAOrC,EAAE,SAASsC,OAAOG,EAAOC,EAClC,MAqCExC,EAAcC,OACdE,EAAY6B,KAAK,YAAY,GAnDrC,IAAqBE,CAqDjB,IAEJ,GAAG,KAEU,IAAT9B,IACFD,EAAY6B,KAAK,YAAY,GAC7BjC,EAAM0C,GAAG,SAAU,QAASC,IAAUnC,GAAoB,IAC1DR,EAAM0C,GAAG,QAAS,SAAS,SAASE,GAClCA,EAAEC,iBACFrC,GAAmB,EACrB,KAGW,IAATH,IACFL,EAAMoB,KAAK,8BAA8BsB,GAAG,SAAU,wBAAwB,WAC5E,MAAMI,EAAQ/C,EAAEgD,MACVC,EAAezC,EAAmBuC,EAAMG,OACxCC,EAASJ,EAAMK,QAAQ,eAEzBL,EAAMb,KAAK,WACTe,EAAaI,UACfJ,EAAaI,SAASC,SAAQ,SAASC,GACrCJ,EAAO9B,KAAK,6BAA6BmC,OAAOD,IAAarB,KAAK,WAAW,EAC/E,IAEOe,EAAaQ,aACtBR,EAAaQ,YAAYH,SAAQ,SAASC,GACxCJ,EAAO9B,KAAK,cAAcmC,OAAOD,IAAarB,KAAK,WAAW,EAChE,GAEJ,IAGAlC,EAAE,2DAA2D0D,QAAQ,UAErE1D,EAAE,iEAAiE0D,QAAQ,UAE/E,C","sources":["webpack:///indico/modules/events/client/js/importing.js"],"sourcesContent":["// This file is part of Indico.\n// Copyright (C) 2002 - 2024 CERN\n//\n// Indico is free software; you can redistribute it and/or\n// modify it under the terms of the MIT License; see the\n// LICENSE file for more details.\n\nimport _ from 'lodash';\n\nimport {serializeDateTimeRange} from 'indico/utils/date';\n\n(function(global) {\n  global.setupImportDialog = function setupImportDialog() {\n    const $formContainer = $('#event-import-form-container');\n    const $form = $('#event-import-form');\n    const $eventDetails = $('#event-details').hide();\n    const $cloneErrors = $('#clone-errors').hide();\n    const $nextButton = $('.clone-action-button');\n    const step = $formContainer.data('step');\n    const clonerDependencies = $formContainer.data('clonerDependencies');\n\n    function errorToHTML(error) {\n      if (typeof error === 'string') {\n        return error;\n      } else {\n        return $('<div>').append(\n          error.map(function(item) {\n            const label = $('<strong>').append(item[0]);\n            const items = $('<ul>').append(\n              item[1].map(function(message) {\n                return $('<li>').text(message);\n              })\n            );\n            return $('<div>').append(label, items);\n          })\n        );\n      }\n    }\n\n    const updateEventDetails = _.debounce(function(force) {\n      const serializedForm = $.param($form.serializeArray(), true);\n\n      // make sure the form was actually changed\n      if (!force && serializedForm === $form.data('initialData')) {\n        return;\n      }\n\n      // set 'intiialData' by hand here, so that the if we're in a 'keyup'\n      // event, the successive 'change' event will receive the updated version\n      $form.data('initialData', serializedForm);\n\n      $form.ajaxSubmit({\n        url: $formContainer.data('event-details-url'),\n        method: 'POST',\n        success(data) {\n          if (data.success) {\n            const $eventTitle = $eventDetails.find('.import-event-title');\n            const $eventCategory = $eventDetails.find('.import-event-category');\n            const $eventDates = $eventDetails.find('.import-event-dates');\n            $eventTitle.text(data.event.title);\n            $eventCategory.text(data.event.category_chain?.join(' Â» '));\n            $eventCategory.toggle(!!data.event.category_chain);\n            $eventDates.text(serializeDateTimeRange(data.event.start_dt, data.event.end_dt));\n            $cloneErrors.hide();\n            $eventDetails.show();\n            $nextButton.prop('disabled', false);\n          } else {\n            $cloneErrors\n              .show()\n              .find('.message-text')\n              .html(errorToHTML(data.error.message));\n            $eventDetails.hide();\n            $nextButton.prop('disabled', true);\n          }\n        },\n      });\n    }, 300);\n\n    if (step === 1) {\n      $nextButton.prop('disabled', true);\n      $form.on('change', 'input', _.partial(updateEventDetails, false));\n      $form.on('keyup', 'input', function(e) {\n        e.preventDefault();\n        updateEventDetails(false);\n      });\n    }\n\n    if (step === 2) {\n      $form.find('#form-group-selected_items').on('change', 'input[type=checkbox]', function() {\n        const $this = $(this);\n        const dependencies = clonerDependencies[$this.val()];\n        const $field = $this.closest('.form-field');\n\n        if ($this.prop('checked')) {\n          if (dependencies.requires) {\n            dependencies.requires.forEach(function(optionName) {\n              $field.find('[value={0}]:not(:disabled)'.format(optionName)).prop('checked', true);\n            });\n          }\n        } else if (dependencies.required_by) {\n          dependencies.required_by.forEach(function(optionName) {\n            $field.find('[value={0}]'.format(optionName)).prop('checked', false);\n          });\n        }\n      });\n\n      // first check requirements of checked items\n      $('#form-group-selected_items input[type=checkbox]:checked').trigger('change');\n      // then ensure that nothing is checked that shouldn't be checked\n      $('#form-group-selected_items input[type=checkbox]:not(:checked)').trigger('change');\n    }\n  };\n})(window);\n"],"names":["window","setupImportDialog","$formContainer","$","$form","$eventDetails","hide","$cloneErrors","$nextButton","step","data","clonerDependencies","updateEventDetails","_debounce","force","serializedForm","param","serializeArray","ajaxSubmit","url","method","success","_data$event$category_","$eventTitle","find","$eventCategory","$eventDates","text","event","title","category_chain","join","toggle","serializeDateTimeRange","start_dt","end_dt","show","prop","html","error","message","append","map","item","label","items","on","_partial","e","preventDefault","$this","this","dependencies","val","$field","closest","requires","forEach","optionName","format","required_by","trigger"],"sourceRoot":""}
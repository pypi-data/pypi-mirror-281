{"version":3,"file":"lib_api_client_js-lib_index_js.e10620e94483b439179e.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAmD;AACL;AACpB;AACa;AAChC,aAAa,mDAAY;AAChC,aAAa,6DAAU;AACvB,CAAC;AACD;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACO;AACP,IAAI,oDAAY;AAChB;AACA;AACA;AACA;AACA;AACA,QAAQ,wDAAM,UAAU;AACxB;AACA,KAAK;AACL;AACA;AACA,QAAQ,wDAAM,UAAU;AACxB;AACA,KAAK;AACL;AACO;AACP,IAAI,oDAAY;AAChB;AACA;AACA;AACA;AACA;AACA,QAAQ,wDAAM,UAAU;AACxB;AACA,KAAK;AACL;AACA;AACA,QAAQ,wDAAM,UAAU;AACxB;AACA,KAAK;AACL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrE4E;AACpB;AACA;AACP;AACV;AAC6B;AACqD;AACgB;AACzI;AACA;AACA;AACA;AACA;AACA,eAAe,2DAAS,EAAE,kEAAc,EAAE,kEAAgB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8DAAiB;AAC7B;AACA;AACA,6BAA6B,iFAAuC;AACpE,gBAAgB,sEAAyB;AACzC,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,YAAY,8DAAiB;AAC7B;AACA;AACA,6BAA6B,iFAAuC;AACpE,gBAAgB,sEAAyB;AACzC,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,gEAAU;AACtB;AACA;AACA,0BAA0B,wDAAM,YAAY,eAAe;AAC3D,aAAa,oBAAoB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,kDAAQ;AACxC,YAAY,gEAAU;AACtB;AACA;AACA,0BAA0B,wDAAM,iBAAiB,wDAAM,YAAY,eAAe;AAClF,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,QAAQ,8DAAiB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,oDAAU;AAC1C,YAAY,gEAAU;AACtB;AACA;AACA,0BAA0B,wDAAM,iBAAiB,wDAAM,YAAY,eAAe;AAClF,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,uBAAuB,WAAW,iCAAiC,MAAM;AACzE,6BAA6B,6DAAmB;AAChD,QAAQ,gEAAU;AAClB;AACA;AACA;AACA,gBAAgB,wDAAM;AACtB,gBAAgB,wDAAM,YAAY,+BAA+B;AACjE;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,mEAAsB;AAClC,SAAS;AACT;AACA;AACA,uBAAuB,WAAW,oCAAoC,MAAM;AAC5E,8BAA8B,+DAAqB;AACnD,QAAQ,gEAAU;AAClB;AACA;AACA,sBAAsB,wDAAM,iBAAiB,wDAAM,YAAY,oBAAoB;AACnF,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,gEAAmB;AAC/B,SAAS;AACT;AACA;AACA;AACA,YAAY,gEAAU;AACtB;AACA;AACA,0BAA0B,wDAAM,YAAY,eAAe;AAC3D,aAAa,oBAAoB;AACjC;AACA;AACA,kCAAkC,mDAAS;AAC3C,YAAY,gEAAU;AACtB;AACA;AACA,0BAA0B,wDAAM,iBAAiB,wDAAM,YAAY,eAAe;AAClF,aAAa,oBAAoB;AACjC;AACA;AACA;AACA;AACA,YAAY,gEAAU;AACtB;AACA;AACA,0BAA0B,wDAAM,YAAY,eAAe;AAC3D,aAAa,oBAAoB;AACjC;AACA;AACA,kCAAkC,sDAAY;AAC9C,YAAY,gEAAU;AACtB;AACA;AACA,0BAA0B,wDAAM,iBAAiB,wDAAM,YAAY,eAAe;AAClF,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,qBAAqB,iDAAI,GAAG,wBAAwB;AACpD;AACA,6BAA6B,UAAU;AACvC;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACO;AACP,IAAI,sEAAgB;AACpB;AACO;AACP,IAAI,sEAAgB;AACpB;AACO;AACP,2BAA2B,uDAAa;AACxC,IAAI,gEAAU;AACd;AACA;AACA,kBAAkB,wDAAM;AACxB,KAAK,oBAAoB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,iEAAe,aAAa,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;AClQY;AACM;AACxC,4BAA4B,mDAAM;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,yDAAO;AACnC;AACA,gBAAgB,YAAY;AAC5B;AACA;AACO,wBAAwB,mDAAM;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B;AACA;AACO,2BAA2B,mDAAM;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B;AACA;AACO,uBAAuB,mDAAM;AACpC,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,yBAAyB,mDAAM;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,aAAa;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,oCAAoC,mDAAM;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,kCAAkC,mDAAM;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,0BAA0B;;;;;;;;;;;;;;;ACzQpB;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://@reviewnb/jupyterlab_gitplus/./lib/api_client.js","webpack://@reviewnb/jupyterlab_gitplus/./lib/index.js","webpack://@reviewnb/jupyterlab_gitplus/./lib/ui_elements.js","webpack://@reviewnb/jupyterlab_gitplus/./lib/utility.js"],"sourcesContent":["import { PageConfig } from '@jupyterlab/coreutils';\nimport { Dialog } from '@jupyterlab/apputils';\nimport axios from 'axios';\nimport { show_spinner } from './index';\nexport const HTTP = axios.create({\n    baseURL: PageConfig.getBaseUrl()\n});\nHTTP.defaults.headers.post['X-CSRFToken'] = _get_cookie('_xsrf');\nfunction _get_cookie(name) {\n    // Source: https://blog.jupyter.org/security-release-jupyter-notebook-4-3-1-808e1f3bb5e2\n    const r = document.cookie.match('\\\\b' + name + '=([^;]*)\\\\b');\n    return r ? r[1] : undefined;\n}\nexport function get_server_config() {\n    return HTTP.get('gitplus/expanded_server_root')\n        .then(response => {\n        return response.data;\n    })\n        .catch(error => {\n        console.log(error);\n    });\n}\nexport function get_modified_repositories(data, show_repository_selection_dialog, command, show_repository_selection_failure_dialog) {\n    const repo_names = [];\n    return HTTP.post('gitplus/modified_repo', data)\n        .then(response => {\n        const repo_list = response.data;\n        for (const repo of repo_list) {\n            const display_name = repo['name'] + ' (' + repo['path'] + ')';\n            repo_names.push([display_name, repo['path']]);\n        }\n        show_repository_selection_dialog(repo_names, command);\n    })\n        .catch(error => {\n        show_repository_selection_failure_dialog();\n        console.log(error);\n    });\n}\nexport function create_pull_request(data, show_pr_created_dialog) {\n    show_spinner();\n    return HTTP.post('gitplus/pull_request', data)\n        .then(response => {\n        const result = response.data;\n        const github_url = result['github_url'];\n        const reviewnb_url = result['reviewnb_url'];\n        Dialog.flush(); // remove spinner\n        show_pr_created_dialog(github_url, reviewnb_url);\n    })\n        .catch(error => {\n        console.log(error);\n        Dialog.flush(); // remove spinner\n        show_pr_created_dialog();\n    });\n}\nexport function create_and_push_commit(data, show_commit_pushed_dialog) {\n    show_spinner();\n    return HTTP.post('gitplus/commit', data)\n        .then(response => {\n        const result = response.data;\n        const github_url = result['github_url'];\n        const reviewnb_url = result['reviewnb_url'];\n        Dialog.flush(); // remove spinner\n        show_commit_pushed_dialog(github_url, reviewnb_url);\n    })\n        .catch(error => {\n        console.log(error);\n        Dialog.flush(); // remove spinner\n        show_commit_pushed_dialog();\n    });\n}\n","import { Dialog, showDialog, showErrorMessage } from '@jupyterlab/apputils';\nimport { IEditorTracker } from '@jupyterlab/fileeditor';\nimport { INotebookTracker } from '@jupyterlab/notebook';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { Menu } from '@lumino/widgets';\nimport { get_json_request_payload_from_file_list } from './utility';\nimport { get_modified_repositories, create_pull_request, create_and_push_commit, get_server_config } from './api_client';\nimport { CheckBoxes, DropDown, CommitPRMessageDialog, CommitMessageDialog, PRCreated, CommitPushed, SpinnerDialog } from './ui_elements';\n/**\n * The plugin registration information.\n */\nconst gitPlusPlugin = {\n    activate,\n    requires: [IMainMenu, IEditorTracker, INotebookTracker],\n    id: '@reviewnb/gitplus',\n    autoStart: true\n};\n/**\n * Activate the extension.\n */\nfunction activate(app, mainMenu, editorTracker, notebookTracker) {\n    console.log('JupyterLab extension @reviewnb/gitplus (0.1.5) is activated!');\n    const createPRCommand = 'create-pr';\n    app.commands.addCommand(createPRCommand, {\n        label: 'Create Pull Request',\n        execute: () => {\n            get_server_config()\n                .then(config => {\n                const files = get_open_files(editorTracker, notebookTracker, config['server_root_dir']);\n                const data = get_json_request_payload_from_file_list(files);\n                get_modified_repositories(data, show_repository_selection_dialog, createPRCommand, show_repository_selection_failure_dialog);\n            })\n                .catch(error => {\n                show_repository_selection_failure_dialog();\n                console.log(error);\n            });\n        }\n    });\n    const pushCommitCommand = 'push-commit';\n    app.commands.addCommand(pushCommitCommand, {\n        label: 'Push Commit',\n        execute: () => {\n            get_server_config()\n                .then(config => {\n                const files = get_open_files(editorTracker, notebookTracker, config['server_root_dir']);\n                const data = get_json_request_payload_from_file_list(files);\n                get_modified_repositories(data, show_repository_selection_dialog, pushCommitCommand, show_repository_selection_failure_dialog);\n            })\n                .catch(error => {\n                show_repository_selection_failure_dialog();\n                console.log(error);\n            });\n        }\n    });\n    function show_repository_selection_dialog(repo_names, command) {\n        if (repo_names.length == 0) {\n            let msg = \"No GitHub repositories found! \\n\\nFirst, open the files that you'd like to commit or create pull request for.\";\n            if (command == createPRCommand) {\n                msg =\n                    \"No GitHub repositories found! \\n\\nFirst, open the files that you'd like to create pull request for.\";\n            }\n            else if (command == pushCommitCommand) {\n                msg =\n                    \"No GitHub repositories found! \\n\\nFirst, open the files that you'd like to commit.\";\n            }\n            showDialog({\n                title: 'Repository Selection',\n                body: msg,\n                buttons: [Dialog.okButton({ label: 'Okay' })]\n            }).then(result => { });\n        }\n        else {\n            const label_style = {\n                'font-size': '14px'\n            };\n            const body_style = {\n                'padding-top': '2em',\n                'padding-bottom': '2em',\n                'border-top': '1px solid #dfe2e5'\n            };\n            const select_style = {\n                'margin-top': '4px',\n                'min-height': '32px'\n            };\n            const styles = {\n                label_style: label_style,\n                body_style: body_style,\n                select_style: select_style\n            };\n            const dwidget = new DropDown(repo_names, 'Select Repository', styles);\n            showDialog({\n                title: 'Repository Selection',\n                body: dwidget,\n                buttons: [Dialog.cancelButton(), Dialog.okButton({ label: 'Next' })]\n            }).then(result => {\n                if (!result.button.accept) {\n                    return;\n                }\n                const repo_name = dwidget.getTo();\n                show_file_selection_dialog(repo_name, command);\n            });\n        }\n    }\n    function show_file_selection_dialog(repo_path, command) {\n        get_server_config()\n            .then(config => {\n            const files = get_open_files(editorTracker, notebookTracker, config['server_root_dir']);\n            const relevant_files = [];\n            for (const f of files) {\n                if (f.startsWith(repo_path)) {\n                    relevant_files.push(f.substring(repo_path.length + 1));\n                }\n            }\n            const cwidget = new CheckBoxes(relevant_files);\n            showDialog({\n                title: 'Select Files',\n                body: cwidget,\n                buttons: [Dialog.cancelButton(), Dialog.okButton({ label: 'Next' })]\n            }).then(result => {\n                if (!result.button.accept) {\n                    return;\n                }\n                const files = cwidget.getSelected();\n                if (command == createPRCommand) {\n                    show_commit_pr_message_dialog(repo_path, files);\n                }\n                else if (command == pushCommitCommand) {\n                    show_commit_message_dialog(repo_path, files);\n                }\n            });\n        })\n            .catch(error => {\n            show_file_selection_failure_dialog();\n            console.log(error);\n        });\n    }\n    function show_commit_message_dialog(repo_path, files) {\n        console.log(`${repo_path} --show_commit_message_dialog-- ${files}`);\n        const cmwidget = new CommitMessageDialog();\n        showDialog({\n            title: 'Provide Details',\n            body: cmwidget,\n            buttons: [\n                Dialog.cancelButton(),\n                Dialog.okButton({ label: 'Create & Push Commit' })\n            ]\n        }).then(result => {\n            if (!result.button.accept) {\n                return;\n            }\n            const commit_message = cmwidget.getCommitMessage();\n            const body = {\n                files: files,\n                repo_path: repo_path,\n                commit_message: commit_message\n            };\n            create_and_push_commit(body, show_commit_pushed_dialog);\n        });\n    }\n    function show_commit_pr_message_dialog(repo_path, files) {\n        console.log(`${repo_path} --show_commit_pr_message_dialog-- ${files}`);\n        const cprwidget = new CommitPRMessageDialog();\n        showDialog({\n            title: 'Provide Details',\n            body: cprwidget,\n            buttons: [Dialog.cancelButton(), Dialog.okButton({ label: 'Create PR' })]\n        }).then(result => {\n            if (!result.button.accept) {\n                return;\n            }\n            const commit_message = cprwidget.getCommitMessage();\n            const pr_title = cprwidget.getPRTitle();\n            const body = {\n                files: files,\n                repo_path: repo_path,\n                commit_message: commit_message,\n                pr_title: pr_title\n            };\n            create_pull_request(body, show_pr_created_dialog);\n        });\n    }\n    function show_pr_created_dialog(github_url = '', reviewnb_url = '') {\n        if (github_url.length == 0 || reviewnb_url.length == 0) {\n            showDialog({\n                title: 'Failure',\n                body: \"Failed to create pull request. Check Jupyter logs for error. \\n\\nMake sure you've correctly setup GitHub access token. Steps here - https://github.com/ReviewNB/jupyterlab-gitplus/blob/master/README.md#setup-github-token\\n\\nIf unable to resolve, open an issue here - https://github.com/ReviewNB/jupyterlab-gitplus/issues\",\n                buttons: [Dialog.okButton({ label: 'Okay' })]\n            }).then(result => { });\n        }\n        else {\n            const prcwidget = new PRCreated(github_url, reviewnb_url);\n            showDialog({\n                title: 'Pull Request Created',\n                body: prcwidget,\n                buttons: [Dialog.cancelButton(), Dialog.okButton({ label: 'Okay' })]\n            }).then(result => { });\n        }\n    }\n    function show_commit_pushed_dialog(github_url = '', reviewnb_url = '') {\n        if (github_url.length == 0 || reviewnb_url.length == 0) {\n            showDialog({\n                title: 'Failure',\n                body: 'Failed to create/push commit. Check Jupyter logs for error. \\n\\nIf unable to resolve, open an issue here - https://github.com/ReviewNB/jupyterlab-gitplus/issues',\n                buttons: [Dialog.okButton({ label: 'Okay' })]\n            }).then(result => { });\n        }\n        else {\n            const prcwidget = new CommitPushed(github_url, reviewnb_url);\n            showDialog({\n                title: 'Commit pushed!',\n                body: prcwidget,\n                buttons: [Dialog.cancelButton(), Dialog.okButton({ label: 'Okay' })]\n            }).then(result => {\n                if (!result.button.accept) {\n                    return;\n                }\n            });\n        }\n    }\n    // Create new top level menu\n    const menu = new Menu({ commands: app.commands });\n    menu.title.label = 'Git-Plus';\n    mainMenu.addMenu(menu, { rank: 40 });\n    // Add commands to menu\n    menu.addItem({\n        command: createPRCommand,\n        args: {}\n    });\n    menu.addItem({\n        command: pushCommitCommand,\n        args: {}\n    });\n}\nexport function show_repository_selection_failure_dialog() {\n    showErrorMessage('Failure', 'Failed to fetch list of repositories. Have you installed & enabled server side of the extension? \\n\\nSee installation steps here - https://github.com/ReviewNB/jupyterlab-gitplus/blob/master/README.md#install\\n\\nIf unable to resolve, open an issue here - https://github.com/ReviewNB/jupyterlab-gitplus/issues');\n}\nexport function show_file_selection_failure_dialog() {\n    showErrorMessage('Failure', 'Failed to fetch list of modified files. Have you installed & enabled server side of the extension? \\n\\nSee installation steps here - https://github.com/ReviewNB/jupyterlab-gitplus/blob/master/README.md#install\\n\\nIf unable to resolve, open an issue here - https://github.com/ReviewNB/jupyterlab-gitplus/issues');\n}\nexport function show_spinner() {\n    const spinWidget = new SpinnerDialog();\n    showDialog({\n        title: 'Waiting for response...',\n        body: spinWidget,\n        buttons: [Dialog.cancelButton()]\n    }).then(result => { });\n}\nfunction get_open_files(editorTracker, notebookTracker, base_dir) {\n    const result = [];\n    let separator = '/';\n    notebookTracker.forEach(notebook => {\n        result.push(base_dir + separator + notebook.context.path);\n    });\n    editorTracker.forEach(editor => {\n        result.push(base_dir + separator + editor.context.path);\n    });\n    return result;\n}\nexport default gitPlusPlugin;\n","import { Widget } from '@lumino/widgets';\nimport { Spinner } from '@jupyterlab/apputils';\nexport class SpinnerDialog extends Widget {\n    constructor() {\n        const spinner_style = {\n            'margin-top': '6em'\n        };\n        const body = document.createElement('div');\n        const basic = document.createElement('div');\n        Private.apply_style(basic, spinner_style);\n        body.appendChild(basic);\n        const spinner = new Spinner();\n        basic.appendChild(spinner.node);\n        super({ node: body });\n    }\n}\nexport class PRCreated extends Widget {\n    constructor(github_url, reviewnb_url) {\n        const anchor_style = {\n            color: '#106ba3',\n            'text-decoration': 'underline'\n        };\n        const body = document.createElement('div');\n        const basic = document.createElement('div');\n        basic.classList.add('gitPlusDialogBody');\n        body.appendChild(basic);\n        basic.appendChild(Private.buildLabel('See pull request on GitHub: '));\n        basic.appendChild(Private.buildNewline());\n        basic.appendChild(Private.buildAnchor(github_url, github_url, anchor_style));\n        basic.appendChild(Private.buildNewline());\n        basic.appendChild(Private.buildNewline());\n        basic.appendChild(Private.buildNewline());\n        basic.appendChild(Private.buildLabel('See pull request on ReviewNB: '));\n        basic.appendChild(Private.buildNewline());\n        basic.appendChild(Private.buildAnchor(reviewnb_url, reviewnb_url, anchor_style));\n        basic.appendChild(Private.buildNewline());\n        super({ node: body });\n    }\n}\nexport class CommitPushed extends Widget {\n    constructor(github_url, reviewnb_url) {\n        const anchor_style = {\n            color: '#106ba3',\n            'text-decoration': 'underline'\n        };\n        const body = document.createElement('div');\n        const basic = document.createElement('div');\n        basic.classList.add('gitPlusDialogBody');\n        body.appendChild(basic);\n        basic.appendChild(Private.buildLabel('See commit on GitHub: '));\n        basic.appendChild(Private.buildNewline());\n        basic.appendChild(Private.buildAnchor(github_url, github_url, anchor_style));\n        basic.appendChild(Private.buildNewline());\n        basic.appendChild(Private.buildNewline());\n        basic.appendChild(Private.buildNewline());\n        basic.appendChild(Private.buildLabel('See commit on ReviewNB: '));\n        basic.appendChild(Private.buildNewline());\n        basic.appendChild(Private.buildAnchor(reviewnb_url, reviewnb_url, anchor_style));\n        basic.appendChild(Private.buildNewline());\n        super({ node: body });\n    }\n}\nexport class DropDown extends Widget {\n    constructor(options = [], label = '', styles = {}) {\n        let body_style = {};\n        let label_style = {};\n        let select_style = {};\n        if ('body_style' in styles) {\n            body_style = styles['body_style'];\n        }\n        if ('label_style' in styles) {\n            label_style = styles['label_style'];\n        }\n        if ('select_style' in styles) {\n            select_style = styles['select_style'];\n        }\n        const body = document.createElement('div');\n        Private.apply_style(body, body_style);\n        const basic = document.createElement('div');\n        body.appendChild(basic);\n        basic.appendChild(Private.buildLabel(label, label_style));\n        basic.appendChild(Private.buildSelect(options, select_style));\n        super({ node: body });\n    }\n    get toNode() {\n        return this.node.getElementsByTagName('select')[0];\n    }\n    getTo() {\n        return this.toNode.value;\n    }\n}\nexport class CheckBoxes extends Widget {\n    constructor(items = []) {\n        const basic = document.createElement('div');\n        basic.classList.add('gitPlusDialogBody');\n        for (const item of items) {\n            basic.appendChild(Private.buildCheckbox(item));\n        }\n        super({ node: basic });\n    }\n    getSelected() {\n        const result = [];\n        const inputs = this.node.getElementsByTagName('input');\n        for (const input of inputs) {\n            if (input.checked) {\n                result.push(input.id);\n            }\n        }\n        return result;\n    }\n}\nexport class CommitPRMessageDialog extends Widget {\n    constructor() {\n        const body = document.createElement('div');\n        const basic = document.createElement('div');\n        basic.classList.add('gitPlusDialogBody');\n        body.appendChild(basic);\n        basic.appendChild(Private.buildLabel('Commit message: '));\n        basic.appendChild(Private.buildTextarea('Enter your commit message', 'gitplus-commit-message', 'gitPlusMessageTextArea'));\n        basic.appendChild(Private.buildLabel('PR title: '));\n        basic.appendChild(Private.buildTextarea('Enter title for pull request', 'gitplus-pr-message', 'gitPlusMessageTextArea'));\n        super({ node: body });\n    }\n    getCommitMessage() {\n        const textareas = this.node.getElementsByTagName('textarea');\n        for (const textarea of textareas) {\n            if (textarea.id == 'gitplus-commit-message') {\n                return textarea.value;\n            }\n        }\n        return '';\n    }\n    getPRTitle() {\n        const textareas = this.node.getElementsByTagName('textarea');\n        for (const textarea of textareas) {\n            if (textarea.id == 'gitplus-pr-message') {\n                return textarea.value;\n            }\n        }\n        return '';\n    }\n}\nexport class CommitMessageDialog extends Widget {\n    constructor() {\n        const body = document.createElement('div');\n        const basic = document.createElement('div');\n        basic.classList.add('gitPlusDialogBody');\n        body.appendChild(basic);\n        basic.appendChild(Private.buildLabel('Commit message: '));\n        basic.appendChild(Private.buildTextarea('Enter your commit message', 'gitplus-commit-message', 'gitPlusMessageTextArea'));\n        super({ node: body });\n    }\n    getCommitMessage() {\n        const textareas = this.node.getElementsByTagName('textarea');\n        for (const textarea of textareas) {\n            if (textarea.id == 'gitplus-commit-message') {\n                return textarea.value;\n            }\n        }\n        return '';\n    }\n}\nvar Private;\n(function (Private) {\n    const default_none = document.createElement('option');\n    default_none.selected = false;\n    default_none.disabled = true;\n    default_none.hidden = false;\n    default_none.style.display = 'none';\n    default_none.value = '';\n    function buildLabel(text, style = {}) {\n        const label = document.createElement('label');\n        label.textContent = text;\n        apply_style(label, style);\n        return label;\n    }\n    Private.buildLabel = buildLabel;\n    function buildAnchor(url, text, style = {}) {\n        const anchor = document.createElement('a');\n        anchor.href = url;\n        anchor.text = text;\n        anchor.target = '_blank';\n        apply_style(anchor, style);\n        return anchor;\n    }\n    Private.buildAnchor = buildAnchor;\n    function buildNewline() {\n        return document.createElement('br');\n    }\n    Private.buildNewline = buildNewline;\n    function buildCheckbox(text) {\n        const span = document.createElement('span');\n        const label = document.createElement('label');\n        const input = document.createElement('input');\n        input.classList.add('gitPlusCheckbox');\n        input.id = text;\n        input.type = 'checkbox';\n        label.htmlFor = text;\n        label.textContent = text;\n        span.appendChild(input);\n        span.appendChild(label);\n        return span;\n    }\n    Private.buildCheckbox = buildCheckbox;\n    function buildTextarea(text, id, _class) {\n        const area = document.createElement('textarea');\n        area.placeholder = text;\n        area.id = id;\n        area.classList.add(_class);\n        return area;\n    }\n    Private.buildTextarea = buildTextarea;\n    function buildSelect(list, style = {}, def) {\n        const select = document.createElement('select');\n        select.appendChild(default_none);\n        for (const x of list) {\n            const option = document.createElement('option');\n            option.value = x[1];\n            option.textContent = x[0];\n            select.appendChild(option);\n            if (def && x[0] === def) {\n                option.selected = true;\n            }\n        }\n        apply_style(select, style);\n        return select;\n    }\n    Private.buildSelect = buildSelect;\n    function apply_style(element, style) {\n        if ('margin-top' in style) {\n            element.style.marginTop = style['margin-top'];\n        }\n        if ('margin-bottom' in style) {\n            element.style.marginBottom = style['margin-bottom'];\n        }\n        if ('padding-top' in style) {\n            element.style.paddingTop = style['padding-top'];\n        }\n        if ('padding-bottom' in style) {\n            element.style.paddingBottom = style['padding-bottom'];\n        }\n        if ('border-top' in style) {\n            element.style.borderTop = style['border-top'];\n        }\n        if ('display' in style) {\n            element.style.display = style['display'];\n        }\n        if ('min-width' in style) {\n            element.style.minWidth = style['min-width'];\n        }\n        if ('min-height' in style) {\n            element.style.minHeight = style['min-height'];\n        }\n        if ('color' in style) {\n            element.style.color = style['color'];\n        }\n        if ('text-decoration' in style) {\n            element.style.textDecoration = style['text-decoration'];\n        }\n        if ('font-size' in style) {\n            element.style.fontSize = style['font-size'];\n        }\n        return element;\n    }\n    Private.apply_style = apply_style;\n})(Private || (Private = {}));\n","export function get_json_request_payload_from_file_list(files) {\n    const file_list = [];\n    for (const f of files) {\n        const entry = {\n            path: f\n        };\n        file_list.push(entry);\n    }\n    return {\n        files: file_list\n    };\n}\n"],"names":[],"sourceRoot":""}
# -*- coding: utf-8 -*-
# This file is auto-generated, don't edit it. Thanks.
from Tea.model import TeaModel
from typing import List, Dict, Any


class ChainPurpose(TeaModel):
    def __init__(
        self,
        extend: bool = None,
        id: str = None,
        item: bool = None,
        key: str = None,
        name: str = None,
        purpose_item: str = None,
        status: str = None,
        time: str = None,
    ):
        self.extend = extend
        self.id = id
        self.item = item
        self.key = key
        self.name = name
        self.purpose_item = purpose_item
        self.status = status
        self.time = time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.extend is not None:
            result['Extend'] = self.extend
        if self.id is not None:
            result['Id'] = self.id
        if self.item is not None:
            result['Item'] = self.item
        if self.key is not None:
            result['Key'] = self.key
        if self.name is not None:
            result['Name'] = self.name
        if self.purpose_item is not None:
            result['PurposeItem'] = self.purpose_item
        if self.status is not None:
            result['Status'] = self.status
        if self.time is not None:
            result['Time'] = self.time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Extend') is not None:
            self.extend = m.get('Extend')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Item') is not None:
            self.item = m.get('Item')
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('PurposeItem') is not None:
            self.purpose_item = m.get('PurposeItem')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Time') is not None:
            self.time = m.get('Time')
        return self


class AntChainPurposeResponse(TeaModel):
    def __init__(
        self,
        chain_purpose_extend: str = None,
        chain_purpose_item: str = None,
        create_time: str = None,
        purpose: str = None,
        record_list: List[ChainPurpose] = None,
        status: str = None,
    ):
        self.chain_purpose_extend = chain_purpose_extend
        self.chain_purpose_item = chain_purpose_item
        self.create_time = create_time
        self.purpose = purpose
        self.record_list = record_list
        self.status = status

    def validate(self):
        if self.record_list:
            for k in self.record_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.chain_purpose_extend is not None:
            result['ChainPurposeExtend'] = self.chain_purpose_extend
        if self.chain_purpose_item is not None:
            result['ChainPurposeItem'] = self.chain_purpose_item
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.purpose is not None:
            result['Purpose'] = self.purpose
        result['RecordList'] = []
        if self.record_list is not None:
            for k in self.record_list:
                result['RecordList'].append(k.to_map() if k else None)
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChainPurposeExtend') is not None:
            self.chain_purpose_extend = m.get('ChainPurposeExtend')
        if m.get('ChainPurposeItem') is not None:
            self.chain_purpose_item = m.get('ChainPurposeItem')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Purpose') is not None:
            self.purpose = m.get('Purpose')
        self.record_list = []
        if m.get('RecordList') is not None:
            for k in m.get('RecordList'):
                temp_model = ChainPurpose()
                self.record_list.append(temp_model.from_map(k))
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class ChainPurposeInfoAli(TeaModel):
    def __init__(
        self,
        chain_purpose_extend: str = None,
        chain_purpose_item: str = None,
        id: str = None,
        key: str = None,
        purpose: str = None,
        status: str = None,
        time: str = None,
    ):
        self.chain_purpose_extend = chain_purpose_extend
        self.chain_purpose_item = chain_purpose_item
        self.id = id
        self.key = key
        self.purpose = purpose
        self.status = status
        self.time = time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.chain_purpose_extend is not None:
            result['ChainPurposeExtend'] = self.chain_purpose_extend
        if self.chain_purpose_item is not None:
            result['ChainPurposeItem'] = self.chain_purpose_item
        if self.id is not None:
            result['Id'] = self.id
        if self.key is not None:
            result['Key'] = self.key
        if self.purpose is not None:
            result['Purpose'] = self.purpose
        if self.status is not None:
            result['Status'] = self.status
        if self.time is not None:
            result['Time'] = self.time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChainPurposeExtend') is not None:
            self.chain_purpose_extend = m.get('ChainPurposeExtend')
        if m.get('ChainPurposeItem') is not None:
            self.chain_purpose_item = m.get('ChainPurposeItem')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Purpose') is not None:
            self.purpose = m.get('Purpose')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Time') is not None:
            self.time = m.get('Time')
        return self


class AntChainPurposeResponseAli(TeaModel):
    def __init__(
        self,
        record_list: List[ChainPurposeInfoAli] = None,
        status: str = None,
    ):
        self.record_list = record_list
        self.status = status

    def validate(self):
        if self.record_list:
            for k in self.record_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['RecordList'] = []
        if self.record_list is not None:
            for k in self.record_list:
                result['RecordList'].append(k.to_map() if k else None)
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.record_list = []
        if m.get('RecordList') is not None:
            for k in m.get('RecordList'):
                temp_model = ChainPurposeInfoAli()
                self.record_list.append(temp_model.from_map(k))
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class ChainPurposeListAli(TeaModel):
    def __init__(
        self,
        extend: bool = None,
        id: str = None,
        item: bool = None,
        key: str = None,
        purpose: str = None,
    ):
        self.extend = extend
        self.id = id
        self.item = item
        self.key = key
        self.purpose = purpose

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.extend is not None:
            result['Extend'] = self.extend
        if self.id is not None:
            result['Id'] = self.id
        if self.item is not None:
            result['Item'] = self.item
        if self.key is not None:
            result['Key'] = self.key
        if self.purpose is not None:
            result['Purpose'] = self.purpose
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Extend') is not None:
            self.extend = m.get('Extend')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Item') is not None:
            self.item = m.get('Item')
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Purpose') is not None:
            self.purpose = m.get('Purpose')
        return self


class CheckPointStructBody(TeaModel):
    def __init__(
        self,
        error_count: str = None,
        height: str = None,
        index: str = None,
        last_error: str = None,
        total_count: str = None,
        type: str = None,
    ):
        self.error_count = error_count
        self.height = height
        self.index = index
        self.last_error = last_error
        self.total_count = total_count
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_count is not None:
            result['ErrorCount'] = self.error_count
        if self.height is not None:
            result['Height'] = self.height
        if self.index is not None:
            result['Index'] = self.index
        if self.last_error is not None:
            result['LastError'] = self.last_error
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCount') is not None:
            self.error_count = m.get('ErrorCount')
        if m.get('Height') is not None:
            self.height = m.get('Height')
        if m.get('Index') is not None:
            self.index = m.get('Index')
        if m.get('LastError') is not None:
            self.last_error = m.get('LastError')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class PositionStructBody(TeaModel):
    def __init__(
        self,
        error_count: str = None,
        height: str = None,
        index: str = None,
        last_error: str = None,
        type: str = None,
    ):
        self.error_count = error_count
        self.height = height
        self.index = index
        self.last_error = last_error
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_count is not None:
            result['ErrorCount'] = self.error_count
        if self.height is not None:
            result['Height'] = self.height
        if self.index is not None:
            result['Index'] = self.index
        if self.last_error is not None:
            result['LastError'] = self.last_error
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCount') is not None:
            self.error_count = m.get('ErrorCount')
        if m.get('Height') is not None:
            self.height = m.get('Height')
        if m.get('Index') is not None:
            self.index = m.get('Index')
        if m.get('LastError') is not None:
            self.last_error = m.get('LastError')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class TriggerLogDTOStructBody(TeaModel):
    def __init__(
        self,
        create_time: str = None,
        modify_time: str = None,
        position: PositionStructBody = None,
        status: str = None,
        uuid: str = None,
    ):
        self.create_time = create_time
        self.modify_time = modify_time
        self.position = position
        self.status = status
        self.uuid = uuid

    def validate(self):
        if self.position:
            self.position.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.modify_time is not None:
            result['ModifyTime'] = self.modify_time
        if self.position is not None:
            result['Position'] = self.position.to_map()
        if self.status is not None:
            result['Status'] = self.status
        if self.uuid is not None:
            result['Uuid'] = self.uuid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('ModifyTime') is not None:
            self.modify_time = m.get('ModifyTime')
        if m.get('Position') is not None:
            temp_model = PositionStructBody()
            self.position = temp_model.from_map(m['Position'])
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Uuid') is not None:
            self.uuid = m.get('Uuid')
        return self


class CommonResponsePageableStructBody(TeaModel):
    def __init__(
        self,
        current: str = None,
        list: List[TriggerLogDTOStructBody] = None,
        page_size: str = None,
        total: str = None,
    ):
        self.current = current
        self.list = list
        self.page_size = page_size
        self.total = total

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.current is not None:
            result['Current'] = self.current
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total is not None:
            result['Total'] = self.total
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Current') is not None:
            self.current = m.get('Current')
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = TriggerLogDTOStructBody()
                self.list.append(temp_model.from_map(k))
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('Total') is not None:
            self.total = m.get('Total')
        return self


class TriggerDTOStructBody(TeaModel):
    def __init__(
        self,
        checkpoint: CheckPointStructBody = None,
        create_time: str = None,
        error_message: str = None,
        name: str = None,
        option: str = None,
        pending_error_logs: str = None,
        source: str = None,
        status: str = None,
        type: str = None,
    ):
        self.checkpoint = checkpoint
        self.create_time = create_time
        self.error_message = error_message
        self.name = name
        self.option = option
        self.pending_error_logs = pending_error_logs
        self.source = source
        self.status = status
        self.type = type

    def validate(self):
        if self.checkpoint:
            self.checkpoint.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.checkpoint is not None:
            result['Checkpoint'] = self.checkpoint.to_map()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.name is not None:
            result['Name'] = self.name
        if self.option is not None:
            result['Option'] = self.option
        if self.pending_error_logs is not None:
            result['PendingErrorLogs'] = self.pending_error_logs
        if self.source is not None:
            result['Source'] = self.source
        if self.status is not None:
            result['Status'] = self.status
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Checkpoint') is not None:
            temp_model = CheckPointStructBody()
            self.checkpoint = temp_model.from_map(m['Checkpoint'])
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Option') is not None:
            self.option = m.get('Option')
        if m.get('PendingErrorLogs') is not None:
            self.pending_error_logs = m.get('PendingErrorLogs')
        if m.get('Source') is not None:
            self.source = m.get('Source')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class AcceptEthereumInvitationRequest(TeaModel):
    def __init__(
        self,
        code: str = None,
        token: str = None,
    ):
        # This parameter is required.
        self.code = code
        # This parameter is required.
        self.token = token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.token is not None:
            result['Token'] = self.token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Token') is not None:
            self.token = m.get('Token')
        return self


class AcceptEthereumInvitationResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: str = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class AcceptEthereumInvitationResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: AcceptEthereumInvitationResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AcceptEthereumInvitationResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AcceptInvitationRequest(TeaModel):
    def __init__(
        self,
        code: str = None,
        is_accepted: bool = None,
    ):
        # This parameter is required.
        self.code = code
        self.is_accepted = is_accepted

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.is_accepted is not None:
            result['IsAccepted'] = self.is_accepted
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('IsAccepted') is not None:
            self.is_accepted = m.get('IsAccepted')
        return self


class AcceptInvitationResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class AcceptInvitationResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: AcceptInvitationResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AcceptInvitationResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AddAntChainSubnetMemberCheckRequest(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        consortium_id: str = None,
    ):
        # This parameter is required.
        self.ant_chain_id = ant_chain_id
        # This parameter is required.
        self.consortium_id = consortium_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        return self


class AddAntChainSubnetMemberCheckResponseBodyResultConsortiumMemberInfoList(TeaModel):
    def __init__(
        self,
        member_id: str = None,
        member_name: str = None,
    ):
        self.member_id = member_id
        self.member_name = member_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.member_id is not None:
            result['MemberId'] = self.member_id
        if self.member_name is not None:
            result['MemberName'] = self.member_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('MemberId') is not None:
            self.member_id = m.get('MemberId')
        if m.get('MemberName') is not None:
            self.member_name = m.get('MemberName')
        return self


class AddAntChainSubnetMemberCheckResponseBodyResult(TeaModel):
    def __init__(
        self,
        consortium_member_info_list: List[AddAntChainSubnetMemberCheckResponseBodyResultConsortiumMemberInfoList] = None,
    ):
        self.consortium_member_info_list = consortium_member_info_list

    def validate(self):
        if self.consortium_member_info_list:
            for k in self.consortium_member_info_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['ConsortiumMemberInfoList'] = []
        if self.consortium_member_info_list is not None:
            for k in self.consortium_member_info_list:
                result['ConsortiumMemberInfoList'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.consortium_member_info_list = []
        if m.get('ConsortiumMemberInfoList') is not None:
            for k in m.get('ConsortiumMemberInfoList'):
                temp_model = AddAntChainSubnetMemberCheckResponseBodyResultConsortiumMemberInfoList()
                self.consortium_member_info_list.append(temp_model.from_map(k))
        return self


class AddAntChainSubnetMemberCheckResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: str = None,
        message: str = None,
        request_id: str = None,
        result: AddAntChainSubnetMemberCheckResponseBodyResult = None,
        result_code: str = None,
        result_message: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.result = result
        self.result_code = result_code
        self.result_message = result_message
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = AddAntChainSubnetMemberCheckResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class AddAntChainSubnetMemberCheckResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: AddAntChainSubnetMemberCheckResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AddAntChainSubnetMemberCheckResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AddAntChainSubnetNodeCheckRequest(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        consortium_id: str = None,
    ):
        # This parameter is required.
        self.ant_chain_id = ant_chain_id
        # This parameter is required.
        self.consortium_id = consortium_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        return self


class AddAntChainSubnetNodeCheckResponseBodyResult(TeaModel):
    def __init__(
        self,
        node_id: str = None,
        node_name: str = None,
    ):
        self.node_id = node_id
        self.node_name = node_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.node_id is not None:
            result['NodeId'] = self.node_id
        if self.node_name is not None:
            result['NodeName'] = self.node_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('NodeId') is not None:
            self.node_id = m.get('NodeId')
        if m.get('NodeName') is not None:
            self.node_name = m.get('NodeName')
        return self


class AddAntChainSubnetNodeCheckResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: str = None,
        message: str = None,
        request_id: str = None,
        result: List[AddAntChainSubnetNodeCheckResponseBodyResult] = None,
        result_code: str = None,
        result_message: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.result = result
        self.result_code = result_code
        self.result_message = result_message
        self.success = success

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = AddAntChainSubnetNodeCheckResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class AddAntChainSubnetNodeCheckResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: AddAntChainSubnetNodeCheckResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AddAntChainSubnetNodeCheckResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AddEthereumNodeRequest(TeaModel):
    def __init__(
        self,
        description: str = None,
        ethereum_id: str = None,
        external_node: bool = None,
        node_name: str = None,
    ):
        self.description = description
        # This parameter is required.
        self.ethereum_id = ethereum_id
        self.external_node = external_node
        self.node_name = node_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.ethereum_id is not None:
            result['EthereumId'] = self.ethereum_id
        if self.external_node is not None:
            result['ExternalNode'] = self.external_node
        if self.node_name is not None:
            result['NodeName'] = self.node_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('EthereumId') is not None:
            self.ethereum_id = m.get('EthereumId')
        if m.get('ExternalNode') is not None:
            self.external_node = m.get('ExternalNode')
        if m.get('NodeName') is not None:
            self.node_name = m.get('NodeName')
        return self


class AddEthereumNodeResponseBodyResult(TeaModel):
    def __init__(
        self,
        create_time: int = None,
        creator: str = None,
        description: str = None,
        ethereum_id: str = None,
        ethereum_name: str = None,
        id: str = None,
        network_id: str = None,
        node_name: str = None,
        public_ip: str = None,
        region_id: str = None,
        rpc_port: int = None,
        state: str = None,
        ws_port: int = None,
    ):
        self.create_time = create_time
        self.creator = creator
        self.description = description
        self.ethereum_id = ethereum_id
        self.ethereum_name = ethereum_name
        self.id = id
        self.network_id = network_id
        self.node_name = node_name
        self.public_ip = public_ip
        self.region_id = region_id
        self.rpc_port = rpc_port
        self.state = state
        self.ws_port = ws_port

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.creator is not None:
            result['Creator'] = self.creator
        if self.description is not None:
            result['Description'] = self.description
        if self.ethereum_id is not None:
            result['EthereumId'] = self.ethereum_id
        if self.ethereum_name is not None:
            result['EthereumName'] = self.ethereum_name
        if self.id is not None:
            result['Id'] = self.id
        if self.network_id is not None:
            result['NetworkId'] = self.network_id
        if self.node_name is not None:
            result['NodeName'] = self.node_name
        if self.public_ip is not None:
            result['PublicIp'] = self.public_ip
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.rpc_port is not None:
            result['RpcPort'] = self.rpc_port
        if self.state is not None:
            result['State'] = self.state
        if self.ws_port is not None:
            result['WsPort'] = self.ws_port
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Creator') is not None:
            self.creator = m.get('Creator')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('EthereumId') is not None:
            self.ethereum_id = m.get('EthereumId')
        if m.get('EthereumName') is not None:
            self.ethereum_name = m.get('EthereumName')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('NetworkId') is not None:
            self.network_id = m.get('NetworkId')
        if m.get('NodeName') is not None:
            self.node_name = m.get('NodeName')
        if m.get('PublicIp') is not None:
            self.public_ip = m.get('PublicIp')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('RpcPort') is not None:
            self.rpc_port = m.get('RpcPort')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('WsPort') is not None:
            self.ws_port = m.get('WsPort')
        return self


class AddEthereumNodeResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: AddEthereumNodeResponseBodyResult = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = AddEthereumNodeResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class AddEthereumNodeResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: AddEthereumNodeResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AddEthereumNodeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AddFabricExternalOrganizationToChannelRequest(TeaModel):
    def __init__(
        self,
        channel_id: str = None,
        description: str = None,
        join_request: str = None,
        organization_id: str = None,
    ):
        # This parameter is required.
        self.channel_id = channel_id
        self.description = description
        # This parameter is required.
        self.join_request = join_request
        # This parameter is required.
        self.organization_id = organization_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.description is not None:
            result['Description'] = self.description
        if self.join_request is not None:
            result['JoinRequest'] = self.join_request
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('JoinRequest') is not None:
            self.join_request = m.get('JoinRequest')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        return self


class AddFabricExternalOrganizationToChannelResponseBodyResultContentAddedOrganizationsAnchorPeers(TeaModel):
    def __init__(
        self,
        host: str = None,
        port: int = None,
    ):
        self.host = host
        self.port = port

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.host is not None:
            result['Host'] = self.host
        if self.port is not None:
            result['Port'] = self.port
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Host') is not None:
            self.host = m.get('Host')
        if m.get('Port') is not None:
            self.port = m.get('Port')
        return self


class AddFabricExternalOrganizationToChannelResponseBodyResultContentAddedOrganizationsOrdererNodes(TeaModel):
    def __init__(
        self,
        address: str = None,
        certificate: str = None,
        key: str = None,
        tlsroot: str = None,
    ):
        self.address = address
        self.certificate = certificate
        self.key = key
        self.tlsroot = tlsroot

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.address is not None:
            result['Address'] = self.address
        if self.certificate is not None:
            result['Certificate'] = self.certificate
        if self.key is not None:
            result['Key'] = self.key
        if self.tlsroot is not None:
            result['Tlsroot'] = self.tlsroot
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Address') is not None:
            self.address = m.get('Address')
        if m.get('Certificate') is not None:
            self.certificate = m.get('Certificate')
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Tlsroot') is not None:
            self.tlsroot = m.get('Tlsroot')
        return self


class AddFabricExternalOrganizationToChannelResponseBodyResultContentAddedOrganizations(TeaModel):
    def __init__(
        self,
        anchor_peers: List[AddFabricExternalOrganizationToChannelResponseBodyResultContentAddedOrganizationsAnchorPeers] = None,
        crls: str = None,
        msp_id: str = None,
        msp_type: str = None,
        orderer: bool = None,
        orderer_nodes: List[AddFabricExternalOrganizationToChannelResponseBodyResultContentAddedOrganizationsOrdererNodes] = None,
        root_certificates: str = None,
        tls_root_certificates: str = None,
    ):
        self.anchor_peers = anchor_peers
        self.crls = crls
        self.msp_id = msp_id
        self.msp_type = msp_type
        self.orderer = orderer
        self.orderer_nodes = orderer_nodes
        self.root_certificates = root_certificates
        self.tls_root_certificates = tls_root_certificates

    def validate(self):
        if self.anchor_peers:
            for k in self.anchor_peers:
                if k:
                    k.validate()
        if self.orderer_nodes:
            for k in self.orderer_nodes:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AnchorPeers'] = []
        if self.anchor_peers is not None:
            for k in self.anchor_peers:
                result['AnchorPeers'].append(k.to_map() if k else None)
        if self.crls is not None:
            result['Crls'] = self.crls
        if self.msp_id is not None:
            result['MspId'] = self.msp_id
        if self.msp_type is not None:
            result['MspType'] = self.msp_type
        if self.orderer is not None:
            result['Orderer'] = self.orderer
        result['OrdererNodes'] = []
        if self.orderer_nodes is not None:
            for k in self.orderer_nodes:
                result['OrdererNodes'].append(k.to_map() if k else None)
        if self.root_certificates is not None:
            result['RootCertificates'] = self.root_certificates
        if self.tls_root_certificates is not None:
            result['TlsRootCertificates'] = self.tls_root_certificates
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.anchor_peers = []
        if m.get('AnchorPeers') is not None:
            for k in m.get('AnchorPeers'):
                temp_model = AddFabricExternalOrganizationToChannelResponseBodyResultContentAddedOrganizationsAnchorPeers()
                self.anchor_peers.append(temp_model.from_map(k))
        if m.get('Crls') is not None:
            self.crls = m.get('Crls')
        if m.get('MspId') is not None:
            self.msp_id = m.get('MspId')
        if m.get('MspType') is not None:
            self.msp_type = m.get('MspType')
        if m.get('Orderer') is not None:
            self.orderer = m.get('Orderer')
        self.orderer_nodes = []
        if m.get('OrdererNodes') is not None:
            for k in m.get('OrdererNodes'):
                temp_model = AddFabricExternalOrganizationToChannelResponseBodyResultContentAddedOrganizationsOrdererNodes()
                self.orderer_nodes.append(temp_model.from_map(k))
        if m.get('RootCertificates') is not None:
            self.root_certificates = m.get('RootCertificates')
        if m.get('TlsRootCertificates') is not None:
            self.tls_root_certificates = m.get('TlsRootCertificates')
        return self


class AddFabricExternalOrganizationToChannelResponseBodyResultContentChaincodeSpecPkgCs(TeaModel):
    def __init__(
        self,
        input: str = None,
        name: str = None,
        path: str = None,
        type: int = None,
        version: str = None,
    ):
        self.input = input
        self.name = name
        self.path = path
        self.type = type
        self.version = version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.input is not None:
            result['Input'] = self.input
        if self.name is not None:
            result['Name'] = self.name
        if self.path is not None:
            result['Path'] = self.path
        if self.type is not None:
            result['Type'] = self.type
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Input') is not None:
            self.input = m.get('Input')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Path') is not None:
            self.path = m.get('Path')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class AddFabricExternalOrganizationToChannelResponseBodyResultContentChaincodeSpecPkg(TeaModel):
    def __init__(
        self,
        cs: AddFabricExternalOrganizationToChannelResponseBodyResultContentChaincodeSpecPkgCs = None,
        policy: str = None,
        sha_256: str = None,
    ):
        self.cs = cs
        self.policy = policy
        self.sha_256 = sha_256

    def validate(self):
        if self.cs:
            self.cs.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cs is not None:
            result['Cs'] = self.cs.to_map()
        if self.policy is not None:
            result['Policy'] = self.policy
        if self.sha_256 is not None:
            result['Sha256'] = self.sha_256
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Cs') is not None:
            temp_model = AddFabricExternalOrganizationToChannelResponseBodyResultContentChaincodeSpecPkgCs()
            self.cs = temp_model.from_map(m['Cs'])
        if m.get('Policy') is not None:
            self.policy = m.get('Policy')
        if m.get('Sha256') is not None:
            self.sha_256 = m.get('Sha256')
        return self


class AddFabricExternalOrganizationToChannelResponseBodyResultContentOrdererConfig(TeaModel):
    def __init__(
        self,
        batch_timeout: str = None,
        max_message_count: int = None,
        preferred_max_bytes: int = None,
    ):
        self.batch_timeout = batch_timeout
        self.max_message_count = max_message_count
        self.preferred_max_bytes = preferred_max_bytes

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.batch_timeout is not None:
            result['BatchTimeout'] = self.batch_timeout
        if self.max_message_count is not None:
            result['MaxMessageCount'] = self.max_message_count
        if self.preferred_max_bytes is not None:
            result['PreferredMaxBytes'] = self.preferred_max_bytes
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BatchTimeout') is not None:
            self.batch_timeout = m.get('BatchTimeout')
        if m.get('MaxMessageCount') is not None:
            self.max_message_count = m.get('MaxMessageCount')
        if m.get('PreferredMaxBytes') is not None:
            self.preferred_max_bytes = m.get('PreferredMaxBytes')
        return self


class AddFabricExternalOrganizationToChannelResponseBodyResultContentRemovedOrganizationsAnchorPeers(TeaModel):
    def __init__(
        self,
        host: str = None,
        port: int = None,
    ):
        self.host = host
        self.port = port

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.host is not None:
            result['Host'] = self.host
        if self.port is not None:
            result['Port'] = self.port
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Host') is not None:
            self.host = m.get('Host')
        if m.get('Port') is not None:
            self.port = m.get('Port')
        return self


class AddFabricExternalOrganizationToChannelResponseBodyResultContentRemovedOrganizationsOrdererNodes(TeaModel):
    def __init__(
        self,
        address: str = None,
        certificate: str = None,
        key: str = None,
        tlsroot: str = None,
    ):
        self.address = address
        self.certificate = certificate
        self.key = key
        self.tlsroot = tlsroot

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.address is not None:
            result['Address'] = self.address
        if self.certificate is not None:
            result['Certificate'] = self.certificate
        if self.key is not None:
            result['Key'] = self.key
        if self.tlsroot is not None:
            result['Tlsroot'] = self.tlsroot
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Address') is not None:
            self.address = m.get('Address')
        if m.get('Certificate') is not None:
            self.certificate = m.get('Certificate')
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Tlsroot') is not None:
            self.tlsroot = m.get('Tlsroot')
        return self


class AddFabricExternalOrganizationToChannelResponseBodyResultContentRemovedOrganizations(TeaModel):
    def __init__(
        self,
        anchor_peers: List[AddFabricExternalOrganizationToChannelResponseBodyResultContentRemovedOrganizationsAnchorPeers] = None,
        crls: str = None,
        msp_id: str = None,
        msp_type: str = None,
        orderer: bool = None,
        orderer_nodes: List[AddFabricExternalOrganizationToChannelResponseBodyResultContentRemovedOrganizationsOrdererNodes] = None,
        root_certificates: str = None,
        tls_root_certificates: str = None,
    ):
        self.anchor_peers = anchor_peers
        self.crls = crls
        self.msp_id = msp_id
        self.msp_type = msp_type
        self.orderer = orderer
        self.orderer_nodes = orderer_nodes
        self.root_certificates = root_certificates
        self.tls_root_certificates = tls_root_certificates

    def validate(self):
        if self.anchor_peers:
            for k in self.anchor_peers:
                if k:
                    k.validate()
        if self.orderer_nodes:
            for k in self.orderer_nodes:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AnchorPeers'] = []
        if self.anchor_peers is not None:
            for k in self.anchor_peers:
                result['AnchorPeers'].append(k.to_map() if k else None)
        if self.crls is not None:
            result['Crls'] = self.crls
        if self.msp_id is not None:
            result['MspId'] = self.msp_id
        if self.msp_type is not None:
            result['MspType'] = self.msp_type
        if self.orderer is not None:
            result['Orderer'] = self.orderer
        result['OrdererNodes'] = []
        if self.orderer_nodes is not None:
            for k in self.orderer_nodes:
                result['OrdererNodes'].append(k.to_map() if k else None)
        if self.root_certificates is not None:
            result['RootCertificates'] = self.root_certificates
        if self.tls_root_certificates is not None:
            result['TlsRootCertificates'] = self.tls_root_certificates
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.anchor_peers = []
        if m.get('AnchorPeers') is not None:
            for k in m.get('AnchorPeers'):
                temp_model = AddFabricExternalOrganizationToChannelResponseBodyResultContentRemovedOrganizationsAnchorPeers()
                self.anchor_peers.append(temp_model.from_map(k))
        if m.get('Crls') is not None:
            self.crls = m.get('Crls')
        if m.get('MspId') is not None:
            self.msp_id = m.get('MspId')
        if m.get('MspType') is not None:
            self.msp_type = m.get('MspType')
        if m.get('Orderer') is not None:
            self.orderer = m.get('Orderer')
        self.orderer_nodes = []
        if m.get('OrdererNodes') is not None:
            for k in m.get('OrdererNodes'):
                temp_model = AddFabricExternalOrganizationToChannelResponseBodyResultContentRemovedOrganizationsOrdererNodes()
                self.orderer_nodes.append(temp_model.from_map(k))
        if m.get('RootCertificates') is not None:
            self.root_certificates = m.get('RootCertificates')
        if m.get('TlsRootCertificates') is not None:
            self.tls_root_certificates = m.get('TlsRootCertificates')
        return self


class AddFabricExternalOrganizationToChannelResponseBodyResultContent(TeaModel):
    def __init__(
        self,
        added_organizations: List[AddFabricExternalOrganizationToChannelResponseBodyResultContentAddedOrganizations] = None,
        chaincode_spec_pkg: AddFabricExternalOrganizationToChannelResponseBodyResultContentChaincodeSpecPkg = None,
        orderer_config: AddFabricExternalOrganizationToChannelResponseBodyResultContentOrdererConfig = None,
        raw: str = None,
        removed_organizations: List[AddFabricExternalOrganizationToChannelResponseBodyResultContentRemovedOrganizations] = None,
        rw_sets: str = None,
    ):
        self.added_organizations = added_organizations
        self.chaincode_spec_pkg = chaincode_spec_pkg
        self.orderer_config = orderer_config
        self.raw = raw
        self.removed_organizations = removed_organizations
        self.rw_sets = rw_sets

    def validate(self):
        if self.added_organizations:
            for k in self.added_organizations:
                if k:
                    k.validate()
        if self.chaincode_spec_pkg:
            self.chaincode_spec_pkg.validate()
        if self.orderer_config:
            self.orderer_config.validate()
        if self.removed_organizations:
            for k in self.removed_organizations:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AddedOrganizations'] = []
        if self.added_organizations is not None:
            for k in self.added_organizations:
                result['AddedOrganizations'].append(k.to_map() if k else None)
        if self.chaincode_spec_pkg is not None:
            result['ChaincodeSpecPkg'] = self.chaincode_spec_pkg.to_map()
        if self.orderer_config is not None:
            result['OrdererConfig'] = self.orderer_config.to_map()
        if self.raw is not None:
            result['Raw'] = self.raw
        result['RemovedOrganizations'] = []
        if self.removed_organizations is not None:
            for k in self.removed_organizations:
                result['RemovedOrganizations'].append(k.to_map() if k else None)
        if self.rw_sets is not None:
            result['RwSets'] = self.rw_sets
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.added_organizations = []
        if m.get('AddedOrganizations') is not None:
            for k in m.get('AddedOrganizations'):
                temp_model = AddFabricExternalOrganizationToChannelResponseBodyResultContentAddedOrganizations()
                self.added_organizations.append(temp_model.from_map(k))
        if m.get('ChaincodeSpecPkg') is not None:
            temp_model = AddFabricExternalOrganizationToChannelResponseBodyResultContentChaincodeSpecPkg()
            self.chaincode_spec_pkg = temp_model.from_map(m['ChaincodeSpecPkg'])
        if m.get('OrdererConfig') is not None:
            temp_model = AddFabricExternalOrganizationToChannelResponseBodyResultContentOrdererConfig()
            self.orderer_config = temp_model.from_map(m['OrdererConfig'])
        if m.get('Raw') is not None:
            self.raw = m.get('Raw')
        self.removed_organizations = []
        if m.get('RemovedOrganizations') is not None:
            for k in m.get('RemovedOrganizations'):
                temp_model = AddFabricExternalOrganizationToChannelResponseBodyResultContentRemovedOrganizations()
                self.removed_organizations.append(temp_model.from_map(k))
        if m.get('RwSets') is not None:
            self.rw_sets = m.get('RwSets')
        return self


class AddFabricExternalOrganizationToChannelResponseBodyResult(TeaModel):
    def __init__(
        self,
        content: AddFabricExternalOrganizationToChannelResponseBodyResultContent = None,
        create_time: int = None,
        creator: str = None,
        description: str = None,
        status: str = None,
        task_id: str = None,
        type: str = None,
    ):
        self.content = content
        self.create_time = create_time
        self.creator = creator
        self.description = description
        self.status = status
        self.task_id = task_id
        self.type = type

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['Content'] = self.content.to_map()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.creator is not None:
            result['Creator'] = self.creator
        if self.description is not None:
            result['Description'] = self.description
        if self.status is not None:
            result['Status'] = self.status
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Content') is not None:
            temp_model = AddFabricExternalOrganizationToChannelResponseBodyResultContent()
            self.content = temp_model.from_map(m['Content'])
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Creator') is not None:
            self.creator = m.get('Creator')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class AddFabricExternalOrganizationToChannelResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: AddFabricExternalOrganizationToChannelResponseBodyResult = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = AddFabricExternalOrganizationToChannelResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class AddFabricExternalOrganizationToChannelResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: AddFabricExternalOrganizationToChannelResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AddFabricExternalOrganizationToChannelResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AddFabricOrganizationToExternalChannelRequest(TeaModel):
    def __init__(
        self,
        join_response: str = None,
        organization_id: str = None,
    ):
        # This parameter is required.
        self.join_response = join_response
        # This parameter is required.
        self.organization_id = organization_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.join_response is not None:
            result['JoinResponse'] = self.join_response
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('JoinResponse') is not None:
            self.join_response = m.get('JoinResponse')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        return self


class AddFabricOrganizationToExternalChannelResponseBodyResult(TeaModel):
    def __init__(
        self,
        m: int = None,
        n: int = None,
    ):
        self.m = m
        self.n = n

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.m is not None:
            result['M'] = self.m
        if self.n is not None:
            result['N'] = self.n
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('M') is not None:
            self.m = m.get('M')
        if m.get('N') is not None:
            self.n = m.get('N')
        return self


class AddFabricOrganizationToExternalChannelResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: List[AddFabricOrganizationToExternalChannelResponseBodyResult] = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = AddFabricOrganizationToExternalChannelResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class AddFabricOrganizationToExternalChannelResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: AddFabricOrganizationToExternalChannelResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AddFabricOrganizationToExternalChannelResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ApplyAntChainRequest(TeaModel):
    def __init__(
        self,
        bizid: str = None,
        consortium_id: str = None,
        upload_req: str = None,
    ):
        self.bizid = bizid
        self.consortium_id = consortium_id
        self.upload_req = upload_req

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.upload_req is not None:
            result['UploadReq'] = self.upload_req
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('UploadReq') is not None:
            self.upload_req = m.get('UploadReq')
        return self


class ApplyAntChainResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: str = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class ApplyAntChainResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ApplyAntChainResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ApplyAntChainResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ApplyAntChainCertificateRequest(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        upload_req: str = None,
    ):
        # This parameter is required.
        self.ant_chain_id = ant_chain_id
        # This parameter is required.
        self.upload_req = upload_req

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.upload_req is not None:
            result['UploadReq'] = self.upload_req
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('UploadReq') is not None:
            self.upload_req = m.get('UploadReq')
        return self


class ApplyAntChainCertificateResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: str = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class ApplyAntChainCertificateResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ApplyAntChainCertificateResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ApplyAntChainCertificateResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ApplyAntChainCertificateWithKeyAutoCreationRequest(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        common_name: str = None,
        consortium_id: str = None,
        country_name: str = None,
        locality_name: str = None,
        organization_name: str = None,
        organization_unit_name: str = None,
        password: str = None,
        state_or_province_name: str = None,
    ):
        # This parameter is required.
        self.ant_chain_id = ant_chain_id
        # This parameter is required.
        self.common_name = common_name
        # This parameter is required.
        self.consortium_id = consortium_id
        # This parameter is required.
        self.country_name = country_name
        # This parameter is required.
        self.locality_name = locality_name
        # This parameter is required.
        self.organization_name = organization_name
        # This parameter is required.
        self.organization_unit_name = organization_unit_name
        # This parameter is required.
        self.password = password
        # This parameter is required.
        self.state_or_province_name = state_or_province_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.common_name is not None:
            result['CommonName'] = self.common_name
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.country_name is not None:
            result['CountryName'] = self.country_name
        if self.locality_name is not None:
            result['LocalityName'] = self.locality_name
        if self.organization_name is not None:
            result['OrganizationName'] = self.organization_name
        if self.organization_unit_name is not None:
            result['OrganizationUnitName'] = self.organization_unit_name
        if self.password is not None:
            result['Password'] = self.password
        if self.state_or_province_name is not None:
            result['StateOrProvinceName'] = self.state_or_province_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('CommonName') is not None:
            self.common_name = m.get('CommonName')
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('CountryName') is not None:
            self.country_name = m.get('CountryName')
        if m.get('LocalityName') is not None:
            self.locality_name = m.get('LocalityName')
        if m.get('OrganizationName') is not None:
            self.organization_name = m.get('OrganizationName')
        if m.get('OrganizationUnitName') is not None:
            self.organization_unit_name = m.get('OrganizationUnitName')
        if m.get('Password') is not None:
            self.password = m.get('Password')
        if m.get('StateOrProvinceName') is not None:
            self.state_or_province_name = m.get('StateOrProvinceName')
        return self


class ApplyAntChainCertificateWithKeyAutoCreationResponseBodyResultDownloadPath(TeaModel):
    def __init__(
        self,
        ca_crt_url: str = None,
        client_crt_url: str = None,
        sdk_url: str = None,
        trust_ca_url: str = None,
    ):
        self.ca_crt_url = ca_crt_url
        self.client_crt_url = client_crt_url
        self.sdk_url = sdk_url
        self.trust_ca_url = trust_ca_url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ca_crt_url is not None:
            result['CaCrtUrl'] = self.ca_crt_url
        if self.client_crt_url is not None:
            result['ClientCrtUrl'] = self.client_crt_url
        if self.sdk_url is not None:
            result['SdkUrl'] = self.sdk_url
        if self.trust_ca_url is not None:
            result['TrustCaUrl'] = self.trust_ca_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CaCrtUrl') is not None:
            self.ca_crt_url = m.get('CaCrtUrl')
        if m.get('ClientCrtUrl') is not None:
            self.client_crt_url = m.get('ClientCrtUrl')
        if m.get('SdkUrl') is not None:
            self.sdk_url = m.get('SdkUrl')
        if m.get('TrustCaUrl') is not None:
            self.trust_ca_url = m.get('TrustCaUrl')
        return self


class ApplyAntChainCertificateWithKeyAutoCreationResponseBodyResult(TeaModel):
    def __init__(
        self,
        download_path: ApplyAntChainCertificateWithKeyAutoCreationResponseBodyResultDownloadPath = None,
        private_key: str = None,
    ):
        self.download_path = download_path
        self.private_key = private_key

    def validate(self):
        if self.download_path:
            self.download_path.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.download_path is not None:
            result['DownloadPath'] = self.download_path.to_map()
        if self.private_key is not None:
            result['PrivateKey'] = self.private_key
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DownloadPath') is not None:
            temp_model = ApplyAntChainCertificateWithKeyAutoCreationResponseBodyResultDownloadPath()
            self.download_path = temp_model.from_map(m['DownloadPath'])
        if m.get('PrivateKey') is not None:
            self.private_key = m.get('PrivateKey')
        return self


class ApplyAntChainCertificateWithKeyAutoCreationResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: ApplyAntChainCertificateWithKeyAutoCreationResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = ApplyAntChainCertificateWithKeyAutoCreationResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class ApplyAntChainCertificateWithKeyAutoCreationResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ApplyAntChainCertificateWithKeyAutoCreationResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ApplyAntChainCertificateWithKeyAutoCreationResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ApplyAntChainWithKeyAutoCreationRequest(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        common_name: str = None,
        consortium_id: str = None,
        country_name: str = None,
        locality_name: str = None,
        organization_name: str = None,
        organization_unit_name: str = None,
        password: str = None,
        state_or_province_name: str = None,
    ):
        # This parameter is required.
        self.ant_chain_id = ant_chain_id
        # This parameter is required.
        self.common_name = common_name
        # This parameter is required.
        self.consortium_id = consortium_id
        # This parameter is required.
        self.country_name = country_name
        # This parameter is required.
        self.locality_name = locality_name
        # This parameter is required.
        self.organization_name = organization_name
        # This parameter is required.
        self.organization_unit_name = organization_unit_name
        # This parameter is required.
        self.password = password
        # This parameter is required.
        self.state_or_province_name = state_or_province_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.common_name is not None:
            result['CommonName'] = self.common_name
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.country_name is not None:
            result['CountryName'] = self.country_name
        if self.locality_name is not None:
            result['LocalityName'] = self.locality_name
        if self.organization_name is not None:
            result['OrganizationName'] = self.organization_name
        if self.organization_unit_name is not None:
            result['OrganizationUnitName'] = self.organization_unit_name
        if self.password is not None:
            result['Password'] = self.password
        if self.state_or_province_name is not None:
            result['StateOrProvinceName'] = self.state_or_province_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('CommonName') is not None:
            self.common_name = m.get('CommonName')
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('CountryName') is not None:
            self.country_name = m.get('CountryName')
        if m.get('LocalityName') is not None:
            self.locality_name = m.get('LocalityName')
        if m.get('OrganizationName') is not None:
            self.organization_name = m.get('OrganizationName')
        if m.get('OrganizationUnitName') is not None:
            self.organization_unit_name = m.get('OrganizationUnitName')
        if m.get('Password') is not None:
            self.password = m.get('Password')
        if m.get('StateOrProvinceName') is not None:
            self.state_or_province_name = m.get('StateOrProvinceName')
        return self


class ApplyAntChainWithKeyAutoCreationResponseBodyResultDownloadPath(TeaModel):
    def __init__(
        self,
        ca_crt_url: str = None,
        client_crt_url: str = None,
        sdk_url: str = None,
        trust_ca_url: str = None,
    ):
        self.ca_crt_url = ca_crt_url
        self.client_crt_url = client_crt_url
        self.sdk_url = sdk_url
        self.trust_ca_url = trust_ca_url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ca_crt_url is not None:
            result['CaCrtUrl'] = self.ca_crt_url
        if self.client_crt_url is not None:
            result['ClientCrtUrl'] = self.client_crt_url
        if self.sdk_url is not None:
            result['SdkUrl'] = self.sdk_url
        if self.trust_ca_url is not None:
            result['TrustCaUrl'] = self.trust_ca_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CaCrtUrl') is not None:
            self.ca_crt_url = m.get('CaCrtUrl')
        if m.get('ClientCrtUrl') is not None:
            self.client_crt_url = m.get('ClientCrtUrl')
        if m.get('SdkUrl') is not None:
            self.sdk_url = m.get('SdkUrl')
        if m.get('TrustCaUrl') is not None:
            self.trust_ca_url = m.get('TrustCaUrl')
        return self


class ApplyAntChainWithKeyAutoCreationResponseBodyResult(TeaModel):
    def __init__(
        self,
        download_path: ApplyAntChainWithKeyAutoCreationResponseBodyResultDownloadPath = None,
        private_key: str = None,
    ):
        self.download_path = download_path
        self.private_key = private_key

    def validate(self):
        if self.download_path:
            self.download_path.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.download_path is not None:
            result['DownloadPath'] = self.download_path.to_map()
        if self.private_key is not None:
            result['PrivateKey'] = self.private_key
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DownloadPath') is not None:
            temp_model = ApplyAntChainWithKeyAutoCreationResponseBodyResultDownloadPath()
            self.download_path = temp_model.from_map(m['DownloadPath'])
        if m.get('PrivateKey') is not None:
            self.private_key = m.get('PrivateKey')
        return self


class ApplyAntChainWithKeyAutoCreationResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: ApplyAntChainWithKeyAutoCreationResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = ApplyAntChainWithKeyAutoCreationResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class ApplyAntChainWithKeyAutoCreationResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ApplyAntChainWithKeyAutoCreationResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ApplyAntChainWithKeyAutoCreationResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ApplyBlockchainRequest(TeaModel):
    def __init__(
        self,
        account: str = None,
        account_pub_key: str = None,
        account_recover_pub_key: str = None,
        blockchain: str = None,
        upload_req: str = None,
    ):
        self.account = account
        self.account_pub_key = account_pub_key
        self.account_recover_pub_key = account_recover_pub_key
        self.blockchain = blockchain
        self.upload_req = upload_req

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account is not None:
            result['Account'] = self.account
        if self.account_pub_key is not None:
            result['AccountPubKey'] = self.account_pub_key
        if self.account_recover_pub_key is not None:
            result['AccountRecoverPubKey'] = self.account_recover_pub_key
        if self.blockchain is not None:
            result['Blockchain'] = self.blockchain
        if self.upload_req is not None:
            result['UploadReq'] = self.upload_req
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Account') is not None:
            self.account = m.get('Account')
        if m.get('AccountPubKey') is not None:
            self.account_pub_key = m.get('AccountPubKey')
        if m.get('AccountRecoverPubKey') is not None:
            self.account_recover_pub_key = m.get('AccountRecoverPubKey')
        if m.get('Blockchain') is not None:
            self.blockchain = m.get('Blockchain')
        if m.get('UploadReq') is not None:
            self.upload_req = m.get('UploadReq')
        return self


class ApplyBlockchainResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: str = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class ApplyBlockchainResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ApplyBlockchainResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ApplyBlockchainResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ApplyBlockchainWithKeyAutoCreationRequest(TeaModel):
    def __init__(
        self,
        bizid: str = None,
        common_name: str = None,
        country_name: str = None,
        locality_name: str = None,
        organization_name: str = None,
        organization_unit_name: str = None,
        password: str = None,
        state_or_province_name: str = None,
    ):
        self.bizid = bizid
        self.common_name = common_name
        self.country_name = country_name
        self.locality_name = locality_name
        self.organization_name = organization_name
        self.organization_unit_name = organization_unit_name
        self.password = password
        self.state_or_province_name = state_or_province_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        if self.common_name is not None:
            result['CommonName'] = self.common_name
        if self.country_name is not None:
            result['CountryName'] = self.country_name
        if self.locality_name is not None:
            result['LocalityName'] = self.locality_name
        if self.organization_name is not None:
            result['OrganizationName'] = self.organization_name
        if self.organization_unit_name is not None:
            result['OrganizationUnitName'] = self.organization_unit_name
        if self.password is not None:
            result['Password'] = self.password
        if self.state_or_province_name is not None:
            result['StateOrProvinceName'] = self.state_or_province_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        if m.get('CommonName') is not None:
            self.common_name = m.get('CommonName')
        if m.get('CountryName') is not None:
            self.country_name = m.get('CountryName')
        if m.get('LocalityName') is not None:
            self.locality_name = m.get('LocalityName')
        if m.get('OrganizationName') is not None:
            self.organization_name = m.get('OrganizationName')
        if m.get('OrganizationUnitName') is not None:
            self.organization_unit_name = m.get('OrganizationUnitName')
        if m.get('Password') is not None:
            self.password = m.get('Password')
        if m.get('StateOrProvinceName') is not None:
            self.state_or_province_name = m.get('StateOrProvinceName')
        return self


class ApplyBlockchainWithKeyAutoCreationResponseBodyResultDownloadPath(TeaModel):
    def __init__(
        self,
        bizview_url: str = None,
        cert_url: str = None,
        sdk_url: str = None,
    ):
        self.bizview_url = bizview_url
        self.cert_url = cert_url
        self.sdk_url = sdk_url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizview_url is not None:
            result['BizviewUrl'] = self.bizview_url
        if self.cert_url is not None:
            result['CertUrl'] = self.cert_url
        if self.sdk_url is not None:
            result['SdkUrl'] = self.sdk_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizviewUrl') is not None:
            self.bizview_url = m.get('BizviewUrl')
        if m.get('CertUrl') is not None:
            self.cert_url = m.get('CertUrl')
        if m.get('SdkUrl') is not None:
            self.sdk_url = m.get('SdkUrl')
        return self


class ApplyBlockchainWithKeyAutoCreationResponseBodyResult(TeaModel):
    def __init__(
        self,
        download_path: ApplyBlockchainWithKeyAutoCreationResponseBodyResultDownloadPath = None,
        private_key: str = None,
    ):
        self.download_path = download_path
        self.private_key = private_key

    def validate(self):
        if self.download_path:
            self.download_path.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.download_path is not None:
            result['DownloadPath'] = self.download_path.to_map()
        if self.private_key is not None:
            result['PrivateKey'] = self.private_key
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DownloadPath') is not None:
            temp_model = ApplyBlockchainWithKeyAutoCreationResponseBodyResultDownloadPath()
            self.download_path = temp_model.from_map(m['DownloadPath'])
        if m.get('PrivateKey') is not None:
            self.private_key = m.get('PrivateKey')
        return self


class ApplyBlockchainWithKeyAutoCreationResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: ApplyBlockchainWithKeyAutoCreationResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = ApplyBlockchainWithKeyAutoCreationResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class ApplyBlockchainWithKeyAutoCreationResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ApplyBlockchainWithKeyAutoCreationResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ApplyBlockchainWithKeyAutoCreationResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ApplyPublicAntChainRequest(TeaModel):
    def __init__(
        self,
        bizid: str = None,
        consortium_id: str = None,
        upload_req: str = None,
    ):
        self.bizid = bizid
        self.consortium_id = consortium_id
        self.upload_req = upload_req

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.upload_req is not None:
            result['UploadReq'] = self.upload_req
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('UploadReq') is not None:
            self.upload_req = m.get('UploadReq')
        return self


class ApplyPublicAntChainResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: str = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class ApplyPublicAntChainResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ApplyPublicAntChainResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ApplyPublicAntChainResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ApplyPublicAntChainWithKeyAutoCreationRequest(TeaModel):
    def __init__(
        self,
        bizid: str = None,
        common_name: str = None,
        country_name: str = None,
        locality_name: str = None,
        organization_name: str = None,
        organization_unit_name: str = None,
        password: str = None,
        state_or_province_name: str = None,
    ):
        self.bizid = bizid
        self.common_name = common_name
        self.country_name = country_name
        self.locality_name = locality_name
        self.organization_name = organization_name
        self.organization_unit_name = organization_unit_name
        self.password = password
        self.state_or_province_name = state_or_province_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        if self.common_name is not None:
            result['CommonName'] = self.common_name
        if self.country_name is not None:
            result['CountryName'] = self.country_name
        if self.locality_name is not None:
            result['LocalityName'] = self.locality_name
        if self.organization_name is not None:
            result['OrganizationName'] = self.organization_name
        if self.organization_unit_name is not None:
            result['OrganizationUnitName'] = self.organization_unit_name
        if self.password is not None:
            result['Password'] = self.password
        if self.state_or_province_name is not None:
            result['StateOrProvinceName'] = self.state_or_province_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        if m.get('CommonName') is not None:
            self.common_name = m.get('CommonName')
        if m.get('CountryName') is not None:
            self.country_name = m.get('CountryName')
        if m.get('LocalityName') is not None:
            self.locality_name = m.get('LocalityName')
        if m.get('OrganizationName') is not None:
            self.organization_name = m.get('OrganizationName')
        if m.get('OrganizationUnitName') is not None:
            self.organization_unit_name = m.get('OrganizationUnitName')
        if m.get('Password') is not None:
            self.password = m.get('Password')
        if m.get('StateOrProvinceName') is not None:
            self.state_or_province_name = m.get('StateOrProvinceName')
        return self


class ApplyPublicAntChainWithKeyAutoCreationResponseBodyResultDownloadPath(TeaModel):
    def __init__(
        self,
        ca_crt_url: str = None,
        client_crt_url: str = None,
        sdk_url: str = None,
        trust_ca_url: str = None,
    ):
        self.ca_crt_url = ca_crt_url
        self.client_crt_url = client_crt_url
        self.sdk_url = sdk_url
        self.trust_ca_url = trust_ca_url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ca_crt_url is not None:
            result['CaCrtUrl'] = self.ca_crt_url
        if self.client_crt_url is not None:
            result['ClientCrtUrl'] = self.client_crt_url
        if self.sdk_url is not None:
            result['SdkUrl'] = self.sdk_url
        if self.trust_ca_url is not None:
            result['TrustCaUrl'] = self.trust_ca_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CaCrtUrl') is not None:
            self.ca_crt_url = m.get('CaCrtUrl')
        if m.get('ClientCrtUrl') is not None:
            self.client_crt_url = m.get('ClientCrtUrl')
        if m.get('SdkUrl') is not None:
            self.sdk_url = m.get('SdkUrl')
        if m.get('TrustCaUrl') is not None:
            self.trust_ca_url = m.get('TrustCaUrl')
        return self


class ApplyPublicAntChainWithKeyAutoCreationResponseBodyResult(TeaModel):
    def __init__(
        self,
        download_path: ApplyPublicAntChainWithKeyAutoCreationResponseBodyResultDownloadPath = None,
        private_key: str = None,
    ):
        self.download_path = download_path
        self.private_key = private_key

    def validate(self):
        if self.download_path:
            self.download_path.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.download_path is not None:
            result['DownloadPath'] = self.download_path.to_map()
        if self.private_key is not None:
            result['PrivateKey'] = self.private_key
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DownloadPath') is not None:
            temp_model = ApplyPublicAntChainWithKeyAutoCreationResponseBodyResultDownloadPath()
            self.download_path = temp_model.from_map(m['DownloadPath'])
        if m.get('PrivateKey') is not None:
            self.private_key = m.get('PrivateKey')
        return self


class ApplyPublicAntChainWithKeyAutoCreationResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: ApplyPublicAntChainWithKeyAutoCreationResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = ApplyPublicAntChainWithKeyAutoCreationResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class ApplyPublicAntChainWithKeyAutoCreationResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ApplyPublicAntChainWithKeyAutoCreationResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ApplyPublicAntChainWithKeyAutoCreationResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ApproveEthereumInviteeRequestInvitee(TeaModel):
    def __init__(
        self,
        id: str = None,
    ):
        self.id = id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        return self


class ApproveEthereumInviteeRequest(TeaModel):
    def __init__(
        self,
        id: str = None,
        invitee: List[ApproveEthereumInviteeRequestInvitee] = None,
    ):
        # This parameter is required.
        self.id = id
        # This parameter is required.
        self.invitee = invitee

    def validate(self):
        if self.invitee:
            for k in self.invitee:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        result['Invitee'] = []
        if self.invitee is not None:
            for k in self.invitee:
                result['Invitee'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        self.invitee = []
        if m.get('Invitee') is not None:
            for k in m.get('Invitee'):
                temp_model = ApproveEthereumInviteeRequestInvitee()
                self.invitee.append(temp_model.from_map(k))
        return self


class ApproveEthereumInviteeResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: str = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ApproveEthereumInviteeResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ApproveEthereumInviteeResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ApproveEthereumInviteeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ApproveFabricChaincodeDefinitionRequest(TeaModel):
    def __init__(
        self,
        chaincode_id: str = None,
        chaincode_package_id: str = None,
        location: str = None,
        organization_id: str = None,
    ):
        self.chaincode_id = chaincode_id
        self.chaincode_package_id = chaincode_package_id
        self.location = location
        # This parameter is required.
        self.organization_id = organization_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.chaincode_id is not None:
            result['ChaincodeId'] = self.chaincode_id
        if self.chaincode_package_id is not None:
            result['ChaincodePackageId'] = self.chaincode_package_id
        if self.location is not None:
            result['Location'] = self.location
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChaincodeId') is not None:
            self.chaincode_id = m.get('ChaincodeId')
        if m.get('ChaincodePackageId') is not None:
            self.chaincode_package_id = m.get('ChaincodePackageId')
        if m.get('Location') is not None:
            self.location = m.get('Location')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        return self


class ApproveFabricChaincodeDefinitionResponseBodyResult(TeaModel):
    def __init__(
        self,
        chaincode_id: str = None,
        channel_name: str = None,
        consortium_id: str = None,
        create_time: str = None,
        deploy_time: str = None,
        endorse_policy: str = None,
        input: str = None,
        install: bool = None,
        message: str = None,
        name: str = None,
        path: str = None,
        provider_id: str = None,
        provider_name: str = None,
        state: str = None,
        type: int = None,
        version: str = None,
    ):
        self.chaincode_id = chaincode_id
        self.channel_name = channel_name
        self.consortium_id = consortium_id
        self.create_time = create_time
        self.deploy_time = deploy_time
        self.endorse_policy = endorse_policy
        self.input = input
        self.install = install
        self.message = message
        self.name = name
        self.path = path
        self.provider_id = provider_id
        self.provider_name = provider_name
        self.state = state
        self.type = type
        self.version = version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.chaincode_id is not None:
            result['ChaincodeId'] = self.chaincode_id
        if self.channel_name is not None:
            result['ChannelName'] = self.channel_name
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.deploy_time is not None:
            result['DeployTime'] = self.deploy_time
        if self.endorse_policy is not None:
            result['EndorsePolicy'] = self.endorse_policy
        if self.input is not None:
            result['Input'] = self.input
        if self.install is not None:
            result['Install'] = self.install
        if self.message is not None:
            result['Message'] = self.message
        if self.name is not None:
            result['Name'] = self.name
        if self.path is not None:
            result['Path'] = self.path
        if self.provider_id is not None:
            result['ProviderId'] = self.provider_id
        if self.provider_name is not None:
            result['ProviderName'] = self.provider_name
        if self.state is not None:
            result['State'] = self.state
        if self.type is not None:
            result['Type'] = self.type
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChaincodeId') is not None:
            self.chaincode_id = m.get('ChaincodeId')
        if m.get('ChannelName') is not None:
            self.channel_name = m.get('ChannelName')
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('DeployTime') is not None:
            self.deploy_time = m.get('DeployTime')
        if m.get('EndorsePolicy') is not None:
            self.endorse_policy = m.get('EndorsePolicy')
        if m.get('Input') is not None:
            self.input = m.get('Input')
        if m.get('Install') is not None:
            self.install = m.get('Install')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Path') is not None:
            self.path = m.get('Path')
        if m.get('ProviderId') is not None:
            self.provider_id = m.get('ProviderId')
        if m.get('ProviderName') is not None:
            self.provider_name = m.get('ProviderName')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class ApproveFabricChaincodeDefinitionResponseBody(TeaModel):
    def __init__(
        self,
        chaincode_definition_id: str = None,
        chaincode_package_id: str = None,
        error_code: int = None,
        init_required: bool = None,
        request_id: str = None,
        result: ApproveFabricChaincodeDefinitionResponseBodyResult = None,
        success: bool = None,
    ):
        self.chaincode_definition_id = chaincode_definition_id
        self.chaincode_package_id = chaincode_package_id
        self.error_code = error_code
        self.init_required = init_required
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.chaincode_definition_id is not None:
            result['ChaincodeDefinitionId'] = self.chaincode_definition_id
        if self.chaincode_package_id is not None:
            result['ChaincodePackageId'] = self.chaincode_package_id
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.init_required is not None:
            result['InitRequired'] = self.init_required
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChaincodeDefinitionId') is not None:
            self.chaincode_definition_id = m.get('ChaincodeDefinitionId')
        if m.get('ChaincodePackageId') is not None:
            self.chaincode_package_id = m.get('ChaincodePackageId')
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('InitRequired') is not None:
            self.init_required = m.get('InitRequired')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = ApproveFabricChaincodeDefinitionResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ApproveFabricChaincodeDefinitionResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ApproveFabricChaincodeDefinitionResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ApproveFabricChaincodeDefinitionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class BatchAddAntChainMiniAppQRCodeAuthorizedUsersRequest(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        phone_list: Dict[str, Any] = None,
    ):
        # This parameter is required.
        self.ant_chain_id = ant_chain_id
        # This parameter is required.
        self.phone_list = phone_list

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.phone_list is not None:
            result['PhoneList'] = self.phone_list
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('PhoneList') is not None:
            self.phone_list = m.get('PhoneList')
        return self


class BatchAddAntChainMiniAppQRCodeAuthorizedUsersShrinkRequest(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        phone_list_shrink: str = None,
    ):
        # This parameter is required.
        self.ant_chain_id = ant_chain_id
        # This parameter is required.
        self.phone_list_shrink = phone_list_shrink

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.phone_list_shrink is not None:
            result['PhoneList'] = self.phone_list_shrink
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('PhoneList') is not None:
            self.phone_list_shrink = m.get('PhoneList')
        return self


class BatchAddAntChainMiniAppQRCodeAuthorizedUsersResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: str = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class BatchAddAntChainMiniAppQRCodeAuthorizedUsersResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: BatchAddAntChainMiniAppQRCodeAuthorizedUsersResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = BatchAddAntChainMiniAppQRCodeAuthorizedUsersResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class BindFabricManagementChaincodeRequest(TeaModel):
    def __init__(
        self,
        chaincode_id: str = None,
        channel_id: str = None,
        organization_id: str = None,
    ):
        # This parameter is required.
        self.chaincode_id = chaincode_id
        # This parameter is required.
        self.channel_id = channel_id
        # This parameter is required.
        self.organization_id = organization_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.chaincode_id is not None:
            result['ChaincodeId'] = self.chaincode_id
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChaincodeId') is not None:
            self.chaincode_id = m.get('ChaincodeId')
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        return self


class BindFabricManagementChaincodeResponseBodyResult(TeaModel):
    def __init__(
        self,
        input: str = None,
        name: str = None,
        path: int = None,
        type: int = None,
        version: str = None,
    ):
        self.input = input
        self.name = name
        self.path = path
        self.type = type
        self.version = version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.input is not None:
            result['Input'] = self.input
        if self.name is not None:
            result['Name'] = self.name
        if self.path is not None:
            result['Path'] = self.path
        if self.type is not None:
            result['Type'] = self.type
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Input') is not None:
            self.input = m.get('Input')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Path') is not None:
            self.path = m.get('Path')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class BindFabricManagementChaincodeResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: BindFabricManagementChaincodeResponseBodyResult = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = BindFabricManagementChaincodeResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class BindFabricManagementChaincodeResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: BindFabricManagementChaincodeResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = BindFabricManagementChaincodeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CheckConsortiumDomainRequest(TeaModel):
    def __init__(
        self,
        domain_code: str = None,
    ):
        # This parameter is required.
        self.domain_code = domain_code

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.domain_code is not None:
            result['DomainCode'] = self.domain_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DomainCode') is not None:
            self.domain_code = m.get('DomainCode')
        return self


class CheckConsortiumDomainResponseBodyResult(TeaModel):
    def __init__(
        self,
        domain: str = None,
        prompt: str = None,
        valid: bool = None,
    ):
        self.domain = domain
        self.prompt = prompt
        self.valid = valid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.domain is not None:
            result['Domain'] = self.domain
        if self.prompt is not None:
            result['Prompt'] = self.prompt
        if self.valid is not None:
            result['Valid'] = self.valid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Domain') is not None:
            self.domain = m.get('Domain')
        if m.get('Prompt') is not None:
            self.prompt = m.get('Prompt')
        if m.get('Valid') is not None:
            self.valid = m.get('Valid')
        return self


class CheckConsortiumDomainResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: CheckConsortiumDomainResponseBodyResult = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = CheckConsortiumDomainResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CheckConsortiumDomainResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CheckConsortiumDomainResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CheckConsortiumDomainResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CheckOrganizationDomainRequest(TeaModel):
    def __init__(
        self,
        domain: str = None,
        domain_code: str = None,
    ):
        self.domain = domain
        self.domain_code = domain_code

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.domain is not None:
            result['Domain'] = self.domain
        if self.domain_code is not None:
            result['DomainCode'] = self.domain_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Domain') is not None:
            self.domain = m.get('Domain')
        if m.get('DomainCode') is not None:
            self.domain_code = m.get('DomainCode')
        return self


class CheckOrganizationDomainResponseBodyResult(TeaModel):
    def __init__(
        self,
        domain: str = None,
        prompt: str = None,
        valid: bool = None,
    ):
        self.domain = domain
        self.prompt = prompt
        self.valid = valid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.domain is not None:
            result['Domain'] = self.domain
        if self.prompt is not None:
            result['Prompt'] = self.prompt
        if self.valid is not None:
            result['Valid'] = self.valid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Domain') is not None:
            self.domain = m.get('Domain')
        if m.get('Prompt') is not None:
            self.prompt = m.get('Prompt')
        if m.get('Valid') is not None:
            self.valid = m.get('Valid')
        return self


class CheckOrganizationDomainResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: CheckOrganizationDomainResponseBodyResult = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = CheckOrganizationDomainResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CheckOrganizationDomainResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CheckOrganizationDomainResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CheckOrganizationDomainResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ConfirmConsortiumMemberRequestOrganization(TeaModel):
    def __init__(
        self,
        id: str = None,
    ):
        self.id = id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        return self


class ConfirmConsortiumMemberRequest(TeaModel):
    def __init__(
        self,
        consortium_id: str = None,
        organization: List[ConfirmConsortiumMemberRequestOrganization] = None,
    ):
        # This parameter is required.
        self.consortium_id = consortium_id
        # This parameter is required.
        self.organization = organization

    def validate(self):
        if self.organization:
            for k in self.organization:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        result['Organization'] = []
        if self.organization is not None:
            for k in self.organization:
                result['Organization'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        self.organization = []
        if m.get('Organization') is not None:
            for k in m.get('Organization'):
                temp_model = ConfirmConsortiumMemberRequestOrganization()
                self.organization.append(temp_model.from_map(k))
        return self


class ConfirmConsortiumMemberResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: bool = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ConfirmConsortiumMemberResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ConfirmConsortiumMemberResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ConfirmConsortiumMemberResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CopyAntChainContractProjectRequest(TeaModel):
    def __init__(
        self,
        project_description: str = None,
        project_id: str = None,
        project_name: str = None,
        project_version: str = None,
    ):
        self.project_description = project_description
        # This parameter is required.
        self.project_id = project_id
        # This parameter is required.
        self.project_name = project_name
        # This parameter is required.
        self.project_version = project_version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.project_description is not None:
            result['ProjectDescription'] = self.project_description
        if self.project_id is not None:
            result['ProjectId'] = self.project_id
        if self.project_name is not None:
            result['ProjectName'] = self.project_name
        if self.project_version is not None:
            result['ProjectVersion'] = self.project_version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ProjectDescription') is not None:
            self.project_description = m.get('ProjectDescription')
        if m.get('ProjectId') is not None:
            self.project_id = m.get('ProjectId')
        if m.get('ProjectName') is not None:
            self.project_name = m.get('ProjectName')
        if m.get('ProjectVersion') is not None:
            self.project_version = m.get('ProjectVersion')
        return self


class CopyAntChainContractProjectResponseBodyResult(TeaModel):
    def __init__(
        self,
        consortium_id: str = None,
        create_time: int = None,
        project_description: str = None,
        project_id: str = None,
        project_name: str = None,
        project_version: str = None,
        update_time: int = None,
    ):
        self.consortium_id = consortium_id
        self.create_time = create_time
        self.project_description = project_description
        self.project_id = project_id
        self.project_name = project_name
        self.project_version = project_version
        self.update_time = update_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.project_description is not None:
            result['ProjectDescription'] = self.project_description
        if self.project_id is not None:
            result['ProjectId'] = self.project_id
        if self.project_name is not None:
            result['ProjectName'] = self.project_name
        if self.project_version is not None:
            result['ProjectVersion'] = self.project_version
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('ProjectDescription') is not None:
            self.project_description = m.get('ProjectDescription')
        if m.get('ProjectId') is not None:
            self.project_id = m.get('ProjectId')
        if m.get('ProjectName') is not None:
            self.project_name = m.get('ProjectName')
        if m.get('ProjectVersion') is not None:
            self.project_version = m.get('ProjectVersion')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        return self


class CopyAntChainContractProjectResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: CopyAntChainContractProjectResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = CopyAntChainContractProjectResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class CopyAntChainContractProjectResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CopyAntChainContractProjectResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CopyAntChainContractProjectResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateAccessTokenRequest(TeaModel):
    def __init__(
        self,
        access_token_lifetime: str = None,
        organization_id: str = None,
        refresh_token_lifetime: str = None,
        scope: str = None,
    ):
        # This parameter is required.
        self.access_token_lifetime = access_token_lifetime
        # This parameter is required.
        self.organization_id = organization_id
        # This parameter is required.
        self.refresh_token_lifetime = refresh_token_lifetime
        # This parameter is required.
        self.scope = scope

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.access_token_lifetime is not None:
            result['AccessTokenLifetime'] = self.access_token_lifetime
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        if self.refresh_token_lifetime is not None:
            result['RefreshTokenLifetime'] = self.refresh_token_lifetime
        if self.scope is not None:
            result['Scope'] = self.scope
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccessTokenLifetime') is not None:
            self.access_token_lifetime = m.get('AccessTokenLifetime')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        if m.get('RefreshTokenLifetime') is not None:
            self.refresh_token_lifetime = m.get('RefreshTokenLifetime')
        if m.get('Scope') is not None:
            self.scope = m.get('Scope')
        return self


class CreateAccessTokenResponseBodyResult(TeaModel):
    def __init__(
        self,
        access_token: str = None,
        expires_in: int = None,
        refresh_token: str = None,
        token_type: str = None,
    ):
        self.access_token = access_token
        self.expires_in = expires_in
        self.refresh_token = refresh_token
        self.token_type = token_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.access_token is not None:
            result['AccessToken'] = self.access_token
        if self.expires_in is not None:
            result['ExpiresIn'] = self.expires_in
        if self.refresh_token is not None:
            result['RefreshToken'] = self.refresh_token
        if self.token_type is not None:
            result['TokenType'] = self.token_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccessToken') is not None:
            self.access_token = m.get('AccessToken')
        if m.get('ExpiresIn') is not None:
            self.expires_in = m.get('ExpiresIn')
        if m.get('RefreshToken') is not None:
            self.refresh_token = m.get('RefreshToken')
        if m.get('TokenType') is not None:
            self.token_type = m.get('TokenType')
        return self


class CreateAccessTokenResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: CreateAccessTokenResponseBodyResult = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = CreateAccessTokenResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateAccessTokenResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateAccessTokenResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateAccessTokenResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateAccountRequest(TeaModel):
    def __init__(
        self,
        account: str = None,
        account_pub_key: str = None,
        account_recover_pub_key: str = None,
        bizid: str = None,
    ):
        self.account = account
        self.account_pub_key = account_pub_key
        self.account_recover_pub_key = account_recover_pub_key
        self.bizid = bizid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account is not None:
            result['Account'] = self.account
        if self.account_pub_key is not None:
            result['AccountPubKey'] = self.account_pub_key
        if self.account_recover_pub_key is not None:
            result['AccountRecoverPubKey'] = self.account_recover_pub_key
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Account') is not None:
            self.account = m.get('Account')
        if m.get('AccountPubKey') is not None:
            self.account_pub_key = m.get('AccountPubKey')
        if m.get('AccountRecoverPubKey') is not None:
            self.account_recover_pub_key = m.get('AccountRecoverPubKey')
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        return self


class CreateAccountResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: str = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class CreateAccountResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateAccountResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateAccountResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateAccountWithKeyPairAutoCreationRequest(TeaModel):
    def __init__(
        self,
        account: str = None,
        bizid: str = None,
        password: str = None,
    ):
        self.account = account
        self.bizid = bizid
        self.password = password

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account is not None:
            result['Account'] = self.account
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        if self.password is not None:
            result['Password'] = self.password
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Account') is not None:
            self.account = m.get('Account')
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        if m.get('Password') is not None:
            self.password = m.get('Password')
        return self


class CreateAccountWithKeyPairAutoCreationResponseBodyResult(TeaModel):
    def __init__(
        self,
        account_private_key: str = None,
        account_public_key: str = None,
        account_recover_private_key: str = None,
        account_recover_public_key: str = None,
    ):
        self.account_private_key = account_private_key
        self.account_public_key = account_public_key
        self.account_recover_private_key = account_recover_private_key
        self.account_recover_public_key = account_recover_public_key

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_private_key is not None:
            result['AccountPrivateKey'] = self.account_private_key
        if self.account_public_key is not None:
            result['AccountPublicKey'] = self.account_public_key
        if self.account_recover_private_key is not None:
            result['AccountRecoverPrivateKey'] = self.account_recover_private_key
        if self.account_recover_public_key is not None:
            result['AccountRecoverPublicKey'] = self.account_recover_public_key
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccountPrivateKey') is not None:
            self.account_private_key = m.get('AccountPrivateKey')
        if m.get('AccountPublicKey') is not None:
            self.account_public_key = m.get('AccountPublicKey')
        if m.get('AccountRecoverPrivateKey') is not None:
            self.account_recover_private_key = m.get('AccountRecoverPrivateKey')
        if m.get('AccountRecoverPublicKey') is not None:
            self.account_recover_public_key = m.get('AccountRecoverPublicKey')
        return self


class CreateAccountWithKeyPairAutoCreationResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: CreateAccountWithKeyPairAutoCreationResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = CreateAccountWithKeyPairAutoCreationResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class CreateAccountWithKeyPairAutoCreationResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateAccountWithKeyPairAutoCreationResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateAccountWithKeyPairAutoCreationResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateAntChainRequest(TeaModel):
    def __init__(
        self,
        ant_chain_name: str = None,
        blockchain_region_id: str = None,
        cipher_suit: str = None,
        consortium_id: str = None,
        live_time: int = None,
        merkle_tree_suit: str = None,
        node_num: int = None,
        resource_size: int = None,
        tls_algo: str = None,
    ):
        # This parameter is required.
        self.ant_chain_name = ant_chain_name
        # This parameter is required.
        self.blockchain_region_id = blockchain_region_id
        # This parameter is required.
        self.cipher_suit = cipher_suit
        # This parameter is required.
        self.consortium_id = consortium_id
        # This parameter is required.
        self.live_time = live_time
        # This parameter is required.
        self.merkle_tree_suit = merkle_tree_suit
        # This parameter is required.
        self.node_num = node_num
        # This parameter is required.
        self.resource_size = resource_size
        # This parameter is required.
        self.tls_algo = tls_algo

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_name is not None:
            result['AntChainName'] = self.ant_chain_name
        if self.blockchain_region_id is not None:
            result['BlockchainRegionId'] = self.blockchain_region_id
        if self.cipher_suit is not None:
            result['CipherSuit'] = self.cipher_suit
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.live_time is not None:
            result['LiveTime'] = self.live_time
        if self.merkle_tree_suit is not None:
            result['MerkleTreeSuit'] = self.merkle_tree_suit
        if self.node_num is not None:
            result['NodeNum'] = self.node_num
        if self.resource_size is not None:
            result['ResourceSize'] = self.resource_size
        if self.tls_algo is not None:
            result['TlsAlgo'] = self.tls_algo
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainName') is not None:
            self.ant_chain_name = m.get('AntChainName')
        if m.get('BlockchainRegionId') is not None:
            self.blockchain_region_id = m.get('BlockchainRegionId')
        if m.get('CipherSuit') is not None:
            self.cipher_suit = m.get('CipherSuit')
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('LiveTime') is not None:
            self.live_time = m.get('LiveTime')
        if m.get('MerkleTreeSuit') is not None:
            self.merkle_tree_suit = m.get('MerkleTreeSuit')
        if m.get('NodeNum') is not None:
            self.node_num = m.get('NodeNum')
        if m.get('ResourceSize') is not None:
            self.resource_size = m.get('ResourceSize')
        if m.get('TlsAlgo') is not None:
            self.tls_algo = m.get('TlsAlgo')
        return self


class CreateAntChainResponseBodyResult(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
    ):
        self.ant_chain_id = ant_chain_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        return self


class CreateAntChainResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: CreateAntChainResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = CreateAntChainResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class CreateAntChainResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateAntChainResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateAntChainResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateAntChainAccountRequest(TeaModel):
    def __init__(
        self,
        account: str = None,
        account_pub_key: str = None,
        account_recover_pub_key: str = None,
        ant_chain_id: str = None,
    ):
        self.account = account
        self.account_pub_key = account_pub_key
        self.account_recover_pub_key = account_recover_pub_key
        self.ant_chain_id = ant_chain_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account is not None:
            result['Account'] = self.account
        if self.account_pub_key is not None:
            result['AccountPubKey'] = self.account_pub_key
        if self.account_recover_pub_key is not None:
            result['AccountRecoverPubKey'] = self.account_recover_pub_key
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Account') is not None:
            self.account = m.get('Account')
        if m.get('AccountPubKey') is not None:
            self.account_pub_key = m.get('AccountPubKey')
        if m.get('AccountRecoverPubKey') is not None:
            self.account_recover_pub_key = m.get('AccountRecoverPubKey')
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        return self


class CreateAntChainAccountResponseBodyResult(TeaModel):
    def __init__(
        self,
        account: str = None,
        ant_chain_id: str = None,
    ):
        self.account = account
        self.ant_chain_id = ant_chain_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account is not None:
            result['Account'] = self.account
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Account') is not None:
            self.account = m.get('Account')
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        return self


class CreateAntChainAccountResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: CreateAntChainAccountResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = CreateAntChainAccountResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class CreateAntChainAccountResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateAntChainAccountResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateAntChainAccountResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateAntChainAccountWithKeyPairAutoCreationRequest(TeaModel):
    def __init__(
        self,
        account: str = None,
        ant_chain_id: str = None,
        password: str = None,
        recover_password: str = None,
    ):
        self.account = account
        self.ant_chain_id = ant_chain_id
        self.password = password
        self.recover_password = recover_password

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account is not None:
            result['Account'] = self.account
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.password is not None:
            result['Password'] = self.password
        if self.recover_password is not None:
            result['RecoverPassword'] = self.recover_password
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Account') is not None:
            self.account = m.get('Account')
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('Password') is not None:
            self.password = m.get('Password')
        if m.get('RecoverPassword') is not None:
            self.recover_password = m.get('RecoverPassword')
        return self


class CreateAntChainAccountWithKeyPairAutoCreationResponseBodyResult(TeaModel):
    def __init__(
        self,
        account: str = None,
        account_private_key: str = None,
        account_public_key: str = None,
        account_recover_private_key: str = None,
        account_recover_public_key: str = None,
        ant_chain_id: str = None,
    ):
        self.account = account
        self.account_private_key = account_private_key
        self.account_public_key = account_public_key
        self.account_recover_private_key = account_recover_private_key
        self.account_recover_public_key = account_recover_public_key
        self.ant_chain_id = ant_chain_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account is not None:
            result['Account'] = self.account
        if self.account_private_key is not None:
            result['AccountPrivateKey'] = self.account_private_key
        if self.account_public_key is not None:
            result['AccountPublicKey'] = self.account_public_key
        if self.account_recover_private_key is not None:
            result['AccountRecoverPrivateKey'] = self.account_recover_private_key
        if self.account_recover_public_key is not None:
            result['AccountRecoverPublicKey'] = self.account_recover_public_key
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Account') is not None:
            self.account = m.get('Account')
        if m.get('AccountPrivateKey') is not None:
            self.account_private_key = m.get('AccountPrivateKey')
        if m.get('AccountPublicKey') is not None:
            self.account_public_key = m.get('AccountPublicKey')
        if m.get('AccountRecoverPrivateKey') is not None:
            self.account_recover_private_key = m.get('AccountRecoverPrivateKey')
        if m.get('AccountRecoverPublicKey') is not None:
            self.account_recover_public_key = m.get('AccountRecoverPublicKey')
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        return self


class CreateAntChainAccountWithKeyPairAutoCreationResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: CreateAntChainAccountWithKeyPairAutoCreationResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = CreateAntChainAccountWithKeyPairAutoCreationResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class CreateAntChainAccountWithKeyPairAutoCreationResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateAntChainAccountWithKeyPairAutoCreationResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateAntChainAccountWithKeyPairAutoCreationResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateAntChainConsortiumRequest(TeaModel):
    def __init__(
        self,
        consortium_description: str = None,
        consortium_name: str = None,
    ):
        self.consortium_description = consortium_description
        # This parameter is required.
        self.consortium_name = consortium_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.consortium_description is not None:
            result['ConsortiumDescription'] = self.consortium_description
        if self.consortium_name is not None:
            result['ConsortiumName'] = self.consortium_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ConsortiumDescription') is not None:
            self.consortium_description = m.get('ConsortiumDescription')
        if m.get('ConsortiumName') is not None:
            self.consortium_name = m.get('ConsortiumName')
        return self


class CreateAntChainConsortiumResponseBodyResult(TeaModel):
    def __init__(
        self,
        consortium_id: str = None,
    ):
        self.consortium_id = consortium_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        return self


class CreateAntChainConsortiumResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: CreateAntChainConsortiumResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = CreateAntChainConsortiumResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class CreateAntChainConsortiumResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateAntChainConsortiumResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateAntChainConsortiumResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateAntChainContractContentRequest(TeaModel):
    def __init__(
        self,
        content: str = None,
        content_name: str = None,
        is_directory: bool = None,
        parent_content_id: str = None,
        project_id: str = None,
    ):
        self.content = content
        # This parameter is required.
        self.content_name = content_name
        # This parameter is required.
        self.is_directory = is_directory
        self.parent_content_id = parent_content_id
        # This parameter is required.
        self.project_id = project_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['Content'] = self.content
        if self.content_name is not None:
            result['ContentName'] = self.content_name
        if self.is_directory is not None:
            result['IsDirectory'] = self.is_directory
        if self.parent_content_id is not None:
            result['ParentContentId'] = self.parent_content_id
        if self.project_id is not None:
            result['ProjectId'] = self.project_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('ContentName') is not None:
            self.content_name = m.get('ContentName')
        if m.get('IsDirectory') is not None:
            self.is_directory = m.get('IsDirectory')
        if m.get('ParentContentId') is not None:
            self.parent_content_id = m.get('ParentContentId')
        if m.get('ProjectId') is not None:
            self.project_id = m.get('ProjectId')
        return self


class CreateAntChainContractContentResponseBodyResult(TeaModel):
    def __init__(
        self,
        content: str = None,
        content_id: str = None,
        content_name: str = None,
        create_time: str = None,
        is_directory: bool = None,
        parent_content_id: str = None,
        project_id: str = None,
        update_time: str = None,
    ):
        self.content = content
        self.content_id = content_id
        self.content_name = content_name
        self.create_time = create_time
        self.is_directory = is_directory
        self.parent_content_id = parent_content_id
        self.project_id = project_id
        self.update_time = update_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['Content'] = self.content
        if self.content_id is not None:
            result['ContentId'] = self.content_id
        if self.content_name is not None:
            result['ContentName'] = self.content_name
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.is_directory is not None:
            result['IsDirectory'] = self.is_directory
        if self.parent_content_id is not None:
            result['ParentContentId'] = self.parent_content_id
        if self.project_id is not None:
            result['ProjectId'] = self.project_id
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('ContentId') is not None:
            self.content_id = m.get('ContentId')
        if m.get('ContentName') is not None:
            self.content_name = m.get('ContentName')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('IsDirectory') is not None:
            self.is_directory = m.get('IsDirectory')
        if m.get('ParentContentId') is not None:
            self.parent_content_id = m.get('ParentContentId')
        if m.get('ProjectId') is not None:
            self.project_id = m.get('ProjectId')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        return self


class CreateAntChainContractContentResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: CreateAntChainContractContentResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = CreateAntChainContractContentResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class CreateAntChainContractContentResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateAntChainContractContentResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateAntChainContractContentResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateAntChainContractProjectRequest(TeaModel):
    def __init__(
        self,
        consortium_id: str = None,
        project_description: str = None,
        project_name: str = None,
        project_version: str = None,
    ):
        # This parameter is required.
        self.consortium_id = consortium_id
        self.project_description = project_description
        # This parameter is required.
        self.project_name = project_name
        # This parameter is required.
        self.project_version = project_version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.project_description is not None:
            result['ProjectDescription'] = self.project_description
        if self.project_name is not None:
            result['ProjectName'] = self.project_name
        if self.project_version is not None:
            result['ProjectVersion'] = self.project_version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('ProjectDescription') is not None:
            self.project_description = m.get('ProjectDescription')
        if m.get('ProjectName') is not None:
            self.project_name = m.get('ProjectName')
        if m.get('ProjectVersion') is not None:
            self.project_version = m.get('ProjectVersion')
        return self


class CreateAntChainContractProjectResponseBodyResult(TeaModel):
    def __init__(
        self,
        consortium_id: str = None,
        create_time: int = None,
        project_description: str = None,
        project_id: str = None,
        project_name: str = None,
        project_version: str = None,
        update_time: int = None,
    ):
        self.consortium_id = consortium_id
        self.create_time = create_time
        self.project_description = project_description
        self.project_id = project_id
        self.project_name = project_name
        self.project_version = project_version
        self.update_time = update_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.project_description is not None:
            result['ProjectDescription'] = self.project_description
        if self.project_id is not None:
            result['ProjectId'] = self.project_id
        if self.project_name is not None:
            result['ProjectName'] = self.project_name
        if self.project_version is not None:
            result['ProjectVersion'] = self.project_version
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('ProjectDescription') is not None:
            self.project_description = m.get('ProjectDescription')
        if m.get('ProjectId') is not None:
            self.project_id = m.get('ProjectId')
        if m.get('ProjectName') is not None:
            self.project_name = m.get('ProjectName')
        if m.get('ProjectVersion') is not None:
            self.project_version = m.get('ProjectVersion')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        return self


class CreateAntChainContractProjectResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: CreateAntChainContractProjectResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = CreateAntChainContractProjectResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class CreateAntChainContractProjectResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateAntChainContractProjectResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateAntChainContractProjectResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateBlockchainRequest(TeaModel):
    def __init__(
        self,
        bizid: str = None,
        blockchain_region_id: str = None,
        blockchain_type: str = None,
        cipher_suit: str = None,
        live_time: int = None,
        machine_num: int = None,
        merkle_tree_suit: str = None,
        size: int = None,
        tls_algo: str = None,
    ):
        self.bizid = bizid
        self.blockchain_region_id = blockchain_region_id
        self.blockchain_type = blockchain_type
        self.cipher_suit = cipher_suit
        self.live_time = live_time
        self.machine_num = machine_num
        self.merkle_tree_suit = merkle_tree_suit
        self.size = size
        self.tls_algo = tls_algo

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        if self.blockchain_region_id is not None:
            result['BlockchainRegionId'] = self.blockchain_region_id
        if self.blockchain_type is not None:
            result['BlockchainType'] = self.blockchain_type
        if self.cipher_suit is not None:
            result['CipherSuit'] = self.cipher_suit
        if self.live_time is not None:
            result['LiveTime'] = self.live_time
        if self.machine_num is not None:
            result['MachineNum'] = self.machine_num
        if self.merkle_tree_suit is not None:
            result['MerkleTreeSuit'] = self.merkle_tree_suit
        if self.size is not None:
            result['Size'] = self.size
        if self.tls_algo is not None:
            result['TlsAlgo'] = self.tls_algo
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        if m.get('BlockchainRegionId') is not None:
            self.blockchain_region_id = m.get('BlockchainRegionId')
        if m.get('BlockchainType') is not None:
            self.blockchain_type = m.get('BlockchainType')
        if m.get('CipherSuit') is not None:
            self.cipher_suit = m.get('CipherSuit')
        if m.get('LiveTime') is not None:
            self.live_time = m.get('LiveTime')
        if m.get('MachineNum') is not None:
            self.machine_num = m.get('MachineNum')
        if m.get('MerkleTreeSuit') is not None:
            self.merkle_tree_suit = m.get('MerkleTreeSuit')
        if m.get('Size') is not None:
            self.size = m.get('Size')
        if m.get('TlsAlgo') is not None:
            self.tls_algo = m.get('TlsAlgo')
        return self


class CreateBlockchainResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: str = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class CreateBlockchainResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateBlockchainResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateBlockchainResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateBlockchainApplicationRequest(TeaModel):
    def __init__(
        self,
        bizid: str = None,
        blockchain_region_id: str = None,
        blockchain_type: str = None,
        cipher_suit: str = None,
        live_time: int = None,
        machine_num: int = None,
        merkle_tree_suit: str = None,
        size: int = None,
        tls_algo: str = None,
    ):
        self.bizid = bizid
        self.blockchain_region_id = blockchain_region_id
        self.blockchain_type = blockchain_type
        self.cipher_suit = cipher_suit
        self.live_time = live_time
        self.machine_num = machine_num
        self.merkle_tree_suit = merkle_tree_suit
        self.size = size
        self.tls_algo = tls_algo

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        if self.blockchain_region_id is not None:
            result['BlockchainRegionId'] = self.blockchain_region_id
        if self.blockchain_type is not None:
            result['BlockchainType'] = self.blockchain_type
        if self.cipher_suit is not None:
            result['CipherSuit'] = self.cipher_suit
        if self.live_time is not None:
            result['LiveTime'] = self.live_time
        if self.machine_num is not None:
            result['MachineNum'] = self.machine_num
        if self.merkle_tree_suit is not None:
            result['MerkleTreeSuit'] = self.merkle_tree_suit
        if self.size is not None:
            result['Size'] = self.size
        if self.tls_algo is not None:
            result['TlsAlgo'] = self.tls_algo
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        if m.get('BlockchainRegionId') is not None:
            self.blockchain_region_id = m.get('BlockchainRegionId')
        if m.get('BlockchainType') is not None:
            self.blockchain_type = m.get('BlockchainType')
        if m.get('CipherSuit') is not None:
            self.cipher_suit = m.get('CipherSuit')
        if m.get('LiveTime') is not None:
            self.live_time = m.get('LiveTime')
        if m.get('MachineNum') is not None:
            self.machine_num = m.get('MachineNum')
        if m.get('MerkleTreeSuit') is not None:
            self.merkle_tree_suit = m.get('MerkleTreeSuit')
        if m.get('Size') is not None:
            self.size = m.get('Size')
        if m.get('TlsAlgo') is not None:
            self.tls_algo = m.get('TlsAlgo')
        return self


class CreateBlockchainApplicationResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: str = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class CreateBlockchainApplicationResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateBlockchainApplicationResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateBlockchainApplicationResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateBlockchainApplyRequest(TeaModel):
    def __init__(
        self,
        bizid: str = None,
        live_time: int = None,
        machine_num: int = None,
        size: int = None,
    ):
        self.bizid = bizid
        self.live_time = live_time
        self.machine_num = machine_num
        self.size = size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        if self.live_time is not None:
            result['LiveTime'] = self.live_time
        if self.machine_num is not None:
            result['MachineNum'] = self.machine_num
        if self.size is not None:
            result['Size'] = self.size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        if m.get('LiveTime') is not None:
            self.live_time = m.get('LiveTime')
        if m.get('MachineNum') is not None:
            self.machine_num = m.get('MachineNum')
        if m.get('Size') is not None:
            self.size = m.get('Size')
        return self


class CreateBlockchainApplyResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: str = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class CreateBlockchainApplyResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateBlockchainApplyResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateBlockchainApplyResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateChaincodeRequest(TeaModel):
    def __init__(
        self,
        channel_id: str = None,
        consortium_id: str = None,
        endorse_policy: str = None,
        location: str = None,
        organization_id: str = None,
        oss_bucket: str = None,
        oss_url: str = None,
    ):
        # This parameter is required.
        self.channel_id = channel_id
        self.consortium_id = consortium_id
        self.endorse_policy = endorse_policy
        self.location = location
        # This parameter is required.
        self.organization_id = organization_id
        # This parameter is required.
        self.oss_bucket = oss_bucket
        # This parameter is required.
        self.oss_url = oss_url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.endorse_policy is not None:
            result['EndorsePolicy'] = self.endorse_policy
        if self.location is not None:
            result['Location'] = self.location
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        if self.oss_bucket is not None:
            result['OssBucket'] = self.oss_bucket
        if self.oss_url is not None:
            result['OssUrl'] = self.oss_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('EndorsePolicy') is not None:
            self.endorse_policy = m.get('EndorsePolicy')
        if m.get('Location') is not None:
            self.location = m.get('Location')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        if m.get('OssBucket') is not None:
            self.oss_bucket = m.get('OssBucket')
        if m.get('OssUrl') is not None:
            self.oss_url = m.get('OssUrl')
        return self


class CreateChaincodeResponseBodyResult(TeaModel):
    def __init__(
        self,
        chaincode_id: str = None,
        channel_name: str = None,
        consortium_id: str = None,
        create_time: str = None,
        deploy_time: str = None,
        endorse_policy: str = None,
        input: str = None,
        install: bool = None,
        message: str = None,
        name: str = None,
        path: str = None,
        provider_id: str = None,
        provider_name: str = None,
        state: str = None,
        type: int = None,
        version: str = None,
    ):
        self.chaincode_id = chaincode_id
        self.channel_name = channel_name
        self.consortium_id = consortium_id
        self.create_time = create_time
        self.deploy_time = deploy_time
        self.endorse_policy = endorse_policy
        self.input = input
        self.install = install
        self.message = message
        self.name = name
        self.path = path
        self.provider_id = provider_id
        self.provider_name = provider_name
        self.state = state
        self.type = type
        self.version = version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.chaincode_id is not None:
            result['ChaincodeId'] = self.chaincode_id
        if self.channel_name is not None:
            result['ChannelName'] = self.channel_name
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.deploy_time is not None:
            result['DeployTime'] = self.deploy_time
        if self.endorse_policy is not None:
            result['EndorsePolicy'] = self.endorse_policy
        if self.input is not None:
            result['Input'] = self.input
        if self.install is not None:
            result['Install'] = self.install
        if self.message is not None:
            result['Message'] = self.message
        if self.name is not None:
            result['Name'] = self.name
        if self.path is not None:
            result['Path'] = self.path
        if self.provider_id is not None:
            result['ProviderId'] = self.provider_id
        if self.provider_name is not None:
            result['ProviderName'] = self.provider_name
        if self.state is not None:
            result['State'] = self.state
        if self.type is not None:
            result['Type'] = self.type
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChaincodeId') is not None:
            self.chaincode_id = m.get('ChaincodeId')
        if m.get('ChannelName') is not None:
            self.channel_name = m.get('ChannelName')
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('DeployTime') is not None:
            self.deploy_time = m.get('DeployTime')
        if m.get('EndorsePolicy') is not None:
            self.endorse_policy = m.get('EndorsePolicy')
        if m.get('Input') is not None:
            self.input = m.get('Input')
        if m.get('Install') is not None:
            self.install = m.get('Install')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Path') is not None:
            self.path = m.get('Path')
        if m.get('ProviderId') is not None:
            self.provider_id = m.get('ProviderId')
        if m.get('ProviderName') is not None:
            self.provider_name = m.get('ProviderName')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class CreateChaincodeResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: CreateChaincodeResponseBodyResult = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = CreateChaincodeResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateChaincodeResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateChaincodeResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateChaincodeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateChannelRequestOrganization(TeaModel):
    def __init__(
        self,
        id: str = None,
    ):
        self.id = id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        return self


class CreateChannelRequest(TeaModel):
    def __init__(
        self,
        batch_timeout: int = None,
        channel_name: str = None,
        consortium_id: str = None,
        max_message_count: int = None,
        organization: List[CreateChannelRequestOrganization] = None,
        preferred_max_bytes: int = None,
    ):
        self.batch_timeout = batch_timeout
        # This parameter is required.
        self.channel_name = channel_name
        # This parameter is required.
        self.consortium_id = consortium_id
        self.max_message_count = max_message_count
        # This parameter is required.
        self.organization = organization
        self.preferred_max_bytes = preferred_max_bytes

    def validate(self):
        if self.organization:
            for k in self.organization:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.batch_timeout is not None:
            result['BatchTimeout'] = self.batch_timeout
        if self.channel_name is not None:
            result['ChannelName'] = self.channel_name
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.max_message_count is not None:
            result['MaxMessageCount'] = self.max_message_count
        result['Organization'] = []
        if self.organization is not None:
            for k in self.organization:
                result['Organization'].append(k.to_map() if k else None)
        if self.preferred_max_bytes is not None:
            result['PreferredMaxBytes'] = self.preferred_max_bytes
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BatchTimeout') is not None:
            self.batch_timeout = m.get('BatchTimeout')
        if m.get('ChannelName') is not None:
            self.channel_name = m.get('ChannelName')
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('MaxMessageCount') is not None:
            self.max_message_count = m.get('MaxMessageCount')
        self.organization = []
        if m.get('Organization') is not None:
            for k in m.get('Organization'):
                temp_model = CreateChannelRequestOrganization()
                self.organization.append(temp_model.from_map(k))
        if m.get('PreferredMaxBytes') is not None:
            self.preferred_max_bytes = m.get('PreferredMaxBytes')
        return self


class CreateChannelResponseBodyResult(TeaModel):
    def __init__(
        self,
        batch_timeout: int = None,
        block_count: int = None,
        chaincode_count: int = None,
        channel_id: str = None,
        consortium_id: str = None,
        consortium_name: str = None,
        create_time: str = None,
        max_message_count: int = None,
        member_count: int = None,
        name: str = None,
        owner_bid: str = None,
        owner_name: str = None,
        owner_uid: int = None,
        preferred_max_bytes: int = None,
        request_id: str = None,
        state: str = None,
        support_config: bool = None,
        update_time: str = None,
    ):
        self.batch_timeout = batch_timeout
        self.block_count = block_count
        self.chaincode_count = chaincode_count
        self.channel_id = channel_id
        self.consortium_id = consortium_id
        self.consortium_name = consortium_name
        self.create_time = create_time
        self.max_message_count = max_message_count
        self.member_count = member_count
        self.name = name
        self.owner_bid = owner_bid
        self.owner_name = owner_name
        self.owner_uid = owner_uid
        self.preferred_max_bytes = preferred_max_bytes
        self.request_id = request_id
        self.state = state
        self.support_config = support_config
        self.update_time = update_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.batch_timeout is not None:
            result['BatchTimeout'] = self.batch_timeout
        if self.block_count is not None:
            result['BlockCount'] = self.block_count
        if self.chaincode_count is not None:
            result['ChaincodeCount'] = self.chaincode_count
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.consortium_name is not None:
            result['ConsortiumName'] = self.consortium_name
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.max_message_count is not None:
            result['MaxMessageCount'] = self.max_message_count
        if self.member_count is not None:
            result['MemberCount'] = self.member_count
        if self.name is not None:
            result['Name'] = self.name
        if self.owner_bid is not None:
            result['OwnerBid'] = self.owner_bid
        if self.owner_name is not None:
            result['OwnerName'] = self.owner_name
        if self.owner_uid is not None:
            result['OwnerUid'] = self.owner_uid
        if self.preferred_max_bytes is not None:
            result['PreferredMaxBytes'] = self.preferred_max_bytes
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.state is not None:
            result['State'] = self.state
        if self.support_config is not None:
            result['SupportConfig'] = self.support_config
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BatchTimeout') is not None:
            self.batch_timeout = m.get('BatchTimeout')
        if m.get('BlockCount') is not None:
            self.block_count = m.get('BlockCount')
        if m.get('ChaincodeCount') is not None:
            self.chaincode_count = m.get('ChaincodeCount')
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('ConsortiumName') is not None:
            self.consortium_name = m.get('ConsortiumName')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('MaxMessageCount') is not None:
            self.max_message_count = m.get('MaxMessageCount')
        if m.get('MemberCount') is not None:
            self.member_count = m.get('MemberCount')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('OwnerBid') is not None:
            self.owner_bid = m.get('OwnerBid')
        if m.get('OwnerName') is not None:
            self.owner_name = m.get('OwnerName')
        if m.get('OwnerUid') is not None:
            self.owner_uid = m.get('OwnerUid')
        if m.get('PreferredMaxBytes') is not None:
            self.preferred_max_bytes = m.get('PreferredMaxBytes')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('SupportConfig') is not None:
            self.support_config = m.get('SupportConfig')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        return self


class CreateChannelResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: CreateChannelResponseBodyResult = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = CreateChannelResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateChannelResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateChannelResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateChannelResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateChannelMemberRequestOrganization(TeaModel):
    def __init__(
        self,
        id: str = None,
    ):
        self.id = id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        return self


class CreateChannelMemberRequest(TeaModel):
    def __init__(
        self,
        channel_id: str = None,
        organization: List[CreateChannelMemberRequestOrganization] = None,
    ):
        # This parameter is required.
        self.channel_id = channel_id
        # This parameter is required.
        self.organization = organization

    def validate(self):
        if self.organization:
            for k in self.organization:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        result['Organization'] = []
        if self.organization is not None:
            for k in self.organization:
                result['Organization'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        self.organization = []
        if m.get('Organization') is not None:
            for k in m.get('Organization'):
                temp_model = CreateChannelMemberRequestOrganization()
                self.organization.append(temp_model.from_map(k))
        return self


class CreateChannelMemberResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: bool = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateChannelMemberResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateChannelMemberResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateChannelMemberResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateCloudIntegrationServiceTokenRequest(TeaModel):
    def __init__(
        self,
        organization_id: str = None,
        service: str = None,
    ):
        # This parameter is required.
        self.organization_id = organization_id
        # This parameter is required.
        self.service = service

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        if self.service is not None:
            result['Service'] = self.service
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        if m.get('Service') is not None:
            self.service = m.get('Service')
        return self


class CreateCloudIntegrationServiceTokenResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: str = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateCloudIntegrationServiceTokenResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateCloudIntegrationServiceTokenResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateCloudIntegrationServiceTokenResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateCloudServiceIntegrationRequest(TeaModel):
    def __init__(
        self,
        organization_id: str = None,
    ):
        # This parameter is required.
        self.organization_id = organization_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        return self


class CreateCloudServiceIntegrationResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: bool = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateCloudServiceIntegrationResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateCloudServiceIntegrationResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateCloudServiceIntegrationResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateCloudServiceSessionRequest(TeaModel):
    def __init__(
        self,
        organization_id: str = None,
    ):
        # This parameter is required.
        self.organization_id = organization_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        return self


class CreateCloudServiceSessionResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: str = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateCloudServiceSessionResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateCloudServiceSessionResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateCloudServiceSessionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateConsortiumRequestOrganization(TeaModel):
    def __init__(
        self,
        id: str = None,
    ):
        self.id = id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        return self


class CreateConsortiumRequest(TeaModel):
    def __init__(
        self,
        channel_policy: str = None,
        description: str = None,
        domain: str = None,
        duration: int = None,
        location: str = None,
        major_version: str = None,
        name: str = None,
        orderer_type: str = None,
        orderers_count: int = None,
        organization: List[CreateConsortiumRequestOrganization] = None,
        peers_count: int = None,
        pricing_cycle: str = None,
        spec_name: str = None,
        zone_id: str = None,
    ):
        # This parameter is required.
        self.channel_policy = channel_policy
        self.description = description
        # This parameter is required.
        self.domain = domain
        self.duration = duration
        # This parameter is required.
        self.location = location
        self.major_version = major_version
        # This parameter is required.
        self.name = name
        # This parameter is required.
        self.orderer_type = orderer_type
        self.orderers_count = orderers_count
        self.organization = organization
        self.peers_count = peers_count
        self.pricing_cycle = pricing_cycle
        # This parameter is required.
        self.spec_name = spec_name
        self.zone_id = zone_id

    def validate(self):
        if self.organization:
            for k in self.organization:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.channel_policy is not None:
            result['ChannelPolicy'] = self.channel_policy
        if self.description is not None:
            result['Description'] = self.description
        if self.domain is not None:
            result['Domain'] = self.domain
        if self.duration is not None:
            result['Duration'] = self.duration
        if self.location is not None:
            result['Location'] = self.location
        if self.major_version is not None:
            result['MajorVersion'] = self.major_version
        if self.name is not None:
            result['Name'] = self.name
        if self.orderer_type is not None:
            result['OrdererType'] = self.orderer_type
        if self.orderers_count is not None:
            result['OrderersCount'] = self.orderers_count
        result['Organization'] = []
        if self.organization is not None:
            for k in self.organization:
                result['Organization'].append(k.to_map() if k else None)
        if self.peers_count is not None:
            result['PeersCount'] = self.peers_count
        if self.pricing_cycle is not None:
            result['PricingCycle'] = self.pricing_cycle
        if self.spec_name is not None:
            result['SpecName'] = self.spec_name
        if self.zone_id is not None:
            result['ZoneId'] = self.zone_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChannelPolicy') is not None:
            self.channel_policy = m.get('ChannelPolicy')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Domain') is not None:
            self.domain = m.get('Domain')
        if m.get('Duration') is not None:
            self.duration = m.get('Duration')
        if m.get('Location') is not None:
            self.location = m.get('Location')
        if m.get('MajorVersion') is not None:
            self.major_version = m.get('MajorVersion')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('OrdererType') is not None:
            self.orderer_type = m.get('OrdererType')
        if m.get('OrderersCount') is not None:
            self.orderers_count = m.get('OrderersCount')
        self.organization = []
        if m.get('Organization') is not None:
            for k in m.get('Organization'):
                temp_model = CreateConsortiumRequestOrganization()
                self.organization.append(temp_model.from_map(k))
        if m.get('PeersCount') is not None:
            self.peers_count = m.get('PeersCount')
        if m.get('PricingCycle') is not None:
            self.pricing_cycle = m.get('PricingCycle')
        if m.get('SpecName') is not None:
            self.spec_name = m.get('SpecName')
        if m.get('ZoneId') is not None:
            self.zone_id = m.get('ZoneId')
        return self


class CreateConsortiumResponseBodyResult(TeaModel):
    def __init__(
        self,
        channel_count: int = None,
        channel_policy: str = None,
        cluster_state: str = None,
        code_name: str = None,
        consortium_id: str = None,
        create_time: str = None,
        description: str = None,
        domain: str = None,
        member_count: int = None,
        name: str = None,
        orderer_count: int = None,
        orderer_type: str = None,
        owner_bid: str = None,
        owner_uid: int = None,
        region_id: str = None,
        service_state: str = None,
        spec_name: str = None,
        zone_id: str = None,
    ):
        self.channel_count = channel_count
        self.channel_policy = channel_policy
        self.cluster_state = cluster_state
        self.code_name = code_name
        self.consortium_id = consortium_id
        self.create_time = create_time
        self.description = description
        self.domain = domain
        self.member_count = member_count
        self.name = name
        self.orderer_count = orderer_count
        self.orderer_type = orderer_type
        self.owner_bid = owner_bid
        self.owner_uid = owner_uid
        self.region_id = region_id
        self.service_state = service_state
        self.spec_name = spec_name
        self.zone_id = zone_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.channel_count is not None:
            result['ChannelCount'] = self.channel_count
        if self.channel_policy is not None:
            result['ChannelPolicy'] = self.channel_policy
        if self.cluster_state is not None:
            result['ClusterState'] = self.cluster_state
        if self.code_name is not None:
            result['CodeName'] = self.code_name
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.description is not None:
            result['Description'] = self.description
        if self.domain is not None:
            result['Domain'] = self.domain
        if self.member_count is not None:
            result['MemberCount'] = self.member_count
        if self.name is not None:
            result['Name'] = self.name
        if self.orderer_count is not None:
            result['OrdererCount'] = self.orderer_count
        if self.orderer_type is not None:
            result['OrdererType'] = self.orderer_type
        if self.owner_bid is not None:
            result['OwnerBid'] = self.owner_bid
        if self.owner_uid is not None:
            result['OwnerUid'] = self.owner_uid
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.service_state is not None:
            result['ServiceState'] = self.service_state
        if self.spec_name is not None:
            result['SpecName'] = self.spec_name
        if self.zone_id is not None:
            result['ZoneId'] = self.zone_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChannelCount') is not None:
            self.channel_count = m.get('ChannelCount')
        if m.get('ChannelPolicy') is not None:
            self.channel_policy = m.get('ChannelPolicy')
        if m.get('ClusterState') is not None:
            self.cluster_state = m.get('ClusterState')
        if m.get('CodeName') is not None:
            self.code_name = m.get('CodeName')
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Domain') is not None:
            self.domain = m.get('Domain')
        if m.get('MemberCount') is not None:
            self.member_count = m.get('MemberCount')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('OrdererCount') is not None:
            self.orderer_count = m.get('OrdererCount')
        if m.get('OrdererType') is not None:
            self.orderer_type = m.get('OrdererType')
        if m.get('OwnerBid') is not None:
            self.owner_bid = m.get('OwnerBid')
        if m.get('OwnerUid') is not None:
            self.owner_uid = m.get('OwnerUid')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ServiceState') is not None:
            self.service_state = m.get('ServiceState')
        if m.get('SpecName') is not None:
            self.spec_name = m.get('SpecName')
        if m.get('ZoneId') is not None:
            self.zone_id = m.get('ZoneId')
        return self


class CreateConsortiumResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: CreateConsortiumResponseBodyResult = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = CreateConsortiumResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateConsortiumResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateConsortiumResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateConsortiumResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateConsortiumMemberRequestOrganization(TeaModel):
    def __init__(
        self,
        id: str = None,
    ):
        self.id = id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        return self


class CreateConsortiumMemberRequest(TeaModel):
    def __init__(
        self,
        code: str = None,
        consortium_id: str = None,
        organization: List[CreateConsortiumMemberRequestOrganization] = None,
    ):
        self.code = code
        # This parameter is required.
        self.consortium_id = consortium_id
        # This parameter is required.
        self.organization = organization

    def validate(self):
        if self.organization:
            for k in self.organization:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        result['Organization'] = []
        if self.organization is not None:
            for k in self.organization:
                result['Organization'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        self.organization = []
        if m.get('Organization') is not None:
            for k in m.get('Organization'):
                temp_model = CreateConsortiumMemberRequestOrganization()
                self.organization.append(temp_model.from_map(k))
        return self


class CreateConsortiumMemberResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: bool = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateConsortiumMemberResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateConsortiumMemberResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateConsortiumMemberResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateEcosphereRequestOrganization(TeaModel):
    def __init__(
        self,
        description: str = None,
        domain: str = None,
        name: str = None,
    ):
        self.description = description
        self.domain = domain
        self.name = name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.domain is not None:
            result['Domain'] = self.domain
        if self.name is not None:
            result['Name'] = self.name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Domain') is not None:
            self.domain = m.get('Domain')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        return self


class CreateEcosphereRequest(TeaModel):
    def __init__(
        self,
        channel_policy: str = None,
        consortium_name: str = None,
        description: str = None,
        duration: int = None,
        location: str = None,
        major_version: str = None,
        orderer_domain: str = None,
        orderer_type: str = None,
        orderers_count: int = None,
        organization: List[CreateEcosphereRequestOrganization] = None,
        peers_count: int = None,
        pricing_cycle: str = None,
        spec_name: str = None,
        zone_id: str = None,
    ):
        # This parameter is required.
        self.channel_policy = channel_policy
        # This parameter is required.
        self.consortium_name = consortium_name
        self.description = description
        self.duration = duration
        # This parameter is required.
        self.location = location
        self.major_version = major_version
        # This parameter is required.
        self.orderer_domain = orderer_domain
        # This parameter is required.
        self.orderer_type = orderer_type
        self.orderers_count = orderers_count
        # This parameter is required.
        self.organization = organization
        self.peers_count = peers_count
        self.pricing_cycle = pricing_cycle
        # This parameter is required.
        self.spec_name = spec_name
        self.zone_id = zone_id

    def validate(self):
        if self.organization:
            for k in self.organization:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.channel_policy is not None:
            result['ChannelPolicy'] = self.channel_policy
        if self.consortium_name is not None:
            result['ConsortiumName'] = self.consortium_name
        if self.description is not None:
            result['Description'] = self.description
        if self.duration is not None:
            result['Duration'] = self.duration
        if self.location is not None:
            result['Location'] = self.location
        if self.major_version is not None:
            result['MajorVersion'] = self.major_version
        if self.orderer_domain is not None:
            result['OrdererDomain'] = self.orderer_domain
        if self.orderer_type is not None:
            result['OrdererType'] = self.orderer_type
        if self.orderers_count is not None:
            result['OrderersCount'] = self.orderers_count
        result['Organization'] = []
        if self.organization is not None:
            for k in self.organization:
                result['Organization'].append(k.to_map() if k else None)
        if self.peers_count is not None:
            result['PeersCount'] = self.peers_count
        if self.pricing_cycle is not None:
            result['PricingCycle'] = self.pricing_cycle
        if self.spec_name is not None:
            result['SpecName'] = self.spec_name
        if self.zone_id is not None:
            result['ZoneId'] = self.zone_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChannelPolicy') is not None:
            self.channel_policy = m.get('ChannelPolicy')
        if m.get('ConsortiumName') is not None:
            self.consortium_name = m.get('ConsortiumName')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Duration') is not None:
            self.duration = m.get('Duration')
        if m.get('Location') is not None:
            self.location = m.get('Location')
        if m.get('MajorVersion') is not None:
            self.major_version = m.get('MajorVersion')
        if m.get('OrdererDomain') is not None:
            self.orderer_domain = m.get('OrdererDomain')
        if m.get('OrdererType') is not None:
            self.orderer_type = m.get('OrdererType')
        if m.get('OrderersCount') is not None:
            self.orderers_count = m.get('OrderersCount')
        self.organization = []
        if m.get('Organization') is not None:
            for k in m.get('Organization'):
                temp_model = CreateEcosphereRequestOrganization()
                self.organization.append(temp_model.from_map(k))
        if m.get('PeersCount') is not None:
            self.peers_count = m.get('PeersCount')
        if m.get('PricingCycle') is not None:
            self.pricing_cycle = m.get('PricingCycle')
        if m.get('SpecName') is not None:
            self.spec_name = m.get('SpecName')
        if m.get('ZoneId') is not None:
            self.zone_id = m.get('ZoneId')
        return self


class CreateEcosphereResponseBodyResultOrganizations(TeaModel):
    def __init__(
        self,
        cluster_state: str = None,
        code: str = None,
        create_time: str = None,
        description: str = None,
        domain: str = None,
        name: str = None,
        service_state: str = None,
    ):
        self.cluster_state = cluster_state
        self.code = code
        self.create_time = create_time
        self.description = description
        self.domain = domain
        self.name = name
        self.service_state = service_state

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cluster_state is not None:
            result['ClusterState'] = self.cluster_state
        if self.code is not None:
            result['Code'] = self.code
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.description is not None:
            result['Description'] = self.description
        if self.domain is not None:
            result['Domain'] = self.domain
        if self.name is not None:
            result['Name'] = self.name
        if self.service_state is not None:
            result['ServiceState'] = self.service_state
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ClusterState') is not None:
            self.cluster_state = m.get('ClusterState')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Domain') is not None:
            self.domain = m.get('Domain')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('ServiceState') is not None:
            self.service_state = m.get('ServiceState')
        return self


class CreateEcosphereResponseBodyResultSpecification(TeaModel):
    def __init__(
        self,
        name: str = None,
        num_of_nodes: int = None,
        title: str = None,
    ):
        self.name = name
        self.num_of_nodes = num_of_nodes
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name is not None:
            result['Name'] = self.name
        if self.num_of_nodes is not None:
            result['NumOfNodes'] = self.num_of_nodes
        if self.title is not None:
            result['Title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('NumOfNodes') is not None:
            self.num_of_nodes = m.get('NumOfNodes')
        if m.get('Title') is not None:
            self.title = m.get('Title')
        return self


class CreateEcosphereResponseBodyResult(TeaModel):
    def __init__(
        self,
        channel_count: int = None,
        channel_policy: str = None,
        cluster_state: str = None,
        code: str = None,
        consortium_id: str = None,
        create_time: str = None,
        description: str = None,
        domain: str = None,
        member_count: int = None,
        name: str = None,
        orderer_count: int = None,
        orderer_type: str = None,
        organizations: List[CreateEcosphereResponseBodyResultOrganizations] = None,
        owner_bid: str = None,
        owner_uid: int = None,
        region_id: str = None,
        service_state: str = None,
        spec_name: str = None,
        specification: CreateEcosphereResponseBodyResultSpecification = None,
        zone_id: str = None,
    ):
        self.channel_count = channel_count
        self.channel_policy = channel_policy
        self.cluster_state = cluster_state
        self.code = code
        self.consortium_id = consortium_id
        self.create_time = create_time
        self.description = description
        self.domain = domain
        self.member_count = member_count
        self.name = name
        self.orderer_count = orderer_count
        self.orderer_type = orderer_type
        self.organizations = organizations
        self.owner_bid = owner_bid
        self.owner_uid = owner_uid
        self.region_id = region_id
        self.service_state = service_state
        self.spec_name = spec_name
        self.specification = specification
        self.zone_id = zone_id

    def validate(self):
        if self.organizations:
            for k in self.organizations:
                if k:
                    k.validate()
        if self.specification:
            self.specification.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.channel_count is not None:
            result['ChannelCount'] = self.channel_count
        if self.channel_policy is not None:
            result['ChannelPolicy'] = self.channel_policy
        if self.cluster_state is not None:
            result['ClusterState'] = self.cluster_state
        if self.code is not None:
            result['Code'] = self.code
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.description is not None:
            result['Description'] = self.description
        if self.domain is not None:
            result['Domain'] = self.domain
        if self.member_count is not None:
            result['MemberCount'] = self.member_count
        if self.name is not None:
            result['Name'] = self.name
        if self.orderer_count is not None:
            result['OrdererCount'] = self.orderer_count
        if self.orderer_type is not None:
            result['OrdererType'] = self.orderer_type
        result['Organizations'] = []
        if self.organizations is not None:
            for k in self.organizations:
                result['Organizations'].append(k.to_map() if k else None)
        if self.owner_bid is not None:
            result['OwnerBid'] = self.owner_bid
        if self.owner_uid is not None:
            result['OwnerUid'] = self.owner_uid
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.service_state is not None:
            result['ServiceState'] = self.service_state
        if self.spec_name is not None:
            result['SpecName'] = self.spec_name
        if self.specification is not None:
            result['Specification'] = self.specification.to_map()
        if self.zone_id is not None:
            result['ZoneId'] = self.zone_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChannelCount') is not None:
            self.channel_count = m.get('ChannelCount')
        if m.get('ChannelPolicy') is not None:
            self.channel_policy = m.get('ChannelPolicy')
        if m.get('ClusterState') is not None:
            self.cluster_state = m.get('ClusterState')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Domain') is not None:
            self.domain = m.get('Domain')
        if m.get('MemberCount') is not None:
            self.member_count = m.get('MemberCount')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('OrdererCount') is not None:
            self.orderer_count = m.get('OrdererCount')
        if m.get('OrdererType') is not None:
            self.orderer_type = m.get('OrdererType')
        self.organizations = []
        if m.get('Organizations') is not None:
            for k in m.get('Organizations'):
                temp_model = CreateEcosphereResponseBodyResultOrganizations()
                self.organizations.append(temp_model.from_map(k))
        if m.get('OwnerBid') is not None:
            self.owner_bid = m.get('OwnerBid')
        if m.get('OwnerUid') is not None:
            self.owner_uid = m.get('OwnerUid')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ServiceState') is not None:
            self.service_state = m.get('ServiceState')
        if m.get('SpecName') is not None:
            self.spec_name = m.get('SpecName')
        if m.get('Specification') is not None:
            temp_model = CreateEcosphereResponseBodyResultSpecification()
            self.specification = temp_model.from_map(m['Specification'])
        if m.get('ZoneId') is not None:
            self.zone_id = m.get('ZoneId')
        return self


class CreateEcosphereResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        error_message: str = None,
        request_id: str = None,
        result: CreateEcosphereResponseBodyResult = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.error_message = error_message
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = CreateEcosphereResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateEcosphereResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateEcosphereResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateEcosphereResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateEthereumRequestNode(TeaModel):
    def __init__(
        self,
        name: str = None,
    ):
        self.name = name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name is not None:
            result['Name'] = self.name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Name') is not None:
            self.name = m.get('Name')
        return self


class CreateEthereumRequest(TeaModel):
    def __init__(
        self,
        consensus: str = None,
        description: str = None,
        difficulty: str = None,
        gas: str = None,
        name: str = None,
        network_id: str = None,
        node: List[CreateEthereumRequestNode] = None,
        region: str = None,
    ):
        # This parameter is required.
        self.consensus = consensus
        self.description = description
        self.difficulty = difficulty
        self.gas = gas
        # This parameter is required.
        self.name = name
        self.network_id = network_id
        # This parameter is required.
        self.node = node
        self.region = region

    def validate(self):
        if self.node:
            for k in self.node:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.consensus is not None:
            result['Consensus'] = self.consensus
        if self.description is not None:
            result['Description'] = self.description
        if self.difficulty is not None:
            result['Difficulty'] = self.difficulty
        if self.gas is not None:
            result['Gas'] = self.gas
        if self.name is not None:
            result['Name'] = self.name
        if self.network_id is not None:
            result['NetworkId'] = self.network_id
        result['Node'] = []
        if self.node is not None:
            for k in self.node:
                result['Node'].append(k.to_map() if k else None)
        if self.region is not None:
            result['Region'] = self.region
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Consensus') is not None:
            self.consensus = m.get('Consensus')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Difficulty') is not None:
            self.difficulty = m.get('Difficulty')
        if m.get('Gas') is not None:
            self.gas = m.get('Gas')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('NetworkId') is not None:
            self.network_id = m.get('NetworkId')
        self.node = []
        if m.get('Node') is not None:
            for k in m.get('Node'):
                temp_model = CreateEthereumRequestNode()
                self.node.append(temp_model.from_map(k))
        if m.get('Region') is not None:
            self.region = m.get('Region')
        return self


class CreateEthereumResponseBodyResult(TeaModel):
    def __init__(
        self,
        consensus: str = None,
        creator: str = None,
        description: str = None,
        id: str = None,
        name: str = None,
        network_id: str = None,
        region_id: str = None,
        state: str = None,
    ):
        self.consensus = consensus
        self.creator = creator
        self.description = description
        self.id = id
        self.name = name
        self.network_id = network_id
        self.region_id = region_id
        self.state = state

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.consensus is not None:
            result['Consensus'] = self.consensus
        if self.creator is not None:
            result['Creator'] = self.creator
        if self.description is not None:
            result['Description'] = self.description
        if self.id is not None:
            result['Id'] = self.id
        if self.name is not None:
            result['Name'] = self.name
        if self.network_id is not None:
            result['NetworkId'] = self.network_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.state is not None:
            result['State'] = self.state
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Consensus') is not None:
            self.consensus = m.get('Consensus')
        if m.get('Creator') is not None:
            self.creator = m.get('Creator')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('NetworkId') is not None:
            self.network_id = m.get('NetworkId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('State') is not None:
            self.state = m.get('State')
        return self


class CreateEthereumResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: CreateEthereumResponseBodyResult = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = CreateEthereumResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateEthereumResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateEthereumResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateEthereumResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateEthereumInvitationRequest(TeaModel):
    def __init__(
        self,
        ethereum_id: str = None,
    ):
        # This parameter is required.
        self.ethereum_id = ethereum_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ethereum_id is not None:
            result['EthereumId'] = self.ethereum_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EthereumId') is not None:
            self.ethereum_id = m.get('EthereumId')
        return self


class CreateEthereumInvitationResponseBodyResult(TeaModel):
    def __init__(
        self,
        code: str = None,
        create_time: str = None,
        expire_time: str = None,
        token: str = None,
    ):
        self.code = code
        self.create_time = create_time
        self.expire_time = expire_time
        self.token = token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.token is not None:
            result['Token'] = self.token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('Token') is not None:
            self.token = m.get('Token')
        return self


class CreateEthereumInvitationResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: CreateEthereumInvitationResponseBodyResult = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = CreateEthereumInvitationResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateEthereumInvitationResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateEthereumInvitationResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateEthereumInvitationResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateFabricChaincodePackageRequest(TeaModel):
    def __init__(
        self,
        location: str = None,
        organization_id: str = None,
        oss_bucket: str = None,
        oss_url: str = None,
    ):
        self.location = location
        # This parameter is required.
        self.organization_id = organization_id
        # This parameter is required.
        self.oss_bucket = oss_bucket
        # This parameter is required.
        self.oss_url = oss_url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.location is not None:
            result['Location'] = self.location
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        if self.oss_bucket is not None:
            result['OssBucket'] = self.oss_bucket
        if self.oss_url is not None:
            result['OssUrl'] = self.oss_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Location') is not None:
            self.location = m.get('Location')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        if m.get('OssBucket') is not None:
            self.oss_bucket = m.get('OssBucket')
        if m.get('OssUrl') is not None:
            self.oss_url = m.get('OssUrl')
        return self


class CreateFabricChaincodePackageResponseBodyResult(TeaModel):
    def __init__(
        self,
        chaincode_package_id: int = None,
        checksum: str = None,
        delete_time: int = None,
        deleted: bool = None,
        install_time: int = None,
        label: str = None,
        md_5sum: str = None,
        organization_id: str = None,
        oss_bucket: str = None,
        oss_url: str = None,
        provider_bid: str = None,
        provider_uid: int = None,
        state: str = None,
        type: str = None,
        type_string: bool = None,
        upload_time: int = None,
    ):
        self.chaincode_package_id = chaincode_package_id
        self.checksum = checksum
        self.delete_time = delete_time
        self.deleted = deleted
        self.install_time = install_time
        self.label = label
        self.md_5sum = md_5sum
        self.organization_id = organization_id
        self.oss_bucket = oss_bucket
        self.oss_url = oss_url
        self.provider_bid = provider_bid
        self.provider_uid = provider_uid
        self.state = state
        self.type = type
        self.type_string = type_string
        self.upload_time = upload_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.chaincode_package_id is not None:
            result['ChaincodePackageId'] = self.chaincode_package_id
        if self.checksum is not None:
            result['Checksum'] = self.checksum
        if self.delete_time is not None:
            result['DeleteTime'] = self.delete_time
        if self.deleted is not None:
            result['Deleted'] = self.deleted
        if self.install_time is not None:
            result['InstallTime'] = self.install_time
        if self.label is not None:
            result['Label'] = self.label
        if self.md_5sum is not None:
            result['Md5sum'] = self.md_5sum
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        if self.oss_bucket is not None:
            result['OssBucket'] = self.oss_bucket
        if self.oss_url is not None:
            result['OssURL'] = self.oss_url
        if self.provider_bid is not None:
            result['ProviderBid'] = self.provider_bid
        if self.provider_uid is not None:
            result['ProviderUid'] = self.provider_uid
        if self.state is not None:
            result['State'] = self.state
        if self.type is not None:
            result['Type'] = self.type
        if self.type_string is not None:
            result['TypeString'] = self.type_string
        if self.upload_time is not None:
            result['UploadTime'] = self.upload_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChaincodePackageId') is not None:
            self.chaincode_package_id = m.get('ChaincodePackageId')
        if m.get('Checksum') is not None:
            self.checksum = m.get('Checksum')
        if m.get('DeleteTime') is not None:
            self.delete_time = m.get('DeleteTime')
        if m.get('Deleted') is not None:
            self.deleted = m.get('Deleted')
        if m.get('InstallTime') is not None:
            self.install_time = m.get('InstallTime')
        if m.get('Label') is not None:
            self.label = m.get('Label')
        if m.get('Md5sum') is not None:
            self.md_5sum = m.get('Md5sum')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        if m.get('OssBucket') is not None:
            self.oss_bucket = m.get('OssBucket')
        if m.get('OssURL') is not None:
            self.oss_url = m.get('OssURL')
        if m.get('ProviderBid') is not None:
            self.provider_bid = m.get('ProviderBid')
        if m.get('ProviderUid') is not None:
            self.provider_uid = m.get('ProviderUid')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('TypeString') is not None:
            self.type_string = m.get('TypeString')
        if m.get('UploadTime') is not None:
            self.upload_time = m.get('UploadTime')
        return self


class CreateFabricChaincodePackageResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        message: str = None,
        request_id: str = None,
        result: CreateFabricChaincodePackageResponseBodyResult = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.message = message
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = CreateFabricChaincodePackageResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateFabricChaincodePackageResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateFabricChaincodePackageResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateFabricChaincodePackageResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateOrganizationRequest(TeaModel):
    def __init__(
        self,
        description: str = None,
        domain: str = None,
        duration: int = None,
        location: str = None,
        major_version: str = None,
        name: str = None,
        peers_count: int = None,
        pricing_cycle: str = None,
        spec_name: str = None,
    ):
        self.description = description
        # This parameter is required.
        self.domain = domain
        self.duration = duration
        # This parameter is required.
        self.location = location
        self.major_version = major_version
        # This parameter is required.
        self.name = name
        self.peers_count = peers_count
        self.pricing_cycle = pricing_cycle
        # This parameter is required.
        self.spec_name = spec_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.domain is not None:
            result['Domain'] = self.domain
        if self.duration is not None:
            result['Duration'] = self.duration
        if self.location is not None:
            result['Location'] = self.location
        if self.major_version is not None:
            result['MajorVersion'] = self.major_version
        if self.name is not None:
            result['Name'] = self.name
        if self.peers_count is not None:
            result['PeersCount'] = self.peers_count
        if self.pricing_cycle is not None:
            result['PricingCycle'] = self.pricing_cycle
        if self.spec_name is not None:
            result['SpecName'] = self.spec_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Domain') is not None:
            self.domain = m.get('Domain')
        if m.get('Duration') is not None:
            self.duration = m.get('Duration')
        if m.get('Location') is not None:
            self.location = m.get('Location')
        if m.get('MajorVersion') is not None:
            self.major_version = m.get('MajorVersion')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('PeersCount') is not None:
            self.peers_count = m.get('PeersCount')
        if m.get('PricingCycle') is not None:
            self.pricing_cycle = m.get('PricingCycle')
        if m.get('SpecName') is not None:
            self.spec_name = m.get('SpecName')
        return self


class CreateOrganizationResponseBodyResult(TeaModel):
    def __init__(
        self,
        cluster_state: str = None,
        code_name: str = None,
        consortium_count: int = None,
        create_time: str = None,
        description: str = None,
        domain: str = None,
        name: str = None,
        organization_id: str = None,
        owner_bid: str = None,
        owner_name: str = None,
        owner_uid: int = None,
        peer_count: int = None,
        region_id: str = None,
        request_id: str = None,
        service_state: str = None,
        spec_name: str = None,
        user_count: int = None,
        zone_id: str = None,
    ):
        self.cluster_state = cluster_state
        self.code_name = code_name
        self.consortium_count = consortium_count
        self.create_time = create_time
        self.description = description
        self.domain = domain
        self.name = name
        self.organization_id = organization_id
        self.owner_bid = owner_bid
        self.owner_name = owner_name
        self.owner_uid = owner_uid
        self.peer_count = peer_count
        self.region_id = region_id
        self.request_id = request_id
        self.service_state = service_state
        self.spec_name = spec_name
        self.user_count = user_count
        self.zone_id = zone_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cluster_state is not None:
            result['ClusterState'] = self.cluster_state
        if self.code_name is not None:
            result['CodeName'] = self.code_name
        if self.consortium_count is not None:
            result['ConsortiumCount'] = self.consortium_count
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.description is not None:
            result['Description'] = self.description
        if self.domain is not None:
            result['Domain'] = self.domain
        if self.name is not None:
            result['Name'] = self.name
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        if self.owner_bid is not None:
            result['OwnerBid'] = self.owner_bid
        if self.owner_name is not None:
            result['OwnerName'] = self.owner_name
        if self.owner_uid is not None:
            result['OwnerUid'] = self.owner_uid
        if self.peer_count is not None:
            result['PeerCount'] = self.peer_count
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.service_state is not None:
            result['ServiceState'] = self.service_state
        if self.spec_name is not None:
            result['SpecName'] = self.spec_name
        if self.user_count is not None:
            result['UserCount'] = self.user_count
        if self.zone_id is not None:
            result['ZoneId'] = self.zone_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ClusterState') is not None:
            self.cluster_state = m.get('ClusterState')
        if m.get('CodeName') is not None:
            self.code_name = m.get('CodeName')
        if m.get('ConsortiumCount') is not None:
            self.consortium_count = m.get('ConsortiumCount')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Domain') is not None:
            self.domain = m.get('Domain')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        if m.get('OwnerBid') is not None:
            self.owner_bid = m.get('OwnerBid')
        if m.get('OwnerName') is not None:
            self.owner_name = m.get('OwnerName')
        if m.get('OwnerUid') is not None:
            self.owner_uid = m.get('OwnerUid')
        if m.get('PeerCount') is not None:
            self.peer_count = m.get('PeerCount')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ServiceState') is not None:
            self.service_state = m.get('ServiceState')
        if m.get('SpecName') is not None:
            self.spec_name = m.get('SpecName')
        if m.get('UserCount') is not None:
            self.user_count = m.get('UserCount')
        if m.get('ZoneId') is not None:
            self.zone_id = m.get('ZoneId')
        return self


class CreateOrganizationResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: CreateOrganizationResponseBodyResult = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = CreateOrganizationResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateOrganizationResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateOrganizationResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateOrganizationResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateOrganizationUserRequest(TeaModel):
    def __init__(
        self,
        attrs: str = None,
        organization_id: str = None,
        password: str = None,
        username: str = None,
    ):
        self.attrs = attrs
        # This parameter is required.
        self.organization_id = organization_id
        self.password = password
        # This parameter is required.
        self.username = username

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.attrs is not None:
            result['Attrs'] = self.attrs
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        if self.password is not None:
            result['Password'] = self.password
        if self.username is not None:
            result['Username'] = self.username
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Attrs') is not None:
            self.attrs = m.get('Attrs')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        if m.get('Password') is not None:
            self.password = m.get('Password')
        if m.get('Username') is not None:
            self.username = m.get('Username')
        return self


class CreateOrganizationUserResponseBodyResult(TeaModel):
    def __init__(
        self,
        create_time: str = None,
        expire_time: str = None,
        fullname: str = None,
        organization_id: str = None,
        password: str = None,
        username: str = None,
    ):
        self.create_time = create_time
        self.expire_time = expire_time
        self.fullname = fullname
        self.organization_id = organization_id
        self.password = password
        self.username = username

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.fullname is not None:
            result['Fullname'] = self.fullname
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        if self.password is not None:
            result['Password'] = self.password
        if self.username is not None:
            result['Username'] = self.username
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('Fullname') is not None:
            self.fullname = m.get('Fullname')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        if m.get('Password') is not None:
            self.password = m.get('Password')
        if m.get('Username') is not None:
            self.username = m.get('Username')
        return self


class CreateOrganizationUserResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: CreateOrganizationUserResponseBodyResult = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = CreateOrganizationUserResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateOrganizationUserResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateOrganizationUserResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateOrganizationUserResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateOwnAccountRequest(TeaModel):
    def __init__(
        self,
        bizid: str = None,
        identity: str = None,
        public_key: str = None,
        recovery_key: str = None,
    ):
        self.bizid = bizid
        self.identity = identity
        self.public_key = public_key
        self.recovery_key = recovery_key

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        if self.identity is not None:
            result['Identity'] = self.identity
        if self.public_key is not None:
            result['PublicKey'] = self.public_key
        if self.recovery_key is not None:
            result['RecoveryKey'] = self.recovery_key
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        if m.get('Identity') is not None:
            self.identity = m.get('Identity')
        if m.get('PublicKey') is not None:
            self.public_key = m.get('PublicKey')
        if m.get('RecoveryKey') is not None:
            self.recovery_key = m.get('RecoveryKey')
        return self


class CreateOwnAccountResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: str = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class CreateOwnAccountResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateOwnAccountResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateOwnAccountResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreatePublicAccountWithKeyPairAutoCreationRequest(TeaModel):
    def __init__(
        self,
        account: str = None,
        bizid: str = None,
        password: str = None,
        recover_password: str = None,
    ):
        self.account = account
        self.bizid = bizid
        self.password = password
        self.recover_password = recover_password

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account is not None:
            result['Account'] = self.account
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        if self.password is not None:
            result['Password'] = self.password
        if self.recover_password is not None:
            result['RecoverPassword'] = self.recover_password
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Account') is not None:
            self.account = m.get('Account')
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        if m.get('Password') is not None:
            self.password = m.get('Password')
        if m.get('RecoverPassword') is not None:
            self.recover_password = m.get('RecoverPassword')
        return self


class CreatePublicAccountWithKeyPairAutoCreationResponseBodyResult(TeaModel):
    def __init__(
        self,
        account_private_key: str = None,
        account_public_key: str = None,
        account_recover_private_key: str = None,
        account_recover_public_key: str = None,
    ):
        self.account_private_key = account_private_key
        self.account_public_key = account_public_key
        self.account_recover_private_key = account_recover_private_key
        self.account_recover_public_key = account_recover_public_key

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_private_key is not None:
            result['AccountPrivateKey'] = self.account_private_key
        if self.account_public_key is not None:
            result['AccountPublicKey'] = self.account_public_key
        if self.account_recover_private_key is not None:
            result['AccountRecoverPrivateKey'] = self.account_recover_private_key
        if self.account_recover_public_key is not None:
            result['AccountRecoverPublicKey'] = self.account_recover_public_key
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccountPrivateKey') is not None:
            self.account_private_key = m.get('AccountPrivateKey')
        if m.get('AccountPublicKey') is not None:
            self.account_public_key = m.get('AccountPublicKey')
        if m.get('AccountRecoverPrivateKey') is not None:
            self.account_recover_private_key = m.get('AccountRecoverPrivateKey')
        if m.get('AccountRecoverPublicKey') is not None:
            self.account_recover_public_key = m.get('AccountRecoverPublicKey')
        return self


class CreatePublicAccountWithKeyPairAutoCreationResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: CreatePublicAccountWithKeyPairAutoCreationResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = CreatePublicAccountWithKeyPairAutoCreationResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class CreatePublicAccountWithKeyPairAutoCreationResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreatePublicAccountWithKeyPairAutoCreationResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreatePublicAccountWithKeyPairAutoCreationResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreatePublicAntChainAccountRequest(TeaModel):
    def __init__(
        self,
        account: str = None,
        account_pub_key: str = None,
        account_recover_pub_key: str = None,
        bizid: str = None,
    ):
        self.account = account
        self.account_pub_key = account_pub_key
        self.account_recover_pub_key = account_recover_pub_key
        self.bizid = bizid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account is not None:
            result['Account'] = self.account
        if self.account_pub_key is not None:
            result['AccountPubKey'] = self.account_pub_key
        if self.account_recover_pub_key is not None:
            result['AccountRecoverPubKey'] = self.account_recover_pub_key
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Account') is not None:
            self.account = m.get('Account')
        if m.get('AccountPubKey') is not None:
            self.account_pub_key = m.get('AccountPubKey')
        if m.get('AccountRecoverPubKey') is not None:
            self.account_recover_pub_key = m.get('AccountRecoverPubKey')
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        return self


class CreatePublicAntChainAccountResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: str = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class CreatePublicAntChainAccountResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreatePublicAntChainAccountResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreatePublicAntChainAccountResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateSmartContractJobResponseBodyResult(TeaModel):
    def __init__(
        self,
        access_id: str = None,
        dir: int = None,
        expire: int = None,
        host: str = None,
        job_id: str = None,
        policy: str = None,
        signature: str = None,
    ):
        self.access_id = access_id
        self.dir = dir
        self.expire = expire
        self.host = host
        self.job_id = job_id
        self.policy = policy
        self.signature = signature

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.access_id is not None:
            result['AccessId'] = self.access_id
        if self.dir is not None:
            result['Dir'] = self.dir
        if self.expire is not None:
            result['Expire'] = self.expire
        if self.host is not None:
            result['Host'] = self.host
        if self.job_id is not None:
            result['JobID'] = self.job_id
        if self.policy is not None:
            result['Policy'] = self.policy
        if self.signature is not None:
            result['Signature'] = self.signature
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccessId') is not None:
            self.access_id = m.get('AccessId')
        if m.get('Dir') is not None:
            self.dir = m.get('Dir')
        if m.get('Expire') is not None:
            self.expire = m.get('Expire')
        if m.get('Host') is not None:
            self.host = m.get('Host')
        if m.get('JobID') is not None:
            self.job_id = m.get('JobID')
        if m.get('Policy') is not None:
            self.policy = m.get('Policy')
        if m.get('Signature') is not None:
            self.signature = m.get('Signature')
        return self


class CreateSmartContractJobResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: CreateSmartContractJobResponseBodyResult = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = CreateSmartContractJobResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateSmartContractJobResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateSmartContractJobResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateSmartContractJobResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateTriggerRequest(TeaModel):
    def __init__(
        self,
        channel_id: str = None,
        name: str = None,
        options: str = None,
        organization_id: str = None,
        source: str = None,
        status: str = None,
        type: str = None,
    ):
        # This parameter is required.
        self.channel_id = channel_id
        # This parameter is required.
        self.name = name
        self.options = options
        # This parameter is required.
        self.organization_id = organization_id
        # This parameter is required.
        self.source = source
        self.status = status
        # This parameter is required.
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.name is not None:
            result['Name'] = self.name
        if self.options is not None:
            result['Options'] = self.options
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        if self.source is not None:
            result['Source'] = self.source
        if self.status is not None:
            result['Status'] = self.status
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Options') is not None:
            self.options = m.get('Options')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        if m.get('Source') is not None:
            self.source = m.get('Source')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class CreateTriggerResponseBodyResult(TeaModel):
    def __init__(
        self,
        channel_id: str = None,
        channel_name: str = None,
        create_time: int = None,
        error_message: str = None,
        name: str = None,
        options: str = None,
        source: str = None,
        status: int = None,
        type: str = None,
    ):
        self.channel_id = channel_id
        self.channel_name = channel_name
        self.create_time = create_time
        self.error_message = error_message
        self.name = name
        self.options = options
        self.source = source
        self.status = status
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.channel_name is not None:
            result['ChannelName'] = self.channel_name
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.name is not None:
            result['Name'] = self.name
        if self.options is not None:
            result['Options'] = self.options
        if self.source is not None:
            result['Source'] = self.source
        if self.status is not None:
            result['Status'] = self.status
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('ChannelName') is not None:
            self.channel_name = m.get('ChannelName')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Options') is not None:
            self.options = m.get('Options')
        if m.get('Source') is not None:
            self.source = m.get('Source')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class CreateTriggerResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: CreateTriggerResponseBodyResult = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = CreateTriggerResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateTriggerResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateTriggerResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateTriggerResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteAntChainConsortiumRequest(TeaModel):
    def __init__(
        self,
        consortium_id: str = None,
    ):
        # This parameter is required.
        self.consortium_id = consortium_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        return self


class DeleteAntChainConsortiumResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: str = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class DeleteAntChainConsortiumResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteAntChainConsortiumResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteAntChainConsortiumResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteAntChainContractContentRequest(TeaModel):
    def __init__(
        self,
        content_id: str = None,
    ):
        # This parameter is required.
        self.content_id = content_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content_id is not None:
            result['ContentId'] = self.content_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ContentId') is not None:
            self.content_id = m.get('ContentId')
        return self


class DeleteAntChainContractContentResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: str = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class DeleteAntChainContractContentResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteAntChainContractContentResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteAntChainContractContentResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteAntChainContractProjectRequest(TeaModel):
    def __init__(
        self,
        project_id: str = None,
    ):
        # This parameter is required.
        self.project_id = project_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.project_id is not None:
            result['ProjectId'] = self.project_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ProjectId') is not None:
            self.project_id = m.get('ProjectId')
        return self


class DeleteAntChainContractProjectResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: str = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class DeleteAntChainContractProjectResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteAntChainContractProjectResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteAntChainContractProjectResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteAntChainMiniAppQRCodeAuthorizedUserRequest(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        phone: str = None,
    ):
        # This parameter is required.
        self.ant_chain_id = ant_chain_id
        # This parameter is required.
        self.phone = phone

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.phone is not None:
            result['Phone'] = self.phone
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('Phone') is not None:
            self.phone = m.get('Phone')
        return self


class DeleteAntChainMiniAppQRCodeAuthorizedUserResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: str = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class DeleteAntChainMiniAppQRCodeAuthorizedUserResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteAntChainMiniAppQRCodeAuthorizedUserResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteAntChainMiniAppQRCodeAuthorizedUserResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteChaincodeRequest(TeaModel):
    def __init__(
        self,
        chaincode_id: str = None,
    ):
        self.chaincode_id = chaincode_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.chaincode_id is not None:
            result['ChaincodeId'] = self.chaincode_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChaincodeId') is not None:
            self.chaincode_id = m.get('ChaincodeId')
        return self


class DeleteChaincodeResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteChaincodeResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteChaincodeResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteChaincodeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteGovernanceTaskRequest(TeaModel):
    def __init__(
        self,
        channel_id: str = None,
        organization_id: str = None,
        task_id: str = None,
    ):
        # This parameter is required.
        self.channel_id = channel_id
        # This parameter is required.
        self.organization_id = organization_id
        # This parameter is required.
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class DeleteGovernanceTaskResponseBodyResultContentAddedOrganizationsAnchorPeers(TeaModel):
    def __init__(
        self,
        host: str = None,
        port: int = None,
    ):
        self.host = host
        self.port = port

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.host is not None:
            result['Host'] = self.host
        if self.port is not None:
            result['Port'] = self.port
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Host') is not None:
            self.host = m.get('Host')
        if m.get('Port') is not None:
            self.port = m.get('Port')
        return self


class DeleteGovernanceTaskResponseBodyResultContentAddedOrganizationsOrdererNodes(TeaModel):
    def __init__(
        self,
        address: str = None,
        certificate: str = None,
        key: str = None,
        tlsroot: str = None,
    ):
        self.address = address
        self.certificate = certificate
        self.key = key
        self.tlsroot = tlsroot

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.address is not None:
            result['Address'] = self.address
        if self.certificate is not None:
            result['Certificate'] = self.certificate
        if self.key is not None:
            result['Key'] = self.key
        if self.tlsroot is not None:
            result['Tlsroot'] = self.tlsroot
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Address') is not None:
            self.address = m.get('Address')
        if m.get('Certificate') is not None:
            self.certificate = m.get('Certificate')
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Tlsroot') is not None:
            self.tlsroot = m.get('Tlsroot')
        return self


class DeleteGovernanceTaskResponseBodyResultContentAddedOrganizations(TeaModel):
    def __init__(
        self,
        anchor_peers: List[DeleteGovernanceTaskResponseBodyResultContentAddedOrganizationsAnchorPeers] = None,
        crls: str = None,
        msp_id: str = None,
        msp_type: str = None,
        orderer: bool = None,
        orderer_nodes: List[DeleteGovernanceTaskResponseBodyResultContentAddedOrganizationsOrdererNodes] = None,
        root_certificates: str = None,
        tls_root_certificates: str = None,
    ):
        self.anchor_peers = anchor_peers
        self.crls = crls
        self.msp_id = msp_id
        self.msp_type = msp_type
        self.orderer = orderer
        self.orderer_nodes = orderer_nodes
        self.root_certificates = root_certificates
        self.tls_root_certificates = tls_root_certificates

    def validate(self):
        if self.anchor_peers:
            for k in self.anchor_peers:
                if k:
                    k.validate()
        if self.orderer_nodes:
            for k in self.orderer_nodes:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AnchorPeers'] = []
        if self.anchor_peers is not None:
            for k in self.anchor_peers:
                result['AnchorPeers'].append(k.to_map() if k else None)
        if self.crls is not None:
            result['Crls'] = self.crls
        if self.msp_id is not None:
            result['MspId'] = self.msp_id
        if self.msp_type is not None:
            result['MspType'] = self.msp_type
        if self.orderer is not None:
            result['Orderer'] = self.orderer
        result['OrdererNodes'] = []
        if self.orderer_nodes is not None:
            for k in self.orderer_nodes:
                result['OrdererNodes'].append(k.to_map() if k else None)
        if self.root_certificates is not None:
            result['RootCertificates'] = self.root_certificates
        if self.tls_root_certificates is not None:
            result['TlsRootCertificates'] = self.tls_root_certificates
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.anchor_peers = []
        if m.get('AnchorPeers') is not None:
            for k in m.get('AnchorPeers'):
                temp_model = DeleteGovernanceTaskResponseBodyResultContentAddedOrganizationsAnchorPeers()
                self.anchor_peers.append(temp_model.from_map(k))
        if m.get('Crls') is not None:
            self.crls = m.get('Crls')
        if m.get('MspId') is not None:
            self.msp_id = m.get('MspId')
        if m.get('MspType') is not None:
            self.msp_type = m.get('MspType')
        if m.get('Orderer') is not None:
            self.orderer = m.get('Orderer')
        self.orderer_nodes = []
        if m.get('OrdererNodes') is not None:
            for k in m.get('OrdererNodes'):
                temp_model = DeleteGovernanceTaskResponseBodyResultContentAddedOrganizationsOrdererNodes()
                self.orderer_nodes.append(temp_model.from_map(k))
        if m.get('RootCertificates') is not None:
            self.root_certificates = m.get('RootCertificates')
        if m.get('TlsRootCertificates') is not None:
            self.tls_root_certificates = m.get('TlsRootCertificates')
        return self


class DeleteGovernanceTaskResponseBodyResultContentChaincodeSpecPkgCs(TeaModel):
    def __init__(
        self,
        input: str = None,
        name: str = None,
        path: str = None,
        type: int = None,
        version: str = None,
    ):
        self.input = input
        self.name = name
        self.path = path
        self.type = type
        self.version = version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.input is not None:
            result['Input'] = self.input
        if self.name is not None:
            result['Name'] = self.name
        if self.path is not None:
            result['Path'] = self.path
        if self.type is not None:
            result['Type'] = self.type
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Input') is not None:
            self.input = m.get('Input')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Path') is not None:
            self.path = m.get('Path')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class DeleteGovernanceTaskResponseBodyResultContentChaincodeSpecPkg(TeaModel):
    def __init__(
        self,
        cs: DeleteGovernanceTaskResponseBodyResultContentChaincodeSpecPkgCs = None,
        policy: str = None,
        sha_256: str = None,
    ):
        self.cs = cs
        self.policy = policy
        self.sha_256 = sha_256

    def validate(self):
        if self.cs:
            self.cs.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cs is not None:
            result['Cs'] = self.cs.to_map()
        if self.policy is not None:
            result['Policy'] = self.policy
        if self.sha_256 is not None:
            result['Sha256'] = self.sha_256
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Cs') is not None:
            temp_model = DeleteGovernanceTaskResponseBodyResultContentChaincodeSpecPkgCs()
            self.cs = temp_model.from_map(m['Cs'])
        if m.get('Policy') is not None:
            self.policy = m.get('Policy')
        if m.get('Sha256') is not None:
            self.sha_256 = m.get('Sha256')
        return self


class DeleteGovernanceTaskResponseBodyResultContentOrdererConfig(TeaModel):
    def __init__(
        self,
        batch_timeout: str = None,
        max_message_count: int = None,
        preferred_max_bytes: int = None,
    ):
        self.batch_timeout = batch_timeout
        self.max_message_count = max_message_count
        self.preferred_max_bytes = preferred_max_bytes

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.batch_timeout is not None:
            result['BatchTimeout'] = self.batch_timeout
        if self.max_message_count is not None:
            result['MaxMessageCount'] = self.max_message_count
        if self.preferred_max_bytes is not None:
            result['PreferredMaxBytes'] = self.preferred_max_bytes
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BatchTimeout') is not None:
            self.batch_timeout = m.get('BatchTimeout')
        if m.get('MaxMessageCount') is not None:
            self.max_message_count = m.get('MaxMessageCount')
        if m.get('PreferredMaxBytes') is not None:
            self.preferred_max_bytes = m.get('PreferredMaxBytes')
        return self


class DeleteGovernanceTaskResponseBodyResultContentRemovedOrganizationsAnchorPeers(TeaModel):
    def __init__(
        self,
        host: str = None,
        port: int = None,
    ):
        self.host = host
        self.port = port

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.host is not None:
            result['Host'] = self.host
        if self.port is not None:
            result['Port'] = self.port
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Host') is not None:
            self.host = m.get('Host')
        if m.get('Port') is not None:
            self.port = m.get('Port')
        return self


class DeleteGovernanceTaskResponseBodyResultContentRemovedOrganizationsOrdererNodes(TeaModel):
    def __init__(
        self,
        address: str = None,
        certificate: str = None,
        key: str = None,
        tlsroot: str = None,
    ):
        self.address = address
        self.certificate = certificate
        self.key = key
        self.tlsroot = tlsroot

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.address is not None:
            result['Address'] = self.address
        if self.certificate is not None:
            result['Certificate'] = self.certificate
        if self.key is not None:
            result['Key'] = self.key
        if self.tlsroot is not None:
            result['Tlsroot'] = self.tlsroot
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Address') is not None:
            self.address = m.get('Address')
        if m.get('Certificate') is not None:
            self.certificate = m.get('Certificate')
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Tlsroot') is not None:
            self.tlsroot = m.get('Tlsroot')
        return self


class DeleteGovernanceTaskResponseBodyResultContentRemovedOrganizations(TeaModel):
    def __init__(
        self,
        anchor_peers: List[DeleteGovernanceTaskResponseBodyResultContentRemovedOrganizationsAnchorPeers] = None,
        crls: str = None,
        msp_id: str = None,
        msp_type: str = None,
        orderer: bool = None,
        orderer_nodes: List[DeleteGovernanceTaskResponseBodyResultContentRemovedOrganizationsOrdererNodes] = None,
        root_certificates: str = None,
        tls_root_certificates: str = None,
    ):
        self.anchor_peers = anchor_peers
        self.crls = crls
        self.msp_id = msp_id
        self.msp_type = msp_type
        self.orderer = orderer
        self.orderer_nodes = orderer_nodes
        self.root_certificates = root_certificates
        self.tls_root_certificates = tls_root_certificates

    def validate(self):
        if self.anchor_peers:
            for k in self.anchor_peers:
                if k:
                    k.validate()
        if self.orderer_nodes:
            for k in self.orderer_nodes:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AnchorPeers'] = []
        if self.anchor_peers is not None:
            for k in self.anchor_peers:
                result['AnchorPeers'].append(k.to_map() if k else None)
        if self.crls is not None:
            result['Crls'] = self.crls
        if self.msp_id is not None:
            result['MspId'] = self.msp_id
        if self.msp_type is not None:
            result['MspType'] = self.msp_type
        if self.orderer is not None:
            result['Orderer'] = self.orderer
        result['OrdererNodes'] = []
        if self.orderer_nodes is not None:
            for k in self.orderer_nodes:
                result['OrdererNodes'].append(k.to_map() if k else None)
        if self.root_certificates is not None:
            result['RootCertificates'] = self.root_certificates
        if self.tls_root_certificates is not None:
            result['TlsRootCertificates'] = self.tls_root_certificates
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.anchor_peers = []
        if m.get('AnchorPeers') is not None:
            for k in m.get('AnchorPeers'):
                temp_model = DeleteGovernanceTaskResponseBodyResultContentRemovedOrganizationsAnchorPeers()
                self.anchor_peers.append(temp_model.from_map(k))
        if m.get('Crls') is not None:
            self.crls = m.get('Crls')
        if m.get('MspId') is not None:
            self.msp_id = m.get('MspId')
        if m.get('MspType') is not None:
            self.msp_type = m.get('MspType')
        if m.get('Orderer') is not None:
            self.orderer = m.get('Orderer')
        self.orderer_nodes = []
        if m.get('OrdererNodes') is not None:
            for k in m.get('OrdererNodes'):
                temp_model = DeleteGovernanceTaskResponseBodyResultContentRemovedOrganizationsOrdererNodes()
                self.orderer_nodes.append(temp_model.from_map(k))
        if m.get('RootCertificates') is not None:
            self.root_certificates = m.get('RootCertificates')
        if m.get('TlsRootCertificates') is not None:
            self.tls_root_certificates = m.get('TlsRootCertificates')
        return self


class DeleteGovernanceTaskResponseBodyResultContent(TeaModel):
    def __init__(
        self,
        added_organizations: List[DeleteGovernanceTaskResponseBodyResultContentAddedOrganizations] = None,
        chaincode_spec_pkg: DeleteGovernanceTaskResponseBodyResultContentChaincodeSpecPkg = None,
        orderer_config: DeleteGovernanceTaskResponseBodyResultContentOrdererConfig = None,
        raw: str = None,
        removed_organizations: List[DeleteGovernanceTaskResponseBodyResultContentRemovedOrganizations] = None,
        rw_sets: str = None,
    ):
        self.added_organizations = added_organizations
        self.chaincode_spec_pkg = chaincode_spec_pkg
        self.orderer_config = orderer_config
        self.raw = raw
        self.removed_organizations = removed_organizations
        self.rw_sets = rw_sets

    def validate(self):
        if self.added_organizations:
            for k in self.added_organizations:
                if k:
                    k.validate()
        if self.chaincode_spec_pkg:
            self.chaincode_spec_pkg.validate()
        if self.orderer_config:
            self.orderer_config.validate()
        if self.removed_organizations:
            for k in self.removed_organizations:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AddedOrganizations'] = []
        if self.added_organizations is not None:
            for k in self.added_organizations:
                result['AddedOrganizations'].append(k.to_map() if k else None)
        if self.chaincode_spec_pkg is not None:
            result['ChaincodeSpecPkg'] = self.chaincode_spec_pkg.to_map()
        if self.orderer_config is not None:
            result['OrdererConfig'] = self.orderer_config.to_map()
        if self.raw is not None:
            result['Raw'] = self.raw
        result['RemovedOrganizations'] = []
        if self.removed_organizations is not None:
            for k in self.removed_organizations:
                result['RemovedOrganizations'].append(k.to_map() if k else None)
        if self.rw_sets is not None:
            result['RwSets'] = self.rw_sets
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.added_organizations = []
        if m.get('AddedOrganizations') is not None:
            for k in m.get('AddedOrganizations'):
                temp_model = DeleteGovernanceTaskResponseBodyResultContentAddedOrganizations()
                self.added_organizations.append(temp_model.from_map(k))
        if m.get('ChaincodeSpecPkg') is not None:
            temp_model = DeleteGovernanceTaskResponseBodyResultContentChaincodeSpecPkg()
            self.chaincode_spec_pkg = temp_model.from_map(m['ChaincodeSpecPkg'])
        if m.get('OrdererConfig') is not None:
            temp_model = DeleteGovernanceTaskResponseBodyResultContentOrdererConfig()
            self.orderer_config = temp_model.from_map(m['OrdererConfig'])
        if m.get('Raw') is not None:
            self.raw = m.get('Raw')
        self.removed_organizations = []
        if m.get('RemovedOrganizations') is not None:
            for k in m.get('RemovedOrganizations'):
                temp_model = DeleteGovernanceTaskResponseBodyResultContentRemovedOrganizations()
                self.removed_organizations.append(temp_model.from_map(k))
        if m.get('RwSets') is not None:
            self.rw_sets = m.get('RwSets')
        return self


class DeleteGovernanceTaskResponseBodyResult(TeaModel):
    def __init__(
        self,
        channel_name: str = None,
        content: DeleteGovernanceTaskResponseBodyResultContent = None,
        create_time: int = None,
        creator: str = None,
        description: str = None,
        status: str = None,
        task_id: str = None,
        type: str = None,
    ):
        self.channel_name = channel_name
        self.content = content
        self.create_time = create_time
        self.creator = creator
        self.description = description
        self.status = status
        self.task_id = task_id
        self.type = type

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.channel_name is not None:
            result['ChannelName'] = self.channel_name
        if self.content is not None:
            result['Content'] = self.content.to_map()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.creator is not None:
            result['Creator'] = self.creator
        if self.description is not None:
            result['Description'] = self.description
        if self.status is not None:
            result['Status'] = self.status
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChannelName') is not None:
            self.channel_name = m.get('ChannelName')
        if m.get('Content') is not None:
            temp_model = DeleteGovernanceTaskResponseBodyResultContent()
            self.content = temp_model.from_map(m['Content'])
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Creator') is not None:
            self.creator = m.get('Creator')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class DeleteGovernanceTaskResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: DeleteGovernanceTaskResponseBodyResult = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DeleteGovernanceTaskResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteGovernanceTaskResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteGovernanceTaskResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteGovernanceTaskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteTriggerRequest(TeaModel):
    def __init__(
        self,
        channel_id: str = None,
        name: str = None,
        organization_id: str = None,
    ):
        # This parameter is required.
        self.channel_id = channel_id
        # This parameter is required.
        self.name = name
        # This parameter is required.
        self.organization_id = organization_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.name is not None:
            result['Name'] = self.name
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        return self


class DeleteTriggerResponseBodyResultCheckpoint(TeaModel):
    def __init__(
        self,
        error_count: int = None,
        height: int = None,
        index: int = None,
        type: str = None,
    ):
        self.error_count = error_count
        self.height = height
        self.index = index
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_count is not None:
            result['ErrorCount'] = self.error_count
        if self.height is not None:
            result['Height'] = self.height
        if self.index is not None:
            result['Index'] = self.index
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCount') is not None:
            self.error_count = m.get('ErrorCount')
        if m.get('Height') is not None:
            self.height = m.get('Height')
        if m.get('Index') is not None:
            self.index = m.get('Index')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class DeleteTriggerResponseBodyResult(TeaModel):
    def __init__(
        self,
        channel_id: str = None,
        channel_name: str = None,
        checkpoint: DeleteTriggerResponseBodyResultCheckpoint = None,
        create_time: int = None,
        error_message: str = None,
        name: str = None,
        options: str = None,
        source: str = None,
        status: int = None,
        type: str = None,
    ):
        self.channel_id = channel_id
        self.channel_name = channel_name
        self.checkpoint = checkpoint
        self.create_time = create_time
        self.error_message = error_message
        self.name = name
        self.options = options
        self.source = source
        self.status = status
        self.type = type

    def validate(self):
        if self.checkpoint:
            self.checkpoint.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.channel_name is not None:
            result['ChannelName'] = self.channel_name
        if self.checkpoint is not None:
            result['Checkpoint'] = self.checkpoint.to_map()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.name is not None:
            result['Name'] = self.name
        if self.options is not None:
            result['Options'] = self.options
        if self.source is not None:
            result['Source'] = self.source
        if self.status is not None:
            result['Status'] = self.status
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('ChannelName') is not None:
            self.channel_name = m.get('ChannelName')
        if m.get('Checkpoint') is not None:
            temp_model = DeleteTriggerResponseBodyResultCheckpoint()
            self.checkpoint = temp_model.from_map(m['Checkpoint'])
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Options') is not None:
            self.options = m.get('Options')
        if m.get('Source') is not None:
            self.source = m.get('Source')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class DeleteTriggerResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: DeleteTriggerResponseBodyResult = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DeleteTriggerResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteTriggerResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteTriggerResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteTriggerResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAntChainAccountsRequest(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        page_number: int = None,
        page_size: int = None,
    ):
        # This parameter is required.
        self.ant_chain_id = ant_chain_id
        self.page_number = page_number
        # This parameter is required.
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class DescribeAntChainAccountsResponseBodyResultAccounts(TeaModel):
    def __init__(
        self,
        account: str = None,
        account_public_key: str = None,
        account_recovery_key: str = None,
        account_status: str = None,
        ant_chain_id: str = None,
    ):
        self.account = account
        self.account_public_key = account_public_key
        self.account_recovery_key = account_recovery_key
        self.account_status = account_status
        self.ant_chain_id = ant_chain_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account is not None:
            result['Account'] = self.account
        if self.account_public_key is not None:
            result['AccountPublicKey'] = self.account_public_key
        if self.account_recovery_key is not None:
            result['AccountRecoveryKey'] = self.account_recovery_key
        if self.account_status is not None:
            result['AccountStatus'] = self.account_status
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Account') is not None:
            self.account = m.get('Account')
        if m.get('AccountPublicKey') is not None:
            self.account_public_key = m.get('AccountPublicKey')
        if m.get('AccountRecoveryKey') is not None:
            self.account_recovery_key = m.get('AccountRecoveryKey')
        if m.get('AccountStatus') is not None:
            self.account_status = m.get('AccountStatus')
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        return self


class DescribeAntChainAccountsResponseBodyResultPagination(TeaModel):
    def __init__(
        self,
        page_number: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        self.page_number = page_number
        self.page_size = page_size
        self.total_count = total_count

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class DescribeAntChainAccountsResponseBodyResult(TeaModel):
    def __init__(
        self,
        accounts: List[DescribeAntChainAccountsResponseBodyResultAccounts] = None,
        pagination: DescribeAntChainAccountsResponseBodyResultPagination = None,
    ):
        self.accounts = accounts
        self.pagination = pagination

    def validate(self):
        if self.accounts:
            for k in self.accounts:
                if k:
                    k.validate()
        if self.pagination:
            self.pagination.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Accounts'] = []
        if self.accounts is not None:
            for k in self.accounts:
                result['Accounts'].append(k.to_map() if k else None)
        if self.pagination is not None:
            result['Pagination'] = self.pagination.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.accounts = []
        if m.get('Accounts') is not None:
            for k in m.get('Accounts'):
                temp_model = DescribeAntChainAccountsResponseBodyResultAccounts()
                self.accounts.append(temp_model.from_map(k))
        if m.get('Pagination') is not None:
            temp_model = DescribeAntChainAccountsResponseBodyResultPagination()
            self.pagination = temp_model.from_map(m['Pagination'])
        return self


class DescribeAntChainAccountsResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: DescribeAntChainAccountsResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeAntChainAccountsResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class DescribeAntChainAccountsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeAntChainAccountsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAntChainAccountsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAntChainAccountsNewRequest(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        consortium_id: str = None,
        page_number: int = None,
        page_size: int = None,
    ):
        # This parameter is required.
        self.ant_chain_id = ant_chain_id
        self.consortium_id = consortium_id
        self.page_number = page_number
        # This parameter is required.
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class DescribeAntChainAccountsNewResponseBodyResultAccounts(TeaModel):
    def __init__(
        self,
        account: str = None,
        account_public_key: str = None,
        account_recovery_key: str = None,
        account_status: str = None,
        ant_chain_id: str = None,
        create_time: int = None,
        member_name: str = None,
    ):
        self.account = account
        self.account_public_key = account_public_key
        self.account_recovery_key = account_recovery_key
        self.account_status = account_status
        self.ant_chain_id = ant_chain_id
        self.create_time = create_time
        self.member_name = member_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account is not None:
            result['Account'] = self.account
        if self.account_public_key is not None:
            result['AccountPublicKey'] = self.account_public_key
        if self.account_recovery_key is not None:
            result['AccountRecoveryKey'] = self.account_recovery_key
        if self.account_status is not None:
            result['AccountStatus'] = self.account_status
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.member_name is not None:
            result['MemberName'] = self.member_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Account') is not None:
            self.account = m.get('Account')
        if m.get('AccountPublicKey') is not None:
            self.account_public_key = m.get('AccountPublicKey')
        if m.get('AccountRecoveryKey') is not None:
            self.account_recovery_key = m.get('AccountRecoveryKey')
        if m.get('AccountStatus') is not None:
            self.account_status = m.get('AccountStatus')
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('MemberName') is not None:
            self.member_name = m.get('MemberName')
        return self


class DescribeAntChainAccountsNewResponseBodyResultPagination(TeaModel):
    def __init__(
        self,
        page_number: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        self.page_number = page_number
        self.page_size = page_size
        self.total_count = total_count

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class DescribeAntChainAccountsNewResponseBodyResult(TeaModel):
    def __init__(
        self,
        accounts: List[DescribeAntChainAccountsNewResponseBodyResultAccounts] = None,
        consortium_admin: bool = None,
        pagination: DescribeAntChainAccountsNewResponseBodyResultPagination = None,
    ):
        self.accounts = accounts
        self.consortium_admin = consortium_admin
        self.pagination = pagination

    def validate(self):
        if self.accounts:
            for k in self.accounts:
                if k:
                    k.validate()
        if self.pagination:
            self.pagination.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Accounts'] = []
        if self.accounts is not None:
            for k in self.accounts:
                result['Accounts'].append(k.to_map() if k else None)
        if self.consortium_admin is not None:
            result['ConsortiumAdmin'] = self.consortium_admin
        if self.pagination is not None:
            result['Pagination'] = self.pagination.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.accounts = []
        if m.get('Accounts') is not None:
            for k in m.get('Accounts'):
                temp_model = DescribeAntChainAccountsNewResponseBodyResultAccounts()
                self.accounts.append(temp_model.from_map(k))
        if m.get('ConsortiumAdmin') is not None:
            self.consortium_admin = m.get('ConsortiumAdmin')
        if m.get('Pagination') is not None:
            temp_model = DescribeAntChainAccountsNewResponseBodyResultPagination()
            self.pagination = temp_model.from_map(m['Pagination'])
        return self


class DescribeAntChainAccountsNewResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: str = None,
        message: str = None,
        request_id: str = None,
        result: DescribeAntChainAccountsNewResponseBodyResult = None,
        result_code: str = None,
        result_message: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.result = result
        self.result_code = result_code
        self.result_message = result_message
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeAntChainAccountsNewResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeAntChainAccountsNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeAntChainAccountsNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAntChainAccountsNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAntChainApplicationsRequest(TeaModel):
    def __init__(
        self,
        bizid: str = None,
        current: int = None,
        page_size: int = None,
        status: str = None,
    ):
        self.bizid = bizid
        self.current = current
        self.page_size = page_size
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        if self.current is not None:
            result['Current'] = self.current
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        if m.get('Current') is not None:
            self.current = m.get('Current')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeAntChainApplicationsResponseBodyResultApplyHistoryList(TeaModel):
    def __init__(
        self,
        bizid: str = None,
        createtime: int = None,
        id: int = None,
        reject_reason: str = None,
        req_addr: str = None,
        signed_addr: str = None,
        status: int = None,
        updatetime: int = None,
        username: str = None,
    ):
        self.bizid = bizid
        self.createtime = createtime
        self.id = id
        self.reject_reason = reject_reason
        self.req_addr = req_addr
        self.signed_addr = signed_addr
        self.status = status
        self.updatetime = updatetime
        self.username = username

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        if self.createtime is not None:
            result['Createtime'] = self.createtime
        if self.id is not None:
            result['Id'] = self.id
        if self.reject_reason is not None:
            result['RejectReason'] = self.reject_reason
        if self.req_addr is not None:
            result['ReqAddr'] = self.req_addr
        if self.signed_addr is not None:
            result['SignedAddr'] = self.signed_addr
        if self.status is not None:
            result['Status'] = self.status
        if self.updatetime is not None:
            result['Updatetime'] = self.updatetime
        if self.username is not None:
            result['Username'] = self.username
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        if m.get('Createtime') is not None:
            self.createtime = m.get('Createtime')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('RejectReason') is not None:
            self.reject_reason = m.get('RejectReason')
        if m.get('ReqAddr') is not None:
            self.req_addr = m.get('ReqAddr')
        if m.get('SignedAddr') is not None:
            self.signed_addr = m.get('SignedAddr')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Updatetime') is not None:
            self.updatetime = m.get('Updatetime')
        if m.get('Username') is not None:
            self.username = m.get('Username')
        return self


class DescribeAntChainApplicationsResponseBodyResultPagination(TeaModel):
    def __init__(
        self,
        current: int = None,
        page_size: int = None,
        total: int = None,
    ):
        self.current = current
        self.page_size = page_size
        self.total = total

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.current is not None:
            result['Current'] = self.current
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total is not None:
            result['Total'] = self.total
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Current') is not None:
            self.current = m.get('Current')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('Total') is not None:
            self.total = m.get('Total')
        return self


class DescribeAntChainApplicationsResponseBodyResult(TeaModel):
    def __init__(
        self,
        apply_history_list: List[DescribeAntChainApplicationsResponseBodyResultApplyHistoryList] = None,
        pagination: DescribeAntChainApplicationsResponseBodyResultPagination = None,
    ):
        self.apply_history_list = apply_history_list
        self.pagination = pagination

    def validate(self):
        if self.apply_history_list:
            for k in self.apply_history_list:
                if k:
                    k.validate()
        if self.pagination:
            self.pagination.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['ApplyHistoryList'] = []
        if self.apply_history_list is not None:
            for k in self.apply_history_list:
                result['ApplyHistoryList'].append(k.to_map() if k else None)
        if self.pagination is not None:
            result['Pagination'] = self.pagination.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.apply_history_list = []
        if m.get('ApplyHistoryList') is not None:
            for k in m.get('ApplyHistoryList'):
                temp_model = DescribeAntChainApplicationsResponseBodyResultApplyHistoryList()
                self.apply_history_list.append(temp_model.from_map(k))
        if m.get('Pagination') is not None:
            temp_model = DescribeAntChainApplicationsResponseBodyResultPagination()
            self.pagination = temp_model.from_map(m['Pagination'])
        return self


class DescribeAntChainApplicationsResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: DescribeAntChainApplicationsResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeAntChainApplicationsResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class DescribeAntChainApplicationsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeAntChainApplicationsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAntChainApplicationsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAntChainBlockRequest(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        height: int = None,
    ):
        # This parameter is required.
        self.ant_chain_id = ant_chain_id
        # This parameter is required.
        self.height = height

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.height is not None:
            result['Height'] = self.height
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('Height') is not None:
            self.height = m.get('Height')
        return self


class DescribeAntChainBlockResponseBodyResult(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        block_hash: str = None,
        create_time: int = None,
        height: int = None,
        previous_hash: str = None,
        root_tx_hash: str = None,
        trans_summary_list: str = None,
        transaction_size: int = None,
        version: int = None,
    ):
        self.ant_chain_id = ant_chain_id
        self.block_hash = block_hash
        self.create_time = create_time
        self.height = height
        self.previous_hash = previous_hash
        self.root_tx_hash = root_tx_hash
        self.trans_summary_list = trans_summary_list
        self.transaction_size = transaction_size
        self.version = version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.block_hash is not None:
            result['BlockHash'] = self.block_hash
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.height is not None:
            result['Height'] = self.height
        if self.previous_hash is not None:
            result['PreviousHash'] = self.previous_hash
        if self.root_tx_hash is not None:
            result['RootTxHash'] = self.root_tx_hash
        if self.trans_summary_list is not None:
            result['TransSummaryList'] = self.trans_summary_list
        if self.transaction_size is not None:
            result['TransactionSize'] = self.transaction_size
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('BlockHash') is not None:
            self.block_hash = m.get('BlockHash')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Height') is not None:
            self.height = m.get('Height')
        if m.get('PreviousHash') is not None:
            self.previous_hash = m.get('PreviousHash')
        if m.get('RootTxHash') is not None:
            self.root_tx_hash = m.get('RootTxHash')
        if m.get('TransSummaryList') is not None:
            self.trans_summary_list = m.get('TransSummaryList')
        if m.get('TransactionSize') is not None:
            self.transaction_size = m.get('TransactionSize')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class DescribeAntChainBlockResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: DescribeAntChainBlockResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeAntChainBlockResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class DescribeAntChainBlockResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeAntChainBlockResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAntChainBlockResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAntChainBlockNewRequest(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        consortium_id: str = None,
        height: int = None,
    ):
        # This parameter is required.
        self.ant_chain_id = ant_chain_id
        self.consortium_id = consortium_id
        # This parameter is required.
        self.height = height

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.height is not None:
            result['Height'] = self.height
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('Height') is not None:
            self.height = m.get('Height')
        return self


class DescribeAntChainBlockNewResponseBodyResultTransSummaryList(TeaModel):
    def __init__(
        self,
        alias: str = None,
        block_hash: str = None,
        category: int = None,
        create_time: int = None,
        from_: str = None,
        gas_used: int = None,
        hash: str = None,
        height: int = None,
        reference_count: int = None,
        to: str = None,
        trans_type_v10: str = None,
        trans_type_v6: str = None,
    ):
        self.alias = alias
        self.block_hash = block_hash
        self.category = category
        self.create_time = create_time
        self.from_ = from_
        self.gas_used = gas_used
        self.hash = hash
        self.height = height
        self.reference_count = reference_count
        self.to = to
        self.trans_type_v10 = trans_type_v10
        self.trans_type_v6 = trans_type_v6

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alias is not None:
            result['Alias'] = self.alias
        if self.block_hash is not None:
            result['BlockHash'] = self.block_hash
        if self.category is not None:
            result['Category'] = self.category
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.from_ is not None:
            result['From'] = self.from_
        if self.gas_used is not None:
            result['GasUsed'] = self.gas_used
        if self.hash is not None:
            result['Hash'] = self.hash
        if self.height is not None:
            result['Height'] = self.height
        if self.reference_count is not None:
            result['ReferenceCount'] = self.reference_count
        if self.to is not None:
            result['To'] = self.to
        if self.trans_type_v10 is not None:
            result['TransTypeV10'] = self.trans_type_v10
        if self.trans_type_v6 is not None:
            result['TransTypeV6'] = self.trans_type_v6
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Alias') is not None:
            self.alias = m.get('Alias')
        if m.get('BlockHash') is not None:
            self.block_hash = m.get('BlockHash')
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('From') is not None:
            self.from_ = m.get('From')
        if m.get('GasUsed') is not None:
            self.gas_used = m.get('GasUsed')
        if m.get('Hash') is not None:
            self.hash = m.get('Hash')
        if m.get('Height') is not None:
            self.height = m.get('Height')
        if m.get('ReferenceCount') is not None:
            self.reference_count = m.get('ReferenceCount')
        if m.get('To') is not None:
            self.to = m.get('To')
        if m.get('TransTypeV10') is not None:
            self.trans_type_v10 = m.get('TransTypeV10')
        if m.get('TransTypeV6') is not None:
            self.trans_type_v6 = m.get('TransTypeV6')
        return self


class DescribeAntChainBlockNewResponseBodyResult(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        block_hash: str = None,
        create_time: int = None,
        height: int = None,
        previous_hash: str = None,
        root_tx_hash: str = None,
        trans_summary_list: List[DescribeAntChainBlockNewResponseBodyResultTransSummaryList] = None,
        transaction_size: int = None,
        version: int = None,
    ):
        self.ant_chain_id = ant_chain_id
        self.block_hash = block_hash
        self.create_time = create_time
        self.height = height
        self.previous_hash = previous_hash
        self.root_tx_hash = root_tx_hash
        self.trans_summary_list = trans_summary_list
        self.transaction_size = transaction_size
        self.version = version

    def validate(self):
        if self.trans_summary_list:
            for k in self.trans_summary_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.block_hash is not None:
            result['BlockHash'] = self.block_hash
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.height is not None:
            result['Height'] = self.height
        if self.previous_hash is not None:
            result['PreviousHash'] = self.previous_hash
        if self.root_tx_hash is not None:
            result['RootTxHash'] = self.root_tx_hash
        result['TransSummaryList'] = []
        if self.trans_summary_list is not None:
            for k in self.trans_summary_list:
                result['TransSummaryList'].append(k.to_map() if k else None)
        if self.transaction_size is not None:
            result['TransactionSize'] = self.transaction_size
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('BlockHash') is not None:
            self.block_hash = m.get('BlockHash')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Height') is not None:
            self.height = m.get('Height')
        if m.get('PreviousHash') is not None:
            self.previous_hash = m.get('PreviousHash')
        if m.get('RootTxHash') is not None:
            self.root_tx_hash = m.get('RootTxHash')
        self.trans_summary_list = []
        if m.get('TransSummaryList') is not None:
            for k in m.get('TransSummaryList'):
                temp_model = DescribeAntChainBlockNewResponseBodyResultTransSummaryList()
                self.trans_summary_list.append(temp_model.from_map(k))
        if m.get('TransactionSize') is not None:
            self.transaction_size = m.get('TransactionSize')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class DescribeAntChainBlockNewResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: str = None,
        message: str = None,
        request_id: str = None,
        result: DescribeAntChainBlockNewResponseBodyResult = None,
        result_code: str = None,
        result_message: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.result = result
        self.result_code = result_code
        self.result_message = result_message
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeAntChainBlockNewResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeAntChainBlockNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeAntChainBlockNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAntChainBlockNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAntChainCertificateApplicationsRequest(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        page_number: int = None,
        page_size: int = None,
        status: str = None,
    ):
        # This parameter is required.
        self.ant_chain_id = ant_chain_id
        # This parameter is required.
        self.page_number = page_number
        # This parameter is required.
        self.page_size = page_size
        # This parameter is required.
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeAntChainCertificateApplicationsResponseBodyResultCertificateApplications(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        bid: str = None,
        createtime: int = None,
        status: str = None,
        updatetime: int = None,
        username: str = None,
    ):
        self.ant_chain_id = ant_chain_id
        self.bid = bid
        self.createtime = createtime
        self.status = status
        self.updatetime = updatetime
        self.username = username

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.bid is not None:
            result['Bid'] = self.bid
        if self.createtime is not None:
            result['Createtime'] = self.createtime
        if self.status is not None:
            result['Status'] = self.status
        if self.updatetime is not None:
            result['Updatetime'] = self.updatetime
        if self.username is not None:
            result['Username'] = self.username
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('Bid') is not None:
            self.bid = m.get('Bid')
        if m.get('Createtime') is not None:
            self.createtime = m.get('Createtime')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Updatetime') is not None:
            self.updatetime = m.get('Updatetime')
        if m.get('Username') is not None:
            self.username = m.get('Username')
        return self


class DescribeAntChainCertificateApplicationsResponseBodyResultPagination(TeaModel):
    def __init__(
        self,
        page_number: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        self.page_number = page_number
        self.page_size = page_size
        self.total_count = total_count

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class DescribeAntChainCertificateApplicationsResponseBodyResult(TeaModel):
    def __init__(
        self,
        certificate_applications: List[DescribeAntChainCertificateApplicationsResponseBodyResultCertificateApplications] = None,
        pagination: DescribeAntChainCertificateApplicationsResponseBodyResultPagination = None,
    ):
        self.certificate_applications = certificate_applications
        self.pagination = pagination

    def validate(self):
        if self.certificate_applications:
            for k in self.certificate_applications:
                if k:
                    k.validate()
        if self.pagination:
            self.pagination.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['CertificateApplications'] = []
        if self.certificate_applications is not None:
            for k in self.certificate_applications:
                result['CertificateApplications'].append(k.to_map() if k else None)
        if self.pagination is not None:
            result['Pagination'] = self.pagination.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.certificate_applications = []
        if m.get('CertificateApplications') is not None:
            for k in m.get('CertificateApplications'):
                temp_model = DescribeAntChainCertificateApplicationsResponseBodyResultCertificateApplications()
                self.certificate_applications.append(temp_model.from_map(k))
        if m.get('Pagination') is not None:
            temp_model = DescribeAntChainCertificateApplicationsResponseBodyResultPagination()
            self.pagination = temp_model.from_map(m['Pagination'])
        return self


class DescribeAntChainCertificateApplicationsResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: DescribeAntChainCertificateApplicationsResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeAntChainCertificateApplicationsResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class DescribeAntChainCertificateApplicationsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeAntChainCertificateApplicationsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAntChainCertificateApplicationsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAntChainCertificateApplicationsNewRequest(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        consortium_id: str = None,
        page_number: int = None,
        page_size: int = None,
        status: str = None,
    ):
        # This parameter is required.
        self.ant_chain_id = ant_chain_id
        self.consortium_id = consortium_id
        # This parameter is required.
        self.page_number = page_number
        # This parameter is required.
        self.page_size = page_size
        # This parameter is required.
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeAntChainCertificateApplicationsNewResponseBodyResultCertificateApplications(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        bid: str = None,
        createtime: int = None,
        status: str = None,
        updatetime: int = None,
        username: str = None,
    ):
        self.ant_chain_id = ant_chain_id
        self.bid = bid
        self.createtime = createtime
        self.status = status
        self.updatetime = updatetime
        self.username = username

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.bid is not None:
            result['Bid'] = self.bid
        if self.createtime is not None:
            result['Createtime'] = self.createtime
        if self.status is not None:
            result['Status'] = self.status
        if self.updatetime is not None:
            result['Updatetime'] = self.updatetime
        if self.username is not None:
            result['Username'] = self.username
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('Bid') is not None:
            self.bid = m.get('Bid')
        if m.get('Createtime') is not None:
            self.createtime = m.get('Createtime')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Updatetime') is not None:
            self.updatetime = m.get('Updatetime')
        if m.get('Username') is not None:
            self.username = m.get('Username')
        return self


class DescribeAntChainCertificateApplicationsNewResponseBodyResultPagination(TeaModel):
    def __init__(
        self,
        page_number: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        self.page_number = page_number
        self.page_size = page_size
        self.total_count = total_count

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class DescribeAntChainCertificateApplicationsNewResponseBodyResult(TeaModel):
    def __init__(
        self,
        certificate_applications: List[DescribeAntChainCertificateApplicationsNewResponseBodyResultCertificateApplications] = None,
        pagination: DescribeAntChainCertificateApplicationsNewResponseBodyResultPagination = None,
    ):
        self.certificate_applications = certificate_applications
        self.pagination = pagination

    def validate(self):
        if self.certificate_applications:
            for k in self.certificate_applications:
                if k:
                    k.validate()
        if self.pagination:
            self.pagination.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['CertificateApplications'] = []
        if self.certificate_applications is not None:
            for k in self.certificate_applications:
                result['CertificateApplications'].append(k.to_map() if k else None)
        if self.pagination is not None:
            result['Pagination'] = self.pagination.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.certificate_applications = []
        if m.get('CertificateApplications') is not None:
            for k in m.get('CertificateApplications'):
                temp_model = DescribeAntChainCertificateApplicationsNewResponseBodyResultCertificateApplications()
                self.certificate_applications.append(temp_model.from_map(k))
        if m.get('Pagination') is not None:
            temp_model = DescribeAntChainCertificateApplicationsNewResponseBodyResultPagination()
            self.pagination = temp_model.from_map(m['Pagination'])
        return self


class DescribeAntChainCertificateApplicationsNewResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: str = None,
        message: str = None,
        request_id: str = None,
        result: DescribeAntChainCertificateApplicationsNewResponseBodyResult = None,
        result_code: str = None,
        result_message: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.result = result
        self.result_code = result_code
        self.result_message = result_message
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeAntChainCertificateApplicationsNewResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeAntChainCertificateApplicationsNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeAntChainCertificateApplicationsNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAntChainCertificateApplicationsNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAntChainConfigOptionsRequest(TeaModel):
    def __init__(
        self,
        purpose: str = None,
    ):
        self.purpose = purpose

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.purpose is not None:
            result['Purpose'] = self.purpose
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Purpose') is not None:
            self.purpose = m.get('Purpose')
        return self


class DescribeAntChainConfigOptionsResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: Dict[str, Any] = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class DescribeAntChainConfigOptionsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeAntChainConfigOptionsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAntChainConfigOptionsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAntChainConsortiumsRequest(TeaModel):
    def __init__(
        self,
        page_number: int = None,
        page_size: int = None,
    ):
        self.page_number = page_number
        # This parameter is required.
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class DescribeAntChainConsortiumsResponseBodyResultAntConsortiums(TeaModel):
    def __init__(
        self,
        chain_num: int = None,
        consortium_description: str = None,
        consortium_id: str = None,
        consortium_name: str = None,
        create_time: int = None,
        is_empty_consortium: bool = None,
        member_num: int = None,
        role: str = None,
        status: str = None,
    ):
        self.chain_num = chain_num
        self.consortium_description = consortium_description
        self.consortium_id = consortium_id
        self.consortium_name = consortium_name
        self.create_time = create_time
        self.is_empty_consortium = is_empty_consortium
        self.member_num = member_num
        self.role = role
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.chain_num is not None:
            result['ChainNum'] = self.chain_num
        if self.consortium_description is not None:
            result['ConsortiumDescription'] = self.consortium_description
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.consortium_name is not None:
            result['ConsortiumName'] = self.consortium_name
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.is_empty_consortium is not None:
            result['IsEmptyConsortium'] = self.is_empty_consortium
        if self.member_num is not None:
            result['MemberNum'] = self.member_num
        if self.role is not None:
            result['Role'] = self.role
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChainNum') is not None:
            self.chain_num = m.get('ChainNum')
        if m.get('ConsortiumDescription') is not None:
            self.consortium_description = m.get('ConsortiumDescription')
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('ConsortiumName') is not None:
            self.consortium_name = m.get('ConsortiumName')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('IsEmptyConsortium') is not None:
            self.is_empty_consortium = m.get('IsEmptyConsortium')
        if m.get('MemberNum') is not None:
            self.member_num = m.get('MemberNum')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeAntChainConsortiumsResponseBodyResultPagination(TeaModel):
    def __init__(
        self,
        page_number: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        self.page_number = page_number
        self.page_size = page_size
        self.total_count = total_count

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class DescribeAntChainConsortiumsResponseBodyResult(TeaModel):
    def __init__(
        self,
        ant_consortiums: List[DescribeAntChainConsortiumsResponseBodyResultAntConsortiums] = None,
        pagination: DescribeAntChainConsortiumsResponseBodyResultPagination = None,
    ):
        self.ant_consortiums = ant_consortiums
        self.pagination = pagination

    def validate(self):
        if self.ant_consortiums:
            for k in self.ant_consortiums:
                if k:
                    k.validate()
        if self.pagination:
            self.pagination.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AntConsortiums'] = []
        if self.ant_consortiums is not None:
            for k in self.ant_consortiums:
                result['AntConsortiums'].append(k.to_map() if k else None)
        if self.pagination is not None:
            result['Pagination'] = self.pagination.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.ant_consortiums = []
        if m.get('AntConsortiums') is not None:
            for k in m.get('AntConsortiums'):
                temp_model = DescribeAntChainConsortiumsResponseBodyResultAntConsortiums()
                self.ant_consortiums.append(temp_model.from_map(k))
        if m.get('Pagination') is not None:
            temp_model = DescribeAntChainConsortiumsResponseBodyResultPagination()
            self.pagination = temp_model.from_map(m['Pagination'])
        return self


class DescribeAntChainConsortiumsResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: DescribeAntChainConsortiumsResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeAntChainConsortiumsResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class DescribeAntChainConsortiumsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeAntChainConsortiumsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAntChainConsortiumsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAntChainConsortiumsNewRequest(TeaModel):
    def __init__(
        self,
        page_number: int = None,
        page_size: int = None,
    ):
        self.page_number = page_number
        # This parameter is required.
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class DescribeAntChainConsortiumsNewResponseBodyResultAntConsortiums(TeaModel):
    def __init__(
        self,
        chain_num: int = None,
        consortium_description: str = None,
        consortium_id: str = None,
        consortium_name: str = None,
        create_time: int = None,
        is_empty_consortium: bool = None,
        member_num: int = None,
        role: str = None,
        status: str = None,
    ):
        self.chain_num = chain_num
        self.consortium_description = consortium_description
        self.consortium_id = consortium_id
        self.consortium_name = consortium_name
        self.create_time = create_time
        self.is_empty_consortium = is_empty_consortium
        self.member_num = member_num
        self.role = role
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.chain_num is not None:
            result['ChainNum'] = self.chain_num
        if self.consortium_description is not None:
            result['ConsortiumDescription'] = self.consortium_description
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.consortium_name is not None:
            result['ConsortiumName'] = self.consortium_name
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.is_empty_consortium is not None:
            result['IsEmptyConsortium'] = self.is_empty_consortium
        if self.member_num is not None:
            result['MemberNum'] = self.member_num
        if self.role is not None:
            result['Role'] = self.role
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChainNum') is not None:
            self.chain_num = m.get('ChainNum')
        if m.get('ConsortiumDescription') is not None:
            self.consortium_description = m.get('ConsortiumDescription')
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('ConsortiumName') is not None:
            self.consortium_name = m.get('ConsortiumName')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('IsEmptyConsortium') is not None:
            self.is_empty_consortium = m.get('IsEmptyConsortium')
        if m.get('MemberNum') is not None:
            self.member_num = m.get('MemberNum')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeAntChainConsortiumsNewResponseBodyResultPagination(TeaModel):
    def __init__(
        self,
        page_number: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        self.page_number = page_number
        self.page_size = page_size
        self.total_count = total_count

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class DescribeAntChainConsortiumsNewResponseBodyResult(TeaModel):
    def __init__(
        self,
        ant_consortiums: List[DescribeAntChainConsortiumsNewResponseBodyResultAntConsortiums] = None,
        pagination: DescribeAntChainConsortiumsNewResponseBodyResultPagination = None,
    ):
        self.ant_consortiums = ant_consortiums
        self.pagination = pagination

    def validate(self):
        if self.ant_consortiums:
            for k in self.ant_consortiums:
                if k:
                    k.validate()
        if self.pagination:
            self.pagination.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AntConsortiums'] = []
        if self.ant_consortiums is not None:
            for k in self.ant_consortiums:
                result['AntConsortiums'].append(k.to_map() if k else None)
        if self.pagination is not None:
            result['Pagination'] = self.pagination.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.ant_consortiums = []
        if m.get('AntConsortiums') is not None:
            for k in m.get('AntConsortiums'):
                temp_model = DescribeAntChainConsortiumsNewResponseBodyResultAntConsortiums()
                self.ant_consortiums.append(temp_model.from_map(k))
        if m.get('Pagination') is not None:
            temp_model = DescribeAntChainConsortiumsNewResponseBodyResultPagination()
            self.pagination = temp_model.from_map(m['Pagination'])
        return self


class DescribeAntChainConsortiumsNewResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: str = None,
        message: str = None,
        request_id: str = None,
        result: DescribeAntChainConsortiumsNewResponseBodyResult = None,
        result_code: str = None,
        result_message: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.result = result
        self.result_code = result_code
        self.result_message = result_message
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeAntChainConsortiumsNewResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeAntChainConsortiumsNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeAntChainConsortiumsNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAntChainConsortiumsNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAntChainContractProjectContentTreeRequest(TeaModel):
    def __init__(
        self,
        project_id: str = None,
    ):
        # This parameter is required.
        self.project_id = project_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.project_id is not None:
            result['ProjectId'] = self.project_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ProjectId') is not None:
            self.project_id = m.get('ProjectId')
        return self


class DescribeAntChainContractProjectContentTreeResponseBodyResult(TeaModel):
    def __init__(
        self,
        children: List[Dict[str, Any]] = None,
        project_description: str = None,
        project_id: str = None,
        project_name: str = None,
        project_version: str = None,
    ):
        self.children = children
        self.project_description = project_description
        self.project_id = project_id
        self.project_name = project_name
        self.project_version = project_version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.children is not None:
            result['Children'] = self.children
        if self.project_description is not None:
            result['ProjectDescription'] = self.project_description
        if self.project_id is not None:
            result['ProjectId'] = self.project_id
        if self.project_name is not None:
            result['ProjectName'] = self.project_name
        if self.project_version is not None:
            result['ProjectVersion'] = self.project_version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Children') is not None:
            self.children = m.get('Children')
        if m.get('ProjectDescription') is not None:
            self.project_description = m.get('ProjectDescription')
        if m.get('ProjectId') is not None:
            self.project_id = m.get('ProjectId')
        if m.get('ProjectName') is not None:
            self.project_name = m.get('ProjectName')
        if m.get('ProjectVersion') is not None:
            self.project_version = m.get('ProjectVersion')
        return self


class DescribeAntChainContractProjectContentTreeResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: DescribeAntChainContractProjectContentTreeResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeAntChainContractProjectContentTreeResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class DescribeAntChainContractProjectContentTreeResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeAntChainContractProjectContentTreeResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAntChainContractProjectContentTreeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAntChainContractProjectContentTreeNewRequest(TeaModel):
    def __init__(
        self,
        consortium_id: str = None,
        project_id: str = None,
    ):
        # This parameter is required.
        self.consortium_id = consortium_id
        # This parameter is required.
        self.project_id = project_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.project_id is not None:
            result['ProjectId'] = self.project_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('ProjectId') is not None:
            self.project_id = m.get('ProjectId')
        return self


class DescribeAntChainContractProjectContentTreeNewResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: str = None,
        message: str = None,
        request_id: str = None,
        result: str = None,
        result_code: str = None,
        result_message: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.result = result
        self.result_code = result_code
        self.result_message = result_message
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeAntChainContractProjectContentTreeNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeAntChainContractProjectContentTreeNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAntChainContractProjectContentTreeNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAntChainContractProjectsRequest(TeaModel):
    def __init__(
        self,
        consortium_id: str = None,
        page_number: int = None,
        page_size: int = None,
    ):
        # This parameter is required.
        self.consortium_id = consortium_id
        # This parameter is required.
        self.page_number = page_number
        # This parameter is required.
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class DescribeAntChainContractProjectsResponseBodyResultContractProjects(TeaModel):
    def __init__(
        self,
        consortium_id: str = None,
        create_time: int = None,
        project_description: str = None,
        project_id: str = None,
        project_name: str = None,
        project_version: str = None,
        update_time: int = None,
    ):
        self.consortium_id = consortium_id
        self.create_time = create_time
        self.project_description = project_description
        self.project_id = project_id
        self.project_name = project_name
        self.project_version = project_version
        self.update_time = update_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.project_description is not None:
            result['ProjectDescription'] = self.project_description
        if self.project_id is not None:
            result['ProjectId'] = self.project_id
        if self.project_name is not None:
            result['ProjectName'] = self.project_name
        if self.project_version is not None:
            result['ProjectVersion'] = self.project_version
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('ProjectDescription') is not None:
            self.project_description = m.get('ProjectDescription')
        if m.get('ProjectId') is not None:
            self.project_id = m.get('ProjectId')
        if m.get('ProjectName') is not None:
            self.project_name = m.get('ProjectName')
        if m.get('ProjectVersion') is not None:
            self.project_version = m.get('ProjectVersion')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        return self


class DescribeAntChainContractProjectsResponseBodyResultPagination(TeaModel):
    def __init__(
        self,
        page_number: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        self.page_number = page_number
        self.page_size = page_size
        self.total_count = total_count

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class DescribeAntChainContractProjectsResponseBodyResult(TeaModel):
    def __init__(
        self,
        contract_projects: List[DescribeAntChainContractProjectsResponseBodyResultContractProjects] = None,
        pagination: DescribeAntChainContractProjectsResponseBodyResultPagination = None,
    ):
        self.contract_projects = contract_projects
        self.pagination = pagination

    def validate(self):
        if self.contract_projects:
            for k in self.contract_projects:
                if k:
                    k.validate()
        if self.pagination:
            self.pagination.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['ContractProjects'] = []
        if self.contract_projects is not None:
            for k in self.contract_projects:
                result['ContractProjects'].append(k.to_map() if k else None)
        if self.pagination is not None:
            result['Pagination'] = self.pagination.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.contract_projects = []
        if m.get('ContractProjects') is not None:
            for k in m.get('ContractProjects'):
                temp_model = DescribeAntChainContractProjectsResponseBodyResultContractProjects()
                self.contract_projects.append(temp_model.from_map(k))
        if m.get('Pagination') is not None:
            temp_model = DescribeAntChainContractProjectsResponseBodyResultPagination()
            self.pagination = temp_model.from_map(m['Pagination'])
        return self


class DescribeAntChainContractProjectsResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: DescribeAntChainContractProjectsResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeAntChainContractProjectsResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class DescribeAntChainContractProjectsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeAntChainContractProjectsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAntChainContractProjectsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAntChainContractProjectsNewRequest(TeaModel):
    def __init__(
        self,
        consortium_id: str = None,
        page_number: int = None,
        page_size: int = None,
    ):
        # This parameter is required.
        self.consortium_id = consortium_id
        # This parameter is required.
        self.page_number = page_number
        # This parameter is required.
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class DescribeAntChainContractProjectsNewResponseBodyResultContractProjects(TeaModel):
    def __init__(
        self,
        consortium_id: str = None,
        create_time: int = None,
        project_description: str = None,
        project_id: str = None,
        project_name: str = None,
        project_version: str = None,
        update_time: int = None,
    ):
        self.consortium_id = consortium_id
        self.create_time = create_time
        self.project_description = project_description
        self.project_id = project_id
        self.project_name = project_name
        self.project_version = project_version
        self.update_time = update_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.project_description is not None:
            result['ProjectDescription'] = self.project_description
        if self.project_id is not None:
            result['ProjectId'] = self.project_id
        if self.project_name is not None:
            result['ProjectName'] = self.project_name
        if self.project_version is not None:
            result['ProjectVersion'] = self.project_version
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('ProjectDescription') is not None:
            self.project_description = m.get('ProjectDescription')
        if m.get('ProjectId') is not None:
            self.project_id = m.get('ProjectId')
        if m.get('ProjectName') is not None:
            self.project_name = m.get('ProjectName')
        if m.get('ProjectVersion') is not None:
            self.project_version = m.get('ProjectVersion')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        return self


class DescribeAntChainContractProjectsNewResponseBodyResultPagination(TeaModel):
    def __init__(
        self,
        page_number: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        self.page_number = page_number
        self.page_size = page_size
        self.total_count = total_count

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class DescribeAntChainContractProjectsNewResponseBodyResult(TeaModel):
    def __init__(
        self,
        contract_projects: List[DescribeAntChainContractProjectsNewResponseBodyResultContractProjects] = None,
        pagination: DescribeAntChainContractProjectsNewResponseBodyResultPagination = None,
    ):
        self.contract_projects = contract_projects
        self.pagination = pagination

    def validate(self):
        if self.contract_projects:
            for k in self.contract_projects:
                if k:
                    k.validate()
        if self.pagination:
            self.pagination.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['ContractProjects'] = []
        if self.contract_projects is not None:
            for k in self.contract_projects:
                result['ContractProjects'].append(k.to_map() if k else None)
        if self.pagination is not None:
            result['Pagination'] = self.pagination.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.contract_projects = []
        if m.get('ContractProjects') is not None:
            for k in m.get('ContractProjects'):
                temp_model = DescribeAntChainContractProjectsNewResponseBodyResultContractProjects()
                self.contract_projects.append(temp_model.from_map(k))
        if m.get('Pagination') is not None:
            temp_model = DescribeAntChainContractProjectsNewResponseBodyResultPagination()
            self.pagination = temp_model.from_map(m['Pagination'])
        return self


class DescribeAntChainContractProjectsNewResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: str = None,
        message: str = None,
        request_id: str = None,
        result: DescribeAntChainContractProjectsNewResponseBodyResult = None,
        result_code: str = None,
        result_message: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.result = result
        self.result_code = result_code
        self.result_message = result_message
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeAntChainContractProjectsNewResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeAntChainContractProjectsNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeAntChainContractProjectsNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAntChainContractProjectsNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAntChainDownloadPathsRequest(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
    ):
        # This parameter is required.
        self.ant_chain_id = ant_chain_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        return self


class DescribeAntChainDownloadPathsResponseBodyResult(TeaModel):
    def __init__(
        self,
        ca_crt_url: str = None,
        client_crt_url: str = None,
        sdk_url: str = None,
        trust_ca_url: str = None,
    ):
        self.ca_crt_url = ca_crt_url
        self.client_crt_url = client_crt_url
        self.sdk_url = sdk_url
        self.trust_ca_url = trust_ca_url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ca_crt_url is not None:
            result['CaCrtUrl'] = self.ca_crt_url
        if self.client_crt_url is not None:
            result['ClientCrtUrl'] = self.client_crt_url
        if self.sdk_url is not None:
            result['SdkUrl'] = self.sdk_url
        if self.trust_ca_url is not None:
            result['TrustCaUrl'] = self.trust_ca_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CaCrtUrl') is not None:
            self.ca_crt_url = m.get('CaCrtUrl')
        if m.get('ClientCrtUrl') is not None:
            self.client_crt_url = m.get('ClientCrtUrl')
        if m.get('SdkUrl') is not None:
            self.sdk_url = m.get('SdkUrl')
        if m.get('TrustCaUrl') is not None:
            self.trust_ca_url = m.get('TrustCaUrl')
        return self


class DescribeAntChainDownloadPathsResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: DescribeAntChainDownloadPathsResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeAntChainDownloadPathsResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class DescribeAntChainDownloadPathsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeAntChainDownloadPathsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAntChainDownloadPathsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAntChainDownloadPathsNewRequest(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        consortium_id: str = None,
    ):
        # This parameter is required.
        self.ant_chain_id = ant_chain_id
        self.consortium_id = consortium_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        return self


class DescribeAntChainDownloadPathsNewResponseBodyResult(TeaModel):
    def __init__(
        self,
        ca_crt_url: str = None,
        client_crt_url: str = None,
        sdk_url: str = None,
        trust_ca_url: str = None,
    ):
        self.ca_crt_url = ca_crt_url
        self.client_crt_url = client_crt_url
        self.sdk_url = sdk_url
        self.trust_ca_url = trust_ca_url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ca_crt_url is not None:
            result['CaCrtUrl'] = self.ca_crt_url
        if self.client_crt_url is not None:
            result['ClientCrtUrl'] = self.client_crt_url
        if self.sdk_url is not None:
            result['SdkUrl'] = self.sdk_url
        if self.trust_ca_url is not None:
            result['TrustCaUrl'] = self.trust_ca_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CaCrtUrl') is not None:
            self.ca_crt_url = m.get('CaCrtUrl')
        if m.get('ClientCrtUrl') is not None:
            self.client_crt_url = m.get('ClientCrtUrl')
        if m.get('SdkUrl') is not None:
            self.sdk_url = m.get('SdkUrl')
        if m.get('TrustCaUrl') is not None:
            self.trust_ca_url = m.get('TrustCaUrl')
        return self


class DescribeAntChainDownloadPathsNewResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: str = None,
        message: str = None,
        request_id: str = None,
        result: DescribeAntChainDownloadPathsNewResponseBodyResult = None,
        result_code: str = None,
        result_message: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.result = result
        self.result_code = result_code
        self.result_message = result_message
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeAntChainDownloadPathsNewResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeAntChainDownloadPathsNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeAntChainDownloadPathsNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAntChainDownloadPathsNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAntChainInformationRequest(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
    ):
        # This parameter is required.
        self.ant_chain_id = ant_chain_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        return self


class DescribeAntChainInformationResponseBodyResultNodeInfos(TeaModel):
    def __init__(
        self,
        block_height: int = None,
        node_name: str = None,
        status: bool = None,
        version: str = None,
    ):
        self.block_height = block_height
        self.node_name = node_name
        self.status = status
        self.version = version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.block_height is not None:
            result['BlockHeight'] = self.block_height
        if self.node_name is not None:
            result['NodeName'] = self.node_name
        if self.status is not None:
            result['Status'] = self.status
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BlockHeight') is not None:
            self.block_height = m.get('BlockHeight')
        if m.get('NodeName') is not None:
            self.node_name = m.get('NodeName')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class DescribeAntChainInformationResponseBodyResult(TeaModel):
    def __init__(
        self,
        abnormal_nodes: int = None,
        ant_chain_id: str = None,
        block_height: int = None,
        create_time: int = None,
        is_role: bool = None,
        node_infos: List[DescribeAntChainInformationResponseBodyResultNodeInfos] = None,
        node_number: int = None,
        normal: bool = None,
        transaction_sum: int = None,
        version: str = None,
    ):
        self.abnormal_nodes = abnormal_nodes
        self.ant_chain_id = ant_chain_id
        self.block_height = block_height
        self.create_time = create_time
        self.is_role = is_role
        self.node_infos = node_infos
        self.node_number = node_number
        self.normal = normal
        self.transaction_sum = transaction_sum
        self.version = version

    def validate(self):
        if self.node_infos:
            for k in self.node_infos:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.abnormal_nodes is not None:
            result['AbnormalNodes'] = self.abnormal_nodes
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.block_height is not None:
            result['BlockHeight'] = self.block_height
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.is_role is not None:
            result['IsRole'] = self.is_role
        result['NodeInfos'] = []
        if self.node_infos is not None:
            for k in self.node_infos:
                result['NodeInfos'].append(k.to_map() if k else None)
        if self.node_number is not None:
            result['NodeNumber'] = self.node_number
        if self.normal is not None:
            result['Normal'] = self.normal
        if self.transaction_sum is not None:
            result['TransactionSum'] = self.transaction_sum
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AbnormalNodes') is not None:
            self.abnormal_nodes = m.get('AbnormalNodes')
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('BlockHeight') is not None:
            self.block_height = m.get('BlockHeight')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('IsRole') is not None:
            self.is_role = m.get('IsRole')
        self.node_infos = []
        if m.get('NodeInfos') is not None:
            for k in m.get('NodeInfos'):
                temp_model = DescribeAntChainInformationResponseBodyResultNodeInfos()
                self.node_infos.append(temp_model.from_map(k))
        if m.get('NodeNumber') is not None:
            self.node_number = m.get('NodeNumber')
        if m.get('Normal') is not None:
            self.normal = m.get('Normal')
        if m.get('TransactionSum') is not None:
            self.transaction_sum = m.get('TransactionSum')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class DescribeAntChainInformationResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: DescribeAntChainInformationResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeAntChainInformationResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class DescribeAntChainInformationResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeAntChainInformationResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAntChainInformationResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAntChainInformationNewRequest(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        consortium_id: str = None,
    ):
        # This parameter is required.
        self.ant_chain_id = ant_chain_id
        self.consortium_id = consortium_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        return self


class DescribeAntChainInformationNewResponseBodyResultNodeInfos(TeaModel):
    def __init__(
        self,
        block_height: int = None,
        node_name: str = None,
        status: bool = None,
        version: str = None,
    ):
        self.block_height = block_height
        self.node_name = node_name
        self.status = status
        self.version = version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.block_height is not None:
            result['BlockHeight'] = self.block_height
        if self.node_name is not None:
            result['NodeName'] = self.node_name
        if self.status is not None:
            result['Status'] = self.status
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BlockHeight') is not None:
            self.block_height = m.get('BlockHeight')
        if m.get('NodeName') is not None:
            self.node_name = m.get('NodeName')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class DescribeAntChainInformationNewResponseBodyResult(TeaModel):
    def __init__(
        self,
        abnormal_nodes: int = None,
        ant_chain_id: str = None,
        block_height: int = None,
        create_time: int = None,
        is_role: bool = None,
        node_infos: List[DescribeAntChainInformationNewResponseBodyResultNodeInfos] = None,
        node_number: int = None,
        normal: bool = None,
        transaction_sum: int = None,
        version: str = None,
    ):
        self.abnormal_nodes = abnormal_nodes
        self.ant_chain_id = ant_chain_id
        self.block_height = block_height
        self.create_time = create_time
        self.is_role = is_role
        self.node_infos = node_infos
        self.node_number = node_number
        self.normal = normal
        self.transaction_sum = transaction_sum
        self.version = version

    def validate(self):
        if self.node_infos:
            for k in self.node_infos:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.abnormal_nodes is not None:
            result['AbnormalNodes'] = self.abnormal_nodes
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.block_height is not None:
            result['BlockHeight'] = self.block_height
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.is_role is not None:
            result['IsRole'] = self.is_role
        result['NodeInfos'] = []
        if self.node_infos is not None:
            for k in self.node_infos:
                result['NodeInfos'].append(k.to_map() if k else None)
        if self.node_number is not None:
            result['NodeNumber'] = self.node_number
        if self.normal is not None:
            result['Normal'] = self.normal
        if self.transaction_sum is not None:
            result['TransactionSum'] = self.transaction_sum
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AbnormalNodes') is not None:
            self.abnormal_nodes = m.get('AbnormalNodes')
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('BlockHeight') is not None:
            self.block_height = m.get('BlockHeight')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('IsRole') is not None:
            self.is_role = m.get('IsRole')
        self.node_infos = []
        if m.get('NodeInfos') is not None:
            for k in m.get('NodeInfos'):
                temp_model = DescribeAntChainInformationNewResponseBodyResultNodeInfos()
                self.node_infos.append(temp_model.from_map(k))
        if m.get('NodeNumber') is not None:
            self.node_number = m.get('NodeNumber')
        if m.get('Normal') is not None:
            self.normal = m.get('Normal')
        if m.get('TransactionSum') is not None:
            self.transaction_sum = m.get('TransactionSum')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class DescribeAntChainInformationNewResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: str = None,
        message: str = None,
        request_id: str = None,
        result: DescribeAntChainInformationNewResponseBodyResult = None,
        result_code: str = None,
        result_message: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.result = result
        self.result_code = result_code
        self.result_message = result_message
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeAntChainInformationNewResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeAntChainInformationNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeAntChainInformationNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAntChainInformationNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAntChainLatestBlocksRequest(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
    ):
        # This parameter is required.
        self.ant_chain_id = ant_chain_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        return self


class DescribeAntChainLatestBlocksResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: List[Dict[str, Any]] = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class DescribeAntChainLatestBlocksResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeAntChainLatestBlocksResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAntChainLatestBlocksResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAntChainLatestBlocksNewRequest(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        consortium_id: str = None,
    ):
        # This parameter is required.
        self.ant_chain_id = ant_chain_id
        self.consortium_id = consortium_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        return self


class DescribeAntChainLatestBlocksNewResponseBodyResult(TeaModel):
    def __init__(
        self,
        alias: str = None,
        biz_data: str = None,
        block_hash: str = None,
        create_time: int = None,
        height: int = None,
        previous_hash: str = None,
        root_tx_hash: str = None,
        size: int = None,
        transaction_size: int = None,
        version: int = None,
    ):
        self.alias = alias
        self.biz_data = biz_data
        self.block_hash = block_hash
        self.create_time = create_time
        self.height = height
        self.previous_hash = previous_hash
        self.root_tx_hash = root_tx_hash
        self.size = size
        self.transaction_size = transaction_size
        self.version = version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alias is not None:
            result['Alias'] = self.alias
        if self.biz_data is not None:
            result['BizData'] = self.biz_data
        if self.block_hash is not None:
            result['BlockHash'] = self.block_hash
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.height is not None:
            result['Height'] = self.height
        if self.previous_hash is not None:
            result['PreviousHash'] = self.previous_hash
        if self.root_tx_hash is not None:
            result['RootTxHash'] = self.root_tx_hash
        if self.size is not None:
            result['Size'] = self.size
        if self.transaction_size is not None:
            result['TransactionSize'] = self.transaction_size
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Alias') is not None:
            self.alias = m.get('Alias')
        if m.get('BizData') is not None:
            self.biz_data = m.get('BizData')
        if m.get('BlockHash') is not None:
            self.block_hash = m.get('BlockHash')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Height') is not None:
            self.height = m.get('Height')
        if m.get('PreviousHash') is not None:
            self.previous_hash = m.get('PreviousHash')
        if m.get('RootTxHash') is not None:
            self.root_tx_hash = m.get('RootTxHash')
        if m.get('Size') is not None:
            self.size = m.get('Size')
        if m.get('TransactionSize') is not None:
            self.transaction_size = m.get('TransactionSize')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class DescribeAntChainLatestBlocksNewResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: str = None,
        message: str = None,
        request_id: str = None,
        result: List[DescribeAntChainLatestBlocksNewResponseBodyResult] = None,
        result_code: str = None,
        result_message: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.result = result
        self.result_code = result_code
        self.result_message = result_message
        self.success = success

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = DescribeAntChainLatestBlocksNewResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeAntChainLatestBlocksNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeAntChainLatestBlocksNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAntChainLatestBlocksNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAntChainLatestTransactionDigestsRequest(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
    ):
        # This parameter is required.
        self.ant_chain_id = ant_chain_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        return self


class DescribeAntChainLatestTransactionDigestsResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: List[Dict[str, Any]] = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class DescribeAntChainLatestTransactionDigestsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeAntChainLatestTransactionDigestsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAntChainLatestTransactionDigestsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAntChainLatestTransactionDigestsNewRequest(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        consortium_id: str = None,
    ):
        # This parameter is required.
        self.ant_chain_id = ant_chain_id
        self.consortium_id = consortium_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        return self


class DescribeAntChainLatestTransactionDigestsNewResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: str = None,
        message: str = None,
        request_id: str = None,
        result: List[str] = None,
        result_code: str = None,
        result_message: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.result = result
        self.result_code = result_code
        self.result_message = result_message
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeAntChainLatestTransactionDigestsNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeAntChainLatestTransactionDigestsNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAntChainLatestTransactionDigestsNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAntChainMembersRequest(TeaModel):
    def __init__(
        self,
        consortium_id: str = None,
        page_number: int = None,
        page_size: int = None,
    ):
        # This parameter is required.
        self.consortium_id = consortium_id
        self.page_number = page_number
        # This parameter is required.
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class DescribeAntChainMembersResponseBodyResultMembers(TeaModel):
    def __init__(
        self,
        join_time: int = None,
        member_id: str = None,
        member_name: str = None,
        role: str = None,
        status: str = None,
    ):
        self.join_time = join_time
        self.member_id = member_id
        self.member_name = member_name
        self.role = role
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.join_time is not None:
            result['JoinTime'] = self.join_time
        if self.member_id is not None:
            result['MemberId'] = self.member_id
        if self.member_name is not None:
            result['MemberName'] = self.member_name
        if self.role is not None:
            result['Role'] = self.role
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('JoinTime') is not None:
            self.join_time = m.get('JoinTime')
        if m.get('MemberId') is not None:
            self.member_id = m.get('MemberId')
        if m.get('MemberName') is not None:
            self.member_name = m.get('MemberName')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeAntChainMembersResponseBodyResultPagination(TeaModel):
    def __init__(
        self,
        page_number: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        self.page_number = page_number
        self.page_size = page_size
        self.total_count = total_count

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class DescribeAntChainMembersResponseBodyResult(TeaModel):
    def __init__(
        self,
        members: List[DescribeAntChainMembersResponseBodyResultMembers] = None,
        pagination: DescribeAntChainMembersResponseBodyResultPagination = None,
    ):
        self.members = members
        self.pagination = pagination

    def validate(self):
        if self.members:
            for k in self.members:
                if k:
                    k.validate()
        if self.pagination:
            self.pagination.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Members'] = []
        if self.members is not None:
            for k in self.members:
                result['Members'].append(k.to_map() if k else None)
        if self.pagination is not None:
            result['Pagination'] = self.pagination.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.members = []
        if m.get('Members') is not None:
            for k in m.get('Members'):
                temp_model = DescribeAntChainMembersResponseBodyResultMembers()
                self.members.append(temp_model.from_map(k))
        if m.get('Pagination') is not None:
            temp_model = DescribeAntChainMembersResponseBodyResultPagination()
            self.pagination = temp_model.from_map(m['Pagination'])
        return self


class DescribeAntChainMembersResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: DescribeAntChainMembersResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeAntChainMembersResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class DescribeAntChainMembersResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeAntChainMembersResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAntChainMembersResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAntChainMembersNewRequest(TeaModel):
    def __init__(
        self,
        consortium_id: str = None,
        page_number: int = None,
        page_size: int = None,
    ):
        # This parameter is required.
        self.consortium_id = consortium_id
        self.page_number = page_number
        # This parameter is required.
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class DescribeAntChainMembersNewResponseBodyResultMembers(TeaModel):
    def __init__(
        self,
        join_time: int = None,
        member_id: str = None,
        member_name: str = None,
        role: str = None,
        status: str = None,
    ):
        self.join_time = join_time
        self.member_id = member_id
        self.member_name = member_name
        self.role = role
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.join_time is not None:
            result['JoinTime'] = self.join_time
        if self.member_id is not None:
            result['MemberId'] = self.member_id
        if self.member_name is not None:
            result['MemberName'] = self.member_name
        if self.role is not None:
            result['Role'] = self.role
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('JoinTime') is not None:
            self.join_time = m.get('JoinTime')
        if m.get('MemberId') is not None:
            self.member_id = m.get('MemberId')
        if m.get('MemberName') is not None:
            self.member_name = m.get('MemberName')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeAntChainMembersNewResponseBodyResultPagination(TeaModel):
    def __init__(
        self,
        page_number: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        self.page_number = page_number
        self.page_size = page_size
        self.total_count = total_count

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class DescribeAntChainMembersNewResponseBodyResult(TeaModel):
    def __init__(
        self,
        members: List[DescribeAntChainMembersNewResponseBodyResultMembers] = None,
        pagination: DescribeAntChainMembersNewResponseBodyResultPagination = None,
    ):
        self.members = members
        self.pagination = pagination

    def validate(self):
        if self.members:
            for k in self.members:
                if k:
                    k.validate()
        if self.pagination:
            self.pagination.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Members'] = []
        if self.members is not None:
            for k in self.members:
                result['Members'].append(k.to_map() if k else None)
        if self.pagination is not None:
            result['Pagination'] = self.pagination.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.members = []
        if m.get('Members') is not None:
            for k in m.get('Members'):
                temp_model = DescribeAntChainMembersNewResponseBodyResultMembers()
                self.members.append(temp_model.from_map(k))
        if m.get('Pagination') is not None:
            temp_model = DescribeAntChainMembersNewResponseBodyResultPagination()
            self.pagination = temp_model.from_map(m['Pagination'])
        return self


class DescribeAntChainMembersNewResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: str = None,
        message: str = None,
        request_id: str = None,
        result: DescribeAntChainMembersNewResponseBodyResult = None,
        result_code: str = None,
        result_message: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.result = result
        self.result_code = result_code
        self.result_message = result_message
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeAntChainMembersNewResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeAntChainMembersNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeAntChainMembersNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAntChainMembersNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAntChainMiniAppBrowserQRCodeAccessLogRequest(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        qrcode_type: str = None,
    ):
        # This parameter is required.
        self.ant_chain_id = ant_chain_id
        # This parameter is required.
        self.qrcode_type = qrcode_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.qrcode_type is not None:
            result['QRCodeType'] = self.qrcode_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('QRCodeType') is not None:
            self.qrcode_type = m.get('QRCodeType')
        return self


class DescribeAntChainMiniAppBrowserQRCodeAccessLogResponseBodyResult(TeaModel):
    def __init__(
        self,
        access_alipay_account_count: int = None,
        access_count: int = None,
    ):
        self.access_alipay_account_count = access_alipay_account_count
        self.access_count = access_count

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.access_alipay_account_count is not None:
            result['AccessAlipayAccountCount'] = self.access_alipay_account_count
        if self.access_count is not None:
            result['AccessCount'] = self.access_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccessAlipayAccountCount') is not None:
            self.access_alipay_account_count = m.get('AccessAlipayAccountCount')
        if m.get('AccessCount') is not None:
            self.access_count = m.get('AccessCount')
        return self


class DescribeAntChainMiniAppBrowserQRCodeAccessLogResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: DescribeAntChainMiniAppBrowserQRCodeAccessLogResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeAntChainMiniAppBrowserQRCodeAccessLogResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class DescribeAntChainMiniAppBrowserQRCodeAccessLogResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeAntChainMiniAppBrowserQRCodeAccessLogResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAntChainMiniAppBrowserQRCodeAccessLogResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAntChainMiniAppBrowserQRCodeAccessLogNewRequest(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        qrcode_type: str = None,
    ):
        # This parameter is required.
        self.ant_chain_id = ant_chain_id
        # This parameter is required.
        self.qrcode_type = qrcode_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.qrcode_type is not None:
            result['QRCodeType'] = self.qrcode_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('QRCodeType') is not None:
            self.qrcode_type = m.get('QRCodeType')
        return self


class DescribeAntChainMiniAppBrowserQRCodeAccessLogNewResponseBodyResult(TeaModel):
    def __init__(
        self,
        access_alipay_account_count: int = None,
        access_count: int = None,
    ):
        self.access_alipay_account_count = access_alipay_account_count
        self.access_count = access_count

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.access_alipay_account_count is not None:
            result['AccessAlipayAccountCount'] = self.access_alipay_account_count
        if self.access_count is not None:
            result['AccessCount'] = self.access_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccessAlipayAccountCount') is not None:
            self.access_alipay_account_count = m.get('AccessAlipayAccountCount')
        if m.get('AccessCount') is not None:
            self.access_count = m.get('AccessCount')
        return self


class DescribeAntChainMiniAppBrowserQRCodeAccessLogNewResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: str = None,
        message: str = None,
        request_id: str = None,
        result: DescribeAntChainMiniAppBrowserQRCodeAccessLogNewResponseBodyResult = None,
        result_code: str = None,
        result_message: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.result = result
        self.result_code = result_code
        self.result_message = result_message
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeAntChainMiniAppBrowserQRCodeAccessLogNewResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeAntChainMiniAppBrowserQRCodeAccessLogNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeAntChainMiniAppBrowserQRCodeAccessLogNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAntChainMiniAppBrowserQRCodeAccessLogNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersRequest(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        page_number: int = None,
        page_size: int = None,
        qrcode_type: str = None,
    ):
        # This parameter is required.
        self.ant_chain_id = ant_chain_id
        # This parameter is required.
        self.page_number = page_number
        # This parameter is required.
        self.page_size = page_size
        # This parameter is required.
        self.qrcode_type = qrcode_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.qrcode_type is not None:
            result['QRCodeType'] = self.qrcode_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('QRCodeType') is not None:
            self.qrcode_type = m.get('QRCodeType')
        return self


class DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBodyResultAuthorizedUserList(TeaModel):
    def __init__(
        self,
        gmt_authorized: str = None,
        phone: str = None,
    ):
        self.gmt_authorized = gmt_authorized
        self.phone = phone

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gmt_authorized is not None:
            result['GmtAuthorized'] = self.gmt_authorized
        if self.phone is not None:
            result['Phone'] = self.phone
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('GmtAuthorized') is not None:
            self.gmt_authorized = m.get('GmtAuthorized')
        if m.get('Phone') is not None:
            self.phone = m.get('Phone')
        return self


class DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBodyResultPagination(TeaModel):
    def __init__(
        self,
        page_number: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        self.page_number = page_number
        self.page_size = page_size
        self.total_count = total_count

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBodyResult(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        authorization_type: str = None,
        authorized_user_list: List[DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBodyResultAuthorizedUserList] = None,
        pagination: DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBodyResultPagination = None,
        qrcode_type: str = None,
    ):
        self.ant_chain_id = ant_chain_id
        self.authorization_type = authorization_type
        self.authorized_user_list = authorized_user_list
        self.pagination = pagination
        self.qrcode_type = qrcode_type

    def validate(self):
        if self.authorized_user_list:
            for k in self.authorized_user_list:
                if k:
                    k.validate()
        if self.pagination:
            self.pagination.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.authorization_type is not None:
            result['AuthorizationType'] = self.authorization_type
        result['AuthorizedUserList'] = []
        if self.authorized_user_list is not None:
            for k in self.authorized_user_list:
                result['AuthorizedUserList'].append(k.to_map() if k else None)
        if self.pagination is not None:
            result['Pagination'] = self.pagination.to_map()
        if self.qrcode_type is not None:
            result['QRCodeType'] = self.qrcode_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('AuthorizationType') is not None:
            self.authorization_type = m.get('AuthorizationType')
        self.authorized_user_list = []
        if m.get('AuthorizedUserList') is not None:
            for k in m.get('AuthorizedUserList'):
                temp_model = DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBodyResultAuthorizedUserList()
                self.authorized_user_list.append(temp_model.from_map(k))
        if m.get('Pagination') is not None:
            temp_model = DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBodyResultPagination()
            self.pagination = temp_model.from_map(m['Pagination'])
        if m.get('QRCodeType') is not None:
            self.qrcode_type = m.get('QRCodeType')
        return self


class DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewRequest(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        page_number: int = None,
        page_size: int = None,
        qrcode_type: str = None,
    ):
        # This parameter is required.
        self.ant_chain_id = ant_chain_id
        # This parameter is required.
        self.page_number = page_number
        # This parameter is required.
        self.page_size = page_size
        # This parameter is required.
        self.qrcode_type = qrcode_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.qrcode_type is not None:
            result['QRCodeType'] = self.qrcode_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('QRCodeType') is not None:
            self.qrcode_type = m.get('QRCodeType')
        return self


class DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBodyResultAuthorizedUserList(TeaModel):
    def __init__(
        self,
        gmt_authorized: str = None,
        phone: str = None,
        user_id: int = None,
    ):
        self.gmt_authorized = gmt_authorized
        self.phone = phone
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gmt_authorized is not None:
            result['GmtAuthorized'] = self.gmt_authorized
        if self.phone is not None:
            result['Phone'] = self.phone
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('GmtAuthorized') is not None:
            self.gmt_authorized = m.get('GmtAuthorized')
        if m.get('Phone') is not None:
            self.phone = m.get('Phone')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBodyResultPagination(TeaModel):
    def __init__(
        self,
        page_number: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        self.page_number = page_number
        self.page_size = page_size
        self.total_count = total_count

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBodyResult(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        authorization_type: str = None,
        authorized_user_list: List[DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBodyResultAuthorizedUserList] = None,
        pagination: DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBodyResultPagination = None,
        qrcode_type: str = None,
    ):
        self.ant_chain_id = ant_chain_id
        self.authorization_type = authorization_type
        self.authorized_user_list = authorized_user_list
        self.pagination = pagination
        self.qrcode_type = qrcode_type

    def validate(self):
        if self.authorized_user_list:
            for k in self.authorized_user_list:
                if k:
                    k.validate()
        if self.pagination:
            self.pagination.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.authorization_type is not None:
            result['AuthorizationType'] = self.authorization_type
        result['AuthorizedUserList'] = []
        if self.authorized_user_list is not None:
            for k in self.authorized_user_list:
                result['AuthorizedUserList'].append(k.to_map() if k else None)
        if self.pagination is not None:
            result['Pagination'] = self.pagination.to_map()
        if self.qrcode_type is not None:
            result['QRCodeType'] = self.qrcode_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('AuthorizationType') is not None:
            self.authorization_type = m.get('AuthorizationType')
        self.authorized_user_list = []
        if m.get('AuthorizedUserList') is not None:
            for k in m.get('AuthorizedUserList'):
                temp_model = DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBodyResultAuthorizedUserList()
                self.authorized_user_list.append(temp_model.from_map(k))
        if m.get('Pagination') is not None:
            temp_model = DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBodyResultPagination()
            self.pagination = temp_model.from_map(m['Pagination'])
        if m.get('QRCodeType') is not None:
            self.qrcode_type = m.get('QRCodeType')
        return self


class DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: str = None,
        message: str = None,
        request_id: str = None,
        result: DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBodyResult = None,
        result_code: str = None,
        result_message: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.result = result
        self.result_code = result_code
        self.result_message = result_message
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAntChainMiniAppBrowserTransactionQRCodeRequest(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        transaction_hash: str = None,
    ):
        # This parameter is required.
        self.ant_chain_id = ant_chain_id
        # This parameter is required.
        self.transaction_hash = transaction_hash

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.transaction_hash is not None:
            result['TransactionHash'] = self.transaction_hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('TransactionHash') is not None:
            self.transaction_hash = m.get('TransactionHash')
        return self


class DescribeAntChainMiniAppBrowserTransactionQRCodeResponseBodyResult(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        base_64qrcode_png: str = None,
        qrcode_content: str = None,
        transaction_hash: str = None,
    ):
        self.ant_chain_id = ant_chain_id
        self.base_64qrcode_png = base_64qrcode_png
        self.qrcode_content = qrcode_content
        self.transaction_hash = transaction_hash

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.base_64qrcode_png is not None:
            result['Base64QRCodePNG'] = self.base_64qrcode_png
        if self.qrcode_content is not None:
            result['QRCodeContent'] = self.qrcode_content
        if self.transaction_hash is not None:
            result['TransactionHash'] = self.transaction_hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('Base64QRCodePNG') is not None:
            self.base_64qrcode_png = m.get('Base64QRCodePNG')
        if m.get('QRCodeContent') is not None:
            self.qrcode_content = m.get('QRCodeContent')
        if m.get('TransactionHash') is not None:
            self.transaction_hash = m.get('TransactionHash')
        return self


class DescribeAntChainMiniAppBrowserTransactionQRCodeResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: DescribeAntChainMiniAppBrowserTransactionQRCodeResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeAntChainMiniAppBrowserTransactionQRCodeResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class DescribeAntChainMiniAppBrowserTransactionQRCodeResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeAntChainMiniAppBrowserTransactionQRCodeResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAntChainMiniAppBrowserTransactionQRCodeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAntChainMiniAppBrowserTransactionQRCodeNewRequest(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        contract_id: str = None,
        transaction_hash: str = None,
    ):
        # This parameter is required.
        self.ant_chain_id = ant_chain_id
        self.contract_id = contract_id
        # This parameter is required.
        self.transaction_hash = transaction_hash

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.contract_id is not None:
            result['ContractId'] = self.contract_id
        if self.transaction_hash is not None:
            result['TransactionHash'] = self.transaction_hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('ContractId') is not None:
            self.contract_id = m.get('ContractId')
        if m.get('TransactionHash') is not None:
            self.transaction_hash = m.get('TransactionHash')
        return self


class DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponseBodyResult(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        base_64qrcode_png: str = None,
        qrcode_content: str = None,
        transaction_hash: str = None,
    ):
        self.ant_chain_id = ant_chain_id
        self.base_64qrcode_png = base_64qrcode_png
        self.qrcode_content = qrcode_content
        self.transaction_hash = transaction_hash

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.base_64qrcode_png is not None:
            result['Base64QRCodePNG'] = self.base_64qrcode_png
        if self.qrcode_content is not None:
            result['QRCodeContent'] = self.qrcode_content
        if self.transaction_hash is not None:
            result['TransactionHash'] = self.transaction_hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('Base64QRCodePNG') is not None:
            self.base_64qrcode_png = m.get('Base64QRCodePNG')
        if m.get('QRCodeContent') is not None:
            self.qrcode_content = m.get('QRCodeContent')
        if m.get('TransactionHash') is not None:
            self.transaction_hash = m.get('TransactionHash')
        return self


class DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: str = None,
        message: str = None,
        request_id: str = None,
        result: DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponseBodyResult = None,
        result_code: str = None,
        result_message: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.result = result
        self.result_code = result_code
        self.result_message = result_message
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAntChainNodesNewRequest(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        consortium_id: str = None,
    ):
        # This parameter is required.
        self.ant_chain_id = ant_chain_id
        self.consortium_id = consortium_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        return self


class DescribeAntChainNodesNewResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: str = None,
        message: str = None,
        request_id: str = None,
        result: List[str] = None,
        result_code: str = None,
        result_message: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.result = result
        self.result_code = result_code
        self.result_message = result_message
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeAntChainNodesNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeAntChainNodesNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAntChainNodesNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAntChainQRCodeAuthorizationRequest(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        qrcode_type: str = None,
    ):
        # This parameter is required.
        self.ant_chain_id = ant_chain_id
        # This parameter is required.
        self.qrcode_type = qrcode_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.qrcode_type is not None:
            result['QRCodeType'] = self.qrcode_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('QRCodeType') is not None:
            self.qrcode_type = m.get('QRCodeType')
        return self


class DescribeAntChainQRCodeAuthorizationResponseBodyResult(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        authorization_type: str = None,
        qrcode_type: str = None,
    ):
        self.ant_chain_id = ant_chain_id
        self.authorization_type = authorization_type
        self.qrcode_type = qrcode_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.authorization_type is not None:
            result['AuthorizationType'] = self.authorization_type
        if self.qrcode_type is not None:
            result['QRCodeType'] = self.qrcode_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('AuthorizationType') is not None:
            self.authorization_type = m.get('AuthorizationType')
        if m.get('QRCodeType') is not None:
            self.qrcode_type = m.get('QRCodeType')
        return self


class DescribeAntChainQRCodeAuthorizationResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: DescribeAntChainQRCodeAuthorizationResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeAntChainQRCodeAuthorizationResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class DescribeAntChainQRCodeAuthorizationResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeAntChainQRCodeAuthorizationResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAntChainQRCodeAuthorizationResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAntChainQRCodeAuthorizationNewRequest(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        qrcode_type: str = None,
    ):
        # This parameter is required.
        self.ant_chain_id = ant_chain_id
        # This parameter is required.
        self.qrcode_type = qrcode_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.qrcode_type is not None:
            result['QRCodeType'] = self.qrcode_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('QRCodeType') is not None:
            self.qrcode_type = m.get('QRCodeType')
        return self


class DescribeAntChainQRCodeAuthorizationNewResponseBodyResult(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        authorization_type: str = None,
        qrcode_type: str = None,
    ):
        self.ant_chain_id = ant_chain_id
        self.authorization_type = authorization_type
        self.qrcode_type = qrcode_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.authorization_type is not None:
            result['AuthorizationType'] = self.authorization_type
        if self.qrcode_type is not None:
            result['QRCodeType'] = self.qrcode_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('AuthorizationType') is not None:
            self.authorization_type = m.get('AuthorizationType')
        if m.get('QRCodeType') is not None:
            self.qrcode_type = m.get('QRCodeType')
        return self


class DescribeAntChainQRCodeAuthorizationNewResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: str = None,
        message: str = None,
        request_id: str = None,
        result: DescribeAntChainQRCodeAuthorizationNewResponseBodyResult = None,
        result_code: str = None,
        result_message: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.result = result
        self.result_code = result_code
        self.result_message = result_message
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeAntChainQRCodeAuthorizationNewResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeAntChainQRCodeAuthorizationNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeAntChainQRCodeAuthorizationNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAntChainQRCodeAuthorizationNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAntChainRegionNamesRequest(TeaModel):
    def __init__(
        self,
        locale: str = None,
    ):
        self.locale = locale

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.locale is not None:
            result['Locale'] = self.locale
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Locale') is not None:
            self.locale = m.get('Locale')
        return self


class DescribeAntChainRegionNamesResponseBodyResult(TeaModel):
    def __init__(
        self,
        region_id: str = None,
        region_name: str = None,
    ):
        self.region_id = region_id
        self.region_name = region_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.region_name is not None:
            result['RegionName'] = self.region_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('RegionName') is not None:
            self.region_name = m.get('RegionName')
        return self


class DescribeAntChainRegionNamesResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: List[DescribeAntChainRegionNamesResponseBodyResult] = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = DescribeAntChainRegionNamesResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        return self


class DescribeAntChainRegionNamesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeAntChainRegionNamesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAntChainRegionNamesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAntChainRegionsForSaleResponseBodyResult(TeaModel):
    def __init__(
        self,
        region_id: str = None,
        type_list: List[str] = None,
    ):
        self.region_id = region_id
        self.type_list = type_list

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.type_list is not None:
            result['TypeList'] = self.type_list
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('TypeList') is not None:
            self.type_list = m.get('TypeList')
        return self


class DescribeAntChainRegionsForSaleResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: List[DescribeAntChainRegionsForSaleResponseBodyResult] = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = DescribeAntChainRegionsForSaleResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        return self


class DescribeAntChainRegionsForSaleResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeAntChainRegionsForSaleResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAntChainRegionsForSaleResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAntChainResourceTypesResponseBodyResult(TeaModel):
    def __init__(
        self,
        cpu: int = None,
        disk: int = None,
        memory: int = None,
        type_id: int = None,
    ):
        self.cpu = cpu
        self.disk = disk
        self.memory = memory
        self.type_id = type_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cpu is not None:
            result['Cpu'] = self.cpu
        if self.disk is not None:
            result['Disk'] = self.disk
        if self.memory is not None:
            result['Memory'] = self.memory
        if self.type_id is not None:
            result['TypeId'] = self.type_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Cpu') is not None:
            self.cpu = m.get('Cpu')
        if m.get('Disk') is not None:
            self.disk = m.get('Disk')
        if m.get('Memory') is not None:
            self.memory = m.get('Memory')
        if m.get('TypeId') is not None:
            self.type_id = m.get('TypeId')
        return self


class DescribeAntChainResourceTypesResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: List[DescribeAntChainResourceTypesResponseBodyResult] = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = DescribeAntChainResourceTypesResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        return self


class DescribeAntChainResourceTypesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeAntChainResourceTypesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAntChainResourceTypesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAntChainRestRequest(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        consortium_id: str = None,
    ):
        # This parameter is required.
        self.ant_chain_id = ant_chain_id
        self.consortium_id = consortium_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        return self


class DescribeAntChainRestResponseBodyResult(TeaModel):
    def __init__(
        self,
        access_id: str = None,
        create_time: int = None,
        update_time: int = None,
    ):
        self.access_id = access_id
        self.create_time = create_time
        self.update_time = update_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.access_id is not None:
            result['AccessId'] = self.access_id
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccessId') is not None:
            self.access_id = m.get('AccessId')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        return self


class DescribeAntChainRestResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: str = None,
        message: str = None,
        request_id: str = None,
        result: List[DescribeAntChainRestResponseBodyResult] = None,
        result_code: str = None,
        result_message: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.result = result
        self.result_code = result_code
        self.result_message = result_message
        self.success = success

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = DescribeAntChainRestResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeAntChainRestResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeAntChainRestResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAntChainRestResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAntChainSubnetListRequest(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        consortium_id: str = None,
    ):
        # This parameter is required.
        self.ant_chain_id = ant_chain_id
        # This parameter is required.
        self.consortium_id = consortium_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        return self


class DescribeAntChainSubnetListResponseBodyResultBlockchainSubnetList(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        block_height: int = None,
        consortium_member: bool = None,
        create_time: int = None,
        group_id: str = None,
        monitor: bool = None,
        name: str = None,
        node_sum: int = None,
        rest: str = None,
        status: str = None,
        transaction_sum: int = None,
    ):
        self.ant_chain_id = ant_chain_id
        self.block_height = block_height
        self.consortium_member = consortium_member
        self.create_time = create_time
        self.group_id = group_id
        self.monitor = monitor
        self.name = name
        self.node_sum = node_sum
        self.rest = rest
        self.status = status
        self.transaction_sum = transaction_sum

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.block_height is not None:
            result['BlockHeight'] = self.block_height
        if self.consortium_member is not None:
            result['ConsortiumMember'] = self.consortium_member
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.monitor is not None:
            result['Monitor'] = self.monitor
        if self.name is not None:
            result['Name'] = self.name
        if self.node_sum is not None:
            result['NodeSum'] = self.node_sum
        if self.rest is not None:
            result['Rest'] = self.rest
        if self.status is not None:
            result['Status'] = self.status
        if self.transaction_sum is not None:
            result['TransactionSum'] = self.transaction_sum
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('BlockHeight') is not None:
            self.block_height = m.get('BlockHeight')
        if m.get('ConsortiumMember') is not None:
            self.consortium_member = m.get('ConsortiumMember')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('Monitor') is not None:
            self.monitor = m.get('Monitor')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('NodeSum') is not None:
            self.node_sum = m.get('NodeSum')
        if m.get('Rest') is not None:
            self.rest = m.get('Rest')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TransactionSum') is not None:
            self.transaction_sum = m.get('TransactionSum')
        return self


class DescribeAntChainSubnetListResponseBodyResult(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        blockchain_name: str = None,
        blockchain_subnet_list: List[DescribeAntChainSubnetListResponseBodyResultBlockchainSubnetList] = None,
        consortium_admin: bool = None,
    ):
        self.ant_chain_id = ant_chain_id
        self.blockchain_name = blockchain_name
        self.blockchain_subnet_list = blockchain_subnet_list
        self.consortium_admin = consortium_admin

    def validate(self):
        if self.blockchain_subnet_list:
            for k in self.blockchain_subnet_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.blockchain_name is not None:
            result['BlockchainName'] = self.blockchain_name
        result['BlockchainSubnetList'] = []
        if self.blockchain_subnet_list is not None:
            for k in self.blockchain_subnet_list:
                result['BlockchainSubnetList'].append(k.to_map() if k else None)
        if self.consortium_admin is not None:
            result['ConsortiumAdmin'] = self.consortium_admin
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('BlockchainName') is not None:
            self.blockchain_name = m.get('BlockchainName')
        self.blockchain_subnet_list = []
        if m.get('BlockchainSubnetList') is not None:
            for k in m.get('BlockchainSubnetList'):
                temp_model = DescribeAntChainSubnetListResponseBodyResultBlockchainSubnetList()
                self.blockchain_subnet_list.append(temp_model.from_map(k))
        if m.get('ConsortiumAdmin') is not None:
            self.consortium_admin = m.get('ConsortiumAdmin')
        return self


class DescribeAntChainSubnetListResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: str = None,
        message: str = None,
        request_id: str = None,
        result: DescribeAntChainSubnetListResponseBodyResult = None,
        result_code: str = None,
        result_message: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.result = result
        self.result_code = result_code
        self.result_message = result_message
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeAntChainSubnetListResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeAntChainSubnetListResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeAntChainSubnetListResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAntChainSubnetListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAntChainSubnetMemberListRequest(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        consortium_id: str = None,
        page_number: str = None,
        page_size: str = None,
    ):
        # This parameter is required.
        self.ant_chain_id = ant_chain_id
        # This parameter is required.
        self.consortium_id = consortium_id
        # This parameter is required.
        self.page_number = page_number
        # This parameter is required.
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class DescribeAntChainSubnetMemberListResponseBodyResultConsortiumMemberInfoList(TeaModel):
    def __init__(
        self,
        join_time: int = None,
        member_id: str = None,
        member_name: str = None,
        role: str = None,
        status: str = None,
    ):
        self.join_time = join_time
        self.member_id = member_id
        self.member_name = member_name
        self.role = role
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.join_time is not None:
            result['JoinTime'] = self.join_time
        if self.member_id is not None:
            result['MemberId'] = self.member_id
        if self.member_name is not None:
            result['MemberName'] = self.member_name
        if self.role is not None:
            result['Role'] = self.role
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('JoinTime') is not None:
            self.join_time = m.get('JoinTime')
        if m.get('MemberId') is not None:
            self.member_id = m.get('MemberId')
        if m.get('MemberName') is not None:
            self.member_name = m.get('MemberName')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeAntChainSubnetMemberListResponseBodyResultPagination(TeaModel):
    def __init__(
        self,
        page_number: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        self.page_number = page_number
        self.page_size = page_size
        self.total_count = total_count

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class DescribeAntChainSubnetMemberListResponseBodyResult(TeaModel):
    def __init__(
        self,
        consortium_admin: bool = None,
        consortium_member_info_list: List[DescribeAntChainSubnetMemberListResponseBodyResultConsortiumMemberInfoList] = None,
        pagination: DescribeAntChainSubnetMemberListResponseBodyResultPagination = None,
    ):
        self.consortium_admin = consortium_admin
        self.consortium_member_info_list = consortium_member_info_list
        self.pagination = pagination

    def validate(self):
        if self.consortium_member_info_list:
            for k in self.consortium_member_info_list:
                if k:
                    k.validate()
        if self.pagination:
            self.pagination.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.consortium_admin is not None:
            result['ConsortiumAdmin'] = self.consortium_admin
        result['ConsortiumMemberInfoList'] = []
        if self.consortium_member_info_list is not None:
            for k in self.consortium_member_info_list:
                result['ConsortiumMemberInfoList'].append(k.to_map() if k else None)
        if self.pagination is not None:
            result['Pagination'] = self.pagination.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ConsortiumAdmin') is not None:
            self.consortium_admin = m.get('ConsortiumAdmin')
        self.consortium_member_info_list = []
        if m.get('ConsortiumMemberInfoList') is not None:
            for k in m.get('ConsortiumMemberInfoList'):
                temp_model = DescribeAntChainSubnetMemberListResponseBodyResultConsortiumMemberInfoList()
                self.consortium_member_info_list.append(temp_model.from_map(k))
        if m.get('Pagination') is not None:
            temp_model = DescribeAntChainSubnetMemberListResponseBodyResultPagination()
            self.pagination = temp_model.from_map(m['Pagination'])
        return self


class DescribeAntChainSubnetMemberListResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: str = None,
        message: str = None,
        request_id: str = None,
        result: DescribeAntChainSubnetMemberListResponseBodyResult = None,
        result_code: str = None,
        result_message: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.result = result
        self.result_code = result_code
        self.result_message = result_message
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeAntChainSubnetMemberListResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeAntChainSubnetMemberListResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeAntChainSubnetMemberListResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAntChainSubnetMemberListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAntChainSubnetNodeListRequest(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        consortium_id: str = None,
    ):
        # This parameter is required.
        self.ant_chain_id = ant_chain_id
        # This parameter is required.
        self.consortium_id = consortium_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        return self


class DescribeAntChainSubnetNodeListResponseBodyResultChainNodeInfoList(TeaModel):
    def __init__(
        self,
        disk_total: str = None,
        disk_use: str = None,
        node_id: str = None,
        node_ip: str = None,
        node_name: str = None,
        node_port: str = None,
        node_source: str = None,
        node_state: str = None,
        node_type: str = None,
        public_key: str = None,
    ):
        self.disk_total = disk_total
        self.disk_use = disk_use
        self.node_id = node_id
        self.node_ip = node_ip
        self.node_name = node_name
        self.node_port = node_port
        self.node_source = node_source
        self.node_state = node_state
        self.node_type = node_type
        self.public_key = public_key

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.disk_total is not None:
            result['DiskTotal'] = self.disk_total
        if self.disk_use is not None:
            result['DiskUse'] = self.disk_use
        if self.node_id is not None:
            result['NodeId'] = self.node_id
        if self.node_ip is not None:
            result['NodeIp'] = self.node_ip
        if self.node_name is not None:
            result['NodeName'] = self.node_name
        if self.node_port is not None:
            result['NodePort'] = self.node_port
        if self.node_source is not None:
            result['NodeSource'] = self.node_source
        if self.node_state is not None:
            result['NodeState'] = self.node_state
        if self.node_type is not None:
            result['NodeType'] = self.node_type
        if self.public_key is not None:
            result['PublicKey'] = self.public_key
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DiskTotal') is not None:
            self.disk_total = m.get('DiskTotal')
        if m.get('DiskUse') is not None:
            self.disk_use = m.get('DiskUse')
        if m.get('NodeId') is not None:
            self.node_id = m.get('NodeId')
        if m.get('NodeIp') is not None:
            self.node_ip = m.get('NodeIp')
        if m.get('NodeName') is not None:
            self.node_name = m.get('NodeName')
        if m.get('NodePort') is not None:
            self.node_port = m.get('NodePort')
        if m.get('NodeSource') is not None:
            self.node_source = m.get('NodeSource')
        if m.get('NodeState') is not None:
            self.node_state = m.get('NodeState')
        if m.get('NodeType') is not None:
            self.node_type = m.get('NodeType')
        if m.get('PublicKey') is not None:
            self.public_key = m.get('PublicKey')
        return self


class DescribeAntChainSubnetNodeListResponseBodyResult(TeaModel):
    def __init__(
        self,
        chain_node_info_list: List[DescribeAntChainSubnetNodeListResponseBodyResultChainNodeInfoList] = None,
        consortium_admin: bool = None,
    ):
        self.chain_node_info_list = chain_node_info_list
        self.consortium_admin = consortium_admin

    def validate(self):
        if self.chain_node_info_list:
            for k in self.chain_node_info_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['ChainNodeInfoList'] = []
        if self.chain_node_info_list is not None:
            for k in self.chain_node_info_list:
                result['ChainNodeInfoList'].append(k.to_map() if k else None)
        if self.consortium_admin is not None:
            result['ConsortiumAdmin'] = self.consortium_admin
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.chain_node_info_list = []
        if m.get('ChainNodeInfoList') is not None:
            for k in m.get('ChainNodeInfoList'):
                temp_model = DescribeAntChainSubnetNodeListResponseBodyResultChainNodeInfoList()
                self.chain_node_info_list.append(temp_model.from_map(k))
        if m.get('ConsortiumAdmin') is not None:
            self.consortium_admin = m.get('ConsortiumAdmin')
        return self


class DescribeAntChainSubnetNodeListResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: str = None,
        message: str = None,
        request_id: str = None,
        result: List[DescribeAntChainSubnetNodeListResponseBodyResult] = None,
        result_code: str = None,
        result_message: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.result = result
        self.result_code = result_code
        self.result_message = result_message
        self.success = success

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = DescribeAntChainSubnetNodeListResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeAntChainSubnetNodeListResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeAntChainSubnetNodeListResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAntChainSubnetNodeListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAntChainTransactionRequest(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        hash: str = None,
    ):
        # This parameter is required.
        self.ant_chain_id = ant_chain_id
        # This parameter is required.
        self.hash = hash

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.hash is not None:
            result['Hash'] = self.hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('Hash') is not None:
            self.hash = m.get('Hash')
        return self


class DescribeAntChainTransactionResponseBodyResultTransaction(TeaModel):
    def __init__(
        self,
        data: str = None,
        extentions: List[str] = None,
        from_: str = None,
        gas: str = None,
        hash: str = None,
        nonce: str = None,
        period: int = None,
        signatures: List[str] = None,
        timestamp: int = None,
        to: str = None,
        tx_type: str = None,
        value: str = None,
    ):
        self.data = data
        self.extentions = extentions
        self.from_ = from_
        self.gas = gas
        self.hash = hash
        self.nonce = nonce
        self.period = period
        self.signatures = signatures
        self.timestamp = timestamp
        self.to = to
        self.tx_type = tx_type
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data
        if self.extentions is not None:
            result['Extentions'] = self.extentions
        if self.from_ is not None:
            result['From'] = self.from_
        if self.gas is not None:
            result['Gas'] = self.gas
        if self.hash is not None:
            result['Hash'] = self.hash
        if self.nonce is not None:
            result['Nonce'] = self.nonce
        if self.period is not None:
            result['Period'] = self.period
        if self.signatures is not None:
            result['Signatures'] = self.signatures
        if self.timestamp is not None:
            result['Timestamp'] = self.timestamp
        if self.to is not None:
            result['To'] = self.to
        if self.tx_type is not None:
            result['TxType'] = self.tx_type
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Extentions') is not None:
            self.extentions = m.get('Extentions')
        if m.get('From') is not None:
            self.from_ = m.get('From')
        if m.get('Gas') is not None:
            self.gas = m.get('Gas')
        if m.get('Hash') is not None:
            self.hash = m.get('Hash')
        if m.get('Nonce') is not None:
            self.nonce = m.get('Nonce')
        if m.get('Period') is not None:
            self.period = m.get('Period')
        if m.get('Signatures') is not None:
            self.signatures = m.get('Signatures')
        if m.get('Timestamp') is not None:
            self.timestamp = m.get('Timestamp')
        if m.get('To') is not None:
            self.to = m.get('To')
        if m.get('TxType') is not None:
            self.tx_type = m.get('TxType')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class DescribeAntChainTransactionResponseBodyResult(TeaModel):
    def __init__(
        self,
        block_hash: str = None,
        block_height: int = None,
        block_version: str = None,
        create_time: int = None,
        hash: str = None,
        transaction: DescribeAntChainTransactionResponseBodyResultTransaction = None,
    ):
        self.block_hash = block_hash
        self.block_height = block_height
        self.block_version = block_version
        self.create_time = create_time
        self.hash = hash
        self.transaction = transaction

    def validate(self):
        if self.transaction:
            self.transaction.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.block_hash is not None:
            result['BlockHash'] = self.block_hash
        if self.block_height is not None:
            result['BlockHeight'] = self.block_height
        if self.block_version is not None:
            result['BlockVersion'] = self.block_version
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.hash is not None:
            result['Hash'] = self.hash
        if self.transaction is not None:
            result['Transaction'] = self.transaction.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BlockHash') is not None:
            self.block_hash = m.get('BlockHash')
        if m.get('BlockHeight') is not None:
            self.block_height = m.get('BlockHeight')
        if m.get('BlockVersion') is not None:
            self.block_version = m.get('BlockVersion')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Hash') is not None:
            self.hash = m.get('Hash')
        if m.get('Transaction') is not None:
            temp_model = DescribeAntChainTransactionResponseBodyResultTransaction()
            self.transaction = temp_model.from_map(m['Transaction'])
        return self


class DescribeAntChainTransactionResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: DescribeAntChainTransactionResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeAntChainTransactionResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class DescribeAntChainTransactionResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeAntChainTransactionResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAntChainTransactionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAntChainTransactionNewRequest(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        consortium_id: str = None,
        hash: str = None,
    ):
        # This parameter is required.
        self.ant_chain_id = ant_chain_id
        self.consortium_id = consortium_id
        # This parameter is required.
        self.hash = hash

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.hash is not None:
            result['Hash'] = self.hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('Hash') is not None:
            self.hash = m.get('Hash')
        return self


class DescribeAntChainTransactionNewResponseBodyResultTransaction(TeaModel):
    def __init__(
        self,
        data: str = None,
        extentions: List[str] = None,
        from_: str = None,
        gas: str = None,
        hash: str = None,
        nonce: str = None,
        period: int = None,
        signatures: List[str] = None,
        timestamp: int = None,
        to: str = None,
        tx_type: str = None,
        value: str = None,
    ):
        self.data = data
        self.extentions = extentions
        self.from_ = from_
        self.gas = gas
        self.hash = hash
        self.nonce = nonce
        self.period = period
        self.signatures = signatures
        self.timestamp = timestamp
        self.to = to
        self.tx_type = tx_type
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data
        if self.extentions is not None:
            result['Extentions'] = self.extentions
        if self.from_ is not None:
            result['From'] = self.from_
        if self.gas is not None:
            result['Gas'] = self.gas
        if self.hash is not None:
            result['Hash'] = self.hash
        if self.nonce is not None:
            result['Nonce'] = self.nonce
        if self.period is not None:
            result['Period'] = self.period
        if self.signatures is not None:
            result['Signatures'] = self.signatures
        if self.timestamp is not None:
            result['Timestamp'] = self.timestamp
        if self.to is not None:
            result['To'] = self.to
        if self.tx_type is not None:
            result['TxType'] = self.tx_type
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Extentions') is not None:
            self.extentions = m.get('Extentions')
        if m.get('From') is not None:
            self.from_ = m.get('From')
        if m.get('Gas') is not None:
            self.gas = m.get('Gas')
        if m.get('Hash') is not None:
            self.hash = m.get('Hash')
        if m.get('Nonce') is not None:
            self.nonce = m.get('Nonce')
        if m.get('Period') is not None:
            self.period = m.get('Period')
        if m.get('Signatures') is not None:
            self.signatures = m.get('Signatures')
        if m.get('Timestamp') is not None:
            self.timestamp = m.get('Timestamp')
        if m.get('To') is not None:
            self.to = m.get('To')
        if m.get('TxType') is not None:
            self.tx_type = m.get('TxType')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class DescribeAntChainTransactionNewResponseBodyResult(TeaModel):
    def __init__(
        self,
        block_hash: str = None,
        block_height: int = None,
        block_version: str = None,
        create_time: int = None,
        hash: str = None,
        transaction: DescribeAntChainTransactionNewResponseBodyResultTransaction = None,
    ):
        self.block_hash = block_hash
        self.block_height = block_height
        self.block_version = block_version
        self.create_time = create_time
        self.hash = hash
        self.transaction = transaction

    def validate(self):
        if self.transaction:
            self.transaction.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.block_hash is not None:
            result['BlockHash'] = self.block_hash
        if self.block_height is not None:
            result['BlockHeight'] = self.block_height
        if self.block_version is not None:
            result['BlockVersion'] = self.block_version
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.hash is not None:
            result['Hash'] = self.hash
        if self.transaction is not None:
            result['Transaction'] = self.transaction.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BlockHash') is not None:
            self.block_hash = m.get('BlockHash')
        if m.get('BlockHeight') is not None:
            self.block_height = m.get('BlockHeight')
        if m.get('BlockVersion') is not None:
            self.block_version = m.get('BlockVersion')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Hash') is not None:
            self.hash = m.get('Hash')
        if m.get('Transaction') is not None:
            temp_model = DescribeAntChainTransactionNewResponseBodyResultTransaction()
            self.transaction = temp_model.from_map(m['Transaction'])
        return self


class DescribeAntChainTransactionNewResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: str = None,
        message: str = None,
        request_id: str = None,
        result: DescribeAntChainTransactionNewResponseBodyResult = None,
        result_code: str = None,
        result_message: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.result = result
        self.result_code = result_code
        self.result_message = result_message
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeAntChainTransactionNewResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeAntChainTransactionNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeAntChainTransactionNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAntChainTransactionNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAntChainTransactionReceiptNewRequest(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        consortium_id: str = None,
        hash: str = None,
    ):
        # This parameter is required.
        self.ant_chain_id = ant_chain_id
        self.consortium_id = consortium_id
        # This parameter is required.
        self.hash = hash

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.hash is not None:
            result['Hash'] = self.hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('Hash') is not None:
            self.hash = m.get('Hash')
        return self


class DescribeAntChainTransactionReceiptNewResponseBodyResult(TeaModel):
    def __init__(
        self,
        data: str = None,
        gas_used: str = None,
        logs: List[str] = None,
        result: int = None,
    ):
        self.data = data
        self.gas_used = gas_used
        self.logs = logs
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data
        if self.gas_used is not None:
            result['GasUsed'] = self.gas_used
        if self.logs is not None:
            result['Logs'] = self.logs
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('GasUsed') is not None:
            self.gas_used = m.get('GasUsed')
        if m.get('Logs') is not None:
            self.logs = m.get('Logs')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class DescribeAntChainTransactionReceiptNewResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: str = None,
        message: str = None,
        request_id: str = None,
        result: DescribeAntChainTransactionReceiptNewResponseBodyResult = None,
        result_code: str = None,
        result_message: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.result = result
        self.result_code = result_code
        self.result_message = result_message
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeAntChainTransactionReceiptNewResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeAntChainTransactionReceiptNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeAntChainTransactionReceiptNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAntChainTransactionReceiptNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAntChainTransactionStatisticsRequest(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        end: int = None,
        start: int = None,
    ):
        # This parameter is required.
        self.ant_chain_id = ant_chain_id
        self.end = end
        self.start = start

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.end is not None:
            result['End'] = self.end
        if self.start is not None:
            result['Start'] = self.start
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('End') is not None:
            self.end = m.get('End')
        if m.get('Start') is not None:
            self.start = m.get('Start')
        return self


class DescribeAntChainTransactionStatisticsResponseBodyResult(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        creat_time: int = None,
        dt: int = None,
        last_sum_block_height: int = None,
        trans_count: int = None,
    ):
        self.ant_chain_id = ant_chain_id
        self.creat_time = creat_time
        self.dt = dt
        self.last_sum_block_height = last_sum_block_height
        self.trans_count = trans_count

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.creat_time is not None:
            result['CreatTime'] = self.creat_time
        if self.dt is not None:
            result['Dt'] = self.dt
        if self.last_sum_block_height is not None:
            result['LastSumBlockHeight'] = self.last_sum_block_height
        if self.trans_count is not None:
            result['TransCount'] = self.trans_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('CreatTime') is not None:
            self.creat_time = m.get('CreatTime')
        if m.get('Dt') is not None:
            self.dt = m.get('Dt')
        if m.get('LastSumBlockHeight') is not None:
            self.last_sum_block_height = m.get('LastSumBlockHeight')
        if m.get('TransCount') is not None:
            self.trans_count = m.get('TransCount')
        return self


class DescribeAntChainTransactionStatisticsResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: List[DescribeAntChainTransactionStatisticsResponseBodyResult] = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = DescribeAntChainTransactionStatisticsResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        return self


class DescribeAntChainTransactionStatisticsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeAntChainTransactionStatisticsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAntChainTransactionStatisticsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAntChainTransactionStatisticsNewRequest(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        consortium_id: str = None,
        end: int = None,
        start: int = None,
    ):
        # This parameter is required.
        self.ant_chain_id = ant_chain_id
        self.consortium_id = consortium_id
        self.end = end
        self.start = start

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.end is not None:
            result['End'] = self.end
        if self.start is not None:
            result['Start'] = self.start
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('End') is not None:
            self.end = m.get('End')
        if m.get('Start') is not None:
            self.start = m.get('Start')
        return self


class DescribeAntChainTransactionStatisticsNewResponseBodyResult(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        creat_time: int = None,
        dt: int = None,
        last_sum_block_height: int = None,
        trans_count: int = None,
    ):
        self.ant_chain_id = ant_chain_id
        self.creat_time = creat_time
        self.dt = dt
        self.last_sum_block_height = last_sum_block_height
        self.trans_count = trans_count

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.creat_time is not None:
            result['CreatTime'] = self.creat_time
        if self.dt is not None:
            result['Dt'] = self.dt
        if self.last_sum_block_height is not None:
            result['LastSumBlockHeight'] = self.last_sum_block_height
        if self.trans_count is not None:
            result['TransCount'] = self.trans_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('CreatTime') is not None:
            self.creat_time = m.get('CreatTime')
        if m.get('Dt') is not None:
            self.dt = m.get('Dt')
        if m.get('LastSumBlockHeight') is not None:
            self.last_sum_block_height = m.get('LastSumBlockHeight')
        if m.get('TransCount') is not None:
            self.trans_count = m.get('TransCount')
        return self


class DescribeAntChainTransactionStatisticsNewResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: str = None,
        message: str = None,
        request_id: str = None,
        result: List[DescribeAntChainTransactionStatisticsNewResponseBodyResult] = None,
        result_code: str = None,
        result_message: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.result = result
        self.result_code = result_code
        self.result_message = result_message
        self.success = success

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = DescribeAntChainTransactionStatisticsNewResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeAntChainTransactionStatisticsNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeAntChainTransactionStatisticsNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAntChainTransactionStatisticsNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAntChainsRequest(TeaModel):
    def __init__(
        self,
        consortium_id: str = None,
        page_number: int = None,
        page_size: int = None,
    ):
        # This parameter is required.
        self.consortium_id = consortium_id
        self.page_number = page_number
        # This parameter is required.
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class DescribeAntChainsResponseBodyResultAntChains(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        ant_chain_name: str = None,
        chain_type: str = None,
        cipher_suit: str = None,
        create_time: int = None,
        expire_time: int = None,
        is_admin: bool = None,
        member_status: str = None,
        merkle_tree_suit: str = None,
        network: str = None,
        node_num: int = None,
        region_id: str = None,
        resource_size: str = None,
        tls_algo: str = None,
        version: str = None,
    ):
        self.ant_chain_id = ant_chain_id
        self.ant_chain_name = ant_chain_name
        self.chain_type = chain_type
        self.cipher_suit = cipher_suit
        self.create_time = create_time
        self.expire_time = expire_time
        self.is_admin = is_admin
        self.member_status = member_status
        self.merkle_tree_suit = merkle_tree_suit
        self.network = network
        self.node_num = node_num
        self.region_id = region_id
        self.resource_size = resource_size
        self.tls_algo = tls_algo
        self.version = version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.ant_chain_name is not None:
            result['AntChainName'] = self.ant_chain_name
        if self.chain_type is not None:
            result['ChainType'] = self.chain_type
        if self.cipher_suit is not None:
            result['CipherSuit'] = self.cipher_suit
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.is_admin is not None:
            result['IsAdmin'] = self.is_admin
        if self.member_status is not None:
            result['MemberStatus'] = self.member_status
        if self.merkle_tree_suit is not None:
            result['MerkleTreeSuit'] = self.merkle_tree_suit
        if self.network is not None:
            result['Network'] = self.network
        if self.node_num is not None:
            result['NodeNum'] = self.node_num
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_size is not None:
            result['ResourceSize'] = self.resource_size
        if self.tls_algo is not None:
            result['TlsAlgo'] = self.tls_algo
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('AntChainName') is not None:
            self.ant_chain_name = m.get('AntChainName')
        if m.get('ChainType') is not None:
            self.chain_type = m.get('ChainType')
        if m.get('CipherSuit') is not None:
            self.cipher_suit = m.get('CipherSuit')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('IsAdmin') is not None:
            self.is_admin = m.get('IsAdmin')
        if m.get('MemberStatus') is not None:
            self.member_status = m.get('MemberStatus')
        if m.get('MerkleTreeSuit') is not None:
            self.merkle_tree_suit = m.get('MerkleTreeSuit')
        if m.get('Network') is not None:
            self.network = m.get('Network')
        if m.get('NodeNum') is not None:
            self.node_num = m.get('NodeNum')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceSize') is not None:
            self.resource_size = m.get('ResourceSize')
        if m.get('TlsAlgo') is not None:
            self.tls_algo = m.get('TlsAlgo')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class DescribeAntChainsResponseBodyResultPagination(TeaModel):
    def __init__(
        self,
        page_number: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        self.page_number = page_number
        self.page_size = page_size
        self.total_count = total_count

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class DescribeAntChainsResponseBodyResult(TeaModel):
    def __init__(
        self,
        ant_chains: List[DescribeAntChainsResponseBodyResultAntChains] = None,
        is_exist: bool = None,
        pagination: DescribeAntChainsResponseBodyResultPagination = None,
    ):
        self.ant_chains = ant_chains
        self.is_exist = is_exist
        self.pagination = pagination

    def validate(self):
        if self.ant_chains:
            for k in self.ant_chains:
                if k:
                    k.validate()
        if self.pagination:
            self.pagination.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AntChains'] = []
        if self.ant_chains is not None:
            for k in self.ant_chains:
                result['AntChains'].append(k.to_map() if k else None)
        if self.is_exist is not None:
            result['IsExist'] = self.is_exist
        if self.pagination is not None:
            result['Pagination'] = self.pagination.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.ant_chains = []
        if m.get('AntChains') is not None:
            for k in m.get('AntChains'):
                temp_model = DescribeAntChainsResponseBodyResultAntChains()
                self.ant_chains.append(temp_model.from_map(k))
        if m.get('IsExist') is not None:
            self.is_exist = m.get('IsExist')
        if m.get('Pagination') is not None:
            temp_model = DescribeAntChainsResponseBodyResultPagination()
            self.pagination = temp_model.from_map(m['Pagination'])
        return self


class DescribeAntChainsResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: DescribeAntChainsResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeAntChainsResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class DescribeAntChainsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeAntChainsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAntChainsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAntChainsNewRequest(TeaModel):
    def __init__(
        self,
        consortium_id: str = None,
        page_number: int = None,
        page_size: int = None,
    ):
        # This parameter is required.
        self.consortium_id = consortium_id
        self.page_number = page_number
        # This parameter is required.
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class DescribeAntChainsNewResponseBodyResultAntChains(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        ant_chain_name: str = None,
        chain_type: str = None,
        cipher_suit: str = None,
        create_time: int = None,
        expire_time: int = None,
        instance_id: str = None,
        is_admin: bool = None,
        member_status: str = None,
        merkle_tree_suit: str = None,
        monitor_status: bool = None,
        network: str = None,
        node_num: int = None,
        region_id: str = None,
        resource_size: str = None,
        rest_status: str = None,
        tls_algo: str = None,
        version: str = None,
    ):
        self.ant_chain_id = ant_chain_id
        self.ant_chain_name = ant_chain_name
        self.chain_type = chain_type
        self.cipher_suit = cipher_suit
        self.create_time = create_time
        self.expire_time = expire_time
        self.instance_id = instance_id
        self.is_admin = is_admin
        self.member_status = member_status
        self.merkle_tree_suit = merkle_tree_suit
        self.monitor_status = monitor_status
        self.network = network
        self.node_num = node_num
        self.region_id = region_id
        self.resource_size = resource_size
        self.rest_status = rest_status
        self.tls_algo = tls_algo
        self.version = version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.ant_chain_name is not None:
            result['AntChainName'] = self.ant_chain_name
        if self.chain_type is not None:
            result['ChainType'] = self.chain_type
        if self.cipher_suit is not None:
            result['CipherSuit'] = self.cipher_suit
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.is_admin is not None:
            result['IsAdmin'] = self.is_admin
        if self.member_status is not None:
            result['MemberStatus'] = self.member_status
        if self.merkle_tree_suit is not None:
            result['MerkleTreeSuit'] = self.merkle_tree_suit
        if self.monitor_status is not None:
            result['MonitorStatus'] = self.monitor_status
        if self.network is not None:
            result['Network'] = self.network
        if self.node_num is not None:
            result['NodeNum'] = self.node_num
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_size is not None:
            result['ResourceSize'] = self.resource_size
        if self.rest_status is not None:
            result['RestStatus'] = self.rest_status
        if self.tls_algo is not None:
            result['TlsAlgo'] = self.tls_algo
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('AntChainName') is not None:
            self.ant_chain_name = m.get('AntChainName')
        if m.get('ChainType') is not None:
            self.chain_type = m.get('ChainType')
        if m.get('CipherSuit') is not None:
            self.cipher_suit = m.get('CipherSuit')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('IsAdmin') is not None:
            self.is_admin = m.get('IsAdmin')
        if m.get('MemberStatus') is not None:
            self.member_status = m.get('MemberStatus')
        if m.get('MerkleTreeSuit') is not None:
            self.merkle_tree_suit = m.get('MerkleTreeSuit')
        if m.get('MonitorStatus') is not None:
            self.monitor_status = m.get('MonitorStatus')
        if m.get('Network') is not None:
            self.network = m.get('Network')
        if m.get('NodeNum') is not None:
            self.node_num = m.get('NodeNum')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceSize') is not None:
            self.resource_size = m.get('ResourceSize')
        if m.get('RestStatus') is not None:
            self.rest_status = m.get('RestStatus')
        if m.get('TlsAlgo') is not None:
            self.tls_algo = m.get('TlsAlgo')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class DescribeAntChainsNewResponseBodyResultPagination(TeaModel):
    def __init__(
        self,
        page_number: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        self.page_number = page_number
        self.page_size = page_size
        self.total_count = total_count

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class DescribeAntChainsNewResponseBodyResult(TeaModel):
    def __init__(
        self,
        ant_chains: List[DescribeAntChainsNewResponseBodyResultAntChains] = None,
        is_exist: bool = None,
        pagination: DescribeAntChainsNewResponseBodyResultPagination = None,
    ):
        self.ant_chains = ant_chains
        self.is_exist = is_exist
        self.pagination = pagination

    def validate(self):
        if self.ant_chains:
            for k in self.ant_chains:
                if k:
                    k.validate()
        if self.pagination:
            self.pagination.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AntChains'] = []
        if self.ant_chains is not None:
            for k in self.ant_chains:
                result['AntChains'].append(k.to_map() if k else None)
        if self.is_exist is not None:
            result['IsExist'] = self.is_exist
        if self.pagination is not None:
            result['Pagination'] = self.pagination.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.ant_chains = []
        if m.get('AntChains') is not None:
            for k in m.get('AntChains'):
                temp_model = DescribeAntChainsNewResponseBodyResultAntChains()
                self.ant_chains.append(temp_model.from_map(k))
        if m.get('IsExist') is not None:
            self.is_exist = m.get('IsExist')
        if m.get('Pagination') is not None:
            temp_model = DescribeAntChainsNewResponseBodyResultPagination()
            self.pagination = temp_model.from_map(m['Pagination'])
        return self


class DescribeAntChainsNewResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: str = None,
        message: str = None,
        request_id: str = None,
        result: DescribeAntChainsNewResponseBodyResult = None,
        result_code: str = None,
        result_message: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.result = result
        self.result_code = result_code
        self.result_message = result_message
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeAntChainsNewResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeAntChainsNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeAntChainsNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAntChainsNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAntRegionsRequest(TeaModel):
    def __init__(
        self,
        locale: str = None,
    ):
        self.locale = locale

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.locale is not None:
            result['Locale'] = self.locale
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Locale') is not None:
            self.locale = m.get('Locale')
        return self


class DescribeAntRegionsResponseBodyResult(TeaModel):
    def __init__(
        self,
        local_name: str = None,
        region_id: str = None,
    ):
        self.local_name = local_name
        self.region_id = region_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.local_name is not None:
            result['LocalName'] = self.local_name
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('LocalName') is not None:
            self.local_name = m.get('LocalName')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        return self


class DescribeAntRegionsResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: List[DescribeAntRegionsResponseBodyResult] = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = DescribeAntRegionsResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        return self


class DescribeAntRegionsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeAntRegionsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAntRegionsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeAppliesRequest(TeaModel):
    def __init__(
        self,
        bizid: str = None,
        current: int = None,
        page_size: int = None,
        status: str = None,
    ):
        self.bizid = bizid
        self.current = current
        self.page_size = page_size
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        if self.current is not None:
            result['Current'] = self.current
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        if m.get('Current') is not None:
            self.current = m.get('Current')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeAppliesResponseBodyResultApplyHistoryList(TeaModel):
    def __init__(
        self,
        bizid: str = None,
        createtime: int = None,
        id: int = None,
        reject_reason: str = None,
        req_addr: str = None,
        signed_addr: str = None,
        status: int = None,
        updatetime: int = None,
        username: str = None,
    ):
        self.bizid = bizid
        self.createtime = createtime
        self.id = id
        self.reject_reason = reject_reason
        self.req_addr = req_addr
        self.signed_addr = signed_addr
        self.status = status
        self.updatetime = updatetime
        self.username = username

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        if self.createtime is not None:
            result['Createtime'] = self.createtime
        if self.id is not None:
            result['Id'] = self.id
        if self.reject_reason is not None:
            result['RejectReason'] = self.reject_reason
        if self.req_addr is not None:
            result['ReqAddr'] = self.req_addr
        if self.signed_addr is not None:
            result['SignedAddr'] = self.signed_addr
        if self.status is not None:
            result['Status'] = self.status
        if self.updatetime is not None:
            result['Updatetime'] = self.updatetime
        if self.username is not None:
            result['Username'] = self.username
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        if m.get('Createtime') is not None:
            self.createtime = m.get('Createtime')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('RejectReason') is not None:
            self.reject_reason = m.get('RejectReason')
        if m.get('ReqAddr') is not None:
            self.req_addr = m.get('ReqAddr')
        if m.get('SignedAddr') is not None:
            self.signed_addr = m.get('SignedAddr')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Updatetime') is not None:
            self.updatetime = m.get('Updatetime')
        if m.get('Username') is not None:
            self.username = m.get('Username')
        return self


class DescribeAppliesResponseBodyResultPagination(TeaModel):
    def __init__(
        self,
        current: int = None,
        page_size: int = None,
        total: int = None,
    ):
        self.current = current
        self.page_size = page_size
        self.total = total

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.current is not None:
            result['Current'] = self.current
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total is not None:
            result['Total'] = self.total
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Current') is not None:
            self.current = m.get('Current')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('Total') is not None:
            self.total = m.get('Total')
        return self


class DescribeAppliesResponseBodyResult(TeaModel):
    def __init__(
        self,
        apply_history_list: List[DescribeAppliesResponseBodyResultApplyHistoryList] = None,
        pagination: DescribeAppliesResponseBodyResultPagination = None,
    ):
        self.apply_history_list = apply_history_list
        self.pagination = pagination

    def validate(self):
        if self.apply_history_list:
            for k in self.apply_history_list:
                if k:
                    k.validate()
        if self.pagination:
            self.pagination.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['ApplyHistoryList'] = []
        if self.apply_history_list is not None:
            for k in self.apply_history_list:
                result['ApplyHistoryList'].append(k.to_map() if k else None)
        if self.pagination is not None:
            result['Pagination'] = self.pagination.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.apply_history_list = []
        if m.get('ApplyHistoryList') is not None:
            for k in m.get('ApplyHistoryList'):
                temp_model = DescribeAppliesResponseBodyResultApplyHistoryList()
                self.apply_history_list.append(temp_model.from_map(k))
        if m.get('Pagination') is not None:
            temp_model = DescribeAppliesResponseBodyResultPagination()
            self.pagination = temp_model.from_map(m['Pagination'])
        return self


class DescribeAppliesResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: DescribeAppliesResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeAppliesResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class DescribeAppliesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeAppliesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeAppliesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeBcSchemaRequest(TeaModel):
    def __init__(
        self,
        bizid: str = None,
    ):
        self.bizid = bizid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        return self


class DescribeBcSchemaResponseBodyResultResponsesPropertiesDataSource(TeaModel):
    def __init__(
        self,
        allow_null: int = None,
        annotation: str = None,
        field: str = None,
        indexes: int = None,
        key: int = None,
        length: int = None,
        reg: str = None,
        type: str = None,
    ):
        self.allow_null = allow_null
        self.annotation = annotation
        self.field = field
        self.indexes = indexes
        self.key = key
        self.length = length
        self.reg = reg
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.allow_null is not None:
            result['AllowNull'] = self.allow_null
        if self.annotation is not None:
            result['Annotation'] = self.annotation
        if self.field is not None:
            result['Field'] = self.field
        if self.indexes is not None:
            result['Indexes'] = self.indexes
        if self.key is not None:
            result['Key'] = self.key
        if self.length is not None:
            result['Length'] = self.length
        if self.reg is not None:
            result['Reg'] = self.reg
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AllowNull') is not None:
            self.allow_null = m.get('AllowNull')
        if m.get('Annotation') is not None:
            self.annotation = m.get('Annotation')
        if m.get('Field') is not None:
            self.field = m.get('Field')
        if m.get('Indexes') is not None:
            self.indexes = m.get('Indexes')
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Length') is not None:
            self.length = m.get('Length')
        if m.get('Reg') is not None:
            self.reg = m.get('Reg')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class DescribeBcSchemaResponseBodyResultResponsesProperties(TeaModel):
    def __init__(
        self,
        count: int = None,
        data_source: List[DescribeBcSchemaResponseBodyResultResponsesPropertiesDataSource] = None,
    ):
        self.count = count
        self.data_source = data_source

    def validate(self):
        if self.data_source:
            for k in self.data_source:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.count is not None:
            result['Count'] = self.count
        result['DataSource'] = []
        if self.data_source is not None:
            for k in self.data_source:
                result['DataSource'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Count') is not None:
            self.count = m.get('Count')
        self.data_source = []
        if m.get('DataSource') is not None:
            for k in m.get('DataSource'):
                temp_model = DescribeBcSchemaResponseBodyResultResponsesPropertiesDataSource()
                self.data_source.append(temp_model.from_map(k))
        return self


class DescribeBcSchemaResponseBodyResultResponses(TeaModel):
    def __init__(
        self,
        category: str = None,
        category_name: str = None,
        description: str = None,
        properties: DescribeBcSchemaResponseBodyResultResponsesProperties = None,
    ):
        self.category = category
        self.category_name = category_name
        self.description = description
        self.properties = properties

    def validate(self):
        if self.properties:
            self.properties.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['Category'] = self.category
        if self.category_name is not None:
            result['CategoryName'] = self.category_name
        if self.description is not None:
            result['Description'] = self.description
        if self.properties is not None:
            result['Properties'] = self.properties.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('CategoryName') is not None:
            self.category_name = m.get('CategoryName')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Properties') is not None:
            temp_model = DescribeBcSchemaResponseBodyResultResponsesProperties()
            self.properties = temp_model.from_map(m['Properties'])
        return self


class DescribeBcSchemaResponseBodyResultSchema(TeaModel):
    def __init__(
        self,
        create_time: int = None,
        description: str = None,
        id: int = None,
        is_template: bool = None,
        name: str = None,
        update_time: int = None,
        version: int = None,
    ):
        self.create_time = create_time
        self.description = description
        self.id = id
        self.is_template = is_template
        self.name = name
        self.update_time = update_time
        self.version = version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.description is not None:
            result['Description'] = self.description
        if self.id is not None:
            result['Id'] = self.id
        if self.is_template is not None:
            result['IsTemplate'] = self.is_template
        if self.name is not None:
            result['Name'] = self.name
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('IsTemplate') is not None:
            self.is_template = m.get('IsTemplate')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class DescribeBcSchemaResponseBodyResult(TeaModel):
    def __init__(
        self,
        responses: List[DescribeBcSchemaResponseBodyResultResponses] = None,
        schema: DescribeBcSchemaResponseBodyResultSchema = None,
    ):
        self.responses = responses
        self.schema = schema

    def validate(self):
        if self.responses:
            for k in self.responses:
                if k:
                    k.validate()
        if self.schema:
            self.schema.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Responses'] = []
        if self.responses is not None:
            for k in self.responses:
                result['Responses'].append(k.to_map() if k else None)
        if self.schema is not None:
            result['Schema'] = self.schema.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.responses = []
        if m.get('Responses') is not None:
            for k in m.get('Responses'):
                temp_model = DescribeBcSchemaResponseBodyResultResponses()
                self.responses.append(temp_model.from_map(k))
        if m.get('Schema') is not None:
            temp_model = DescribeBcSchemaResponseBodyResultSchema()
            self.schema = temp_model.from_map(m['Schema'])
        return self


class DescribeBcSchemaResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: DescribeBcSchemaResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeBcSchemaResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class DescribeBcSchemaResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeBcSchemaResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeBcSchemaResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeBlockRequest(TeaModel):
    def __init__(
        self,
        bizid: str = None,
        height: int = None,
    ):
        self.bizid = bizid
        self.height = height

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        if self.height is not None:
            result['Height'] = self.height
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        if m.get('Height') is not None:
            self.height = m.get('Height')
        return self


class DescribeBlockResponseBodyResult(TeaModel):
    def __init__(
        self,
        alias: str = None,
        block_hash: str = None,
        create_time: int = None,
        height: int = None,
        previous_hash: str = None,
        root_tx_hash: str = None,
        trans_summary_list: str = None,
        transaction_size: int = None,
        version: int = None,
    ):
        self.alias = alias
        self.block_hash = block_hash
        self.create_time = create_time
        self.height = height
        self.previous_hash = previous_hash
        self.root_tx_hash = root_tx_hash
        self.trans_summary_list = trans_summary_list
        self.transaction_size = transaction_size
        self.version = version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alias is not None:
            result['Alias'] = self.alias
        if self.block_hash is not None:
            result['BlockHash'] = self.block_hash
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.height is not None:
            result['Height'] = self.height
        if self.previous_hash is not None:
            result['PreviousHash'] = self.previous_hash
        if self.root_tx_hash is not None:
            result['RootTxHash'] = self.root_tx_hash
        if self.trans_summary_list is not None:
            result['TransSummaryList'] = self.trans_summary_list
        if self.transaction_size is not None:
            result['TransactionSize'] = self.transaction_size
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Alias') is not None:
            self.alias = m.get('Alias')
        if m.get('BlockHash') is not None:
            self.block_hash = m.get('BlockHash')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Height') is not None:
            self.height = m.get('Height')
        if m.get('PreviousHash') is not None:
            self.previous_hash = m.get('PreviousHash')
        if m.get('RootTxHash') is not None:
            self.root_tx_hash = m.get('RootTxHash')
        if m.get('TransSummaryList') is not None:
            self.trans_summary_list = m.get('TransSummaryList')
        if m.get('TransactionSize') is not None:
            self.transaction_size = m.get('TransactionSize')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class DescribeBlockResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: DescribeBlockResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeBlockResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class DescribeBlockResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeBlockResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeBlockResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeBlockchainApplicationRequest(TeaModel):
    def __init__(
        self,
        bizid: str = None,
        current: int = None,
        page_size: int = None,
        status: str = None,
    ):
        self.bizid = bizid
        self.current = current
        self.page_size = page_size
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        if self.current is not None:
            result['Current'] = self.current
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        if m.get('Current') is not None:
            self.current = m.get('Current')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeBlockchainApplicationResponseBodyResultApplyHistoryList(TeaModel):
    def __init__(
        self,
        bizid: str = None,
        createtime: int = None,
        id: int = None,
        reject_reason: str = None,
        req_addr: str = None,
        signed_addr: str = None,
        status: int = None,
        updatetime: int = None,
        username: str = None,
    ):
        self.bizid = bizid
        self.createtime = createtime
        self.id = id
        self.reject_reason = reject_reason
        self.req_addr = req_addr
        self.signed_addr = signed_addr
        self.status = status
        self.updatetime = updatetime
        self.username = username

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        if self.createtime is not None:
            result['Createtime'] = self.createtime
        if self.id is not None:
            result['Id'] = self.id
        if self.reject_reason is not None:
            result['RejectReason'] = self.reject_reason
        if self.req_addr is not None:
            result['ReqAddr'] = self.req_addr
        if self.signed_addr is not None:
            result['SignedAddr'] = self.signed_addr
        if self.status is not None:
            result['Status'] = self.status
        if self.updatetime is not None:
            result['Updatetime'] = self.updatetime
        if self.username is not None:
            result['Username'] = self.username
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        if m.get('Createtime') is not None:
            self.createtime = m.get('Createtime')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('RejectReason') is not None:
            self.reject_reason = m.get('RejectReason')
        if m.get('ReqAddr') is not None:
            self.req_addr = m.get('ReqAddr')
        if m.get('SignedAddr') is not None:
            self.signed_addr = m.get('SignedAddr')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Updatetime') is not None:
            self.updatetime = m.get('Updatetime')
        if m.get('Username') is not None:
            self.username = m.get('Username')
        return self


class DescribeBlockchainApplicationResponseBodyResultPagination(TeaModel):
    def __init__(
        self,
        current: int = None,
        page_size: int = None,
        total: int = None,
    ):
        self.current = current
        self.page_size = page_size
        self.total = total

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.current is not None:
            result['Current'] = self.current
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total is not None:
            result['Total'] = self.total
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Current') is not None:
            self.current = m.get('Current')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('Total') is not None:
            self.total = m.get('Total')
        return self


class DescribeBlockchainApplicationResponseBodyResult(TeaModel):
    def __init__(
        self,
        apply_history_list: List[DescribeBlockchainApplicationResponseBodyResultApplyHistoryList] = None,
        pagination: DescribeBlockchainApplicationResponseBodyResultPagination = None,
    ):
        self.apply_history_list = apply_history_list
        self.pagination = pagination

    def validate(self):
        if self.apply_history_list:
            for k in self.apply_history_list:
                if k:
                    k.validate()
        if self.pagination:
            self.pagination.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['ApplyHistoryList'] = []
        if self.apply_history_list is not None:
            for k in self.apply_history_list:
                result['ApplyHistoryList'].append(k.to_map() if k else None)
        if self.pagination is not None:
            result['Pagination'] = self.pagination.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.apply_history_list = []
        if m.get('ApplyHistoryList') is not None:
            for k in m.get('ApplyHistoryList'):
                temp_model = DescribeBlockchainApplicationResponseBodyResultApplyHistoryList()
                self.apply_history_list.append(temp_model.from_map(k))
        if m.get('Pagination') is not None:
            temp_model = DescribeBlockchainApplicationResponseBodyResultPagination()
            self.pagination = temp_model.from_map(m['Pagination'])
        return self


class DescribeBlockchainApplicationResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: DescribeBlockchainApplicationResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeBlockchainApplicationResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class DescribeBlockchainApplicationResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeBlockchainApplicationResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeBlockchainApplicationResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeBlockchainConfigOptionRequest(TeaModel):
    def __init__(
        self,
        purpose: str = None,
    ):
        self.purpose = purpose

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.purpose is not None:
            result['Purpose'] = self.purpose
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Purpose') is not None:
            self.purpose = m.get('Purpose')
        return self


class DescribeBlockchainConfigOptionResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: Dict[str, Any] = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class DescribeBlockchainConfigOptionResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeBlockchainConfigOptionResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeBlockchainConfigOptionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeBlockchainCreateTaskRequest(TeaModel):
    def __init__(
        self,
        current: int = None,
        page_size: int = None,
    ):
        self.current = current
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.current is not None:
            result['Current'] = self.current
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Current') is not None:
            self.current = m.get('Current')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class DescribeBlockchainCreateTaskResponseBodyResultBlockchainCreateTasks(TeaModel):
    def __init__(
        self,
        bizid: str = None,
        create_time: int = None,
        memo: str = None,
        name: str = None,
        status: str = None,
    ):
        self.bizid = bizid
        self.create_time = create_time
        self.memo = memo
        self.name = name
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.memo is not None:
            result['Memo'] = self.memo
        if self.name is not None:
            result['Name'] = self.name
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Memo') is not None:
            self.memo = m.get('Memo')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeBlockchainCreateTaskResponseBodyResultPagination(TeaModel):
    def __init__(
        self,
        current: int = None,
        page_size: int = None,
        total: int = None,
    ):
        self.current = current
        self.page_size = page_size
        self.total = total

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.current is not None:
            result['Current'] = self.current
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total is not None:
            result['Total'] = self.total
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Current') is not None:
            self.current = m.get('Current')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('Total') is not None:
            self.total = m.get('Total')
        return self


class DescribeBlockchainCreateTaskResponseBodyResult(TeaModel):
    def __init__(
        self,
        blockchain_create_tasks: List[DescribeBlockchainCreateTaskResponseBodyResultBlockchainCreateTasks] = None,
        pagination: DescribeBlockchainCreateTaskResponseBodyResultPagination = None,
    ):
        self.blockchain_create_tasks = blockchain_create_tasks
        self.pagination = pagination

    def validate(self):
        if self.blockchain_create_tasks:
            for k in self.blockchain_create_tasks:
                if k:
                    k.validate()
        if self.pagination:
            self.pagination.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['BlockchainCreateTasks'] = []
        if self.blockchain_create_tasks is not None:
            for k in self.blockchain_create_tasks:
                result['BlockchainCreateTasks'].append(k.to_map() if k else None)
        if self.pagination is not None:
            result['Pagination'] = self.pagination.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.blockchain_create_tasks = []
        if m.get('BlockchainCreateTasks') is not None:
            for k in m.get('BlockchainCreateTasks'):
                temp_model = DescribeBlockchainCreateTaskResponseBodyResultBlockchainCreateTasks()
                self.blockchain_create_tasks.append(temp_model.from_map(k))
        if m.get('Pagination') is not None:
            temp_model = DescribeBlockchainCreateTaskResponseBodyResultPagination()
            self.pagination = temp_model.from_map(m['Pagination'])
        return self


class DescribeBlockchainCreateTaskResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: DescribeBlockchainCreateTaskResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeBlockchainCreateTaskResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class DescribeBlockchainCreateTaskResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeBlockchainCreateTaskResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeBlockchainCreateTaskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeBlockchainCreationConfigOptionsRequest(TeaModel):
    def __init__(
        self,
        purpose: str = None,
    ):
        self.purpose = purpose

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.purpose is not None:
            result['Purpose'] = self.purpose
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Purpose') is not None:
            self.purpose = m.get('Purpose')
        return self


class DescribeBlockchainCreationConfigOptionsResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: Dict[str, Any] = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class DescribeBlockchainCreationConfigOptionsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeBlockchainCreationConfigOptionsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeBlockchainCreationConfigOptionsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeBlockchainInfoRequest(TeaModel):
    def __init__(
        self,
        bizid: str = None,
    ):
        self.bizid = bizid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        return self


class DescribeBlockchainInfoResponseBodyResultNodeInfoList(TeaModel):
    def __init__(
        self,
        block_height: int = None,
        node_name: str = None,
        status: bool = None,
        version: str = None,
    ):
        self.block_height = block_height
        self.node_name = node_name
        self.status = status
        self.version = version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.block_height is not None:
            result['BlockHeight'] = self.block_height
        if self.node_name is not None:
            result['NodeName'] = self.node_name
        if self.status is not None:
            result['Status'] = self.status
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BlockHeight') is not None:
            self.block_height = m.get('BlockHeight')
        if m.get('NodeName') is not None:
            self.node_name = m.get('NodeName')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class DescribeBlockchainInfoResponseBodyResult(TeaModel):
    def __init__(
        self,
        abnormal_nodes: int = None,
        bizid: str = None,
        block_height: int = None,
        create_time: int = None,
        is_role: bool = None,
        node_info_list: List[DescribeBlockchainInfoResponseBodyResultNodeInfoList] = None,
        node_number: int = None,
        normal: bool = None,
        transaction_sum: int = None,
        version: str = None,
    ):
        self.abnormal_nodes = abnormal_nodes
        self.bizid = bizid
        self.block_height = block_height
        self.create_time = create_time
        self.is_role = is_role
        self.node_info_list = node_info_list
        self.node_number = node_number
        self.normal = normal
        self.transaction_sum = transaction_sum
        self.version = version

    def validate(self):
        if self.node_info_list:
            for k in self.node_info_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.abnormal_nodes is not None:
            result['AbnormalNodes'] = self.abnormal_nodes
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        if self.block_height is not None:
            result['BlockHeight'] = self.block_height
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.is_role is not None:
            result['IsRole'] = self.is_role
        result['NodeInfoList'] = []
        if self.node_info_list is not None:
            for k in self.node_info_list:
                result['NodeInfoList'].append(k.to_map() if k else None)
        if self.node_number is not None:
            result['NodeNumber'] = self.node_number
        if self.normal is not None:
            result['Normal'] = self.normal
        if self.transaction_sum is not None:
            result['TransactionSum'] = self.transaction_sum
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AbnormalNodes') is not None:
            self.abnormal_nodes = m.get('AbnormalNodes')
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        if m.get('BlockHeight') is not None:
            self.block_height = m.get('BlockHeight')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('IsRole') is not None:
            self.is_role = m.get('IsRole')
        self.node_info_list = []
        if m.get('NodeInfoList') is not None:
            for k in m.get('NodeInfoList'):
                temp_model = DescribeBlockchainInfoResponseBodyResultNodeInfoList()
                self.node_info_list.append(temp_model.from_map(k))
        if m.get('NodeNumber') is not None:
            self.node_number = m.get('NodeNumber')
        if m.get('Normal') is not None:
            self.normal = m.get('Normal')
        if m.get('TransactionSum') is not None:
            self.transaction_sum = m.get('TransactionSum')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class DescribeBlockchainInfoResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: DescribeBlockchainInfoResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeBlockchainInfoResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class DescribeBlockchainInfoResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeBlockchainInfoResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeBlockchainInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeBlockchainSchemaRequest(TeaModel):
    def __init__(
        self,
        bizid: str = None,
    ):
        self.bizid = bizid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        return self


class DescribeBlockchainSchemaResponseBodyResultResponsesPropertiesDataSource(TeaModel):
    def __init__(
        self,
        allow_null: int = None,
        annotation: str = None,
        field: str = None,
        indexes: int = None,
        key: int = None,
        length: int = None,
        reg: str = None,
        type: str = None,
    ):
        self.allow_null = allow_null
        self.annotation = annotation
        self.field = field
        self.indexes = indexes
        self.key = key
        self.length = length
        self.reg = reg
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.allow_null is not None:
            result['AllowNull'] = self.allow_null
        if self.annotation is not None:
            result['Annotation'] = self.annotation
        if self.field is not None:
            result['Field'] = self.field
        if self.indexes is not None:
            result['Indexes'] = self.indexes
        if self.key is not None:
            result['Key'] = self.key
        if self.length is not None:
            result['Length'] = self.length
        if self.reg is not None:
            result['Reg'] = self.reg
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AllowNull') is not None:
            self.allow_null = m.get('AllowNull')
        if m.get('Annotation') is not None:
            self.annotation = m.get('Annotation')
        if m.get('Field') is not None:
            self.field = m.get('Field')
        if m.get('Indexes') is not None:
            self.indexes = m.get('Indexes')
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Length') is not None:
            self.length = m.get('Length')
        if m.get('Reg') is not None:
            self.reg = m.get('Reg')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class DescribeBlockchainSchemaResponseBodyResultResponsesProperties(TeaModel):
    def __init__(
        self,
        count: int = None,
        data_source: List[DescribeBlockchainSchemaResponseBodyResultResponsesPropertiesDataSource] = None,
    ):
        self.count = count
        self.data_source = data_source

    def validate(self):
        if self.data_source:
            for k in self.data_source:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.count is not None:
            result['Count'] = self.count
        result['DataSource'] = []
        if self.data_source is not None:
            for k in self.data_source:
                result['DataSource'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Count') is not None:
            self.count = m.get('Count')
        self.data_source = []
        if m.get('DataSource') is not None:
            for k in m.get('DataSource'):
                temp_model = DescribeBlockchainSchemaResponseBodyResultResponsesPropertiesDataSource()
                self.data_source.append(temp_model.from_map(k))
        return self


class DescribeBlockchainSchemaResponseBodyResultResponses(TeaModel):
    def __init__(
        self,
        category: str = None,
        category_name: str = None,
        description: str = None,
        properties: DescribeBlockchainSchemaResponseBodyResultResponsesProperties = None,
    ):
        self.category = category
        self.category_name = category_name
        self.description = description
        self.properties = properties

    def validate(self):
        if self.properties:
            self.properties.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['Category'] = self.category
        if self.category_name is not None:
            result['CategoryName'] = self.category_name
        if self.description is not None:
            result['Description'] = self.description
        if self.properties is not None:
            result['Properties'] = self.properties.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('CategoryName') is not None:
            self.category_name = m.get('CategoryName')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Properties') is not None:
            temp_model = DescribeBlockchainSchemaResponseBodyResultResponsesProperties()
            self.properties = temp_model.from_map(m['Properties'])
        return self


class DescribeBlockchainSchemaResponseBodyResultSchema(TeaModel):
    def __init__(
        self,
        create_time: int = None,
        description: str = None,
        id: int = None,
        is_template: bool = None,
        name: str = None,
        update_time: int = None,
        version: int = None,
    ):
        self.create_time = create_time
        self.description = description
        self.id = id
        self.is_template = is_template
        self.name = name
        self.update_time = update_time
        self.version = version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.description is not None:
            result['Description'] = self.description
        if self.id is not None:
            result['Id'] = self.id
        if self.is_template is not None:
            result['IsTemplate'] = self.is_template
        if self.name is not None:
            result['Name'] = self.name
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('IsTemplate') is not None:
            self.is_template = m.get('IsTemplate')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class DescribeBlockchainSchemaResponseBodyResult(TeaModel):
    def __init__(
        self,
        responses: List[DescribeBlockchainSchemaResponseBodyResultResponses] = None,
        schema: DescribeBlockchainSchemaResponseBodyResultSchema = None,
    ):
        self.responses = responses
        self.schema = schema

    def validate(self):
        if self.responses:
            for k in self.responses:
                if k:
                    k.validate()
        if self.schema:
            self.schema.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Responses'] = []
        if self.responses is not None:
            for k in self.responses:
                result['Responses'].append(k.to_map() if k else None)
        if self.schema is not None:
            result['Schema'] = self.schema.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.responses = []
        if m.get('Responses') is not None:
            for k in m.get('Responses'):
                temp_model = DescribeBlockchainSchemaResponseBodyResultResponses()
                self.responses.append(temp_model.from_map(k))
        if m.get('Schema') is not None:
            temp_model = DescribeBlockchainSchemaResponseBodyResultSchema()
            self.schema = temp_model.from_map(m['Schema'])
        return self


class DescribeBlockchainSchemaResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: DescribeBlockchainSchemaResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeBlockchainSchemaResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class DescribeBlockchainSchemaResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeBlockchainSchemaResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeBlockchainSchemaResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeBlockchainSchemaDetailRequest(TeaModel):
    def __init__(
        self,
        bizid: str = None,
        schema_id: int = None,
    ):
        self.bizid = bizid
        self.schema_id = schema_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        if self.schema_id is not None:
            result['SchemaId'] = self.schema_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        if m.get('SchemaId') is not None:
            self.schema_id = m.get('SchemaId')
        return self


class DescribeBlockchainSchemaDetailResponseBodyResultResponsesPropertiesDataSource(TeaModel):
    def __init__(
        self,
        allow_null: int = None,
        annotation: str = None,
        field: str = None,
        indexes: int = None,
        key: int = None,
        length: int = None,
        reg: str = None,
        type: str = None,
    ):
        self.allow_null = allow_null
        self.annotation = annotation
        self.field = field
        self.indexes = indexes
        self.key = key
        self.length = length
        self.reg = reg
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.allow_null is not None:
            result['AllowNull'] = self.allow_null
        if self.annotation is not None:
            result['Annotation'] = self.annotation
        if self.field is not None:
            result['Field'] = self.field
        if self.indexes is not None:
            result['Indexes'] = self.indexes
        if self.key is not None:
            result['Key'] = self.key
        if self.length is not None:
            result['Length'] = self.length
        if self.reg is not None:
            result['Reg'] = self.reg
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AllowNull') is not None:
            self.allow_null = m.get('AllowNull')
        if m.get('Annotation') is not None:
            self.annotation = m.get('Annotation')
        if m.get('Field') is not None:
            self.field = m.get('Field')
        if m.get('Indexes') is not None:
            self.indexes = m.get('Indexes')
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Length') is not None:
            self.length = m.get('Length')
        if m.get('Reg') is not None:
            self.reg = m.get('Reg')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class DescribeBlockchainSchemaDetailResponseBodyResultResponsesProperties(TeaModel):
    def __init__(
        self,
        count: int = None,
        data_source: List[DescribeBlockchainSchemaDetailResponseBodyResultResponsesPropertiesDataSource] = None,
    ):
        self.count = count
        self.data_source = data_source

    def validate(self):
        if self.data_source:
            for k in self.data_source:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.count is not None:
            result['Count'] = self.count
        result['DataSource'] = []
        if self.data_source is not None:
            for k in self.data_source:
                result['DataSource'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Count') is not None:
            self.count = m.get('Count')
        self.data_source = []
        if m.get('DataSource') is not None:
            for k in m.get('DataSource'):
                temp_model = DescribeBlockchainSchemaDetailResponseBodyResultResponsesPropertiesDataSource()
                self.data_source.append(temp_model.from_map(k))
        return self


class DescribeBlockchainSchemaDetailResponseBodyResultResponses(TeaModel):
    def __init__(
        self,
        category: str = None,
        category_name: str = None,
        description: str = None,
        properties: DescribeBlockchainSchemaDetailResponseBodyResultResponsesProperties = None,
    ):
        self.category = category
        self.category_name = category_name
        self.description = description
        self.properties = properties

    def validate(self):
        if self.properties:
            self.properties.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['Category'] = self.category
        if self.category_name is not None:
            result['CategoryName'] = self.category_name
        if self.description is not None:
            result['Description'] = self.description
        if self.properties is not None:
            result['Properties'] = self.properties.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('CategoryName') is not None:
            self.category_name = m.get('CategoryName')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Properties') is not None:
            temp_model = DescribeBlockchainSchemaDetailResponseBodyResultResponsesProperties()
            self.properties = temp_model.from_map(m['Properties'])
        return self


class DescribeBlockchainSchemaDetailResponseBodyResultSchema(TeaModel):
    def __init__(
        self,
        create_time: int = None,
        description: str = None,
        id: int = None,
        is_template: bool = None,
        name: str = None,
        update_time: int = None,
        version: int = None,
    ):
        self.create_time = create_time
        self.description = description
        self.id = id
        self.is_template = is_template
        self.name = name
        self.update_time = update_time
        self.version = version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.description is not None:
            result['Description'] = self.description
        if self.id is not None:
            result['Id'] = self.id
        if self.is_template is not None:
            result['IsTemplate'] = self.is_template
        if self.name is not None:
            result['Name'] = self.name
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('IsTemplate') is not None:
            self.is_template = m.get('IsTemplate')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class DescribeBlockchainSchemaDetailResponseBodyResult(TeaModel):
    def __init__(
        self,
        responses: List[DescribeBlockchainSchemaDetailResponseBodyResultResponses] = None,
        schema: DescribeBlockchainSchemaDetailResponseBodyResultSchema = None,
    ):
        self.responses = responses
        self.schema = schema

    def validate(self):
        if self.responses:
            for k in self.responses:
                if k:
                    k.validate()
        if self.schema:
            self.schema.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Responses'] = []
        if self.responses is not None:
            for k in self.responses:
                result['Responses'].append(k.to_map() if k else None)
        if self.schema is not None:
            result['Schema'] = self.schema.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.responses = []
        if m.get('Responses') is not None:
            for k in m.get('Responses'):
                temp_model = DescribeBlockchainSchemaDetailResponseBodyResultResponses()
                self.responses.append(temp_model.from_map(k))
        if m.get('Schema') is not None:
            temp_model = DescribeBlockchainSchemaDetailResponseBodyResultSchema()
            self.schema = temp_model.from_map(m['Schema'])
        return self


class DescribeBlockchainSchemaDetailResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: DescribeBlockchainSchemaDetailResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeBlockchainSchemaDetailResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class DescribeBlockchainSchemaDetailResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeBlockchainSchemaDetailResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeBlockchainSchemaDetailResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeBlockchainSchemaFileOSSPropertiesRequest(TeaModel):
    def __init__(
        self,
        bizid: str = None,
    ):
        self.bizid = bizid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        return self


class DescribeBlockchainSchemaFileOSSPropertiesResponseBodyResult(TeaModel):
    def __init__(
        self,
        access_key_id: str = None,
        access_key_secret: str = None,
        bucket_name: str = None,
        endpoint: str = None,
        folder_name: str = None,
    ):
        self.access_key_id = access_key_id
        self.access_key_secret = access_key_secret
        self.bucket_name = bucket_name
        self.endpoint = endpoint
        self.folder_name = folder_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.access_key_id is not None:
            result['AccessKeyId'] = self.access_key_id
        if self.access_key_secret is not None:
            result['AccessKeySecret'] = self.access_key_secret
        if self.bucket_name is not None:
            result['BucketName'] = self.bucket_name
        if self.endpoint is not None:
            result['Endpoint'] = self.endpoint
        if self.folder_name is not None:
            result['FolderName'] = self.folder_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccessKeyId') is not None:
            self.access_key_id = m.get('AccessKeyId')
        if m.get('AccessKeySecret') is not None:
            self.access_key_secret = m.get('AccessKeySecret')
        if m.get('BucketName') is not None:
            self.bucket_name = m.get('BucketName')
        if m.get('Endpoint') is not None:
            self.endpoint = m.get('Endpoint')
        if m.get('FolderName') is not None:
            self.folder_name = m.get('FolderName')
        return self


class DescribeBlockchainSchemaFileOSSPropertiesResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: DescribeBlockchainSchemaFileOSSPropertiesResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeBlockchainSchemaFileOSSPropertiesResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class DescribeBlockchainSchemaFileOSSPropertiesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeBlockchainSchemaFileOSSPropertiesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeBlockchainSchemaFileOSSPropertiesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeBlockchainSchemaTemplatesResponseBodyResultSchemaList(TeaModel):
    def __init__(
        self,
        create_time: int = None,
        description: str = None,
        id: int = None,
        is_template: int = None,
        name: str = None,
        update_time: int = None,
        version: int = None,
    ):
        self.create_time = create_time
        self.description = description
        self.id = id
        self.is_template = is_template
        self.name = name
        self.update_time = update_time
        self.version = version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.description is not None:
            result['Description'] = self.description
        if self.id is not None:
            result['Id'] = self.id
        if self.is_template is not None:
            result['IsTemplate'] = self.is_template
        if self.name is not None:
            result['Name'] = self.name
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('IsTemplate') is not None:
            self.is_template = m.get('IsTemplate')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class DescribeBlockchainSchemaTemplatesResponseBodyResult(TeaModel):
    def __init__(
        self,
        schema_list: List[DescribeBlockchainSchemaTemplatesResponseBodyResultSchemaList] = None,
    ):
        self.schema_list = schema_list

    def validate(self):
        if self.schema_list:
            for k in self.schema_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['SchemaList'] = []
        if self.schema_list is not None:
            for k in self.schema_list:
                result['SchemaList'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.schema_list = []
        if m.get('SchemaList') is not None:
            for k in m.get('SchemaList'):
                temp_model = DescribeBlockchainSchemaTemplatesResponseBodyResultSchemaList()
                self.schema_list.append(temp_model.from_map(k))
        return self


class DescribeBlockchainSchemaTemplatesResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: DescribeBlockchainSchemaTemplatesResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeBlockchainSchemaTemplatesResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class DescribeBlockchainSchemaTemplatesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeBlockchainSchemaTemplatesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeBlockchainSchemaTemplatesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeCSIGatewayEndpointRequest(TeaModel):
    def __init__(
        self,
        organization_id: str = None,
    ):
        # This parameter is required.
        self.organization_id = organization_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        return self


class DescribeCSIGatewayEndpointResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: str = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeCSIGatewayEndpointResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeCSIGatewayEndpointResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeCSIGatewayEndpointResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeCandidateOrganizationsRequest(TeaModel):
    def __init__(
        self,
        location: str = None,
    ):
        self.location = location

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.location is not None:
            result['Location'] = self.location
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Location') is not None:
            self.location = m.get('Location')
        return self


class DescribeCandidateOrganizationsResponseBodyResult(TeaModel):
    def __init__(
        self,
        cluster_state: str = None,
        organization_id: str = None,
        organization_name: str = None,
        service_state: str = None,
    ):
        self.cluster_state = cluster_state
        self.organization_id = organization_id
        self.organization_name = organization_name
        self.service_state = service_state

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cluster_state is not None:
            result['ClusterState'] = self.cluster_state
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        if self.organization_name is not None:
            result['OrganizationName'] = self.organization_name
        if self.service_state is not None:
            result['ServiceState'] = self.service_state
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ClusterState') is not None:
            self.cluster_state = m.get('ClusterState')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        if m.get('OrganizationName') is not None:
            self.organization_name = m.get('OrganizationName')
        if m.get('ServiceState') is not None:
            self.service_state = m.get('ServiceState')
        return self


class DescribeCandidateOrganizationsResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: List[DescribeCandidateOrganizationsResponseBodyResult] = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = DescribeCandidateOrganizationsResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeCandidateOrganizationsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeCandidateOrganizationsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeCandidateOrganizationsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeChaincodeCollectionConfigRequest(TeaModel):
    def __init__(
        self,
        chaincode_id: str = None,
        location: str = None,
    ):
        # This parameter is required.
        self.chaincode_id = chaincode_id
        self.location = location

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.chaincode_id is not None:
            result['ChaincodeId'] = self.chaincode_id
        if self.location is not None:
            result['Location'] = self.location
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChaincodeId') is not None:
            self.chaincode_id = m.get('ChaincodeId')
        if m.get('Location') is not None:
            self.location = m.get('Location')
        return self


class DescribeChaincodeCollectionConfigResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: str = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeChaincodeCollectionConfigResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeChaincodeCollectionConfigResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeChaincodeCollectionConfigResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeChaincodeDefinitionTaskRequest(TeaModel):
    def __init__(
        self,
        chaincode_id: str = None,
        organization_id: str = None,
    ):
        # This parameter is required.
        self.chaincode_id = chaincode_id
        # This parameter is required.
        self.organization_id = organization_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.chaincode_id is not None:
            result['ChaincodeId'] = self.chaincode_id
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChaincodeId') is not None:
            self.chaincode_id = m.get('ChaincodeId')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        return self


class DescribeChaincodeDefinitionTaskResponseBodyResultContentChaincodeDefinition(TeaModel):
    def __init__(
        self,
        chaincode_package_id: str = None,
        collection_config: str = None,
        endorsement_policy: str = None,
        init_required: bool = None,
        name: str = None,
        sequence: int = None,
        version: str = None,
    ):
        self.chaincode_package_id = chaincode_package_id
        self.collection_config = collection_config
        self.endorsement_policy = endorsement_policy
        self.init_required = init_required
        self.name = name
        self.sequence = sequence
        self.version = version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.chaincode_package_id is not None:
            result['ChaincodePackageId'] = self.chaincode_package_id
        if self.collection_config is not None:
            result['CollectionConfig'] = self.collection_config
        if self.endorsement_policy is not None:
            result['EndorsementPolicy'] = self.endorsement_policy
        if self.init_required is not None:
            result['InitRequired'] = self.init_required
        if self.name is not None:
            result['Name'] = self.name
        if self.sequence is not None:
            result['Sequence'] = self.sequence
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChaincodePackageId') is not None:
            self.chaincode_package_id = m.get('ChaincodePackageId')
        if m.get('CollectionConfig') is not None:
            self.collection_config = m.get('CollectionConfig')
        if m.get('EndorsementPolicy') is not None:
            self.endorsement_policy = m.get('EndorsementPolicy')
        if m.get('InitRequired') is not None:
            self.init_required = m.get('InitRequired')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Sequence') is not None:
            self.sequence = m.get('Sequence')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class DescribeChaincodeDefinitionTaskResponseBodyResultContent(TeaModel):
    def __init__(
        self,
        chaincode_definition: DescribeChaincodeDefinitionTaskResponseBodyResultContentChaincodeDefinition = None,
    ):
        self.chaincode_definition = chaincode_definition

    def validate(self):
        if self.chaincode_definition:
            self.chaincode_definition.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.chaincode_definition is not None:
            result['ChaincodeDefinition'] = self.chaincode_definition.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChaincodeDefinition') is not None:
            temp_model = DescribeChaincodeDefinitionTaskResponseBodyResultContentChaincodeDefinition()
            self.chaincode_definition = temp_model.from_map(m['ChaincodeDefinition'])
        return self


class DescribeChaincodeDefinitionTaskResponseBodyResult(TeaModel):
    def __init__(
        self,
        approvers: List[str] = None,
        channel_name: str = None,
        content: DescribeChaincodeDefinitionTaskResponseBodyResultContent = None,
        create_time: int = None,
        creator: str = None,
        description: str = None,
        status: str = None,
        task_id: str = None,
        type: str = None,
    ):
        self.approvers = approvers
        self.channel_name = channel_name
        self.content = content
        self.create_time = create_time
        self.creator = creator
        self.description = description
        self.status = status
        self.task_id = task_id
        self.type = type

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.approvers is not None:
            result['Approvers'] = self.approvers
        if self.channel_name is not None:
            result['ChannelName'] = self.channel_name
        if self.content is not None:
            result['Content'] = self.content.to_map()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.creator is not None:
            result['Creator'] = self.creator
        if self.description is not None:
            result['Description'] = self.description
        if self.status is not None:
            result['Status'] = self.status
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Approvers') is not None:
            self.approvers = m.get('Approvers')
        if m.get('ChannelName') is not None:
            self.channel_name = m.get('ChannelName')
        if m.get('Content') is not None:
            temp_model = DescribeChaincodeDefinitionTaskResponseBodyResultContent()
            self.content = temp_model.from_map(m['Content'])
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Creator') is not None:
            self.creator = m.get('Creator')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class DescribeChaincodeDefinitionTaskResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: DescribeChaincodeDefinitionTaskResponseBodyResult = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeChaincodeDefinitionTaskResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeChaincodeDefinitionTaskResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeChaincodeDefinitionTaskResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeChaincodeDefinitionTaskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeChaincodeUploadPolicyRequest(TeaModel):
    def __init__(
        self,
        organization_id: str = None,
    ):
        # This parameter is required.
        self.organization_id = organization_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        return self


class DescribeChaincodeUploadPolicyResponseBodyResult(TeaModel):
    def __init__(
        self,
        access_id: str = None,
        dir: str = None,
        expire: int = None,
        host: str = None,
        policy: str = None,
        signature: str = None,
    ):
        self.access_id = access_id
        self.dir = dir
        self.expire = expire
        self.host = host
        self.policy = policy
        self.signature = signature

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.access_id is not None:
            result['AccessId'] = self.access_id
        if self.dir is not None:
            result['Dir'] = self.dir
        if self.expire is not None:
            result['Expire'] = self.expire
        if self.host is not None:
            result['Host'] = self.host
        if self.policy is not None:
            result['Policy'] = self.policy
        if self.signature is not None:
            result['Signature'] = self.signature
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccessId') is not None:
            self.access_id = m.get('AccessId')
        if m.get('Dir') is not None:
            self.dir = m.get('Dir')
        if m.get('Expire') is not None:
            self.expire = m.get('Expire')
        if m.get('Host') is not None:
            self.host = m.get('Host')
        if m.get('Policy') is not None:
            self.policy = m.get('Policy')
        if m.get('Signature') is not None:
            self.signature = m.get('Signature')
        return self


class DescribeChaincodeUploadPolicyResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: DescribeChaincodeUploadPolicyResponseBodyResult = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeChaincodeUploadPolicyResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeChaincodeUploadPolicyResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeChaincodeUploadPolicyResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeChaincodeUploadPolicyResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeChannelChaincodesRequest(TeaModel):
    def __init__(
        self,
        channel_id: str = None,
        organization_id: str = None,
    ):
        # This parameter is required.
        self.channel_id = channel_id
        # This parameter is required.
        self.organization_id = organization_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        return self


class DescribeChannelChaincodesResponseBodyResult(TeaModel):
    def __init__(
        self,
        binding: bool = None,
        chaincode_id: str = None,
        channel_id: str = None,
        channel_name: str = None,
        consortium_id: str = None,
        create_time: str = None,
        creator: str = None,
        deploy_time: str = None,
        endorse_policy: str = None,
        installed: str = None,
        management: bool = None,
        message: str = None,
        name: str = None,
        state: str = None,
        version: str = None,
    ):
        self.binding = binding
        self.chaincode_id = chaincode_id
        self.channel_id = channel_id
        self.channel_name = channel_name
        self.consortium_id = consortium_id
        self.create_time = create_time
        self.creator = creator
        self.deploy_time = deploy_time
        self.endorse_policy = endorse_policy
        self.installed = installed
        self.management = management
        self.message = message
        self.name = name
        self.state = state
        self.version = version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.binding is not None:
            result['Binding'] = self.binding
        if self.chaincode_id is not None:
            result['ChaincodeId'] = self.chaincode_id
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.channel_name is not None:
            result['ChannelName'] = self.channel_name
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.creator is not None:
            result['Creator'] = self.creator
        if self.deploy_time is not None:
            result['DeployTime'] = self.deploy_time
        if self.endorse_policy is not None:
            result['EndorsePolicy'] = self.endorse_policy
        if self.installed is not None:
            result['Installed'] = self.installed
        if self.management is not None:
            result['Management'] = self.management
        if self.message is not None:
            result['Message'] = self.message
        if self.name is not None:
            result['Name'] = self.name
        if self.state is not None:
            result['State'] = self.state
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Binding') is not None:
            self.binding = m.get('Binding')
        if m.get('ChaincodeId') is not None:
            self.chaincode_id = m.get('ChaincodeId')
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('ChannelName') is not None:
            self.channel_name = m.get('ChannelName')
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Creator') is not None:
            self.creator = m.get('Creator')
        if m.get('DeployTime') is not None:
            self.deploy_time = m.get('DeployTime')
        if m.get('EndorsePolicy') is not None:
            self.endorse_policy = m.get('EndorsePolicy')
        if m.get('Installed') is not None:
            self.installed = m.get('Installed')
        if m.get('Management') is not None:
            self.management = m.get('Management')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class DescribeChannelChaincodesResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: List[DescribeChannelChaincodesResponseBodyResult] = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = DescribeChannelChaincodesResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeChannelChaincodesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeChannelChaincodesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeChannelChaincodesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeChannelMembersRequest(TeaModel):
    def __init__(
        self,
        channel_id: str = None,
        organization_id: str = None,
    ):
        # This parameter is required.
        self.channel_id = channel_id
        self.organization_id = organization_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        return self


class DescribeChannelMembersResponseBodyResult(TeaModel):
    def __init__(
        self,
        accept_time: str = None,
        channel_id: str = None,
        description: str = None,
        domain: str = None,
        invite_time: str = None,
        name: str = None,
        organization_id: str = None,
        state: str = None,
        with_peer: bool = None,
    ):
        self.accept_time = accept_time
        self.channel_id = channel_id
        self.description = description
        self.domain = domain
        self.invite_time = invite_time
        self.name = name
        self.organization_id = organization_id
        self.state = state
        self.with_peer = with_peer

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.accept_time is not None:
            result['AcceptTime'] = self.accept_time
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.description is not None:
            result['Description'] = self.description
        if self.domain is not None:
            result['Domain'] = self.domain
        if self.invite_time is not None:
            result['InviteTime'] = self.invite_time
        if self.name is not None:
            result['Name'] = self.name
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        if self.state is not None:
            result['State'] = self.state
        if self.with_peer is not None:
            result['WithPeer'] = self.with_peer
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AcceptTime') is not None:
            self.accept_time = m.get('AcceptTime')
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Domain') is not None:
            self.domain = m.get('Domain')
        if m.get('InviteTime') is not None:
            self.invite_time = m.get('InviteTime')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('WithPeer') is not None:
            self.with_peer = m.get('WithPeer')
        return self


class DescribeChannelMembersResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: List[DescribeChannelMembersResponseBodyResult] = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = DescribeChannelMembersResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeChannelMembersResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeChannelMembersResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeChannelMembersResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeChannelTriggersRequest(TeaModel):
    def __init__(
        self,
        channel_id: str = None,
        organization_id: str = None,
    ):
        # This parameter is required.
        self.channel_id = channel_id
        # This parameter is required.
        self.organization_id = organization_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        return self


class DescribeChannelTriggersResponseBodyResultCheckpoint(TeaModel):
    def __init__(
        self,
        error_count: int = None,
        height: int = None,
        index: int = None,
        type: str = None,
    ):
        self.error_count = error_count
        self.height = height
        self.index = index
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_count is not None:
            result['ErrorCount'] = self.error_count
        if self.height is not None:
            result['Height'] = self.height
        if self.index is not None:
            result['Index'] = self.index
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCount') is not None:
            self.error_count = m.get('ErrorCount')
        if m.get('Height') is not None:
            self.height = m.get('Height')
        if m.get('Index') is not None:
            self.index = m.get('Index')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class DescribeChannelTriggersResponseBodyResult(TeaModel):
    def __init__(
        self,
        channel_id: str = None,
        channel_name: str = None,
        checkpoint: DescribeChannelTriggersResponseBodyResultCheckpoint = None,
        create_time: int = None,
        error_message: str = None,
        name: str = None,
        options: str = None,
        source: str = None,
        status: int = None,
        type: str = None,
    ):
        self.channel_id = channel_id
        self.channel_name = channel_name
        self.checkpoint = checkpoint
        self.create_time = create_time
        self.error_message = error_message
        self.name = name
        self.options = options
        self.source = source
        self.status = status
        self.type = type

    def validate(self):
        if self.checkpoint:
            self.checkpoint.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.channel_name is not None:
            result['ChannelName'] = self.channel_name
        if self.checkpoint is not None:
            result['Checkpoint'] = self.checkpoint.to_map()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.name is not None:
            result['Name'] = self.name
        if self.options is not None:
            result['Options'] = self.options
        if self.source is not None:
            result['Source'] = self.source
        if self.status is not None:
            result['Status'] = self.status
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('ChannelName') is not None:
            self.channel_name = m.get('ChannelName')
        if m.get('Checkpoint') is not None:
            temp_model = DescribeChannelTriggersResponseBodyResultCheckpoint()
            self.checkpoint = temp_model.from_map(m['Checkpoint'])
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Options') is not None:
            self.options = m.get('Options')
        if m.get('Source') is not None:
            self.source = m.get('Source')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class DescribeChannelTriggersResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: List[DescribeChannelTriggersResponseBodyResult] = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = DescribeChannelTriggersResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeChannelTriggersResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeChannelTriggersResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeChannelTriggersResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeCloudIntegrationServiceTokenRequest(TeaModel):
    def __init__(
        self,
        organization_id: str = None,
        service: str = None,
    ):
        # This parameter is required.
        self.organization_id = organization_id
        # This parameter is required.
        self.service = service

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        if self.service is not None:
            result['Service'] = self.service
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        if m.get('Service') is not None:
            self.service = m.get('Service')
        return self


class DescribeCloudIntegrationServiceTokenResponseBodyResultHistory(TeaModel):
    def __init__(
        self,
        service: str = None,
        token: str = None,
        type: str = None,
    ):
        self.service = service
        self.token = token
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.service is not None:
            result['Service'] = self.service
        if self.token is not None:
            result['Token'] = self.token
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Service') is not None:
            self.service = m.get('Service')
        if m.get('Token') is not None:
            self.token = m.get('Token')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class DescribeCloudIntegrationServiceTokenResponseBodyResult(TeaModel):
    def __init__(
        self,
        history: List[DescribeCloudIntegrationServiceTokenResponseBodyResultHistory] = None,
        service: str = None,
        token: str = None,
        type: str = None,
    ):
        self.history = history
        self.service = service
        self.token = token
        self.type = type

    def validate(self):
        if self.history:
            for k in self.history:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['History'] = []
        if self.history is not None:
            for k in self.history:
                result['History'].append(k.to_map() if k else None)
        if self.service is not None:
            result['Service'] = self.service
        if self.token is not None:
            result['Token'] = self.token
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.history = []
        if m.get('History') is not None:
            for k in m.get('History'):
                temp_model = DescribeCloudIntegrationServiceTokenResponseBodyResultHistory()
                self.history.append(temp_model.from_map(k))
        if m.get('Service') is not None:
            self.service = m.get('Service')
        if m.get('Token') is not None:
            self.token = m.get('Token')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class DescribeCloudIntegrationServiceTokenResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: DescribeCloudIntegrationServiceTokenResponseBodyResult = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeCloudIntegrationServiceTokenResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeCloudIntegrationServiceTokenResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeCloudIntegrationServiceTokenResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeCloudIntegrationServiceTokenResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeCloudServiceOrganizationStatusRequest(TeaModel):
    def __init__(
        self,
        organization_id: str = None,
    ):
        # This parameter is required.
        self.organization_id = organization_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        return self


class DescribeCloudServiceOrganizationStatusResponseBodyResult(TeaModel):
    def __init__(
        self,
        grant_privilege_url: str = None,
        organization_id: str = None,
        service_open_status: bool = None,
        service_open_url: str = None,
        service_privilege_status: bool = None,
        service_type: str = None,
    ):
        self.grant_privilege_url = grant_privilege_url
        self.organization_id = organization_id
        self.service_open_status = service_open_status
        self.service_open_url = service_open_url
        self.service_privilege_status = service_privilege_status
        self.service_type = service_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.grant_privilege_url is not None:
            result['GrantPrivilegeUrl'] = self.grant_privilege_url
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        if self.service_open_status is not None:
            result['ServiceOpenStatus'] = self.service_open_status
        if self.service_open_url is not None:
            result['ServiceOpenUrl'] = self.service_open_url
        if self.service_privilege_status is not None:
            result['ServicePrivilegeStatus'] = self.service_privilege_status
        if self.service_type is not None:
            result['ServiceType'] = self.service_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('GrantPrivilegeUrl') is not None:
            self.grant_privilege_url = m.get('GrantPrivilegeUrl')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        if m.get('ServiceOpenStatus') is not None:
            self.service_open_status = m.get('ServiceOpenStatus')
        if m.get('ServiceOpenUrl') is not None:
            self.service_open_url = m.get('ServiceOpenUrl')
        if m.get('ServicePrivilegeStatus') is not None:
            self.service_privilege_status = m.get('ServicePrivilegeStatus')
        if m.get('ServiceType') is not None:
            self.service_type = m.get('ServiceType')
        return self


class DescribeCloudServiceOrganizationStatusResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: List[DescribeCloudServiceOrganizationStatusResponseBodyResult] = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = DescribeCloudServiceOrganizationStatusResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeCloudServiceOrganizationStatusResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeCloudServiceOrganizationStatusResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeCloudServiceOrganizationStatusResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeCloudServiceTypeStatusRequest(TeaModel):
    def __init__(
        self,
        organization_id: str = None,
        service_type: str = None,
    ):
        # This parameter is required.
        self.organization_id = organization_id
        # This parameter is required.
        self.service_type = service_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        if self.service_type is not None:
            result['ServiceType'] = self.service_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        if m.get('ServiceType') is not None:
            self.service_type = m.get('ServiceType')
        return self


class DescribeCloudServiceTypeStatusResponseBodyResult(TeaModel):
    def __init__(
        self,
        grant_privilege_url: str = None,
        organization_id: str = None,
        service_open_status: bool = None,
        service_open_url: str = None,
        service_privilege_status: bool = None,
        service_type: str = None,
    ):
        self.grant_privilege_url = grant_privilege_url
        self.organization_id = organization_id
        self.service_open_status = service_open_status
        self.service_open_url = service_open_url
        self.service_privilege_status = service_privilege_status
        self.service_type = service_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.grant_privilege_url is not None:
            result['GrantPrivilegeUrl'] = self.grant_privilege_url
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        if self.service_open_status is not None:
            result['ServiceOpenStatus'] = self.service_open_status
        if self.service_open_url is not None:
            result['ServiceOpenUrl'] = self.service_open_url
        if self.service_privilege_status is not None:
            result['ServicePrivilegeStatus'] = self.service_privilege_status
        if self.service_type is not None:
            result['ServiceType'] = self.service_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('GrantPrivilegeUrl') is not None:
            self.grant_privilege_url = m.get('GrantPrivilegeUrl')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        if m.get('ServiceOpenStatus') is not None:
            self.service_open_status = m.get('ServiceOpenStatus')
        if m.get('ServiceOpenUrl') is not None:
            self.service_open_url = m.get('ServiceOpenUrl')
        if m.get('ServicePrivilegeStatus') is not None:
            self.service_privilege_status = m.get('ServicePrivilegeStatus')
        if m.get('ServiceType') is not None:
            self.service_type = m.get('ServiceType')
        return self


class DescribeCloudServiceTypeStatusResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: DescribeCloudServiceTypeStatusResponseBodyResult = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeCloudServiceTypeStatusResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeCloudServiceTypeStatusResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeCloudServiceTypeStatusResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeCloudServiceTypeStatusResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeConsortiumAdminStatusRequest(TeaModel):
    def __init__(
        self,
        location: str = None,
    ):
        self.location = location

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.location is not None:
            result['Location'] = self.location
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Location') is not None:
            self.location = m.get('Location')
        return self


class DescribeConsortiumAdminStatusResponseBodyResult(TeaModel):
    def __init__(
        self,
        consortium_administrator: bool = None,
        consortium_id: str = None,
    ):
        self.consortium_administrator = consortium_administrator
        self.consortium_id = consortium_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.consortium_administrator is not None:
            result['ConsortiumAdministrator'] = self.consortium_administrator
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ConsortiumAdministrator') is not None:
            self.consortium_administrator = m.get('ConsortiumAdministrator')
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        return self


class DescribeConsortiumAdminStatusResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: List[DescribeConsortiumAdminStatusResponseBodyResult] = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = DescribeConsortiumAdminStatusResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeConsortiumAdminStatusResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeConsortiumAdminStatusResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeConsortiumAdminStatusResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeConsortiumChaincodesRequest(TeaModel):
    def __init__(
        self,
        consortium_id: str = None,
        location: str = None,
    ):
        # This parameter is required.
        self.consortium_id = consortium_id
        self.location = location

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.location is not None:
            result['Location'] = self.location
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('Location') is not None:
            self.location = m.get('Location')
        return self


class DescribeConsortiumChaincodesResponseBodyResult(TeaModel):
    def __init__(
        self,
        chaincode_id: str = None,
        channel_id: str = None,
        channel_name: str = None,
        consortium_id: str = None,
        create_time: str = None,
        deploy_time: str = None,
        endorse_policy: str = None,
        input: str = None,
        install: bool = None,
        management: bool = None,
        message: str = None,
        name: str = None,
        path: str = None,
        provider_id: str = None,
        provider_name: str = None,
        state: str = None,
        type: int = None,
        version: str = None,
    ):
        self.chaincode_id = chaincode_id
        self.channel_id = channel_id
        self.channel_name = channel_name
        self.consortium_id = consortium_id
        self.create_time = create_time
        self.deploy_time = deploy_time
        self.endorse_policy = endorse_policy
        self.input = input
        self.install = install
        self.management = management
        self.message = message
        self.name = name
        self.path = path
        self.provider_id = provider_id
        self.provider_name = provider_name
        self.state = state
        self.type = type
        self.version = version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.chaincode_id is not None:
            result['ChaincodeId'] = self.chaincode_id
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.channel_name is not None:
            result['ChannelName'] = self.channel_name
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.deploy_time is not None:
            result['DeployTime'] = self.deploy_time
        if self.endorse_policy is not None:
            result['EndorsePolicy'] = self.endorse_policy
        if self.input is not None:
            result['Input'] = self.input
        if self.install is not None:
            result['Install'] = self.install
        if self.management is not None:
            result['Management'] = self.management
        if self.message is not None:
            result['Message'] = self.message
        if self.name is not None:
            result['Name'] = self.name
        if self.path is not None:
            result['Path'] = self.path
        if self.provider_id is not None:
            result['ProviderId'] = self.provider_id
        if self.provider_name is not None:
            result['ProviderName'] = self.provider_name
        if self.state is not None:
            result['State'] = self.state
        if self.type is not None:
            result['Type'] = self.type
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChaincodeId') is not None:
            self.chaincode_id = m.get('ChaincodeId')
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('ChannelName') is not None:
            self.channel_name = m.get('ChannelName')
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('DeployTime') is not None:
            self.deploy_time = m.get('DeployTime')
        if m.get('EndorsePolicy') is not None:
            self.endorse_policy = m.get('EndorsePolicy')
        if m.get('Input') is not None:
            self.input = m.get('Input')
        if m.get('Install') is not None:
            self.install = m.get('Install')
        if m.get('Management') is not None:
            self.management = m.get('Management')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Path') is not None:
            self.path = m.get('Path')
        if m.get('ProviderId') is not None:
            self.provider_id = m.get('ProviderId')
        if m.get('ProviderName') is not None:
            self.provider_name = m.get('ProviderName')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class DescribeConsortiumChaincodesResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: List[DescribeConsortiumChaincodesResponseBodyResult] = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = DescribeConsortiumChaincodesResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeConsortiumChaincodesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeConsortiumChaincodesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeConsortiumChaincodesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeConsortiumChannelsRequest(TeaModel):
    def __init__(
        self,
        consortium_id: str = None,
        location: str = None,
    ):
        # This parameter is required.
        self.consortium_id = consortium_id
        self.location = location

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.location is not None:
            result['Location'] = self.location
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('Location') is not None:
            self.location = m.get('Location')
        return self


class DescribeConsortiumChannelsResponseBodyResult(TeaModel):
    def __init__(
        self,
        batch_timeout: int = None,
        block_count: int = None,
        chaincode_count: int = None,
        channel_id: str = None,
        consortium_id: str = None,
        consortium_name: str = None,
        create_time: str = None,
        delete_time: str = None,
        deleted: bool = None,
        hybird: bool = None,
        id: int = None,
        max_message_count: int = None,
        member_count: int = None,
        member_joined_count: str = None,
        name: str = None,
        need_joined: bool = None,
        owner_bid: str = None,
        owner_name: str = None,
        owner_uid: int = None,
        preferred_max_bytes: int = None,
        request_id: str = None,
        state: str = None,
        support_channel_config: bool = None,
        update_time: str = None,
    ):
        self.batch_timeout = batch_timeout
        self.block_count = block_count
        self.chaincode_count = chaincode_count
        self.channel_id = channel_id
        self.consortium_id = consortium_id
        self.consortium_name = consortium_name
        self.create_time = create_time
        self.delete_time = delete_time
        self.deleted = deleted
        self.hybird = hybird
        # Id
        self.id = id
        self.max_message_count = max_message_count
        self.member_count = member_count
        self.member_joined_count = member_joined_count
        self.name = name
        self.need_joined = need_joined
        self.owner_bid = owner_bid
        self.owner_name = owner_name
        self.owner_uid = owner_uid
        self.preferred_max_bytes = preferred_max_bytes
        self.request_id = request_id
        self.state = state
        self.support_channel_config = support_channel_config
        self.update_time = update_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.batch_timeout is not None:
            result['BatchTimeout'] = self.batch_timeout
        if self.block_count is not None:
            result['BlockCount'] = self.block_count
        if self.chaincode_count is not None:
            result['ChaincodeCount'] = self.chaincode_count
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.consortium_name is not None:
            result['ConsortiumName'] = self.consortium_name
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.delete_time is not None:
            result['DeleteTime'] = self.delete_time
        if self.deleted is not None:
            result['Deleted'] = self.deleted
        if self.hybird is not None:
            result['Hybird'] = self.hybird
        if self.id is not None:
            result['Id'] = self.id
        if self.max_message_count is not None:
            result['MaxMessageCount'] = self.max_message_count
        if self.member_count is not None:
            result['MemberCount'] = self.member_count
        if self.member_joined_count is not None:
            result['MemberJoinedCount'] = self.member_joined_count
        if self.name is not None:
            result['Name'] = self.name
        if self.need_joined is not None:
            result['NeedJoined'] = self.need_joined
        if self.owner_bid is not None:
            result['OwnerBid'] = self.owner_bid
        if self.owner_name is not None:
            result['OwnerName'] = self.owner_name
        if self.owner_uid is not None:
            result['OwnerUid'] = self.owner_uid
        if self.preferred_max_bytes is not None:
            result['PreferredMaxBytes'] = self.preferred_max_bytes
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.state is not None:
            result['State'] = self.state
        if self.support_channel_config is not None:
            result['SupportChannelConfig'] = self.support_channel_config
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BatchTimeout') is not None:
            self.batch_timeout = m.get('BatchTimeout')
        if m.get('BlockCount') is not None:
            self.block_count = m.get('BlockCount')
        if m.get('ChaincodeCount') is not None:
            self.chaincode_count = m.get('ChaincodeCount')
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('ConsortiumName') is not None:
            self.consortium_name = m.get('ConsortiumName')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('DeleteTime') is not None:
            self.delete_time = m.get('DeleteTime')
        if m.get('Deleted') is not None:
            self.deleted = m.get('Deleted')
        if m.get('Hybird') is not None:
            self.hybird = m.get('Hybird')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('MaxMessageCount') is not None:
            self.max_message_count = m.get('MaxMessageCount')
        if m.get('MemberCount') is not None:
            self.member_count = m.get('MemberCount')
        if m.get('MemberJoinedCount') is not None:
            self.member_joined_count = m.get('MemberJoinedCount')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('NeedJoined') is not None:
            self.need_joined = m.get('NeedJoined')
        if m.get('OwnerBid') is not None:
            self.owner_bid = m.get('OwnerBid')
        if m.get('OwnerName') is not None:
            self.owner_name = m.get('OwnerName')
        if m.get('OwnerUid') is not None:
            self.owner_uid = m.get('OwnerUid')
        if m.get('PreferredMaxBytes') is not None:
            self.preferred_max_bytes = m.get('PreferredMaxBytes')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('SupportChannelConfig') is not None:
            self.support_channel_config = m.get('SupportChannelConfig')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        return self


class DescribeConsortiumChannelsResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: List[DescribeConsortiumChannelsResponseBodyResult] = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = DescribeConsortiumChannelsResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeConsortiumChannelsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeConsortiumChannelsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeConsortiumChannelsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeConsortiumConfigResponseBodyResult(TeaModel):
    def __init__(
        self,
        channel_policy: List[str] = None,
        orderer_type: List[str] = None,
    ):
        self.channel_policy = channel_policy
        self.orderer_type = orderer_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.channel_policy is not None:
            result['ChannelPolicy'] = self.channel_policy
        if self.orderer_type is not None:
            result['OrdererType'] = self.orderer_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChannelPolicy') is not None:
            self.channel_policy = m.get('ChannelPolicy')
        if m.get('OrdererType') is not None:
            self.orderer_type = m.get('OrdererType')
        return self


class DescribeConsortiumConfigResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: DescribeConsortiumConfigResponseBodyResult = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeConsortiumConfigResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeConsortiumConfigResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeConsortiumConfigResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeConsortiumConfigResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeConsortiumDeletableRequest(TeaModel):
    def __init__(
        self,
        consortium_id: str = None,
        location: str = None,
    ):
        # This parameter is required.
        self.consortium_id = consortium_id
        self.location = location

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.location is not None:
            result['Location'] = self.location
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('Location') is not None:
            self.location = m.get('Location')
        return self


class DescribeConsortiumDeletableResponseBodyResult(TeaModel):
    def __init__(
        self,
        code_name: str = None,
        consortium_id: str = None,
        deletable: bool = None,
        description: str = None,
        domain: str = None,
        name: str = None,
        region_id: str = None,
        state: str = None,
        zone_id: str = None,
    ):
        self.code_name = code_name
        self.consortium_id = consortium_id
        self.deletable = deletable
        self.description = description
        self.domain = domain
        self.name = name
        self.region_id = region_id
        self.state = state
        self.zone_id = zone_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code_name is not None:
            result['CodeName'] = self.code_name
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.deletable is not None:
            result['Deletable'] = self.deletable
        if self.description is not None:
            result['Description'] = self.description
        if self.domain is not None:
            result['Domain'] = self.domain
        if self.name is not None:
            result['Name'] = self.name
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.state is not None:
            result['State'] = self.state
        if self.zone_id is not None:
            result['ZoneId'] = self.zone_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CodeName') is not None:
            self.code_name = m.get('CodeName')
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('Deletable') is not None:
            self.deletable = m.get('Deletable')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Domain') is not None:
            self.domain = m.get('Domain')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('ZoneId') is not None:
            self.zone_id = m.get('ZoneId')
        return self


class DescribeConsortiumDeletableResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: DescribeConsortiumDeletableResponseBodyResult = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeConsortiumDeletableResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeConsortiumDeletableResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeConsortiumDeletableResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeConsortiumDeletableResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeConsortiumMemberApprovalRequest(TeaModel):
    def __init__(
        self,
        consortium_id: str = None,
        location: str = None,
    ):
        # This parameter is required.
        self.consortium_id = consortium_id
        self.location = location

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.location is not None:
            result['Location'] = self.location
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('Location') is not None:
            self.location = m.get('Location')
        return self


class DescribeConsortiumMemberApprovalResponseBodyResult(TeaModel):
    def __init__(
        self,
        channel_create_policy: str = None,
        confirm_time: str = None,
        consortium_id: str = None,
        consortium_name: str = None,
        domain_name: str = None,
        organization_id: str = None,
        organization_name: str = None,
        state: str = None,
    ):
        self.channel_create_policy = channel_create_policy
        self.confirm_time = confirm_time
        self.consortium_id = consortium_id
        self.consortium_name = consortium_name
        self.domain_name = domain_name
        self.organization_id = organization_id
        self.organization_name = organization_name
        self.state = state

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.channel_create_policy is not None:
            result['ChannelCreatePolicy'] = self.channel_create_policy
        if self.confirm_time is not None:
            result['ConfirmTime'] = self.confirm_time
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.consortium_name is not None:
            result['ConsortiumName'] = self.consortium_name
        if self.domain_name is not None:
            result['DomainName'] = self.domain_name
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        if self.organization_name is not None:
            result['OrganizationName'] = self.organization_name
        if self.state is not None:
            result['State'] = self.state
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChannelCreatePolicy') is not None:
            self.channel_create_policy = m.get('ChannelCreatePolicy')
        if m.get('ConfirmTime') is not None:
            self.confirm_time = m.get('ConfirmTime')
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('ConsortiumName') is not None:
            self.consortium_name = m.get('ConsortiumName')
        if m.get('DomainName') is not None:
            self.domain_name = m.get('DomainName')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        if m.get('OrganizationName') is not None:
            self.organization_name = m.get('OrganizationName')
        if m.get('State') is not None:
            self.state = m.get('State')
        return self


class DescribeConsortiumMemberApprovalResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: List[DescribeConsortiumMemberApprovalResponseBodyResult] = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = DescribeConsortiumMemberApprovalResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeConsortiumMemberApprovalResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeConsortiumMemberApprovalResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeConsortiumMemberApprovalResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeConsortiumMembersRequest(TeaModel):
    def __init__(
        self,
        consortium_id: str = None,
        location: str = None,
    ):
        # This parameter is required.
        self.consortium_id = consortium_id
        self.location = location

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.location is not None:
            result['Location'] = self.location
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('Location') is not None:
            self.location = m.get('Location')
        return self


class DescribeConsortiumMembersResponseBodyResult(TeaModel):
    def __init__(
        self,
        consortium_id: str = None,
        description: str = None,
        domain: str = None,
        joined_time: str = None,
        name: str = None,
        organization_id: str = None,
    ):
        self.consortium_id = consortium_id
        self.description = description
        self.domain = domain
        self.joined_time = joined_time
        self.name = name
        self.organization_id = organization_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.description is not None:
            result['Description'] = self.description
        if self.domain is not None:
            result['Domain'] = self.domain
        if self.joined_time is not None:
            result['JoinedTime'] = self.joined_time
        if self.name is not None:
            result['Name'] = self.name
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Domain') is not None:
            self.domain = m.get('Domain')
        if m.get('JoinedTime') is not None:
            self.joined_time = m.get('JoinedTime')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        return self


class DescribeConsortiumMembersResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: List[DescribeConsortiumMembersResponseBodyResult] = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = DescribeConsortiumMembersResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeConsortiumMembersResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeConsortiumMembersResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeConsortiumMembersResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeConsortiumOrderersRequest(TeaModel):
    def __init__(
        self,
        consortium_id: str = None,
        location: str = None,
    ):
        # This parameter is required.
        self.consortium_id = consortium_id
        self.location = location

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.location is not None:
            result['Location'] = self.location
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('Location') is not None:
            self.location = m.get('Location')
        return self


class DescribeConsortiumOrderersResponseBodyResult(TeaModel):
    def __init__(
        self,
        create_time: str = None,
        domain: str = None,
        instance_type: str = None,
        name: str = None,
        port: int = None,
        update_time: str = None,
    ):
        self.create_time = create_time
        self.domain = domain
        self.instance_type = instance_type
        self.name = name
        self.port = port
        self.update_time = update_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.domain is not None:
            result['Domain'] = self.domain
        if self.instance_type is not None:
            result['InstanceType'] = self.instance_type
        if self.name is not None:
            result['Name'] = self.name
        if self.port is not None:
            result['Port'] = self.port
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Domain') is not None:
            self.domain = m.get('Domain')
        if m.get('InstanceType') is not None:
            self.instance_type = m.get('InstanceType')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Port') is not None:
            self.port = m.get('Port')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        return self


class DescribeConsortiumOrderersResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: List[DescribeConsortiumOrderersResponseBodyResult] = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = DescribeConsortiumOrderersResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeConsortiumOrderersResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeConsortiumOrderersResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeConsortiumOrderersResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeConsortiumSpecsResponseBodyResult(TeaModel):
    def __init__(
        self,
        enable: bool = None,
        name: str = None,
        title: str = None,
    ):
        self.enable = enable
        self.name = name
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.enable is not None:
            result['Enable'] = self.enable
        if self.name is not None:
            result['Name'] = self.name
        if self.title is not None:
            result['Title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Enable') is not None:
            self.enable = m.get('Enable')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Title') is not None:
            self.title = m.get('Title')
        return self


class DescribeConsortiumSpecsResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: List[DescribeConsortiumSpecsResponseBodyResult] = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = DescribeConsortiumSpecsResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeConsortiumSpecsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeConsortiumSpecsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeConsortiumSpecsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeConsortiumsRequestTag(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        # This parameter is required.
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class DescribeConsortiumsRequest(TeaModel):
    def __init__(
        self,
        consortium_id: str = None,
        location: str = None,
        tag: List[DescribeConsortiumsRequestTag] = None,
    ):
        self.consortium_id = consortium_id
        self.location = location
        self.tag = tag

    def validate(self):
        if self.tag:
            for k in self.tag:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.location is not None:
            result['Location'] = self.location
        result['Tag'] = []
        if self.tag is not None:
            for k in self.tag:
                result['Tag'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('Location') is not None:
            self.location = m.get('Location')
        self.tag = []
        if m.get('Tag') is not None:
            for k in m.get('Tag'):
                temp_model = DescribeConsortiumsRequestTag()
                self.tag.append(temp_model.from_map(k))
        return self


class DescribeConsortiumsResponseBodyResultTags(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class DescribeConsortiumsResponseBodyResult(TeaModel):
    def __init__(
        self,
        caname: str = None,
        caurl: str = None,
        channel_count: int = None,
        channel_policy: str = None,
        code_name: str = None,
        consortium_id: str = None,
        create_time: str = None,
        domain: str = None,
        expire_state: str = None,
        expired_time: str = None,
        hybrid: bool = None,
        msp: str = None,
        major_version: str = None,
        name: str = None,
        orderer_count: int = None,
        organization_count: int = None,
        owner_bid: str = None,
        owner_name: str = None,
        owner_uid: int = None,
        region_id: str = None,
        request_id: str = None,
        spec_name: str = None,
        state: str = None,
        support_channel_config: bool = None,
        tags: List[DescribeConsortiumsResponseBodyResultTags] = None,
    ):
        self.caname = caname
        self.caurl = caurl
        self.channel_count = channel_count
        self.channel_policy = channel_policy
        self.code_name = code_name
        self.consortium_id = consortium_id
        self.create_time = create_time
        self.domain = domain
        self.expire_state = expire_state
        self.expired_time = expired_time
        self.hybrid = hybrid
        self.msp = msp
        self.major_version = major_version
        self.name = name
        self.orderer_count = orderer_count
        self.organization_count = organization_count
        self.owner_bid = owner_bid
        self.owner_name = owner_name
        self.owner_uid = owner_uid
        self.region_id = region_id
        self.request_id = request_id
        self.spec_name = spec_name
        self.state = state
        self.support_channel_config = support_channel_config
        self.tags = tags

    def validate(self):
        if self.tags:
            for k in self.tags:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.caname is not None:
            result['CAName'] = self.caname
        if self.caurl is not None:
            result['CAUrl'] = self.caurl
        if self.channel_count is not None:
            result['ChannelCount'] = self.channel_count
        if self.channel_policy is not None:
            result['ChannelPolicy'] = self.channel_policy
        if self.code_name is not None:
            result['CodeName'] = self.code_name
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.domain is not None:
            result['Domain'] = self.domain
        if self.expire_state is not None:
            result['ExpireState'] = self.expire_state
        if self.expired_time is not None:
            result['ExpiredTime'] = self.expired_time
        if self.hybrid is not None:
            result['Hybrid'] = self.hybrid
        if self.msp is not None:
            result['MSP'] = self.msp
        if self.major_version is not None:
            result['MajorVersion'] = self.major_version
        if self.name is not None:
            result['Name'] = self.name
        if self.orderer_count is not None:
            result['OrdererCount'] = self.orderer_count
        if self.organization_count is not None:
            result['OrganizationCount'] = self.organization_count
        if self.owner_bid is not None:
            result['OwnerBid'] = self.owner_bid
        if self.owner_name is not None:
            result['OwnerName'] = self.owner_name
        if self.owner_uid is not None:
            result['OwnerUid'] = self.owner_uid
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.spec_name is not None:
            result['SpecName'] = self.spec_name
        if self.state is not None:
            result['State'] = self.state
        if self.support_channel_config is not None:
            result['SupportChannelConfig'] = self.support_channel_config
        result['Tags'] = []
        if self.tags is not None:
            for k in self.tags:
                result['Tags'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CAName') is not None:
            self.caname = m.get('CAName')
        if m.get('CAUrl') is not None:
            self.caurl = m.get('CAUrl')
        if m.get('ChannelCount') is not None:
            self.channel_count = m.get('ChannelCount')
        if m.get('ChannelPolicy') is not None:
            self.channel_policy = m.get('ChannelPolicy')
        if m.get('CodeName') is not None:
            self.code_name = m.get('CodeName')
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Domain') is not None:
            self.domain = m.get('Domain')
        if m.get('ExpireState') is not None:
            self.expire_state = m.get('ExpireState')
        if m.get('ExpiredTime') is not None:
            self.expired_time = m.get('ExpiredTime')
        if m.get('Hybrid') is not None:
            self.hybrid = m.get('Hybrid')
        if m.get('MSP') is not None:
            self.msp = m.get('MSP')
        if m.get('MajorVersion') is not None:
            self.major_version = m.get('MajorVersion')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('OrdererCount') is not None:
            self.orderer_count = m.get('OrdererCount')
        if m.get('OrganizationCount') is not None:
            self.organization_count = m.get('OrganizationCount')
        if m.get('OwnerBid') is not None:
            self.owner_bid = m.get('OwnerBid')
        if m.get('OwnerName') is not None:
            self.owner_name = m.get('OwnerName')
        if m.get('OwnerUid') is not None:
            self.owner_uid = m.get('OwnerUid')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('SpecName') is not None:
            self.spec_name = m.get('SpecName')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('SupportChannelConfig') is not None:
            self.support_channel_config = m.get('SupportChannelConfig')
        self.tags = []
        if m.get('Tags') is not None:
            for k in m.get('Tags'):
                temp_model = DescribeConsortiumsResponseBodyResultTags()
                self.tags.append(temp_model.from_map(k))
        return self


class DescribeConsortiumsResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: List[DescribeConsortiumsResponseBodyResult] = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = DescribeConsortiumsResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeConsortiumsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeConsortiumsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeConsortiumsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeDownloadPathsRequest(TeaModel):
    def __init__(
        self,
        bizid: str = None,
    ):
        self.bizid = bizid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        return self


class DescribeDownloadPathsResponseBodyResult(TeaModel):
    def __init__(
        self,
        bizview_url: str = None,
        cert_url: str = None,
        sdk_url: str = None,
    ):
        self.bizview_url = bizview_url
        self.cert_url = cert_url
        self.sdk_url = sdk_url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizview_url is not None:
            result['BizviewUrl'] = self.bizview_url
        if self.cert_url is not None:
            result['CertUrl'] = self.cert_url
        if self.sdk_url is not None:
            result['SdkUrl'] = self.sdk_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizviewUrl') is not None:
            self.bizview_url = m.get('BizviewUrl')
        if m.get('CertUrl') is not None:
            self.cert_url = m.get('CertUrl')
        if m.get('SdkUrl') is not None:
            self.sdk_url = m.get('SdkUrl')
        return self


class DescribeDownloadPathsResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: DescribeDownloadPathsResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeDownloadPathsResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class DescribeDownloadPathsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeDownloadPathsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeDownloadPathsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeDownloadPathsOfContractChainRequest(TeaModel):
    def __init__(
        self,
        bizid: str = None,
    ):
        self.bizid = bizid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        return self


class DescribeDownloadPathsOfContractChainResponseBodyResult(TeaModel):
    def __init__(
        self,
        ca_url: str = None,
        cert_url: str = None,
        trust_ca_url: str = None,
    ):
        self.ca_url = ca_url
        self.cert_url = cert_url
        self.trust_ca_url = trust_ca_url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ca_url is not None:
            result['CaUrl'] = self.ca_url
        if self.cert_url is not None:
            result['CertUrl'] = self.cert_url
        if self.trust_ca_url is not None:
            result['TrustCaUrl'] = self.trust_ca_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CaUrl') is not None:
            self.ca_url = m.get('CaUrl')
        if m.get('CertUrl') is not None:
            self.cert_url = m.get('CertUrl')
        if m.get('TrustCaUrl') is not None:
            self.trust_ca_url = m.get('TrustCaUrl')
        return self


class DescribeDownloadPathsOfContractChainResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: DescribeDownloadPathsOfContractChainResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeDownloadPathsOfContractChainResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class DescribeDownloadPathsOfContractChainResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeDownloadPathsOfContractChainResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeDownloadPathsOfContractChainResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeDownloadPathsOfNotaryChainRequest(TeaModel):
    def __init__(
        self,
        bizid: str = None,
    ):
        self.bizid = bizid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        return self


class DescribeDownloadPathsOfNotaryChainResponseBodyResult(TeaModel):
    def __init__(
        self,
        bizview_url: str = None,
        cert_url: str = None,
        sdk_url: str = None,
    ):
        self.bizview_url = bizview_url
        self.cert_url = cert_url
        self.sdk_url = sdk_url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizview_url is not None:
            result['BizviewUrl'] = self.bizview_url
        if self.cert_url is not None:
            result['CertUrl'] = self.cert_url
        if self.sdk_url is not None:
            result['SdkUrl'] = self.sdk_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizviewUrl') is not None:
            self.bizview_url = m.get('BizviewUrl')
        if m.get('CertUrl') is not None:
            self.cert_url = m.get('CertUrl')
        if m.get('SdkUrl') is not None:
            self.sdk_url = m.get('SdkUrl')
        return self


class DescribeDownloadPathsOfNotaryChainResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: DescribeDownloadPathsOfNotaryChainResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeDownloadPathsOfNotaryChainResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class DescribeDownloadPathsOfNotaryChainResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeDownloadPathsOfNotaryChainResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeDownloadPathsOfNotaryChainResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeEcosphereSpecsResponseBodyResult(TeaModel):
    def __init__(
        self,
        enable: bool = None,
        name: str = None,
        title: str = None,
    ):
        self.enable = enable
        self.name = name
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.enable is not None:
            result['Enable'] = self.enable
        if self.name is not None:
            result['Name'] = self.name
        if self.title is not None:
            result['Title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Enable') is not None:
            self.enable = m.get('Enable')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Title') is not None:
            self.title = m.get('Title')
        return self


class DescribeEcosphereSpecsResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: List[DescribeEcosphereSpecsResponseBodyResult] = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = DescribeEcosphereSpecsResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeEcosphereSpecsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeEcosphereSpecsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeEcosphereSpecsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeEthereumRequest(TeaModel):
    def __init__(
        self,
        id: str = None,
    ):
        # This parameter is required.
        self.id = id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        return self


class DescribeEthereumResponseBodyResult(TeaModel):
    def __init__(
        self,
        consensus: str = None,
        creator: str = None,
        description: str = None,
        id: str = None,
        name: str = None,
        network_id: str = None,
        region_id: str = None,
        state: str = None,
    ):
        self.consensus = consensus
        self.creator = creator
        self.description = description
        self.id = id
        self.name = name
        self.network_id = network_id
        self.region_id = region_id
        self.state = state

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.consensus is not None:
            result['Consensus'] = self.consensus
        if self.creator is not None:
            result['Creator'] = self.creator
        if self.description is not None:
            result['Description'] = self.description
        if self.id is not None:
            result['Id'] = self.id
        if self.name is not None:
            result['Name'] = self.name
        if self.network_id is not None:
            result['NetworkId'] = self.network_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.state is not None:
            result['State'] = self.state
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Consensus') is not None:
            self.consensus = m.get('Consensus')
        if m.get('Creator') is not None:
            self.creator = m.get('Creator')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('NetworkId') is not None:
            self.network_id = m.get('NetworkId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('State') is not None:
            self.state = m.get('State')
        return self


class DescribeEthereumResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: DescribeEthereumResponseBodyResult = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeEthereumResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeEthereumResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeEthereumResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeEthereumResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeEthereumClientUsersRequest(TeaModel):
    def __init__(
        self,
        node_id: str = None,
    ):
        # This parameter is required.
        self.node_id = node_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.node_id is not None:
            result['NodeId'] = self.node_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('NodeId') is not None:
            self.node_id = m.get('NodeId')
        return self


class DescribeEthereumClientUsersResponseBodyResult(TeaModel):
    def __init__(
        self,
        username: str = None,
    ):
        self.username = username

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.username is not None:
            result['Username'] = self.username
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Username') is not None:
            self.username = m.get('Username')
        return self


class DescribeEthereumClientUsersResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: List[DescribeEthereumClientUsersResponseBodyResult] = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = DescribeEthereumClientUsersResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeEthereumClientUsersResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeEthereumClientUsersResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeEthereumClientUsersResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeEthereumDeletableRequest(TeaModel):
    def __init__(
        self,
        ethereum_id: str = None,
    ):
        # This parameter is required.
        self.ethereum_id = ethereum_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ethereum_id is not None:
            result['EthereumId'] = self.ethereum_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EthereumId') is not None:
            self.ethereum_id = m.get('EthereumId')
        return self


class DescribeEthereumDeletableResponseBodyResult(TeaModel):
    def __init__(
        self,
        deletable: bool = None,
        ethereum_id: str = None,
    ):
        self.deletable = deletable
        self.ethereum_id = ethereum_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.deletable is not None:
            result['Deletable'] = self.deletable
        if self.ethereum_id is not None:
            result['EthereumId'] = self.ethereum_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Deletable') is not None:
            self.deletable = m.get('Deletable')
        if m.get('EthereumId') is not None:
            self.ethereum_id = m.get('EthereumId')
        return self


class DescribeEthereumDeletableResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: DescribeEthereumDeletableResponseBodyResult = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeEthereumDeletableResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeEthereumDeletableResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeEthereumDeletableResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeEthereumDeletableResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeEthereumInvitaionRequest(TeaModel):
    def __init__(
        self,
        token: str = None,
    ):
        # This parameter is required.
        self.token = token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.token is not None:
            result['Token'] = self.token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Token') is not None:
            self.token = m.get('Token')
        return self


class DescribeEthereumInvitaionResponseBodyResult(TeaModel):
    def __init__(
        self,
        consensus: str = None,
        create_time: str = None,
        creator: str = None,
        description: str = None,
        id: str = None,
        name: str = None,
        network_id: str = None,
        region_id: str = None,
        state: str = None,
    ):
        self.consensus = consensus
        self.create_time = create_time
        self.creator = creator
        self.description = description
        self.id = id
        self.name = name
        self.network_id = network_id
        self.region_id = region_id
        self.state = state

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.consensus is not None:
            result['Consensus'] = self.consensus
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.creator is not None:
            result['Creator'] = self.creator
        if self.description is not None:
            result['Description'] = self.description
        if self.id is not None:
            result['Id'] = self.id
        if self.name is not None:
            result['Name'] = self.name
        if self.network_id is not None:
            result['NetworkId'] = self.network_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.state is not None:
            result['State'] = self.state
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Consensus') is not None:
            self.consensus = m.get('Consensus')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Creator') is not None:
            self.creator = m.get('Creator')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('NetworkId') is not None:
            self.network_id = m.get('NetworkId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('State') is not None:
            self.state = m.get('State')
        return self


class DescribeEthereumInvitaionResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: DescribeEthereumInvitaionResponseBodyResult = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeEthereumInvitaionResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeEthereumInvitaionResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeEthereumInvitaionResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeEthereumInvitaionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeEthereumInviteeRequest(TeaModel):
    def __init__(
        self,
        id: str = None,
    ):
        # This parameter is required.
        self.id = id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        return self


class DescribeEthereumInviteeResponseBodyResult(TeaModel):
    def __init__(
        self,
        create_time: str = None,
        creator: str = None,
        description: str = None,
        ethereum_id: str = None,
        ethereum_name: str = None,
        id: str = None,
        network_id: int = None,
        node_name: str = None,
        public_ip: str = None,
        region_id: str = None,
        rpc_port: str = None,
        state: str = None,
        ws_port: str = None,
    ):
        self.create_time = create_time
        self.creator = creator
        self.description = description
        self.ethereum_id = ethereum_id
        self.ethereum_name = ethereum_name
        self.id = id
        self.network_id = network_id
        self.node_name = node_name
        self.public_ip = public_ip
        self.region_id = region_id
        self.rpc_port = rpc_port
        self.state = state
        self.ws_port = ws_port

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.creator is not None:
            result['Creator'] = self.creator
        if self.description is not None:
            result['Description'] = self.description
        if self.ethereum_id is not None:
            result['EthereumId'] = self.ethereum_id
        if self.ethereum_name is not None:
            result['EthereumName'] = self.ethereum_name
        if self.id is not None:
            result['Id'] = self.id
        if self.network_id is not None:
            result['NetworkId'] = self.network_id
        if self.node_name is not None:
            result['NodeName'] = self.node_name
        if self.public_ip is not None:
            result['PublicIp'] = self.public_ip
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.rpc_port is not None:
            result['RpcPort'] = self.rpc_port
        if self.state is not None:
            result['State'] = self.state
        if self.ws_port is not None:
            result['WsPort'] = self.ws_port
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Creator') is not None:
            self.creator = m.get('Creator')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('EthereumId') is not None:
            self.ethereum_id = m.get('EthereumId')
        if m.get('EthereumName') is not None:
            self.ethereum_name = m.get('EthereumName')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('NetworkId') is not None:
            self.network_id = m.get('NetworkId')
        if m.get('NodeName') is not None:
            self.node_name = m.get('NodeName')
        if m.get('PublicIp') is not None:
            self.public_ip = m.get('PublicIp')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('RpcPort') is not None:
            self.rpc_port = m.get('RpcPort')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('WsPort') is not None:
            self.ws_port = m.get('WsPort')
        return self


class DescribeEthereumInviteeResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: List[DescribeEthereumInviteeResponseBodyResult] = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = DescribeEthereumInviteeResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeEthereumInviteeResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeEthereumInviteeResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeEthereumInviteeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeEthereumNodeRequest(TeaModel):
    def __init__(
        self,
        id: str = None,
    ):
        # This parameter is required.
        self.id = id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        return self


class DescribeEthereumNodeResponseBodyResult(TeaModel):
    def __init__(
        self,
        create_time: int = None,
        creator: str = None,
        description: str = None,
        ethereum_id: str = None,
        ethereum_name: str = None,
        id: str = None,
        network_id: str = None,
        node_name: str = None,
        public_ip: str = None,
        region_id: str = None,
        rpc_port: int = None,
        state: str = None,
        ws_port: int = None,
    ):
        self.create_time = create_time
        self.creator = creator
        self.description = description
        self.ethereum_id = ethereum_id
        self.ethereum_name = ethereum_name
        self.id = id
        self.network_id = network_id
        self.node_name = node_name
        self.public_ip = public_ip
        self.region_id = region_id
        self.rpc_port = rpc_port
        self.state = state
        self.ws_port = ws_port

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.creator is not None:
            result['Creator'] = self.creator
        if self.description is not None:
            result['Description'] = self.description
        if self.ethereum_id is not None:
            result['EthereumId'] = self.ethereum_id
        if self.ethereum_name is not None:
            result['EthereumName'] = self.ethereum_name
        if self.id is not None:
            result['Id'] = self.id
        if self.network_id is not None:
            result['NetworkId'] = self.network_id
        if self.node_name is not None:
            result['NodeName'] = self.node_name
        if self.public_ip is not None:
            result['PublicIp'] = self.public_ip
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.rpc_port is not None:
            result['RpcPort'] = self.rpc_port
        if self.state is not None:
            result['State'] = self.state
        if self.ws_port is not None:
            result['WsPort'] = self.ws_port
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Creator') is not None:
            self.creator = m.get('Creator')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('EthereumId') is not None:
            self.ethereum_id = m.get('EthereumId')
        if m.get('EthereumName') is not None:
            self.ethereum_name = m.get('EthereumName')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('NetworkId') is not None:
            self.network_id = m.get('NetworkId')
        if m.get('NodeName') is not None:
            self.node_name = m.get('NodeName')
        if m.get('PublicIp') is not None:
            self.public_ip = m.get('PublicIp')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('RpcPort') is not None:
            self.rpc_port = m.get('RpcPort')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('WsPort') is not None:
            self.ws_port = m.get('WsPort')
        return self


class DescribeEthereumNodeResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: DescribeEthereumNodeResponseBodyResult = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeEthereumNodeResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeEthereumNodeResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeEthereumNodeResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeEthereumNodeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeEthereumNodeConfigurationRequest(TeaModel):
    def __init__(
        self,
        node_id: str = None,
    ):
        # This parameter is required.
        self.node_id = node_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.node_id is not None:
            result['NodeId'] = self.node_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('NodeId') is not None:
            self.node_id = m.get('NodeId')
        return self


class DescribeEthereumNodeConfigurationResponseBodyResult(TeaModel):
    def __init__(
        self,
        genesis_json: str = None,
        ip: str = None,
        node_pub: str = None,
        p_2p_port: int = None,
        permissioned_nodes_json: str = None,
        raft_port: int = None,
        rpc_port: int = None,
        static_nodes_json: str = None,
        tmjson: str = None,
        tmport: int = None,
        tmpub: str = None,
        wsport: int = None,
    ):
        self.genesis_json = genesis_json
        self.ip = ip
        self.node_pub = node_pub
        self.p_2p_port = p_2p_port
        self.permissioned_nodes_json = permissioned_nodes_json
        self.raft_port = raft_port
        self.rpc_port = rpc_port
        self.static_nodes_json = static_nodes_json
        self.tmjson = tmjson
        self.tmport = tmport
        self.tmpub = tmpub
        self.wsport = wsport

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.genesis_json is not None:
            result['GenesisJson'] = self.genesis_json
        if self.ip is not None:
            result['IP'] = self.ip
        if self.node_pub is not None:
            result['NodePub'] = self.node_pub
        if self.p_2p_port is not None:
            result['P2pPort'] = self.p_2p_port
        if self.permissioned_nodes_json is not None:
            result['PermissionedNodesJson'] = self.permissioned_nodes_json
        if self.raft_port is not None:
            result['RaftPort'] = self.raft_port
        if self.rpc_port is not None:
            result['RpcPort'] = self.rpc_port
        if self.static_nodes_json is not None:
            result['StaticNodesJson'] = self.static_nodes_json
        if self.tmjson is not None:
            result['TMJson'] = self.tmjson
        if self.tmport is not None:
            result['TMPort'] = self.tmport
        if self.tmpub is not None:
            result['TMPub'] = self.tmpub
        if self.wsport is not None:
            result['WSPort'] = self.wsport
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('GenesisJson') is not None:
            self.genesis_json = m.get('GenesisJson')
        if m.get('IP') is not None:
            self.ip = m.get('IP')
        if m.get('NodePub') is not None:
            self.node_pub = m.get('NodePub')
        if m.get('P2pPort') is not None:
            self.p_2p_port = m.get('P2pPort')
        if m.get('PermissionedNodesJson') is not None:
            self.permissioned_nodes_json = m.get('PermissionedNodesJson')
        if m.get('RaftPort') is not None:
            self.raft_port = m.get('RaftPort')
        if m.get('RpcPort') is not None:
            self.rpc_port = m.get('RpcPort')
        if m.get('StaticNodesJson') is not None:
            self.static_nodes_json = m.get('StaticNodesJson')
        if m.get('TMJson') is not None:
            self.tmjson = m.get('TMJson')
        if m.get('TMPort') is not None:
            self.tmport = m.get('TMPort')
        if m.get('TMPub') is not None:
            self.tmpub = m.get('TMPub')
        if m.get('WSPort') is not None:
            self.wsport = m.get('WSPort')
        return self


class DescribeEthereumNodeConfigurationResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: List[DescribeEthereumNodeConfigurationResponseBodyResult] = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = DescribeEthereumNodeConfigurationResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeEthereumNodeConfigurationResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeEthereumNodeConfigurationResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeEthereumNodeConfigurationResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeEthereumNodeInfoRequest(TeaModel):
    def __init__(
        self,
        node_id: str = None,
    ):
        # This parameter is required.
        self.node_id = node_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.node_id is not None:
            result['NodeId'] = self.node_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('NodeId') is not None:
            self.node_id = m.get('NodeId')
        return self


class DescribeEthereumNodeInfoResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: str = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeEthereumNodeInfoResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeEthereumNodeInfoResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeEthereumNodeInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeEthereumNodeLogsRequest(TeaModel):
    def __init__(
        self,
        lines: str = None,
        node_id: str = None,
        target: str = None,
    ):
        self.lines = lines
        # This parameter is required.
        self.node_id = node_id
        self.target = target

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lines is not None:
            result['Lines'] = self.lines
        if self.node_id is not None:
            result['NodeId'] = self.node_id
        if self.target is not None:
            result['Target'] = self.target
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Lines') is not None:
            self.lines = m.get('Lines')
        if m.get('NodeId') is not None:
            self.node_id = m.get('NodeId')
        if m.get('Target') is not None:
            self.target = m.get('Target')
        return self


class DescribeEthereumNodeLogsResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: str = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeEthereumNodeLogsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeEthereumNodeLogsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeEthereumNodeLogsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeEthereumNodesResponseBodyResult(TeaModel):
    def __init__(
        self,
        consensus: str = None,
        create_time: str = None,
        creator: str = None,
        description: str = None,
        ethereum_id: str = None,
        ethereum_name: str = None,
        external: bool = None,
        id: str = None,
        network_id: int = None,
        node_name: str = None,
        public_ip: str = None,
        region_id: str = None,
        rpc_port: str = None,
        state: str = None,
        validator: bool = None,
        ws_port: str = None,
    ):
        self.consensus = consensus
        self.create_time = create_time
        self.creator = creator
        self.description = description
        self.ethereum_id = ethereum_id
        self.ethereum_name = ethereum_name
        self.external = external
        self.id = id
        self.network_id = network_id
        self.node_name = node_name
        self.public_ip = public_ip
        self.region_id = region_id
        self.rpc_port = rpc_port
        self.state = state
        self.validator = validator
        self.ws_port = ws_port

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.consensus is not None:
            result['Consensus'] = self.consensus
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.creator is not None:
            result['Creator'] = self.creator
        if self.description is not None:
            result['Description'] = self.description
        if self.ethereum_id is not None:
            result['EthereumId'] = self.ethereum_id
        if self.ethereum_name is not None:
            result['EthereumName'] = self.ethereum_name
        if self.external is not None:
            result['External'] = self.external
        if self.id is not None:
            result['Id'] = self.id
        if self.network_id is not None:
            result['NetworkId'] = self.network_id
        if self.node_name is not None:
            result['NodeName'] = self.node_name
        if self.public_ip is not None:
            result['PublicIp'] = self.public_ip
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.rpc_port is not None:
            result['RpcPort'] = self.rpc_port
        if self.state is not None:
            result['State'] = self.state
        if self.validator is not None:
            result['Validator'] = self.validator
        if self.ws_port is not None:
            result['WsPort'] = self.ws_port
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Consensus') is not None:
            self.consensus = m.get('Consensus')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Creator') is not None:
            self.creator = m.get('Creator')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('EthereumId') is not None:
            self.ethereum_id = m.get('EthereumId')
        if m.get('EthereumName') is not None:
            self.ethereum_name = m.get('EthereumName')
        if m.get('External') is not None:
            self.external = m.get('External')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('NetworkId') is not None:
            self.network_id = m.get('NetworkId')
        if m.get('NodeName') is not None:
            self.node_name = m.get('NodeName')
        if m.get('PublicIp') is not None:
            self.public_ip = m.get('PublicIp')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('RpcPort') is not None:
            self.rpc_port = m.get('RpcPort')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('Validator') is not None:
            self.validator = m.get('Validator')
        if m.get('WsPort') is not None:
            self.ws_port = m.get('WsPort')
        return self


class DescribeEthereumNodesResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: List[DescribeEthereumNodesResponseBodyResult] = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = DescribeEthereumNodesResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeEthereumNodesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeEthereumNodesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeEthereumNodesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeEthereumsResponseBodyResult(TeaModel):
    def __init__(
        self,
        consensus: str = None,
        create_time: int = None,
        creator: str = None,
        deletable: bool = None,
        description: str = None,
        id: str = None,
        name: str = None,
        network_id: str = None,
        node_number: int = None,
        region_id: str = None,
        state: str = None,
    ):
        self.consensus = consensus
        self.create_time = create_time
        self.creator = creator
        self.deletable = deletable
        self.description = description
        self.id = id
        self.name = name
        self.network_id = network_id
        self.node_number = node_number
        self.region_id = region_id
        self.state = state

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.consensus is not None:
            result['Consensus'] = self.consensus
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.creator is not None:
            result['Creator'] = self.creator
        if self.deletable is not None:
            result['Deletable'] = self.deletable
        if self.description is not None:
            result['Description'] = self.description
        if self.id is not None:
            result['Id'] = self.id
        if self.name is not None:
            result['Name'] = self.name
        if self.network_id is not None:
            result['NetworkId'] = self.network_id
        if self.node_number is not None:
            result['NodeNumber'] = self.node_number
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.state is not None:
            result['State'] = self.state
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Consensus') is not None:
            self.consensus = m.get('Consensus')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Creator') is not None:
            self.creator = m.get('Creator')
        if m.get('Deletable') is not None:
            self.deletable = m.get('Deletable')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('NetworkId') is not None:
            self.network_id = m.get('NetworkId')
        if m.get('NodeNumber') is not None:
            self.node_number = m.get('NodeNumber')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('State') is not None:
            self.state = m.get('State')
        return self


class DescribeEthereumsResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: List[DescribeEthereumsResponseBodyResult] = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = DescribeEthereumsResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeEthereumsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeEthereumsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeEthereumsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeExplorerRequest(TeaModel):
    def __init__(
        self,
        ex_body: str = None,
        ex_method: str = None,
        ex_url: str = None,
        organization_id: str = None,
    ):
        self.ex_body = ex_body
        # This parameter is required.
        self.ex_method = ex_method
        self.ex_url = ex_url
        # This parameter is required.
        self.organization_id = organization_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ex_body is not None:
            result['ExBody'] = self.ex_body
        if self.ex_method is not None:
            result['ExMethod'] = self.ex_method
        if self.ex_url is not None:
            result['ExUrl'] = self.ex_url
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ExBody') is not None:
            self.ex_body = m.get('ExBody')
        if m.get('ExMethod') is not None:
            self.ex_method = m.get('ExMethod')
        if m.get('ExUrl') is not None:
            self.ex_url = m.get('ExUrl')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        return self


class DescribeExplorerResponseBody(TeaModel):
    def __init__(
        self,
        dynamic_code: str = None,
        dynamic_message: str = None,
        error_code: int = None,
        request_id: str = None,
        result: str = None,
        success: bool = None,
    ):
        self.dynamic_code = dynamic_code
        self.dynamic_message = dynamic_message
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dynamic_code is not None:
            result['DynamicCode'] = self.dynamic_code
        if self.dynamic_message is not None:
            result['DynamicMessage'] = self.dynamic_message
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DynamicCode') is not None:
            self.dynamic_code = m.get('DynamicCode')
        if m.get('DynamicMessage') is not None:
            self.dynamic_message = m.get('DynamicMessage')
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeExplorerResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeExplorerResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeExplorerResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeExplorerURLRequest(TeaModel):
    def __init__(
        self,
        node_id: str = None,
    ):
        # This parameter is required.
        self.node_id = node_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.node_id is not None:
            result['NodeId'] = self.node_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('NodeId') is not None:
            self.node_id = m.get('NodeId')
        return self


class DescribeExplorerURLResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: str = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeExplorerURLResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeExplorerURLResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeExplorerURLResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeFabricChaincodeEndorsePolicyRequest(TeaModel):
    def __init__(
        self,
        chaincode_name: str = None,
        channel_id: str = None,
        organization_id: str = None,
    ):
        # This parameter is required.
        self.chaincode_name = chaincode_name
        self.channel_id = channel_id
        self.organization_id = organization_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.chaincode_name is not None:
            result['ChaincodeName'] = self.chaincode_name
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChaincodeName') is not None:
            self.chaincode_name = m.get('ChaincodeName')
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        return self


class DescribeFabricChaincodeEndorsePolicyResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: str = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeFabricChaincodeEndorsePolicyResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeFabricChaincodeEndorsePolicyResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeFabricChaincodeEndorsePolicyResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeFabricChaincodeLogsRequest(TeaModel):
    def __init__(
        self,
        chaincode_id: str = None,
        lines: str = None,
        offset: int = None,
        organization_id: str = None,
        peer_name: str = None,
    ):
        self.chaincode_id = chaincode_id
        self.lines = lines
        self.offset = offset
        # This parameter is required.
        self.organization_id = organization_id
        # This parameter is required.
        self.peer_name = peer_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.chaincode_id is not None:
            result['ChaincodeId'] = self.chaincode_id
        if self.lines is not None:
            result['Lines'] = self.lines
        if self.offset is not None:
            result['Offset'] = self.offset
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        if self.peer_name is not None:
            result['PeerName'] = self.peer_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChaincodeId') is not None:
            self.chaincode_id = m.get('ChaincodeId')
        if m.get('Lines') is not None:
            self.lines = m.get('Lines')
        if m.get('Offset') is not None:
            self.offset = m.get('Offset')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        if m.get('PeerName') is not None:
            self.peer_name = m.get('PeerName')
        return self


class DescribeFabricChaincodeLogsResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: str = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeFabricChaincodeLogsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeFabricChaincodeLogsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeFabricChaincodeLogsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeFabricChannelConfigRequest(TeaModel):
    def __init__(
        self,
        channel_id: str = None,
        organization_id: str = None,
    ):
        # This parameter is required.
        self.channel_id = channel_id
        # This parameter is required.
        self.organization_id = organization_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        return self


class DescribeFabricChannelConfigResponseBodyResult(TeaModel):
    def __init__(
        self,
        absolute_max_bytes: int = None,
        batch_timeout: str = None,
        max_message_count: int = None,
        preferred_max_bytes: int = None,
    ):
        self.absolute_max_bytes = absolute_max_bytes
        self.batch_timeout = batch_timeout
        self.max_message_count = max_message_count
        self.preferred_max_bytes = preferred_max_bytes

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.absolute_max_bytes is not None:
            result['AbsoluteMaxBytes'] = self.absolute_max_bytes
        if self.batch_timeout is not None:
            result['BatchTimeout'] = self.batch_timeout
        if self.max_message_count is not None:
            result['MaxMessageCount'] = self.max_message_count
        if self.preferred_max_bytes is not None:
            result['PreferredMaxBytes'] = self.preferred_max_bytes
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AbsoluteMaxBytes') is not None:
            self.absolute_max_bytes = m.get('AbsoluteMaxBytes')
        if m.get('BatchTimeout') is not None:
            self.batch_timeout = m.get('BatchTimeout')
        if m.get('MaxMessageCount') is not None:
            self.max_message_count = m.get('MaxMessageCount')
        if m.get('PreferredMaxBytes') is not None:
            self.preferred_max_bytes = m.get('PreferredMaxBytes')
        return self


class DescribeFabricChannelConfigResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: DescribeFabricChannelConfigResponseBodyResult = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeFabricChannelConfigResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeFabricChannelConfigResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeFabricChannelConfigResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeFabricChannelConfigResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeFabricChannelOrdererRequest(TeaModel):
    def __init__(
        self,
        channel_id: str = None,
        organization_id: str = None,
    ):
        # This parameter is required.
        self.channel_id = channel_id
        # This parameter is required.
        self.organization_id = organization_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        return self


class DescribeFabricChannelOrdererResponseBodyResult(TeaModel):
    def __init__(
        self,
        address: str = None,
        certificate: str = None,
        key: str = None,
        tlsroot: str = None,
    ):
        self.address = address
        self.certificate = certificate
        self.key = key
        self.tlsroot = tlsroot

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.address is not None:
            result['Address'] = self.address
        if self.certificate is not None:
            result['Certificate'] = self.certificate
        if self.key is not None:
            result['Key'] = self.key
        if self.tlsroot is not None:
            result['Tlsroot'] = self.tlsroot
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Address') is not None:
            self.address = m.get('Address')
        if m.get('Certificate') is not None:
            self.certificate = m.get('Certificate')
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Tlsroot') is not None:
            self.tlsroot = m.get('Tlsroot')
        return self


class DescribeFabricChannelOrdererResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: List[DescribeFabricChannelOrdererResponseBodyResult] = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = DescribeFabricChannelOrdererResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeFabricChannelOrdererResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeFabricChannelOrdererResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeFabricChannelOrdererResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeFabricChannelOrganizationsRequest(TeaModel):
    def __init__(
        self,
        channel_id: str = None,
        organization_id: str = None,
    ):
        # This parameter is required.
        self.channel_id = channel_id
        # This parameter is required.
        self.organization_id = organization_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        return self


class DescribeFabricChannelOrganizationsResponseBodyResultAnchorPeers(TeaModel):
    def __init__(
        self,
        host: str = None,
        port: int = None,
    ):
        self.host = host
        self.port = port

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.host is not None:
            result['Host'] = self.host
        if self.port is not None:
            result['Port'] = self.port
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Host') is not None:
            self.host = m.get('Host')
        if m.get('Port') is not None:
            self.port = m.get('Port')
        return self


class DescribeFabricChannelOrganizationsResponseBodyResultOrdererNodes(TeaModel):
    def __init__(
        self,
        address: str = None,
        certificate: str = None,
        key: str = None,
        tlsroot: str = None,
    ):
        self.address = address
        self.certificate = certificate
        self.key = key
        self.tlsroot = tlsroot

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.address is not None:
            result['Address'] = self.address
        if self.certificate is not None:
            result['Certificate'] = self.certificate
        if self.key is not None:
            result['Key'] = self.key
        if self.tlsroot is not None:
            result['Tlsroot'] = self.tlsroot
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Address') is not None:
            self.address = m.get('Address')
        if m.get('Certificate') is not None:
            self.certificate = m.get('Certificate')
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Tlsroot') is not None:
            self.tlsroot = m.get('Tlsroot')
        return self


class DescribeFabricChannelOrganizationsResponseBodyResult(TeaModel):
    def __init__(
        self,
        anchor_peers: List[DescribeFabricChannelOrganizationsResponseBodyResultAnchorPeers] = None,
        crls: str = None,
        msp_id: str = None,
        msp_type: str = None,
        orderer: bool = None,
        orderer_nodes: List[DescribeFabricChannelOrganizationsResponseBodyResultOrdererNodes] = None,
        root_certificates: str = None,
        tls_root_certificates: str = None,
    ):
        self.anchor_peers = anchor_peers
        self.crls = crls
        self.msp_id = msp_id
        self.msp_type = msp_type
        self.orderer = orderer
        self.orderer_nodes = orderer_nodes
        self.root_certificates = root_certificates
        self.tls_root_certificates = tls_root_certificates

    def validate(self):
        if self.anchor_peers:
            for k in self.anchor_peers:
                if k:
                    k.validate()
        if self.orderer_nodes:
            for k in self.orderer_nodes:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AnchorPeers'] = []
        if self.anchor_peers is not None:
            for k in self.anchor_peers:
                result['AnchorPeers'].append(k.to_map() if k else None)
        if self.crls is not None:
            result['Crls'] = self.crls
        if self.msp_id is not None:
            result['MspId'] = self.msp_id
        if self.msp_type is not None:
            result['MspType'] = self.msp_type
        if self.orderer is not None:
            result['Orderer'] = self.orderer
        result['OrdererNodes'] = []
        if self.orderer_nodes is not None:
            for k in self.orderer_nodes:
                result['OrdererNodes'].append(k.to_map() if k else None)
        if self.root_certificates is not None:
            result['RootCertificates'] = self.root_certificates
        if self.tls_root_certificates is not None:
            result['TlsRootCertificates'] = self.tls_root_certificates
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.anchor_peers = []
        if m.get('AnchorPeers') is not None:
            for k in m.get('AnchorPeers'):
                temp_model = DescribeFabricChannelOrganizationsResponseBodyResultAnchorPeers()
                self.anchor_peers.append(temp_model.from_map(k))
        if m.get('Crls') is not None:
            self.crls = m.get('Crls')
        if m.get('MspId') is not None:
            self.msp_id = m.get('MspId')
        if m.get('MspType') is not None:
            self.msp_type = m.get('MspType')
        if m.get('Orderer') is not None:
            self.orderer = m.get('Orderer')
        self.orderer_nodes = []
        if m.get('OrdererNodes') is not None:
            for k in m.get('OrdererNodes'):
                temp_model = DescribeFabricChannelOrganizationsResponseBodyResultOrdererNodes()
                self.orderer_nodes.append(temp_model.from_map(k))
        if m.get('RootCertificates') is not None:
            self.root_certificates = m.get('RootCertificates')
        if m.get('TlsRootCertificates') is not None:
            self.tls_root_certificates = m.get('TlsRootCertificates')
        return self


class DescribeFabricChannelOrganizationsResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: DescribeFabricChannelOrganizationsResponseBodyResult = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeFabricChannelOrganizationsResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeFabricChannelOrganizationsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeFabricChannelOrganizationsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeFabricChannelOrganizationsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeFabricJoinRequestRequest(TeaModel):
    def __init__(
        self,
        organization_id: str = None,
    ):
        # This parameter is required.
        self.organization_id = organization_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        return self


class DescribeFabricJoinRequestResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: str = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeFabricJoinRequestResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeFabricJoinRequestResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeFabricJoinRequestResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeFabricJoinResponseRequest(TeaModel):
    def __init__(
        self,
        channel_id: str = None,
        organization_id: str = None,
    ):
        # This parameter is required.
        self.channel_id = channel_id
        # This parameter is required.
        self.organization_id = organization_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        return self


class DescribeFabricJoinResponseResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: str = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeFabricJoinResponseResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeFabricJoinResponseResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeFabricJoinResponseResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeFabricManagementChaincodesRequest(TeaModel):
    def __init__(
        self,
        channel_id: str = None,
        organization_id: str = None,
    ):
        # This parameter is required.
        self.channel_id = channel_id
        # This parameter is required.
        self.organization_id = organization_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        return self


class DescribeFabricManagementChaincodesResponseBodyResult(TeaModel):
    def __init__(
        self,
        input: str = None,
        name: str = None,
        path: int = None,
        type: int = None,
        version: str = None,
    ):
        self.input = input
        self.name = name
        self.path = path
        self.type = type
        self.version = version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.input is not None:
            result['Input'] = self.input
        if self.name is not None:
            result['Name'] = self.name
        if self.path is not None:
            result['Path'] = self.path
        if self.type is not None:
            result['Type'] = self.type
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Input') is not None:
            self.input = m.get('Input')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Path') is not None:
            self.path = m.get('Path')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class DescribeFabricManagementChaincodesResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: List[DescribeFabricManagementChaincodesResponseBodyResult] = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = DescribeFabricManagementChaincodesResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeFabricManagementChaincodesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeFabricManagementChaincodesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeFabricManagementChaincodesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeFabricOrganizationChaincodePackageRequest(TeaModel):
    def __init__(
        self,
        organization_id: str = None,
    ):
        # This parameter is required.
        self.organization_id = organization_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        return self


class DescribeFabricOrganizationChaincodePackageResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        message: str = None,
        request_id: str = None,
        result: List[str] = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.message = message
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeFabricOrganizationChaincodePackageResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeFabricOrganizationChaincodePackageResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeFabricOrganizationChaincodePackageResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeFabricOrganizationEgressRequest(TeaModel):
    def __init__(
        self,
        organization_id: str = None,
    ):
        # This parameter is required.
        self.organization_id = organization_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        return self


class DescribeFabricOrganizationEgressResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: List[str] = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeFabricOrganizationEgressResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeFabricOrganizationEgressResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeFabricOrganizationEgressResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeFabricPeerChannelsRequest(TeaModel):
    def __init__(
        self,
        organization_id: str = None,
    ):
        # This parameter is required.
        self.organization_id = organization_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        return self


class DescribeFabricPeerChannelsResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: List[str] = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeFabricPeerChannelsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeFabricPeerChannelsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeFabricPeerChannelsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeGovernanceTaskRequest(TeaModel):
    def __init__(
        self,
        channel_id: str = None,
        organization_id: str = None,
        task_id: str = None,
    ):
        # This parameter is required.
        self.channel_id = channel_id
        # This parameter is required.
        self.organization_id = organization_id
        # This parameter is required.
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class DescribeGovernanceTaskResponseBodyResultContentAddedOrganizationsAnchorPeers(TeaModel):
    def __init__(
        self,
        host: str = None,
        port: int = None,
    ):
        self.host = host
        self.port = port

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.host is not None:
            result['Host'] = self.host
        if self.port is not None:
            result['Port'] = self.port
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Host') is not None:
            self.host = m.get('Host')
        if m.get('Port') is not None:
            self.port = m.get('Port')
        return self


class DescribeGovernanceTaskResponseBodyResultContentAddedOrganizationsOrdererNodes(TeaModel):
    def __init__(
        self,
        address: str = None,
        certificate: str = None,
        key: str = None,
        tlsroot: str = None,
    ):
        self.address = address
        self.certificate = certificate
        self.key = key
        self.tlsroot = tlsroot

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.address is not None:
            result['Address'] = self.address
        if self.certificate is not None:
            result['Certificate'] = self.certificate
        if self.key is not None:
            result['Key'] = self.key
        if self.tlsroot is not None:
            result['Tlsroot'] = self.tlsroot
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Address') is not None:
            self.address = m.get('Address')
        if m.get('Certificate') is not None:
            self.certificate = m.get('Certificate')
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Tlsroot') is not None:
            self.tlsroot = m.get('Tlsroot')
        return self


class DescribeGovernanceTaskResponseBodyResultContentAddedOrganizations(TeaModel):
    def __init__(
        self,
        anchor_peers: List[DescribeGovernanceTaskResponseBodyResultContentAddedOrganizationsAnchorPeers] = None,
        crls: str = None,
        msp_id: str = None,
        msp_type: str = None,
        orderer: bool = None,
        orderer_nodes: List[DescribeGovernanceTaskResponseBodyResultContentAddedOrganizationsOrdererNodes] = None,
        root_certificates: str = None,
        tls_root_certificates: str = None,
    ):
        self.anchor_peers = anchor_peers
        self.crls = crls
        self.msp_id = msp_id
        self.msp_type = msp_type
        self.orderer = orderer
        self.orderer_nodes = orderer_nodes
        self.root_certificates = root_certificates
        self.tls_root_certificates = tls_root_certificates

    def validate(self):
        if self.anchor_peers:
            for k in self.anchor_peers:
                if k:
                    k.validate()
        if self.orderer_nodes:
            for k in self.orderer_nodes:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AnchorPeers'] = []
        if self.anchor_peers is not None:
            for k in self.anchor_peers:
                result['AnchorPeers'].append(k.to_map() if k else None)
        if self.crls is not None:
            result['Crls'] = self.crls
        if self.msp_id is not None:
            result['MspId'] = self.msp_id
        if self.msp_type is not None:
            result['MspType'] = self.msp_type
        if self.orderer is not None:
            result['Orderer'] = self.orderer
        result['OrdererNodes'] = []
        if self.orderer_nodes is not None:
            for k in self.orderer_nodes:
                result['OrdererNodes'].append(k.to_map() if k else None)
        if self.root_certificates is not None:
            result['RootCertificates'] = self.root_certificates
        if self.tls_root_certificates is not None:
            result['TlsRootCertificates'] = self.tls_root_certificates
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.anchor_peers = []
        if m.get('AnchorPeers') is not None:
            for k in m.get('AnchorPeers'):
                temp_model = DescribeGovernanceTaskResponseBodyResultContentAddedOrganizationsAnchorPeers()
                self.anchor_peers.append(temp_model.from_map(k))
        if m.get('Crls') is not None:
            self.crls = m.get('Crls')
        if m.get('MspId') is not None:
            self.msp_id = m.get('MspId')
        if m.get('MspType') is not None:
            self.msp_type = m.get('MspType')
        if m.get('Orderer') is not None:
            self.orderer = m.get('Orderer')
        self.orderer_nodes = []
        if m.get('OrdererNodes') is not None:
            for k in m.get('OrdererNodes'):
                temp_model = DescribeGovernanceTaskResponseBodyResultContentAddedOrganizationsOrdererNodes()
                self.orderer_nodes.append(temp_model.from_map(k))
        if m.get('RootCertificates') is not None:
            self.root_certificates = m.get('RootCertificates')
        if m.get('TlsRootCertificates') is not None:
            self.tls_root_certificates = m.get('TlsRootCertificates')
        return self


class DescribeGovernanceTaskResponseBodyResultContentChaincodeSpecPkgCs(TeaModel):
    def __init__(
        self,
        input: str = None,
        name: str = None,
        path: str = None,
        type: int = None,
        version: str = None,
    ):
        self.input = input
        self.name = name
        self.path = path
        self.type = type
        self.version = version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.input is not None:
            result['Input'] = self.input
        if self.name is not None:
            result['Name'] = self.name
        if self.path is not None:
            result['Path'] = self.path
        if self.type is not None:
            result['Type'] = self.type
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Input') is not None:
            self.input = m.get('Input')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Path') is not None:
            self.path = m.get('Path')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class DescribeGovernanceTaskResponseBodyResultContentChaincodeSpecPkg(TeaModel):
    def __init__(
        self,
        cs: DescribeGovernanceTaskResponseBodyResultContentChaincodeSpecPkgCs = None,
        policy: str = None,
        sha_256: str = None,
    ):
        self.cs = cs
        self.policy = policy
        self.sha_256 = sha_256

    def validate(self):
        if self.cs:
            self.cs.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cs is not None:
            result['Cs'] = self.cs.to_map()
        if self.policy is not None:
            result['Policy'] = self.policy
        if self.sha_256 is not None:
            result['Sha256'] = self.sha_256
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Cs') is not None:
            temp_model = DescribeGovernanceTaskResponseBodyResultContentChaincodeSpecPkgCs()
            self.cs = temp_model.from_map(m['Cs'])
        if m.get('Policy') is not None:
            self.policy = m.get('Policy')
        if m.get('Sha256') is not None:
            self.sha_256 = m.get('Sha256')
        return self


class DescribeGovernanceTaskResponseBodyResultContentOrdererConfig(TeaModel):
    def __init__(
        self,
        batch_timeout: str = None,
        max_message_count: int = None,
        preferred_max_bytes: int = None,
    ):
        self.batch_timeout = batch_timeout
        self.max_message_count = max_message_count
        self.preferred_max_bytes = preferred_max_bytes

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.batch_timeout is not None:
            result['BatchTimeout'] = self.batch_timeout
        if self.max_message_count is not None:
            result['MaxMessageCount'] = self.max_message_count
        if self.preferred_max_bytes is not None:
            result['PreferredMaxBytes'] = self.preferred_max_bytes
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BatchTimeout') is not None:
            self.batch_timeout = m.get('BatchTimeout')
        if m.get('MaxMessageCount') is not None:
            self.max_message_count = m.get('MaxMessageCount')
        if m.get('PreferredMaxBytes') is not None:
            self.preferred_max_bytes = m.get('PreferredMaxBytes')
        return self


class DescribeGovernanceTaskResponseBodyResultContentRemovedOrganizationsAnchorPeers(TeaModel):
    def __init__(
        self,
        host: str = None,
        port: int = None,
    ):
        self.host = host
        self.port = port

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.host is not None:
            result['Host'] = self.host
        if self.port is not None:
            result['Port'] = self.port
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Host') is not None:
            self.host = m.get('Host')
        if m.get('Port') is not None:
            self.port = m.get('Port')
        return self


class DescribeGovernanceTaskResponseBodyResultContentRemovedOrganizationsOrdererNodes(TeaModel):
    def __init__(
        self,
        address: str = None,
        certificate: str = None,
        key: str = None,
        tlsroot: str = None,
    ):
        self.address = address
        self.certificate = certificate
        self.key = key
        self.tlsroot = tlsroot

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.address is not None:
            result['Address'] = self.address
        if self.certificate is not None:
            result['Certificate'] = self.certificate
        if self.key is not None:
            result['Key'] = self.key
        if self.tlsroot is not None:
            result['Tlsroot'] = self.tlsroot
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Address') is not None:
            self.address = m.get('Address')
        if m.get('Certificate') is not None:
            self.certificate = m.get('Certificate')
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Tlsroot') is not None:
            self.tlsroot = m.get('Tlsroot')
        return self


class DescribeGovernanceTaskResponseBodyResultContentRemovedOrganizations(TeaModel):
    def __init__(
        self,
        anchor_peers: List[DescribeGovernanceTaskResponseBodyResultContentRemovedOrganizationsAnchorPeers] = None,
        crls: str = None,
        msp_id: str = None,
        msp_type: str = None,
        orderer: bool = None,
        orderer_nodes: List[DescribeGovernanceTaskResponseBodyResultContentRemovedOrganizationsOrdererNodes] = None,
        root_certificates: str = None,
        tls_root_certificates: str = None,
    ):
        self.anchor_peers = anchor_peers
        self.crls = crls
        self.msp_id = msp_id
        self.msp_type = msp_type
        self.orderer = orderer
        self.orderer_nodes = orderer_nodes
        self.root_certificates = root_certificates
        self.tls_root_certificates = tls_root_certificates

    def validate(self):
        if self.anchor_peers:
            for k in self.anchor_peers:
                if k:
                    k.validate()
        if self.orderer_nodes:
            for k in self.orderer_nodes:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AnchorPeers'] = []
        if self.anchor_peers is not None:
            for k in self.anchor_peers:
                result['AnchorPeers'].append(k.to_map() if k else None)
        if self.crls is not None:
            result['Crls'] = self.crls
        if self.msp_id is not None:
            result['MspId'] = self.msp_id
        if self.msp_type is not None:
            result['MspType'] = self.msp_type
        if self.orderer is not None:
            result['Orderer'] = self.orderer
        result['OrdererNodes'] = []
        if self.orderer_nodes is not None:
            for k in self.orderer_nodes:
                result['OrdererNodes'].append(k.to_map() if k else None)
        if self.root_certificates is not None:
            result['RootCertificates'] = self.root_certificates
        if self.tls_root_certificates is not None:
            result['TlsRootCertificates'] = self.tls_root_certificates
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.anchor_peers = []
        if m.get('AnchorPeers') is not None:
            for k in m.get('AnchorPeers'):
                temp_model = DescribeGovernanceTaskResponseBodyResultContentRemovedOrganizationsAnchorPeers()
                self.anchor_peers.append(temp_model.from_map(k))
        if m.get('Crls') is not None:
            self.crls = m.get('Crls')
        if m.get('MspId') is not None:
            self.msp_id = m.get('MspId')
        if m.get('MspType') is not None:
            self.msp_type = m.get('MspType')
        if m.get('Orderer') is not None:
            self.orderer = m.get('Orderer')
        self.orderer_nodes = []
        if m.get('OrdererNodes') is not None:
            for k in m.get('OrdererNodes'):
                temp_model = DescribeGovernanceTaskResponseBodyResultContentRemovedOrganizationsOrdererNodes()
                self.orderer_nodes.append(temp_model.from_map(k))
        if m.get('RootCertificates') is not None:
            self.root_certificates = m.get('RootCertificates')
        if m.get('TlsRootCertificates') is not None:
            self.tls_root_certificates = m.get('TlsRootCertificates')
        return self


class DescribeGovernanceTaskResponseBodyResultContent(TeaModel):
    def __init__(
        self,
        added_organizations: List[DescribeGovernanceTaskResponseBodyResultContentAddedOrganizations] = None,
        chaincode_spec_pkg: DescribeGovernanceTaskResponseBodyResultContentChaincodeSpecPkg = None,
        orderer_config: DescribeGovernanceTaskResponseBodyResultContentOrdererConfig = None,
        raw: str = None,
        removed_organizations: List[DescribeGovernanceTaskResponseBodyResultContentRemovedOrganizations] = None,
        rw_sets: str = None,
    ):
        self.added_organizations = added_organizations
        self.chaincode_spec_pkg = chaincode_spec_pkg
        self.orderer_config = orderer_config
        self.raw = raw
        self.removed_organizations = removed_organizations
        self.rw_sets = rw_sets

    def validate(self):
        if self.added_organizations:
            for k in self.added_organizations:
                if k:
                    k.validate()
        if self.chaincode_spec_pkg:
            self.chaincode_spec_pkg.validate()
        if self.orderer_config:
            self.orderer_config.validate()
        if self.removed_organizations:
            for k in self.removed_organizations:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AddedOrganizations'] = []
        if self.added_organizations is not None:
            for k in self.added_organizations:
                result['AddedOrganizations'].append(k.to_map() if k else None)
        if self.chaincode_spec_pkg is not None:
            result['ChaincodeSpecPkg'] = self.chaincode_spec_pkg.to_map()
        if self.orderer_config is not None:
            result['OrdererConfig'] = self.orderer_config.to_map()
        if self.raw is not None:
            result['Raw'] = self.raw
        result['RemovedOrganizations'] = []
        if self.removed_organizations is not None:
            for k in self.removed_organizations:
                result['RemovedOrganizations'].append(k.to_map() if k else None)
        if self.rw_sets is not None:
            result['RwSets'] = self.rw_sets
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.added_organizations = []
        if m.get('AddedOrganizations') is not None:
            for k in m.get('AddedOrganizations'):
                temp_model = DescribeGovernanceTaskResponseBodyResultContentAddedOrganizations()
                self.added_organizations.append(temp_model.from_map(k))
        if m.get('ChaincodeSpecPkg') is not None:
            temp_model = DescribeGovernanceTaskResponseBodyResultContentChaincodeSpecPkg()
            self.chaincode_spec_pkg = temp_model.from_map(m['ChaincodeSpecPkg'])
        if m.get('OrdererConfig') is not None:
            temp_model = DescribeGovernanceTaskResponseBodyResultContentOrdererConfig()
            self.orderer_config = temp_model.from_map(m['OrdererConfig'])
        if m.get('Raw') is not None:
            self.raw = m.get('Raw')
        self.removed_organizations = []
        if m.get('RemovedOrganizations') is not None:
            for k in m.get('RemovedOrganizations'):
                temp_model = DescribeGovernanceTaskResponseBodyResultContentRemovedOrganizations()
                self.removed_organizations.append(temp_model.from_map(k))
        if m.get('RwSets') is not None:
            self.rw_sets = m.get('RwSets')
        return self


class DescribeGovernanceTaskResponseBodyResult(TeaModel):
    def __init__(
        self,
        channel_name: str = None,
        content: DescribeGovernanceTaskResponseBodyResultContent = None,
        create_time: int = None,
        creator: str = None,
        description: str = None,
        status: str = None,
        task_id: str = None,
        type: str = None,
    ):
        self.channel_name = channel_name
        self.content = content
        self.create_time = create_time
        self.creator = creator
        self.description = description
        self.status = status
        self.task_id = task_id
        self.type = type

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.channel_name is not None:
            result['ChannelName'] = self.channel_name
        if self.content is not None:
            result['Content'] = self.content.to_map()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.creator is not None:
            result['Creator'] = self.creator
        if self.description is not None:
            result['Description'] = self.description
        if self.status is not None:
            result['Status'] = self.status
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChannelName') is not None:
            self.channel_name = m.get('ChannelName')
        if m.get('Content') is not None:
            temp_model = DescribeGovernanceTaskResponseBodyResultContent()
            self.content = temp_model.from_map(m['Content'])
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Creator') is not None:
            self.creator = m.get('Creator')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class DescribeGovernanceTaskResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: DescribeGovernanceTaskResponseBodyResult = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeGovernanceTaskResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeGovernanceTaskResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeGovernanceTaskResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeGovernanceTaskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeGovernanceTasksRequest(TeaModel):
    def __init__(
        self,
        channel_id: str = None,
        organization_id: str = None,
    ):
        # This parameter is required.
        self.channel_id = channel_id
        # This parameter is required.
        self.organization_id = organization_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        return self


class DescribeGovernanceTasksResponseBodyResultContentAddedOrganizationsAnchorPeers(TeaModel):
    def __init__(
        self,
        host: str = None,
        port: int = None,
    ):
        self.host = host
        self.port = port

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.host is not None:
            result['Host'] = self.host
        if self.port is not None:
            result['Port'] = self.port
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Host') is not None:
            self.host = m.get('Host')
        if m.get('Port') is not None:
            self.port = m.get('Port')
        return self


class DescribeGovernanceTasksResponseBodyResultContentAddedOrganizationsOrdererNodes(TeaModel):
    def __init__(
        self,
        address: str = None,
        certificate: str = None,
        key: str = None,
        tlsroot: str = None,
    ):
        self.address = address
        self.certificate = certificate
        self.key = key
        self.tlsroot = tlsroot

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.address is not None:
            result['Address'] = self.address
        if self.certificate is not None:
            result['Certificate'] = self.certificate
        if self.key is not None:
            result['Key'] = self.key
        if self.tlsroot is not None:
            result['Tlsroot'] = self.tlsroot
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Address') is not None:
            self.address = m.get('Address')
        if m.get('Certificate') is not None:
            self.certificate = m.get('Certificate')
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Tlsroot') is not None:
            self.tlsroot = m.get('Tlsroot')
        return self


class DescribeGovernanceTasksResponseBodyResultContentAddedOrganizations(TeaModel):
    def __init__(
        self,
        anchor_peers: List[DescribeGovernanceTasksResponseBodyResultContentAddedOrganizationsAnchorPeers] = None,
        crls: str = None,
        msp_id: str = None,
        msp_type: str = None,
        orderer: bool = None,
        orderer_nodes: List[DescribeGovernanceTasksResponseBodyResultContentAddedOrganizationsOrdererNodes] = None,
        root_certificates: str = None,
        tls_root_certificates: str = None,
    ):
        self.anchor_peers = anchor_peers
        self.crls = crls
        self.msp_id = msp_id
        self.msp_type = msp_type
        self.orderer = orderer
        self.orderer_nodes = orderer_nodes
        self.root_certificates = root_certificates
        self.tls_root_certificates = tls_root_certificates

    def validate(self):
        if self.anchor_peers:
            for k in self.anchor_peers:
                if k:
                    k.validate()
        if self.orderer_nodes:
            for k in self.orderer_nodes:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AnchorPeers'] = []
        if self.anchor_peers is not None:
            for k in self.anchor_peers:
                result['AnchorPeers'].append(k.to_map() if k else None)
        if self.crls is not None:
            result['Crls'] = self.crls
        if self.msp_id is not None:
            result['MspId'] = self.msp_id
        if self.msp_type is not None:
            result['MspType'] = self.msp_type
        if self.orderer is not None:
            result['Orderer'] = self.orderer
        result['OrdererNodes'] = []
        if self.orderer_nodes is not None:
            for k in self.orderer_nodes:
                result['OrdererNodes'].append(k.to_map() if k else None)
        if self.root_certificates is not None:
            result['RootCertificates'] = self.root_certificates
        if self.tls_root_certificates is not None:
            result['TlsRootCertificates'] = self.tls_root_certificates
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.anchor_peers = []
        if m.get('AnchorPeers') is not None:
            for k in m.get('AnchorPeers'):
                temp_model = DescribeGovernanceTasksResponseBodyResultContentAddedOrganizationsAnchorPeers()
                self.anchor_peers.append(temp_model.from_map(k))
        if m.get('Crls') is not None:
            self.crls = m.get('Crls')
        if m.get('MspId') is not None:
            self.msp_id = m.get('MspId')
        if m.get('MspType') is not None:
            self.msp_type = m.get('MspType')
        if m.get('Orderer') is not None:
            self.orderer = m.get('Orderer')
        self.orderer_nodes = []
        if m.get('OrdererNodes') is not None:
            for k in m.get('OrdererNodes'):
                temp_model = DescribeGovernanceTasksResponseBodyResultContentAddedOrganizationsOrdererNodes()
                self.orderer_nodes.append(temp_model.from_map(k))
        if m.get('RootCertificates') is not None:
            self.root_certificates = m.get('RootCertificates')
        if m.get('TlsRootCertificates') is not None:
            self.tls_root_certificates = m.get('TlsRootCertificates')
        return self


class DescribeGovernanceTasksResponseBodyResultContentChaincodeSpecPkgCs(TeaModel):
    def __init__(
        self,
        input: str = None,
        name: str = None,
        path: str = None,
        type: int = None,
        version: str = None,
    ):
        self.input = input
        self.name = name
        self.path = path
        self.type = type
        self.version = version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.input is not None:
            result['Input'] = self.input
        if self.name is not None:
            result['Name'] = self.name
        if self.path is not None:
            result['Path'] = self.path
        if self.type is not None:
            result['Type'] = self.type
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Input') is not None:
            self.input = m.get('Input')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Path') is not None:
            self.path = m.get('Path')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class DescribeGovernanceTasksResponseBodyResultContentChaincodeSpecPkg(TeaModel):
    def __init__(
        self,
        cs: DescribeGovernanceTasksResponseBodyResultContentChaincodeSpecPkgCs = None,
        policy: str = None,
        sha_256: str = None,
    ):
        self.cs = cs
        self.policy = policy
        self.sha_256 = sha_256

    def validate(self):
        if self.cs:
            self.cs.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cs is not None:
            result['Cs'] = self.cs.to_map()
        if self.policy is not None:
            result['Policy'] = self.policy
        if self.sha_256 is not None:
            result['Sha256'] = self.sha_256
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Cs') is not None:
            temp_model = DescribeGovernanceTasksResponseBodyResultContentChaincodeSpecPkgCs()
            self.cs = temp_model.from_map(m['Cs'])
        if m.get('Policy') is not None:
            self.policy = m.get('Policy')
        if m.get('Sha256') is not None:
            self.sha_256 = m.get('Sha256')
        return self


class DescribeGovernanceTasksResponseBodyResultContentOrdererConfig(TeaModel):
    def __init__(
        self,
        batch_timeout: str = None,
        max_message_count: int = None,
        preferred_max_bytes: int = None,
    ):
        self.batch_timeout = batch_timeout
        self.max_message_count = max_message_count
        self.preferred_max_bytes = preferred_max_bytes

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.batch_timeout is not None:
            result['BatchTimeout'] = self.batch_timeout
        if self.max_message_count is not None:
            result['MaxMessageCount'] = self.max_message_count
        if self.preferred_max_bytes is not None:
            result['PreferredMaxBytes'] = self.preferred_max_bytes
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BatchTimeout') is not None:
            self.batch_timeout = m.get('BatchTimeout')
        if m.get('MaxMessageCount') is not None:
            self.max_message_count = m.get('MaxMessageCount')
        if m.get('PreferredMaxBytes') is not None:
            self.preferred_max_bytes = m.get('PreferredMaxBytes')
        return self


class DescribeGovernanceTasksResponseBodyResultContentRemovedOrganizationsAnchorPeers(TeaModel):
    def __init__(
        self,
        host: str = None,
        port: int = None,
    ):
        self.host = host
        self.port = port

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.host is not None:
            result['Host'] = self.host
        if self.port is not None:
            result['Port'] = self.port
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Host') is not None:
            self.host = m.get('Host')
        if m.get('Port') is not None:
            self.port = m.get('Port')
        return self


class DescribeGovernanceTasksResponseBodyResultContentRemovedOrganizationsOrdererNodes(TeaModel):
    def __init__(
        self,
        address: str = None,
        certificate: str = None,
        key: str = None,
        tlsroot: str = None,
    ):
        self.address = address
        self.certificate = certificate
        self.key = key
        self.tlsroot = tlsroot

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.address is not None:
            result['Address'] = self.address
        if self.certificate is not None:
            result['Certificate'] = self.certificate
        if self.key is not None:
            result['Key'] = self.key
        if self.tlsroot is not None:
            result['Tlsroot'] = self.tlsroot
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Address') is not None:
            self.address = m.get('Address')
        if m.get('Certificate') is not None:
            self.certificate = m.get('Certificate')
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Tlsroot') is not None:
            self.tlsroot = m.get('Tlsroot')
        return self


class DescribeGovernanceTasksResponseBodyResultContentRemovedOrganizations(TeaModel):
    def __init__(
        self,
        anchor_peers: List[DescribeGovernanceTasksResponseBodyResultContentRemovedOrganizationsAnchorPeers] = None,
        crls: str = None,
        msp_id: str = None,
        msp_type: str = None,
        orderer: bool = None,
        orderer_nodes: List[DescribeGovernanceTasksResponseBodyResultContentRemovedOrganizationsOrdererNodes] = None,
        root_certificates: str = None,
        tls_root_certificates: str = None,
    ):
        self.anchor_peers = anchor_peers
        self.crls = crls
        self.msp_id = msp_id
        self.msp_type = msp_type
        self.orderer = orderer
        self.orderer_nodes = orderer_nodes
        self.root_certificates = root_certificates
        self.tls_root_certificates = tls_root_certificates

    def validate(self):
        if self.anchor_peers:
            for k in self.anchor_peers:
                if k:
                    k.validate()
        if self.orderer_nodes:
            for k in self.orderer_nodes:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AnchorPeers'] = []
        if self.anchor_peers is not None:
            for k in self.anchor_peers:
                result['AnchorPeers'].append(k.to_map() if k else None)
        if self.crls is not None:
            result['Crls'] = self.crls
        if self.msp_id is not None:
            result['MspId'] = self.msp_id
        if self.msp_type is not None:
            result['MspType'] = self.msp_type
        if self.orderer is not None:
            result['Orderer'] = self.orderer
        result['OrdererNodes'] = []
        if self.orderer_nodes is not None:
            for k in self.orderer_nodes:
                result['OrdererNodes'].append(k.to_map() if k else None)
        if self.root_certificates is not None:
            result['RootCertificates'] = self.root_certificates
        if self.tls_root_certificates is not None:
            result['TlsRootCertificates'] = self.tls_root_certificates
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.anchor_peers = []
        if m.get('AnchorPeers') is not None:
            for k in m.get('AnchorPeers'):
                temp_model = DescribeGovernanceTasksResponseBodyResultContentRemovedOrganizationsAnchorPeers()
                self.anchor_peers.append(temp_model.from_map(k))
        if m.get('Crls') is not None:
            self.crls = m.get('Crls')
        if m.get('MspId') is not None:
            self.msp_id = m.get('MspId')
        if m.get('MspType') is not None:
            self.msp_type = m.get('MspType')
        if m.get('Orderer') is not None:
            self.orderer = m.get('Orderer')
        self.orderer_nodes = []
        if m.get('OrdererNodes') is not None:
            for k in m.get('OrdererNodes'):
                temp_model = DescribeGovernanceTasksResponseBodyResultContentRemovedOrganizationsOrdererNodes()
                self.orderer_nodes.append(temp_model.from_map(k))
        if m.get('RootCertificates') is not None:
            self.root_certificates = m.get('RootCertificates')
        if m.get('TlsRootCertificates') is not None:
            self.tls_root_certificates = m.get('TlsRootCertificates')
        return self


class DescribeGovernanceTasksResponseBodyResultContent(TeaModel):
    def __init__(
        self,
        added_organizations: List[DescribeGovernanceTasksResponseBodyResultContentAddedOrganizations] = None,
        chaincode_spec_pkg: DescribeGovernanceTasksResponseBodyResultContentChaincodeSpecPkg = None,
        orderer_config: DescribeGovernanceTasksResponseBodyResultContentOrdererConfig = None,
        raw: str = None,
        removed_organizations: List[DescribeGovernanceTasksResponseBodyResultContentRemovedOrganizations] = None,
        rw_sets: str = None,
    ):
        self.added_organizations = added_organizations
        self.chaincode_spec_pkg = chaincode_spec_pkg
        self.orderer_config = orderer_config
        self.raw = raw
        self.removed_organizations = removed_organizations
        self.rw_sets = rw_sets

    def validate(self):
        if self.added_organizations:
            for k in self.added_organizations:
                if k:
                    k.validate()
        if self.chaincode_spec_pkg:
            self.chaincode_spec_pkg.validate()
        if self.orderer_config:
            self.orderer_config.validate()
        if self.removed_organizations:
            for k in self.removed_organizations:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AddedOrganizations'] = []
        if self.added_organizations is not None:
            for k in self.added_organizations:
                result['AddedOrganizations'].append(k.to_map() if k else None)
        if self.chaincode_spec_pkg is not None:
            result['ChaincodeSpecPkg'] = self.chaincode_spec_pkg.to_map()
        if self.orderer_config is not None:
            result['OrdererConfig'] = self.orderer_config.to_map()
        if self.raw is not None:
            result['Raw'] = self.raw
        result['RemovedOrganizations'] = []
        if self.removed_organizations is not None:
            for k in self.removed_organizations:
                result['RemovedOrganizations'].append(k.to_map() if k else None)
        if self.rw_sets is not None:
            result['RwSets'] = self.rw_sets
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.added_organizations = []
        if m.get('AddedOrganizations') is not None:
            for k in m.get('AddedOrganizations'):
                temp_model = DescribeGovernanceTasksResponseBodyResultContentAddedOrganizations()
                self.added_organizations.append(temp_model.from_map(k))
        if m.get('ChaincodeSpecPkg') is not None:
            temp_model = DescribeGovernanceTasksResponseBodyResultContentChaincodeSpecPkg()
            self.chaincode_spec_pkg = temp_model.from_map(m['ChaincodeSpecPkg'])
        if m.get('OrdererConfig') is not None:
            temp_model = DescribeGovernanceTasksResponseBodyResultContentOrdererConfig()
            self.orderer_config = temp_model.from_map(m['OrdererConfig'])
        if m.get('Raw') is not None:
            self.raw = m.get('Raw')
        self.removed_organizations = []
        if m.get('RemovedOrganizations') is not None:
            for k in m.get('RemovedOrganizations'):
                temp_model = DescribeGovernanceTasksResponseBodyResultContentRemovedOrganizations()
                self.removed_organizations.append(temp_model.from_map(k))
        if m.get('RwSets') is not None:
            self.rw_sets = m.get('RwSets')
        return self


class DescribeGovernanceTasksResponseBodyResult(TeaModel):
    def __init__(
        self,
        channel_name: str = None,
        content: DescribeGovernanceTasksResponseBodyResultContent = None,
        create_time: int = None,
        creator: str = None,
        description: str = None,
        status: str = None,
        task_id: str = None,
        type: str = None,
    ):
        self.channel_name = channel_name
        self.content = content
        self.create_time = create_time
        self.creator = creator
        self.description = description
        self.status = status
        self.task_id = task_id
        self.type = type

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.channel_name is not None:
            result['ChannelName'] = self.channel_name
        if self.content is not None:
            result['Content'] = self.content.to_map()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.creator is not None:
            result['Creator'] = self.creator
        if self.description is not None:
            result['Description'] = self.description
        if self.status is not None:
            result['Status'] = self.status
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChannelName') is not None:
            self.channel_name = m.get('ChannelName')
        if m.get('Content') is not None:
            temp_model = DescribeGovernanceTasksResponseBodyResultContent()
            self.content = temp_model.from_map(m['Content'])
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Creator') is not None:
            self.creator = m.get('Creator')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class DescribeGovernanceTasksResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: List[DescribeGovernanceTasksResponseBodyResult] = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = DescribeGovernanceTasksResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeGovernanceTasksResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeGovernanceTasksResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeGovernanceTasksResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeInvitationCodeRequest(TeaModel):
    def __init__(
        self,
        consortium_id: str = None,
    ):
        # This parameter is required.
        self.consortium_id = consortium_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        return self


class DescribeInvitationCodeResponseBodyResult(TeaModel):
    def __init__(
        self,
        accepted: bool = None,
        code: str = None,
        consortium_id: str = None,
        email: str = None,
        expire_time: str = None,
        id: int = None,
        send_time: str = None,
        sender_bid: str = None,
        sender_id: int = None,
        sender_name: str = None,
        url: str = None,
    ):
        self.accepted = accepted
        self.code = code
        self.consortium_id = consortium_id
        self.email = email
        self.expire_time = expire_time
        # Id
        self.id = id
        self.send_time = send_time
        self.sender_bid = sender_bid
        self.sender_id = sender_id
        self.sender_name = sender_name
        # URL
        self.url = url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.accepted is not None:
            result['Accepted'] = self.accepted
        if self.code is not None:
            result['Code'] = self.code
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.email is not None:
            result['Email'] = self.email
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.id is not None:
            result['Id'] = self.id
        if self.send_time is not None:
            result['SendTime'] = self.send_time
        if self.sender_bid is not None:
            result['SenderBid'] = self.sender_bid
        if self.sender_id is not None:
            result['SenderId'] = self.sender_id
        if self.sender_name is not None:
            result['SenderName'] = self.sender_name
        if self.url is not None:
            result['Url'] = self.url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Accepted') is not None:
            self.accepted = m.get('Accepted')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('Email') is not None:
            self.email = m.get('Email')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('SendTime') is not None:
            self.send_time = m.get('SendTime')
        if m.get('SenderBid') is not None:
            self.sender_bid = m.get('SenderBid')
        if m.get('SenderId') is not None:
            self.sender_id = m.get('SenderId')
        if m.get('SenderName') is not None:
            self.sender_name = m.get('SenderName')
        if m.get('Url') is not None:
            self.url = m.get('Url')
        return self


class DescribeInvitationCodeResponseBody(TeaModel):
    def __init__(
        self,
        dynamic_code: str = None,
        dynamic_message: str = None,
        error_code: int = None,
        request_id: str = None,
        result: DescribeInvitationCodeResponseBodyResult = None,
        success: bool = None,
    ):
        self.dynamic_code = dynamic_code
        self.dynamic_message = dynamic_message
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dynamic_code is not None:
            result['DynamicCode'] = self.dynamic_code
        if self.dynamic_message is not None:
            result['DynamicMessage'] = self.dynamic_message
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DynamicCode') is not None:
            self.dynamic_code = m.get('DynamicCode')
        if m.get('DynamicMessage') is not None:
            self.dynamic_message = m.get('DynamicMessage')
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeInvitationCodeResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeInvitationCodeResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeInvitationCodeResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeInvitationCodeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeInvitationListRequest(TeaModel):
    def __init__(
        self,
        consortium_id: str = None,
    ):
        # This parameter is required.
        self.consortium_id = consortium_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        return self


class DescribeInvitationListResponseBodyResult(TeaModel):
    def __init__(
        self,
        code: str = None,
        consortium_id: str = None,
        email: str = None,
        expire_time: str = None,
        send_time: str = None,
    ):
        self.code = code
        self.consortium_id = consortium_id
        self.email = email
        self.expire_time = expire_time
        self.send_time = send_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.email is not None:
            result['Email'] = self.email
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.send_time is not None:
            result['SendTime'] = self.send_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('Email') is not None:
            self.email = m.get('Email')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('SendTime') is not None:
            self.send_time = m.get('SendTime')
        return self


class DescribeInvitationListResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: List[DescribeInvitationListResponseBodyResult] = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = DescribeInvitationListResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeInvitationListResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeInvitationListResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeInvitationListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeInviterRequest(TeaModel):
    def __init__(
        self,
        code: str = None,
    ):
        # This parameter is required.
        self.code = code

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        return self


class DescribeInviterResponseBodyResult(TeaModel):
    def __init__(
        self,
        consortium_id: str = None,
        consortium_name: str = None,
        expire_time: str = None,
        inviter_id: int = None,
        inviter_name: str = None,
    ):
        self.consortium_id = consortium_id
        self.consortium_name = consortium_name
        self.expire_time = expire_time
        self.inviter_id = inviter_id
        self.inviter_name = inviter_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.consortium_name is not None:
            result['ConsortiumName'] = self.consortium_name
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.inviter_id is not None:
            result['InviterId'] = self.inviter_id
        if self.inviter_name is not None:
            result['InviterName'] = self.inviter_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('ConsortiumName') is not None:
            self.consortium_name = m.get('ConsortiumName')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('InviterId') is not None:
            self.inviter_id = m.get('InviterId')
        if m.get('InviterName') is not None:
            self.inviter_name = m.get('InviterName')
        return self


class DescribeInviterResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: DescribeInviterResponseBodyResult = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeInviterResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeInviterResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeInviterResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeInviterResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeLatest15BlocksRequest(TeaModel):
    def __init__(
        self,
        bizid: str = None,
    ):
        self.bizid = bizid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        return self


class DescribeLatest15BlocksResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: List[Dict[str, Any]] = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class DescribeLatest15BlocksResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeLatest15BlocksResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeLatest15BlocksResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeLatest15TransDigestsRequest(TeaModel):
    def __init__(
        self,
        bizid: str = None,
    ):
        self.bizid = bizid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        return self


class DescribeLatest15TransDigestsResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: List[Dict[str, Any]] = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class DescribeLatest15TransDigestsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeLatest15TransDigestsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeLatest15TransDigestsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeLatestBlocksRequest(TeaModel):
    def __init__(
        self,
        bizid: str = None,
    ):
        self.bizid = bizid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        return self


class DescribeLatestBlocksResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: List[Dict[str, Any]] = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class DescribeLatestBlocksResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeLatestBlocksResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeLatestBlocksResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeLatestTransactionDigestsRequest(TeaModel):
    def __init__(
        self,
        bizid: str = None,
    ):
        self.bizid = bizid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        return self


class DescribeLatestTransactionDigestsResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: List[Dict[str, Any]] = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class DescribeLatestTransactionDigestsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeLatestTransactionDigestsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeLatestTransactionDigestsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeMemberRoleRequest(TeaModel):
    def __init__(
        self,
        bizid: str = None,
    ):
        self.bizid = bizid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        return self


class DescribeMemberRoleResponseBodyResult(TeaModel):
    def __init__(
        self,
        role: int = None,
    ):
        self.role = role

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.role is not None:
            result['Role'] = self.role
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Role') is not None:
            self.role = m.get('Role')
        return self


class DescribeMemberRoleResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: DescribeMemberRoleResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeMemberRoleResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class DescribeMemberRoleResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeMemberRoleResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeMemberRoleResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeMembersRequest(TeaModel):
    def __init__(
        self,
        bizid: str = None,
        current: int = None,
        page_size: int = None,
    ):
        self.bizid = bizid
        self.current = current
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        if self.current is not None:
            result['Current'] = self.current
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        if m.get('Current') is not None:
            self.current = m.get('Current')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class DescribeMembersResponseBodyResultPagination(TeaModel):
    def __init__(
        self,
        current: int = None,
        page_size: int = None,
        total: int = None,
    ):
        self.current = current
        self.page_size = page_size
        self.total = total

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.current is not None:
            result['Current'] = self.current
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total is not None:
            result['Total'] = self.total
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Current') is not None:
            self.current = m.get('Current')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('Total') is not None:
            self.total = m.get('Total')
        return self


class DescribeMembersResponseBodyResult(TeaModel):
    def __init__(
        self,
        member_list: List[str] = None,
        pagination: DescribeMembersResponseBodyResultPagination = None,
    ):
        self.member_list = member_list
        self.pagination = pagination

    def validate(self):
        if self.pagination:
            self.pagination.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.member_list is not None:
            result['MemberList'] = self.member_list
        if self.pagination is not None:
            result['Pagination'] = self.pagination.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('MemberList') is not None:
            self.member_list = m.get('MemberList')
        if m.get('Pagination') is not None:
            temp_model = DescribeMembersResponseBodyResultPagination()
            self.pagination = temp_model.from_map(m['Pagination'])
        return self


class DescribeMembersResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: DescribeMembersResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeMembersResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class DescribeMembersResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeMembersResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeMembersResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeMetricRequest(TeaModel):
    def __init__(
        self,
        bizid: str = None,
        inner_ip: str = None,
        metric: str = None,
        period: str = None,
        port: str = None,
        time_area: str = None,
    ):
        self.bizid = bizid
        self.inner_ip = inner_ip
        self.metric = metric
        self.period = period
        self.port = port
        self.time_area = time_area

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        if self.inner_ip is not None:
            result['InnerIp'] = self.inner_ip
        if self.metric is not None:
            result['Metric'] = self.metric
        if self.period is not None:
            result['Period'] = self.period
        if self.port is not None:
            result['Port'] = self.port
        if self.time_area is not None:
            result['TimeArea'] = self.time_area
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        if m.get('InnerIp') is not None:
            self.inner_ip = m.get('InnerIp')
        if m.get('Metric') is not None:
            self.metric = m.get('Metric')
        if m.get('Period') is not None:
            self.period = m.get('Period')
        if m.get('Port') is not None:
            self.port = m.get('Port')
        if m.get('TimeArea') is not None:
            self.time_area = m.get('TimeArea')
        return self


class DescribeMetricResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: str = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class DescribeMetricResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeMetricResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeMetricResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeMyBlockchainsResponseBodyResult(TeaModel):
    def __init__(
        self,
        bizid: str = None,
        createtime: int = None,
        id: int = None,
        reject_reason: str = None,
        req_addr: str = None,
        signed_addr: str = None,
        status: int = None,
        updatetime: int = None,
        username: str = None,
    ):
        self.bizid = bizid
        self.createtime = createtime
        self.id = id
        self.reject_reason = reject_reason
        self.req_addr = req_addr
        self.signed_addr = signed_addr
        self.status = status
        self.updatetime = updatetime
        self.username = username

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        if self.createtime is not None:
            result['Createtime'] = self.createtime
        if self.id is not None:
            result['Id'] = self.id
        if self.reject_reason is not None:
            result['RejectReason'] = self.reject_reason
        if self.req_addr is not None:
            result['ReqAddr'] = self.req_addr
        if self.signed_addr is not None:
            result['SignedAddr'] = self.signed_addr
        if self.status is not None:
            result['Status'] = self.status
        if self.updatetime is not None:
            result['Updatetime'] = self.updatetime
        if self.username is not None:
            result['Username'] = self.username
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        if m.get('Createtime') is not None:
            self.createtime = m.get('Createtime')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('RejectReason') is not None:
            self.reject_reason = m.get('RejectReason')
        if m.get('ReqAddr') is not None:
            self.req_addr = m.get('ReqAddr')
        if m.get('SignedAddr') is not None:
            self.signed_addr = m.get('SignedAddr')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Updatetime') is not None:
            self.updatetime = m.get('Updatetime')
        if m.get('Username') is not None:
            self.username = m.get('Username')
        return self


class DescribeMyBlockchainsResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: List[DescribeMyBlockchainsResponseBodyResult] = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = DescribeMyBlockchainsResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        return self


class DescribeMyBlockchainsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeMyBlockchainsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeMyBlockchainsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeMyBlockchanInfosResponseBodyResultNodeInfoList(TeaModel):
    def __init__(
        self,
        block_height: int = None,
        node_name: str = None,
        status: bool = None,
        version: str = None,
    ):
        self.block_height = block_height
        self.node_name = node_name
        self.status = status
        self.version = version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.block_height is not None:
            result['BlockHeight'] = self.block_height
        if self.node_name is not None:
            result['NodeName'] = self.node_name
        if self.status is not None:
            result['Status'] = self.status
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BlockHeight') is not None:
            self.block_height = m.get('BlockHeight')
        if m.get('NodeName') is not None:
            self.node_name = m.get('NodeName')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class DescribeMyBlockchanInfosResponseBodyResult(TeaModel):
    def __init__(
        self,
        abnormal_nodes: int = None,
        bizid: str = None,
        block_height: int = None,
        create_time: int = None,
        is_role: bool = None,
        name: str = None,
        node_info_list: List[DescribeMyBlockchanInfosResponseBodyResultNodeInfoList] = None,
        node_number: int = None,
        normal: bool = None,
        transaction_sum: int = None,
        version: str = None,
    ):
        self.abnormal_nodes = abnormal_nodes
        self.bizid = bizid
        self.block_height = block_height
        self.create_time = create_time
        self.is_role = is_role
        self.name = name
        self.node_info_list = node_info_list
        self.node_number = node_number
        self.normal = normal
        self.transaction_sum = transaction_sum
        self.version = version

    def validate(self):
        if self.node_info_list:
            for k in self.node_info_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.abnormal_nodes is not None:
            result['AbnormalNodes'] = self.abnormal_nodes
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        if self.block_height is not None:
            result['BlockHeight'] = self.block_height
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.is_role is not None:
            result['IsRole'] = self.is_role
        if self.name is not None:
            result['Name'] = self.name
        result['NodeInfoList'] = []
        if self.node_info_list is not None:
            for k in self.node_info_list:
                result['NodeInfoList'].append(k.to_map() if k else None)
        if self.node_number is not None:
            result['NodeNumber'] = self.node_number
        if self.normal is not None:
            result['Normal'] = self.normal
        if self.transaction_sum is not None:
            result['TransactionSum'] = self.transaction_sum
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AbnormalNodes') is not None:
            self.abnormal_nodes = m.get('AbnormalNodes')
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        if m.get('BlockHeight') is not None:
            self.block_height = m.get('BlockHeight')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('IsRole') is not None:
            self.is_role = m.get('IsRole')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        self.node_info_list = []
        if m.get('NodeInfoList') is not None:
            for k in m.get('NodeInfoList'):
                temp_model = DescribeMyBlockchanInfosResponseBodyResultNodeInfoList()
                self.node_info_list.append(temp_model.from_map(k))
        if m.get('NodeNumber') is not None:
            self.node_number = m.get('NodeNumber')
        if m.get('Normal') is not None:
            self.normal = m.get('Normal')
        if m.get('TransactionSum') is not None:
            self.transaction_sum = m.get('TransactionSum')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class DescribeMyBlockchanInfosResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: List[DescribeMyBlockchanInfosResponseBodyResult] = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = DescribeMyBlockchanInfosResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        return self


class DescribeMyBlockchanInfosResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeMyBlockchanInfosResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeMyBlockchanInfosResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeMySuccessAppliesResponseBodyResultNodeInfoList(TeaModel):
    def __init__(
        self,
        block_height: int = None,
        node_name: str = None,
        status: bool = None,
        version: str = None,
    ):
        self.block_height = block_height
        self.node_name = node_name
        self.status = status
        self.version = version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.block_height is not None:
            result['BlockHeight'] = self.block_height
        if self.node_name is not None:
            result['NodeName'] = self.node_name
        if self.status is not None:
            result['Status'] = self.status
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BlockHeight') is not None:
            self.block_height = m.get('BlockHeight')
        if m.get('NodeName') is not None:
            self.node_name = m.get('NodeName')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class DescribeMySuccessAppliesResponseBodyResult(TeaModel):
    def __init__(
        self,
        abnormal_nodes: int = None,
        bizid: str = None,
        block_height: int = None,
        create_time: int = None,
        is_role: bool = None,
        name: str = None,
        node_info_list: List[DescribeMySuccessAppliesResponseBodyResultNodeInfoList] = None,
        node_number: int = None,
        normal: bool = None,
        transaction_sum: int = None,
        version: str = None,
    ):
        self.abnormal_nodes = abnormal_nodes
        self.bizid = bizid
        self.block_height = block_height
        self.create_time = create_time
        self.is_role = is_role
        self.name = name
        self.node_info_list = node_info_list
        self.node_number = node_number
        self.normal = normal
        self.transaction_sum = transaction_sum
        self.version = version

    def validate(self):
        if self.node_info_list:
            for k in self.node_info_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.abnormal_nodes is not None:
            result['AbnormalNodes'] = self.abnormal_nodes
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        if self.block_height is not None:
            result['BlockHeight'] = self.block_height
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.is_role is not None:
            result['IsRole'] = self.is_role
        if self.name is not None:
            result['Name'] = self.name
        result['NodeInfoList'] = []
        if self.node_info_list is not None:
            for k in self.node_info_list:
                result['NodeInfoList'].append(k.to_map() if k else None)
        if self.node_number is not None:
            result['NodeNumber'] = self.node_number
        if self.normal is not None:
            result['Normal'] = self.normal
        if self.transaction_sum is not None:
            result['TransactionSum'] = self.transaction_sum
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AbnormalNodes') is not None:
            self.abnormal_nodes = m.get('AbnormalNodes')
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        if m.get('BlockHeight') is not None:
            self.block_height = m.get('BlockHeight')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('IsRole') is not None:
            self.is_role = m.get('IsRole')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        self.node_info_list = []
        if m.get('NodeInfoList') is not None:
            for k in m.get('NodeInfoList'):
                temp_model = DescribeMySuccessAppliesResponseBodyResultNodeInfoList()
                self.node_info_list.append(temp_model.from_map(k))
        if m.get('NodeNumber') is not None:
            self.node_number = m.get('NodeNumber')
        if m.get('Normal') is not None:
            self.normal = m.get('Normal')
        if m.get('TransactionSum') is not None:
            self.transaction_sum = m.get('TransactionSum')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class DescribeMySuccessAppliesResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: List[DescribeMySuccessAppliesResponseBodyResult] = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = DescribeMySuccessAppliesResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        return self


class DescribeMySuccessAppliesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeMySuccessAppliesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeMySuccessAppliesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeMySuccessfulApplicationResponseBodyResultNodeInfoList(TeaModel):
    def __init__(
        self,
        block_height: int = None,
        node_name: str = None,
        status: bool = None,
        version: str = None,
    ):
        self.block_height = block_height
        self.node_name = node_name
        self.status = status
        self.version = version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.block_height is not None:
            result['BlockHeight'] = self.block_height
        if self.node_name is not None:
            result['NodeName'] = self.node_name
        if self.status is not None:
            result['Status'] = self.status
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BlockHeight') is not None:
            self.block_height = m.get('BlockHeight')
        if m.get('NodeName') is not None:
            self.node_name = m.get('NodeName')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class DescribeMySuccessfulApplicationResponseBodyResult(TeaModel):
    def __init__(
        self,
        abnormal_nodes: int = None,
        bizid: str = None,
        block_height: int = None,
        create_time: int = None,
        is_role: bool = None,
        name: str = None,
        node_info_list: List[DescribeMySuccessfulApplicationResponseBodyResultNodeInfoList] = None,
        node_number: int = None,
        normal: bool = None,
        transaction_sum: int = None,
        version: str = None,
    ):
        self.abnormal_nodes = abnormal_nodes
        self.bizid = bizid
        self.block_height = block_height
        self.create_time = create_time
        self.is_role = is_role
        self.name = name
        self.node_info_list = node_info_list
        self.node_number = node_number
        self.normal = normal
        self.transaction_sum = transaction_sum
        self.version = version

    def validate(self):
        if self.node_info_list:
            for k in self.node_info_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.abnormal_nodes is not None:
            result['AbnormalNodes'] = self.abnormal_nodes
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        if self.block_height is not None:
            result['BlockHeight'] = self.block_height
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.is_role is not None:
            result['IsRole'] = self.is_role
        if self.name is not None:
            result['Name'] = self.name
        result['NodeInfoList'] = []
        if self.node_info_list is not None:
            for k in self.node_info_list:
                result['NodeInfoList'].append(k.to_map() if k else None)
        if self.node_number is not None:
            result['NodeNumber'] = self.node_number
        if self.normal is not None:
            result['Normal'] = self.normal
        if self.transaction_sum is not None:
            result['TransactionSum'] = self.transaction_sum
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AbnormalNodes') is not None:
            self.abnormal_nodes = m.get('AbnormalNodes')
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        if m.get('BlockHeight') is not None:
            self.block_height = m.get('BlockHeight')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('IsRole') is not None:
            self.is_role = m.get('IsRole')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        self.node_info_list = []
        if m.get('NodeInfoList') is not None:
            for k in m.get('NodeInfoList'):
                temp_model = DescribeMySuccessfulApplicationResponseBodyResultNodeInfoList()
                self.node_info_list.append(temp_model.from_map(k))
        if m.get('NodeNumber') is not None:
            self.node_number = m.get('NodeNumber')
        if m.get('Normal') is not None:
            self.normal = m.get('Normal')
        if m.get('TransactionSum') is not None:
            self.transaction_sum = m.get('TransactionSum')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class DescribeMySuccessfulApplicationResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: List[DescribeMySuccessfulApplicationResponseBodyResult] = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = DescribeMySuccessfulApplicationResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        return self


class DescribeMySuccessfulApplicationResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeMySuccessfulApplicationResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeMySuccessfulApplicationResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeNetstatURLRequest(TeaModel):
    def __init__(
        self,
        id: str = None,
    ):
        # This parameter is required.
        self.id = id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        return self


class DescribeNetstatURLResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: str = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeNetstatURLResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeNetstatURLResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeNetstatURLResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeOrdererLogsRequest(TeaModel):
    def __init__(
        self,
        consortium_id: str = None,
        lines: str = None,
        orderer_name: str = None,
    ):
        # This parameter is required.
        self.consortium_id = consortium_id
        self.lines = lines
        # This parameter is required.
        self.orderer_name = orderer_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.lines is not None:
            result['Lines'] = self.lines
        if self.orderer_name is not None:
            result['OrdererName'] = self.orderer_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('Lines') is not None:
            self.lines = m.get('Lines')
        if m.get('OrdererName') is not None:
            self.orderer_name = m.get('OrdererName')
        return self


class DescribeOrdererLogsResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: str = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeOrdererLogsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeOrdererLogsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeOrdererLogsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeOrganizationRequestTag(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        # This parameter is required.
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class DescribeOrganizationRequest(TeaModel):
    def __init__(
        self,
        location: str = None,
        organization_id: str = None,
        tag: List[DescribeOrganizationRequestTag] = None,
    ):
        self.location = location
        # This parameter is required.
        self.organization_id = organization_id
        self.tag = tag

    def validate(self):
        if self.tag:
            for k in self.tag:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.location is not None:
            result['Location'] = self.location
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        result['Tag'] = []
        if self.tag is not None:
            for k in self.tag:
                result['Tag'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Location') is not None:
            self.location = m.get('Location')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        self.tag = []
        if m.get('Tag') is not None:
            for k in m.get('Tag'):
                temp_model = DescribeOrganizationRequestTag()
                self.tag.append(temp_model.from_map(k))
        return self


class DescribeOrganizationResponseBodyResultTags(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class DescribeOrganizationResponseBodyResult(TeaModel):
    def __init__(
        self,
        caname: str = None,
        caurl: str = None,
        code_name: str = None,
        consortium_count: int = None,
        create_time: str = None,
        description: str = None,
        domain: str = None,
        expired_time: str = None,
        msp: str = None,
        name: str = None,
        organization_id: str = None,
        owner_bid: str = None,
        owner_name: str = None,
        owner_uid: int = None,
        peer_count: int = None,
        region_id: str = None,
        request_id: str = None,
        spec_name: str = None,
        state: str = None,
        tags: List[DescribeOrganizationResponseBodyResultTags] = None,
        user_count: int = None,
        zone_id: str = None,
    ):
        self.caname = caname
        self.caurl = caurl
        self.code_name = code_name
        self.consortium_count = consortium_count
        self.create_time = create_time
        self.description = description
        self.domain = domain
        self.expired_time = expired_time
        self.msp = msp
        self.name = name
        self.organization_id = organization_id
        self.owner_bid = owner_bid
        self.owner_name = owner_name
        self.owner_uid = owner_uid
        self.peer_count = peer_count
        self.region_id = region_id
        self.request_id = request_id
        self.spec_name = spec_name
        self.state = state
        self.tags = tags
        self.user_count = user_count
        self.zone_id = zone_id

    def validate(self):
        if self.tags:
            for k in self.tags:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.caname is not None:
            result['CAName'] = self.caname
        if self.caurl is not None:
            result['CAUrl'] = self.caurl
        if self.code_name is not None:
            result['CodeName'] = self.code_name
        if self.consortium_count is not None:
            result['ConsortiumCount'] = self.consortium_count
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.description is not None:
            result['Description'] = self.description
        if self.domain is not None:
            result['Domain'] = self.domain
        if self.expired_time is not None:
            result['ExpiredTime'] = self.expired_time
        if self.msp is not None:
            result['MSP'] = self.msp
        if self.name is not None:
            result['Name'] = self.name
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        if self.owner_bid is not None:
            result['OwnerBid'] = self.owner_bid
        if self.owner_name is not None:
            result['OwnerName'] = self.owner_name
        if self.owner_uid is not None:
            result['OwnerUid'] = self.owner_uid
        if self.peer_count is not None:
            result['PeerCount'] = self.peer_count
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.spec_name is not None:
            result['SpecName'] = self.spec_name
        if self.state is not None:
            result['State'] = self.state
        result['Tags'] = []
        if self.tags is not None:
            for k in self.tags:
                result['Tags'].append(k.to_map() if k else None)
        if self.user_count is not None:
            result['UserCount'] = self.user_count
        if self.zone_id is not None:
            result['ZoneId'] = self.zone_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CAName') is not None:
            self.caname = m.get('CAName')
        if m.get('CAUrl') is not None:
            self.caurl = m.get('CAUrl')
        if m.get('CodeName') is not None:
            self.code_name = m.get('CodeName')
        if m.get('ConsortiumCount') is not None:
            self.consortium_count = m.get('ConsortiumCount')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Domain') is not None:
            self.domain = m.get('Domain')
        if m.get('ExpiredTime') is not None:
            self.expired_time = m.get('ExpiredTime')
        if m.get('MSP') is not None:
            self.msp = m.get('MSP')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        if m.get('OwnerBid') is not None:
            self.owner_bid = m.get('OwnerBid')
        if m.get('OwnerName') is not None:
            self.owner_name = m.get('OwnerName')
        if m.get('OwnerUid') is not None:
            self.owner_uid = m.get('OwnerUid')
        if m.get('PeerCount') is not None:
            self.peer_count = m.get('PeerCount')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('SpecName') is not None:
            self.spec_name = m.get('SpecName')
        if m.get('State') is not None:
            self.state = m.get('State')
        self.tags = []
        if m.get('Tags') is not None:
            for k in m.get('Tags'):
                temp_model = DescribeOrganizationResponseBodyResultTags()
                self.tags.append(temp_model.from_map(k))
        if m.get('UserCount') is not None:
            self.user_count = m.get('UserCount')
        if m.get('ZoneId') is not None:
            self.zone_id = m.get('ZoneId')
        return self


class DescribeOrganizationResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: DescribeOrganizationResponseBodyResult = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeOrganizationResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeOrganizationResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeOrganizationResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeOrganizationResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeOrganizationChaincodesRequest(TeaModel):
    def __init__(
        self,
        location: str = None,
        organization_id: str = None,
    ):
        self.location = location
        # This parameter is required.
        self.organization_id = organization_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.location is not None:
            result['Location'] = self.location
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Location') is not None:
            self.location = m.get('Location')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        return self


class DescribeOrganizationChaincodesResponseBodyResult(TeaModel):
    def __init__(
        self,
        binding: bool = None,
        chaincode_id: str = None,
        chaincode_package_id: str = None,
        channel_id: str = None,
        channel_name: str = None,
        consortium_id: str = None,
        create_time: str = None,
        creator: str = None,
        deploy_time: str = None,
        endorse_policy: str = None,
        installed: str = None,
        management: bool = None,
        message: str = None,
        name: str = None,
        state: str = None,
        version: str = None,
    ):
        self.binding = binding
        self.chaincode_id = chaincode_id
        self.chaincode_package_id = chaincode_package_id
        self.channel_id = channel_id
        self.channel_name = channel_name
        self.consortium_id = consortium_id
        self.create_time = create_time
        self.creator = creator
        self.deploy_time = deploy_time
        self.endorse_policy = endorse_policy
        self.installed = installed
        self.management = management
        self.message = message
        self.name = name
        self.state = state
        self.version = version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.binding is not None:
            result['Binding'] = self.binding
        if self.chaincode_id is not None:
            result['ChaincodeId'] = self.chaincode_id
        if self.chaincode_package_id is not None:
            result['ChaincodePackageId'] = self.chaincode_package_id
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.channel_name is not None:
            result['ChannelName'] = self.channel_name
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.creator is not None:
            result['Creator'] = self.creator
        if self.deploy_time is not None:
            result['DeployTime'] = self.deploy_time
        if self.endorse_policy is not None:
            result['EndorsePolicy'] = self.endorse_policy
        if self.installed is not None:
            result['Installed'] = self.installed
        if self.management is not None:
            result['Management'] = self.management
        if self.message is not None:
            result['Message'] = self.message
        if self.name is not None:
            result['Name'] = self.name
        if self.state is not None:
            result['State'] = self.state
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Binding') is not None:
            self.binding = m.get('Binding')
        if m.get('ChaincodeId') is not None:
            self.chaincode_id = m.get('ChaincodeId')
        if m.get('ChaincodePackageId') is not None:
            self.chaincode_package_id = m.get('ChaincodePackageId')
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('ChannelName') is not None:
            self.channel_name = m.get('ChannelName')
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Creator') is not None:
            self.creator = m.get('Creator')
        if m.get('DeployTime') is not None:
            self.deploy_time = m.get('DeployTime')
        if m.get('EndorsePolicy') is not None:
            self.endorse_policy = m.get('EndorsePolicy')
        if m.get('Installed') is not None:
            self.installed = m.get('Installed')
        if m.get('Management') is not None:
            self.management = m.get('Management')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class DescribeOrganizationChaincodesResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: List[DescribeOrganizationChaincodesResponseBodyResult] = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = DescribeOrganizationChaincodesResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeOrganizationChaincodesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeOrganizationChaincodesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeOrganizationChaincodesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeOrganizationChannelsRequest(TeaModel):
    def __init__(
        self,
        location: str = None,
        organization_id: str = None,
    ):
        self.location = location
        # This parameter is required.
        self.organization_id = organization_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.location is not None:
            result['Location'] = self.location
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Location') is not None:
            self.location = m.get('Location')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        return self


class DescribeOrganizationChannelsResponseBodyResult(TeaModel):
    def __init__(
        self,
        batch_timeout: int = None,
        block_count: int = None,
        chaincode_count: int = None,
        channel_id: str = None,
        consortium_id: str = None,
        consortium_name: str = None,
        create_time: str = None,
        delete_time: str = None,
        deleted: bool = None,
        hybird: bool = None,
        max_message_count: int = None,
        member_count: int = None,
        name: str = None,
        owner_bid: str = None,
        owner_name: str = None,
        owner_uid: int = None,
        preferred_max_bytes: int = None,
        request_id: str = None,
        state: str = None,
        support_channel_config: bool = None,
        update_time: str = None,
    ):
        self.batch_timeout = batch_timeout
        self.block_count = block_count
        self.chaincode_count = chaincode_count
        self.channel_id = channel_id
        self.consortium_id = consortium_id
        self.consortium_name = consortium_name
        self.create_time = create_time
        self.delete_time = delete_time
        self.deleted = deleted
        self.hybird = hybird
        self.max_message_count = max_message_count
        self.member_count = member_count
        self.name = name
        self.owner_bid = owner_bid
        self.owner_name = owner_name
        self.owner_uid = owner_uid
        self.preferred_max_bytes = preferred_max_bytes
        self.request_id = request_id
        self.state = state
        self.support_channel_config = support_channel_config
        self.update_time = update_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.batch_timeout is not None:
            result['BatchTimeout'] = self.batch_timeout
        if self.block_count is not None:
            result['BlockCount'] = self.block_count
        if self.chaincode_count is not None:
            result['ChaincodeCount'] = self.chaincode_count
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.consortium_name is not None:
            result['ConsortiumName'] = self.consortium_name
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.delete_time is not None:
            result['DeleteTime'] = self.delete_time
        if self.deleted is not None:
            result['Deleted'] = self.deleted
        if self.hybird is not None:
            result['Hybird'] = self.hybird
        if self.max_message_count is not None:
            result['MaxMessageCount'] = self.max_message_count
        if self.member_count is not None:
            result['MemberCount'] = self.member_count
        if self.name is not None:
            result['Name'] = self.name
        if self.owner_bid is not None:
            result['OwnerBid'] = self.owner_bid
        if self.owner_name is not None:
            result['OwnerName'] = self.owner_name
        if self.owner_uid is not None:
            result['OwnerUid'] = self.owner_uid
        if self.preferred_max_bytes is not None:
            result['PreferredMaxBytes'] = self.preferred_max_bytes
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.state is not None:
            result['State'] = self.state
        if self.support_channel_config is not None:
            result['SupportChannelConfig'] = self.support_channel_config
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BatchTimeout') is not None:
            self.batch_timeout = m.get('BatchTimeout')
        if m.get('BlockCount') is not None:
            self.block_count = m.get('BlockCount')
        if m.get('ChaincodeCount') is not None:
            self.chaincode_count = m.get('ChaincodeCount')
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('ConsortiumName') is not None:
            self.consortium_name = m.get('ConsortiumName')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('DeleteTime') is not None:
            self.delete_time = m.get('DeleteTime')
        if m.get('Deleted') is not None:
            self.deleted = m.get('Deleted')
        if m.get('Hybird') is not None:
            self.hybird = m.get('Hybird')
        if m.get('MaxMessageCount') is not None:
            self.max_message_count = m.get('MaxMessageCount')
        if m.get('MemberCount') is not None:
            self.member_count = m.get('MemberCount')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('OwnerBid') is not None:
            self.owner_bid = m.get('OwnerBid')
        if m.get('OwnerName') is not None:
            self.owner_name = m.get('OwnerName')
        if m.get('OwnerUid') is not None:
            self.owner_uid = m.get('OwnerUid')
        if m.get('PreferredMaxBytes') is not None:
            self.preferred_max_bytes = m.get('PreferredMaxBytes')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('SupportChannelConfig') is not None:
            self.support_channel_config = m.get('SupportChannelConfig')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        return self


class DescribeOrganizationChannelsResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: List[DescribeOrganizationChannelsResponseBodyResult] = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = DescribeOrganizationChannelsResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeOrganizationChannelsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeOrganizationChannelsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeOrganizationChannelsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeOrganizationDeletableRequest(TeaModel):
    def __init__(
        self,
        location: str = None,
        organization_id: str = None,
    ):
        self.location = location
        # This parameter is required.
        self.organization_id = organization_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.location is not None:
            result['Location'] = self.location
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Location') is not None:
            self.location = m.get('Location')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        return self


class DescribeOrganizationDeletableResponseBodyResult(TeaModel):
    def __init__(
        self,
        code_name: str = None,
        deletable: bool = None,
        description: str = None,
        domain: str = None,
        name: str = None,
        organization_id: str = None,
        region_id: str = None,
        state: str = None,
        zone_id: str = None,
    ):
        self.code_name = code_name
        self.deletable = deletable
        self.description = description
        self.domain = domain
        self.name = name
        self.organization_id = organization_id
        self.region_id = region_id
        self.state = state
        self.zone_id = zone_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code_name is not None:
            result['CodeName'] = self.code_name
        if self.deletable is not None:
            result['Deletable'] = self.deletable
        if self.description is not None:
            result['Description'] = self.description
        if self.domain is not None:
            result['Domain'] = self.domain
        if self.name is not None:
            result['Name'] = self.name
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.state is not None:
            result['State'] = self.state
        if self.zone_id is not None:
            result['ZoneId'] = self.zone_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CodeName') is not None:
            self.code_name = m.get('CodeName')
        if m.get('Deletable') is not None:
            self.deletable = m.get('Deletable')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Domain') is not None:
            self.domain = m.get('Domain')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('ZoneId') is not None:
            self.zone_id = m.get('ZoneId')
        return self


class DescribeOrganizationDeletableResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: DescribeOrganizationDeletableResponseBodyResult = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeOrganizationDeletableResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeOrganizationDeletableResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeOrganizationDeletableResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeOrganizationDeletableResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeOrganizationMembersRequest(TeaModel):
    def __init__(
        self,
        location: str = None,
        organization_id: str = None,
    ):
        self.location = location
        # This parameter is required.
        self.organization_id = organization_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.location is not None:
            result['Location'] = self.location
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Location') is not None:
            self.location = m.get('Location')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        return self


class DescribeOrganizationMembersResponseBodyResult(TeaModel):
    def __init__(
        self,
        consortium_id: str = None,
        consortium_name: str = None,
        description: str = None,
        domain: str = None,
        id: str = None,
        joined_time: str = None,
        name: str = None,
        state: str = None,
    ):
        self.consortium_id = consortium_id
        self.consortium_name = consortium_name
        self.description = description
        self.domain = domain
        # Id
        self.id = id
        self.joined_time = joined_time
        self.name = name
        self.state = state

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.consortium_name is not None:
            result['ConsortiumName'] = self.consortium_name
        if self.description is not None:
            result['Description'] = self.description
        if self.domain is not None:
            result['Domain'] = self.domain
        if self.id is not None:
            result['Id'] = self.id
        if self.joined_time is not None:
            result['JoinedTime'] = self.joined_time
        if self.name is not None:
            result['Name'] = self.name
        if self.state is not None:
            result['State'] = self.state
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('ConsortiumName') is not None:
            self.consortium_name = m.get('ConsortiumName')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Domain') is not None:
            self.domain = m.get('Domain')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('JoinedTime') is not None:
            self.joined_time = m.get('JoinedTime')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('State') is not None:
            self.state = m.get('State')
        return self


class DescribeOrganizationMembersResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: List[DescribeOrganizationMembersResponseBodyResult] = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = DescribeOrganizationMembersResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeOrganizationMembersResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeOrganizationMembersResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeOrganizationMembersResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeOrganizationPeersRequest(TeaModel):
    def __init__(
        self,
        location: str = None,
        organization_id: str = None,
    ):
        self.location = location
        # This parameter is required.
        self.organization_id = organization_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.location is not None:
            result['Location'] = self.location
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Location') is not None:
            self.location = m.get('Location')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        return self


class DescribeOrganizationPeersResponseBodyResult(TeaModel):
    def __init__(
        self,
        create_time: str = None,
        domain: str = None,
        instance_type: str = None,
        internet_ip: str = None,
        intranet_ip: str = None,
        is_anchor: bool = None,
        name: str = None,
        port: int = None,
        update_time: str = None,
    ):
        self.create_time = create_time
        self.domain = domain
        self.instance_type = instance_type
        self.internet_ip = internet_ip
        self.intranet_ip = intranet_ip
        self.is_anchor = is_anchor
        self.name = name
        self.port = port
        self.update_time = update_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.domain is not None:
            result['Domain'] = self.domain
        if self.instance_type is not None:
            result['InstanceType'] = self.instance_type
        if self.internet_ip is not None:
            result['InternetIp'] = self.internet_ip
        if self.intranet_ip is not None:
            result['IntranetIp'] = self.intranet_ip
        if self.is_anchor is not None:
            result['IsAnchor'] = self.is_anchor
        if self.name is not None:
            result['Name'] = self.name
        if self.port is not None:
            result['Port'] = self.port
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Domain') is not None:
            self.domain = m.get('Domain')
        if m.get('InstanceType') is not None:
            self.instance_type = m.get('InstanceType')
        if m.get('InternetIp') is not None:
            self.internet_ip = m.get('InternetIp')
        if m.get('IntranetIp') is not None:
            self.intranet_ip = m.get('IntranetIp')
        if m.get('IsAnchor') is not None:
            self.is_anchor = m.get('IsAnchor')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Port') is not None:
            self.port = m.get('Port')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        return self


class DescribeOrganizationPeersResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: List[DescribeOrganizationPeersResponseBodyResult] = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = DescribeOrganizationPeersResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeOrganizationPeersResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeOrganizationPeersResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeOrganizationPeersResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeOrganizationSpecsResponseBodyResult(TeaModel):
    def __init__(
        self,
        enable: bool = None,
        name: str = None,
        title: str = None,
    ):
        self.enable = enable
        self.name = name
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.enable is not None:
            result['Enable'] = self.enable
        if self.name is not None:
            result['Name'] = self.name
        if self.title is not None:
            result['Title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Enable') is not None:
            self.enable = m.get('Enable')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Title') is not None:
            self.title = m.get('Title')
        return self


class DescribeOrganizationSpecsResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: List[DescribeOrganizationSpecsResponseBodyResult] = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = DescribeOrganizationSpecsResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeOrganizationSpecsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeOrganizationSpecsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeOrganizationSpecsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeOrganizationTriggersRequest(TeaModel):
    def __init__(
        self,
        organization_id: str = None,
    ):
        # This parameter is required.
        self.organization_id = organization_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        return self


class DescribeOrganizationTriggersResponseBodyResultCheckpoint(TeaModel):
    def __init__(
        self,
        error_count: int = None,
        height: int = None,
        index: int = None,
        type: str = None,
    ):
        self.error_count = error_count
        self.height = height
        self.index = index
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_count is not None:
            result['ErrorCount'] = self.error_count
        if self.height is not None:
            result['Height'] = self.height
        if self.index is not None:
            result['Index'] = self.index
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCount') is not None:
            self.error_count = m.get('ErrorCount')
        if m.get('Height') is not None:
            self.height = m.get('Height')
        if m.get('Index') is not None:
            self.index = m.get('Index')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class DescribeOrganizationTriggersResponseBodyResult(TeaModel):
    def __init__(
        self,
        channel_id: str = None,
        channel_name: str = None,
        checkpoint: DescribeOrganizationTriggersResponseBodyResultCheckpoint = None,
        create_time: int = None,
        error_message: str = None,
        name: str = None,
        options: str = None,
        source: str = None,
        status: int = None,
        type: str = None,
    ):
        self.channel_id = channel_id
        self.channel_name = channel_name
        self.checkpoint = checkpoint
        self.create_time = create_time
        self.error_message = error_message
        self.name = name
        self.options = options
        self.source = source
        self.status = status
        self.type = type

    def validate(self):
        if self.checkpoint:
            self.checkpoint.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.channel_name is not None:
            result['ChannelName'] = self.channel_name
        if self.checkpoint is not None:
            result['Checkpoint'] = self.checkpoint.to_map()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.name is not None:
            result['Name'] = self.name
        if self.options is not None:
            result['Options'] = self.options
        if self.source is not None:
            result['Source'] = self.source
        if self.status is not None:
            result['Status'] = self.status
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('ChannelName') is not None:
            self.channel_name = m.get('ChannelName')
        if m.get('Checkpoint') is not None:
            temp_model = DescribeOrganizationTriggersResponseBodyResultCheckpoint()
            self.checkpoint = temp_model.from_map(m['Checkpoint'])
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Options') is not None:
            self.options = m.get('Options')
        if m.get('Source') is not None:
            self.source = m.get('Source')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class DescribeOrganizationTriggersResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: List[DescribeOrganizationTriggersResponseBodyResult] = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = DescribeOrganizationTriggersResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeOrganizationTriggersResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeOrganizationTriggersResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeOrganizationTriggersResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeOrganizationUserCertsRequest(TeaModel):
    def __init__(
        self,
        organization_id: str = None,
        username: str = None,
    ):
        # This parameter is required.
        self.organization_id = organization_id
        # This parameter is required.
        self.username = username

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        if self.username is not None:
            result['Username'] = self.username
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        if m.get('Username') is not None:
            self.username = m.get('Username')
        return self


class DescribeOrganizationUserCertsResponseBodyResultCertificates(TeaModel):
    def __init__(
        self,
        cert_data: str = None,
        issuer: str = None,
        name: str = None,
        scope: str = None,
        subject: str = None,
        valid_from: str = None,
        valid_to: str = None,
    ):
        self.cert_data = cert_data
        self.issuer = issuer
        self.name = name
        self.scope = scope
        self.subject = subject
        self.valid_from = valid_from
        self.valid_to = valid_to

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cert_data is not None:
            result['CertData'] = self.cert_data
        if self.issuer is not None:
            result['Issuer'] = self.issuer
        if self.name is not None:
            result['Name'] = self.name
        if self.scope is not None:
            result['Scope'] = self.scope
        if self.subject is not None:
            result['Subject'] = self.subject
        if self.valid_from is not None:
            result['ValidFrom'] = self.valid_from
        if self.valid_to is not None:
            result['ValidTo'] = self.valid_to
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CertData') is not None:
            self.cert_data = m.get('CertData')
        if m.get('Issuer') is not None:
            self.issuer = m.get('Issuer')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Scope') is not None:
            self.scope = m.get('Scope')
        if m.get('Subject') is not None:
            self.subject = m.get('Subject')
        if m.get('ValidFrom') is not None:
            self.valid_from = m.get('ValidFrom')
        if m.get('ValidTo') is not None:
            self.valid_to = m.get('ValidTo')
        return self


class DescribeOrganizationUserCertsResponseBodyResultKeyPair(TeaModel):
    def __init__(
        self,
        private_key: str = None,
        public_key: str = None,
    ):
        self.private_key = private_key
        self.public_key = public_key

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.private_key is not None:
            result['PrivateKey'] = self.private_key
        if self.public_key is not None:
            result['PublicKey'] = self.public_key
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PrivateKey') is not None:
            self.private_key = m.get('PrivateKey')
        if m.get('PublicKey') is not None:
            self.public_key = m.get('PublicKey')
        return self


class DescribeOrganizationUserCertsResponseBodyResult(TeaModel):
    def __init__(
        self,
        certificates: List[DescribeOrganizationUserCertsResponseBodyResultCertificates] = None,
        key_pair: DescribeOrganizationUserCertsResponseBodyResultKeyPair = None,
    ):
        self.certificates = certificates
        self.key_pair = key_pair

    def validate(self):
        if self.certificates:
            for k in self.certificates:
                if k:
                    k.validate()
        if self.key_pair:
            self.key_pair.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Certificates'] = []
        if self.certificates is not None:
            for k in self.certificates:
                result['Certificates'].append(k.to_map() if k else None)
        if self.key_pair is not None:
            result['KeyPair'] = self.key_pair.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.certificates = []
        if m.get('Certificates') is not None:
            for k in m.get('Certificates'):
                temp_model = DescribeOrganizationUserCertsResponseBodyResultCertificates()
                self.certificates.append(temp_model.from_map(k))
        if m.get('KeyPair') is not None:
            temp_model = DescribeOrganizationUserCertsResponseBodyResultKeyPair()
            self.key_pair = temp_model.from_map(m['KeyPair'])
        return self


class DescribeOrganizationUserCertsResponseBody(TeaModel):
    def __init__(
        self,
        dynamic_code: str = None,
        dynamic_message: str = None,
        error_code: int = None,
        request_id: str = None,
        result: DescribeOrganizationUserCertsResponseBodyResult = None,
        success: bool = None,
    ):
        self.dynamic_code = dynamic_code
        self.dynamic_message = dynamic_message
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dynamic_code is not None:
            result['DynamicCode'] = self.dynamic_code
        if self.dynamic_message is not None:
            result['DynamicMessage'] = self.dynamic_message
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DynamicCode') is not None:
            self.dynamic_code = m.get('DynamicCode')
        if m.get('DynamicMessage') is not None:
            self.dynamic_message = m.get('DynamicMessage')
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeOrganizationUserCertsResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeOrganizationUserCertsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeOrganizationUserCertsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeOrganizationUserCertsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeOrganizationUsersRequest(TeaModel):
    def __init__(
        self,
        location: str = None,
        organization_id: str = None,
    ):
        self.location = location
        # This parameter is required.
        self.organization_id = organization_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.location is not None:
            result['Location'] = self.location
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Location') is not None:
            self.location = m.get('Location')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        return self


class DescribeOrganizationUsersResponseBodyResult(TeaModel):
    def __init__(
        self,
        attrs: str = None,
        caller_bid: str = None,
        caller_uid: int = None,
        create_time: str = None,
        expire_time: str = None,
        full_name: str = None,
        organization_id: str = None,
        region_id: str = None,
        username: str = None,
    ):
        self.attrs = attrs
        self.caller_bid = caller_bid
        self.caller_uid = caller_uid
        self.create_time = create_time
        self.expire_time = expire_time
        self.full_name = full_name
        self.organization_id = organization_id
        self.region_id = region_id
        self.username = username

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.attrs is not None:
            result['Attrs'] = self.attrs
        if self.caller_bid is not None:
            result['CallerBid'] = self.caller_bid
        if self.caller_uid is not None:
            result['CallerUid'] = self.caller_uid
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.full_name is not None:
            result['FullName'] = self.full_name
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.username is not None:
            result['Username'] = self.username
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Attrs') is not None:
            self.attrs = m.get('Attrs')
        if m.get('CallerBid') is not None:
            self.caller_bid = m.get('CallerBid')
        if m.get('CallerUid') is not None:
            self.caller_uid = m.get('CallerUid')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('FullName') is not None:
            self.full_name = m.get('FullName')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('Username') is not None:
            self.username = m.get('Username')
        return self


class DescribeOrganizationUsersResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: List[DescribeOrganizationUsersResponseBodyResult] = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = DescribeOrganizationUsersResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeOrganizationUsersResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeOrganizationUsersResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeOrganizationUsersResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeOrganizationsRequestTag(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        # This parameter is required.
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class DescribeOrganizationsRequest(TeaModel):
    def __init__(
        self,
        location: str = None,
        tag: List[DescribeOrganizationsRequestTag] = None,
    ):
        self.location = location
        self.tag = tag

    def validate(self):
        if self.tag:
            for k in self.tag:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.location is not None:
            result['Location'] = self.location
        result['Tag'] = []
        if self.tag is not None:
            for k in self.tag:
                result['Tag'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Location') is not None:
            self.location = m.get('Location')
        self.tag = []
        if m.get('Tag') is not None:
            for k in m.get('Tag'):
                temp_model = DescribeOrganizationsRequestTag()
                self.tag.append(temp_model.from_map(k))
        return self


class DescribeOrganizationsResponseBodyResultTags(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class DescribeOrganizationsResponseBodyResult(TeaModel):
    def __init__(
        self,
        code_name: str = None,
        consortium_count: int = None,
        create_time: str = None,
        description: str = None,
        domain: str = None,
        expire_state: str = None,
        expired_time: str = None,
        hybrid: bool = None,
        major_version: str = None,
        name: str = None,
        organization_id: str = None,
        owner_bid: str = None,
        owner_name: str = None,
        owner_uid: int = None,
        peer_count: int = None,
        region_id: str = None,
        request_id: str = None,
        spec_name: str = None,
        state: str = None,
        tags: List[DescribeOrganizationsResponseBodyResultTags] = None,
        user_count: int = None,
        zone_id: str = None,
    ):
        self.code_name = code_name
        self.consortium_count = consortium_count
        self.create_time = create_time
        self.description = description
        self.domain = domain
        self.expire_state = expire_state
        self.expired_time = expired_time
        self.hybrid = hybrid
        self.major_version = major_version
        self.name = name
        self.organization_id = organization_id
        self.owner_bid = owner_bid
        self.owner_name = owner_name
        self.owner_uid = owner_uid
        self.peer_count = peer_count
        self.region_id = region_id
        self.request_id = request_id
        self.spec_name = spec_name
        self.state = state
        self.tags = tags
        self.user_count = user_count
        self.zone_id = zone_id

    def validate(self):
        if self.tags:
            for k in self.tags:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code_name is not None:
            result['CodeName'] = self.code_name
        if self.consortium_count is not None:
            result['ConsortiumCount'] = self.consortium_count
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.description is not None:
            result['Description'] = self.description
        if self.domain is not None:
            result['Domain'] = self.domain
        if self.expire_state is not None:
            result['ExpireState'] = self.expire_state
        if self.expired_time is not None:
            result['ExpiredTime'] = self.expired_time
        if self.hybrid is not None:
            result['Hybrid'] = self.hybrid
        if self.major_version is not None:
            result['MajorVersion'] = self.major_version
        if self.name is not None:
            result['Name'] = self.name
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        if self.owner_bid is not None:
            result['OwnerBid'] = self.owner_bid
        if self.owner_name is not None:
            result['OwnerName'] = self.owner_name
        if self.owner_uid is not None:
            result['OwnerUid'] = self.owner_uid
        if self.peer_count is not None:
            result['PeerCount'] = self.peer_count
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.spec_name is not None:
            result['SpecName'] = self.spec_name
        if self.state is not None:
            result['State'] = self.state
        result['Tags'] = []
        if self.tags is not None:
            for k in self.tags:
                result['Tags'].append(k.to_map() if k else None)
        if self.user_count is not None:
            result['UserCount'] = self.user_count
        if self.zone_id is not None:
            result['ZoneId'] = self.zone_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CodeName') is not None:
            self.code_name = m.get('CodeName')
        if m.get('ConsortiumCount') is not None:
            self.consortium_count = m.get('ConsortiumCount')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Domain') is not None:
            self.domain = m.get('Domain')
        if m.get('ExpireState') is not None:
            self.expire_state = m.get('ExpireState')
        if m.get('ExpiredTime') is not None:
            self.expired_time = m.get('ExpiredTime')
        if m.get('Hybrid') is not None:
            self.hybrid = m.get('Hybrid')
        if m.get('MajorVersion') is not None:
            self.major_version = m.get('MajorVersion')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        if m.get('OwnerBid') is not None:
            self.owner_bid = m.get('OwnerBid')
        if m.get('OwnerName') is not None:
            self.owner_name = m.get('OwnerName')
        if m.get('OwnerUid') is not None:
            self.owner_uid = m.get('OwnerUid')
        if m.get('PeerCount') is not None:
            self.peer_count = m.get('PeerCount')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('SpecName') is not None:
            self.spec_name = m.get('SpecName')
        if m.get('State') is not None:
            self.state = m.get('State')
        self.tags = []
        if m.get('Tags') is not None:
            for k in m.get('Tags'):
                temp_model = DescribeOrganizationsResponseBodyResultTags()
                self.tags.append(temp_model.from_map(k))
        if m.get('UserCount') is not None:
            self.user_count = m.get('UserCount')
        if m.get('ZoneId') is not None:
            self.zone_id = m.get('ZoneId')
        return self


class DescribeOrganizationsResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: List[DescribeOrganizationsResponseBodyResult] = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = DescribeOrganizationsResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeOrganizationsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeOrganizationsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeOrganizationsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeOrgnaizationChaincodesRequest(TeaModel):
    def __init__(
        self,
        location: str = None,
        organization_id: str = None,
    ):
        self.location = location
        # This parameter is required.
        self.organization_id = organization_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.location is not None:
            result['Location'] = self.location
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Location') is not None:
            self.location = m.get('Location')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        return self


class DescribeOrgnaizationChaincodesResponseBodyResult(TeaModel):
    def __init__(
        self,
        chaincode_id: str = None,
        channel_id: str = None,
        channel_name: str = None,
        create_time: str = None,
        creator: str = None,
        deploy_time: str = None,
        endorse_policy: str = None,
        installed: str = None,
        message: str = None,
        name: str = None,
        state: str = None,
        version: str = None,
    ):
        self.chaincode_id = chaincode_id
        self.channel_id = channel_id
        self.channel_name = channel_name
        self.create_time = create_time
        self.creator = creator
        self.deploy_time = deploy_time
        self.endorse_policy = endorse_policy
        self.installed = installed
        self.message = message
        self.name = name
        self.state = state
        self.version = version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.chaincode_id is not None:
            result['ChaincodeId'] = self.chaincode_id
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.channel_name is not None:
            result['ChannelName'] = self.channel_name
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.creator is not None:
            result['Creator'] = self.creator
        if self.deploy_time is not None:
            result['DeployTime'] = self.deploy_time
        if self.endorse_policy is not None:
            result['EndorsePolicy'] = self.endorse_policy
        if self.installed is not None:
            result['Installed'] = self.installed
        if self.message is not None:
            result['Message'] = self.message
        if self.name is not None:
            result['Name'] = self.name
        if self.state is not None:
            result['State'] = self.state
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChaincodeId') is not None:
            self.chaincode_id = m.get('ChaincodeId')
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('ChannelName') is not None:
            self.channel_name = m.get('ChannelName')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Creator') is not None:
            self.creator = m.get('Creator')
        if m.get('DeployTime') is not None:
            self.deploy_time = m.get('DeployTime')
        if m.get('EndorsePolicy') is not None:
            self.endorse_policy = m.get('EndorsePolicy')
        if m.get('Installed') is not None:
            self.installed = m.get('Installed')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class DescribeOrgnaizationChaincodesResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: List[DescribeOrgnaizationChaincodesResponseBodyResult] = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = DescribeOrgnaizationChaincodesResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeOrgnaizationChaincodesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeOrgnaizationChaincodesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeOrgnaizationChaincodesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeOssPropertiesRequest(TeaModel):
    def __init__(
        self,
        bizid: str = None,
    ):
        self.bizid = bizid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        return self


class DescribeOssPropertiesResponseBodyResult(TeaModel):
    def __init__(
        self,
        access_key_id: str = None,
        access_key_secret: str = None,
        bucket_name: str = None,
        endpoint: str = None,
        folder_name: str = None,
    ):
        self.access_key_id = access_key_id
        self.access_key_secret = access_key_secret
        self.bucket_name = bucket_name
        self.endpoint = endpoint
        self.folder_name = folder_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.access_key_id is not None:
            result['AccessKeyId'] = self.access_key_id
        if self.access_key_secret is not None:
            result['AccessKeySecret'] = self.access_key_secret
        if self.bucket_name is not None:
            result['BucketName'] = self.bucket_name
        if self.endpoint is not None:
            result['Endpoint'] = self.endpoint
        if self.folder_name is not None:
            result['FolderName'] = self.folder_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccessKeyId') is not None:
            self.access_key_id = m.get('AccessKeyId')
        if m.get('AccessKeySecret') is not None:
            self.access_key_secret = m.get('AccessKeySecret')
        if m.get('BucketName') is not None:
            self.bucket_name = m.get('BucketName')
        if m.get('Endpoint') is not None:
            self.endpoint = m.get('Endpoint')
        if m.get('FolderName') is not None:
            self.folder_name = m.get('FolderName')
        return self


class DescribeOssPropertiesResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: DescribeOssPropertiesResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeOssPropertiesResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class DescribeOssPropertiesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeOssPropertiesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeOssPropertiesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribePeerLogsRequest(TeaModel):
    def __init__(
        self,
        lines: str = None,
        organization_id: str = None,
        peer_name: str = None,
    ):
        self.lines = lines
        # This parameter is required.
        self.organization_id = organization_id
        # This parameter is required.
        self.peer_name = peer_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.lines is not None:
            result['Lines'] = self.lines
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        if self.peer_name is not None:
            result['PeerName'] = self.peer_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Lines') is not None:
            self.lines = m.get('Lines')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        if m.get('PeerName') is not None:
            self.peer_name = m.get('PeerName')
        return self


class DescribePeerLogsResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: str = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribePeerLogsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribePeerLogsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribePeerLogsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribePublicAntChainContractProjectContentTreeResponseBodyResult(TeaModel):
    def __init__(
        self,
        children: List[Dict[str, Any]] = None,
    ):
        self.children = children

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.children is not None:
            result['Children'] = self.children
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Children') is not None:
            self.children = m.get('Children')
        return self


class DescribePublicAntChainContractProjectContentTreeResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: DescribePublicAntChainContractProjectContentTreeResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribePublicAntChainContractProjectContentTreeResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class DescribePublicAntChainContractProjectContentTreeResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribePublicAntChainContractProjectContentTreeResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribePublicAntChainContractProjectContentTreeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribePublicAntChainDownloadPathsRequest(TeaModel):
    def __init__(
        self,
        bizid: str = None,
    ):
        self.bizid = bizid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        return self


class DescribePublicAntChainDownloadPathsResponseBodyResult(TeaModel):
    def __init__(
        self,
        ca_crt_url: str = None,
        client_crt_url: str = None,
        sdk_url: str = None,
        trust_ca_url: str = None,
    ):
        self.ca_crt_url = ca_crt_url
        self.client_crt_url = client_crt_url
        self.sdk_url = sdk_url
        self.trust_ca_url = trust_ca_url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ca_crt_url is not None:
            result['CaCrtUrl'] = self.ca_crt_url
        if self.client_crt_url is not None:
            result['ClientCrtUrl'] = self.client_crt_url
        if self.sdk_url is not None:
            result['SdkUrl'] = self.sdk_url
        if self.trust_ca_url is not None:
            result['TrustCaUrl'] = self.trust_ca_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CaCrtUrl') is not None:
            self.ca_crt_url = m.get('CaCrtUrl')
        if m.get('ClientCrtUrl') is not None:
            self.client_crt_url = m.get('ClientCrtUrl')
        if m.get('SdkUrl') is not None:
            self.sdk_url = m.get('SdkUrl')
        if m.get('TrustCaUrl') is not None:
            self.trust_ca_url = m.get('TrustCaUrl')
        return self


class DescribePublicAntChainDownloadPathsResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: DescribePublicAntChainDownloadPathsResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribePublicAntChainDownloadPathsResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class DescribePublicAntChainDownloadPathsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribePublicAntChainDownloadPathsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribePublicAntChainDownloadPathsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribePublicCloudIDEEnvConfigsRequest(TeaModel):
    def __init__(
        self,
        bizid: str = None,
    ):
        self.bizid = bizid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        return self


class DescribePublicCloudIDEEnvConfigsResponseBodyResult(TeaModel):
    def __init__(
        self,
        bizid: str = None,
        name: str = None,
        trial_account: str = None,
        trial_account_private_key: str = None,
        version: str = None,
    ):
        self.bizid = bizid
        self.name = name
        self.trial_account = trial_account
        self.trial_account_private_key = trial_account_private_key
        self.version = version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        if self.name is not None:
            result['Name'] = self.name
        if self.trial_account is not None:
            result['TrialAccount'] = self.trial_account
        if self.trial_account_private_key is not None:
            result['TrialAccountPrivateKey'] = self.trial_account_private_key
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('TrialAccount') is not None:
            self.trial_account = m.get('TrialAccount')
        if m.get('TrialAccountPrivateKey') is not None:
            self.trial_account_private_key = m.get('TrialAccountPrivateKey')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class DescribePublicCloudIDEEnvConfigsResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: List[DescribePublicCloudIDEEnvConfigsResponseBodyResult] = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = DescribePublicCloudIDEEnvConfigsResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        return self


class DescribePublicCloudIDEEnvConfigsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribePublicCloudIDEEnvConfigsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribePublicCloudIDEEnvConfigsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeQRCodeAccessLogRequest(TeaModel):
    def __init__(
        self,
        bizid: str = None,
    ):
        self.bizid = bizid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        return self


class DescribeQRCodeAccessLogResponseBodyResult(TeaModel):
    def __init__(
        self,
        access_alipay_account_count: int = None,
        access_count: int = None,
    ):
        self.access_alipay_account_count = access_alipay_account_count
        self.access_count = access_count

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.access_alipay_account_count is not None:
            result['AccessAlipayAccountCount'] = self.access_alipay_account_count
        if self.access_count is not None:
            result['AccessCount'] = self.access_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccessAlipayAccountCount') is not None:
            self.access_alipay_account_count = m.get('AccessAlipayAccountCount')
        if m.get('AccessCount') is not None:
            self.access_count = m.get('AccessCount')
        return self


class DescribeQRCodeAccessLogResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: DescribeQRCodeAccessLogResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeQRCodeAccessLogResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class DescribeQRCodeAccessLogResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeQRCodeAccessLogResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeQRCodeAccessLogResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeQRCodeAuthorityRequest(TeaModel):
    def __init__(
        self,
        bizid: str = None,
    ):
        self.bizid = bizid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        return self


class DescribeQRCodeAuthorityResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: bool = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class DescribeQRCodeAuthorityResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeQRCodeAuthorityResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeQRCodeAuthorityResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeRegionsResponseBodyResult(TeaModel):
    def __init__(
        self,
        id: int = None,
        online: bool = None,
        region_id: str = None,
        title: str = None,
    ):
        # Id
        self.id = id
        self.online = online
        self.region_id = region_id
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        if self.online is not None:
            result['Online'] = self.online
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.title is not None:
            result['Title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Online') is not None:
            self.online = m.get('Online')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('Title') is not None:
            self.title = m.get('Title')
        return self


class DescribeRegionsResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: List[DescribeRegionsResponseBodyResult] = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = DescribeRegionsResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeRegionsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeRegionsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeRegionsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeResourceTypeResponseBodyResult(TeaModel):
    def __init__(
        self,
        cpu: int = None,
        disk: int = None,
        memory: int = None,
        type_id: int = None,
        type_name: str = None,
    ):
        self.cpu = cpu
        self.disk = disk
        self.memory = memory
        self.type_id = type_id
        self.type_name = type_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cpu is not None:
            result['Cpu'] = self.cpu
        if self.disk is not None:
            result['Disk'] = self.disk
        if self.memory is not None:
            result['Memory'] = self.memory
        if self.type_id is not None:
            result['TypeId'] = self.type_id
        if self.type_name is not None:
            result['TypeName'] = self.type_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Cpu') is not None:
            self.cpu = m.get('Cpu')
        if m.get('Disk') is not None:
            self.disk = m.get('Disk')
        if m.get('Memory') is not None:
            self.memory = m.get('Memory')
        if m.get('TypeId') is not None:
            self.type_id = m.get('TypeId')
        if m.get('TypeName') is not None:
            self.type_name = m.get('TypeName')
        return self


class DescribeResourceTypeResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: List[DescribeResourceTypeResponseBodyResult] = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = DescribeResourceTypeResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        return self


class DescribeResourceTypeResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeResourceTypeResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeResourceTypeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeResourceTypesResponseBodyResult(TeaModel):
    def __init__(
        self,
        cpu: int = None,
        disk: int = None,
        memory: int = None,
        type_id: int = None,
        type_name: str = None,
    ):
        self.cpu = cpu
        self.disk = disk
        self.memory = memory
        self.type_id = type_id
        self.type_name = type_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cpu is not None:
            result['Cpu'] = self.cpu
        if self.disk is not None:
            result['Disk'] = self.disk
        if self.memory is not None:
            result['Memory'] = self.memory
        if self.type_id is not None:
            result['TypeId'] = self.type_id
        if self.type_name is not None:
            result['TypeName'] = self.type_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Cpu') is not None:
            self.cpu = m.get('Cpu')
        if m.get('Disk') is not None:
            self.disk = m.get('Disk')
        if m.get('Memory') is not None:
            self.memory = m.get('Memory')
        if m.get('TypeId') is not None:
            self.type_id = m.get('TypeId')
        if m.get('TypeName') is not None:
            self.type_name = m.get('TypeName')
        return self


class DescribeResourceTypesResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: List[DescribeResourceTypesResponseBodyResult] = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = DescribeResourceTypesResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        return self


class DescribeResourceTypesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeResourceTypesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeResourceTypesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeRootDomainResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: str = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeRootDomainResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeRootDomainResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeRootDomainResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeSchemaDetailRequest(TeaModel):
    def __init__(
        self,
        bizid: str = None,
        schema_id: int = None,
    ):
        self.bizid = bizid
        self.schema_id = schema_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        if self.schema_id is not None:
            result['SchemaId'] = self.schema_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        if m.get('SchemaId') is not None:
            self.schema_id = m.get('SchemaId')
        return self


class DescribeSchemaDetailResponseBodyResultResponsesPropertiesDataSource(TeaModel):
    def __init__(
        self,
        allow_null: int = None,
        annotation: str = None,
        field: str = None,
        indexes: int = None,
        key: int = None,
        length: int = None,
        reg: str = None,
        type: str = None,
    ):
        self.allow_null = allow_null
        self.annotation = annotation
        self.field = field
        self.indexes = indexes
        self.key = key
        self.length = length
        self.reg = reg
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.allow_null is not None:
            result['AllowNull'] = self.allow_null
        if self.annotation is not None:
            result['Annotation'] = self.annotation
        if self.field is not None:
            result['Field'] = self.field
        if self.indexes is not None:
            result['Indexes'] = self.indexes
        if self.key is not None:
            result['Key'] = self.key
        if self.length is not None:
            result['Length'] = self.length
        if self.reg is not None:
            result['Reg'] = self.reg
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AllowNull') is not None:
            self.allow_null = m.get('AllowNull')
        if m.get('Annotation') is not None:
            self.annotation = m.get('Annotation')
        if m.get('Field') is not None:
            self.field = m.get('Field')
        if m.get('Indexes') is not None:
            self.indexes = m.get('Indexes')
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Length') is not None:
            self.length = m.get('Length')
        if m.get('Reg') is not None:
            self.reg = m.get('Reg')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class DescribeSchemaDetailResponseBodyResultResponsesProperties(TeaModel):
    def __init__(
        self,
        count: int = None,
        data_source: List[DescribeSchemaDetailResponseBodyResultResponsesPropertiesDataSource] = None,
    ):
        self.count = count
        self.data_source = data_source

    def validate(self):
        if self.data_source:
            for k in self.data_source:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.count is not None:
            result['Count'] = self.count
        result['DataSource'] = []
        if self.data_source is not None:
            for k in self.data_source:
                result['DataSource'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Count') is not None:
            self.count = m.get('Count')
        self.data_source = []
        if m.get('DataSource') is not None:
            for k in m.get('DataSource'):
                temp_model = DescribeSchemaDetailResponseBodyResultResponsesPropertiesDataSource()
                self.data_source.append(temp_model.from_map(k))
        return self


class DescribeSchemaDetailResponseBodyResultResponses(TeaModel):
    def __init__(
        self,
        category: str = None,
        category_name: str = None,
        description: str = None,
        properties: DescribeSchemaDetailResponseBodyResultResponsesProperties = None,
    ):
        self.category = category
        self.category_name = category_name
        self.description = description
        self.properties = properties

    def validate(self):
        if self.properties:
            self.properties.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['Category'] = self.category
        if self.category_name is not None:
            result['CategoryName'] = self.category_name
        if self.description is not None:
            result['Description'] = self.description
        if self.properties is not None:
            result['Properties'] = self.properties.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('CategoryName') is not None:
            self.category_name = m.get('CategoryName')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Properties') is not None:
            temp_model = DescribeSchemaDetailResponseBodyResultResponsesProperties()
            self.properties = temp_model.from_map(m['Properties'])
        return self


class DescribeSchemaDetailResponseBodyResultSchema(TeaModel):
    def __init__(
        self,
        create_time: int = None,
        description: str = None,
        id: int = None,
        is_template: bool = None,
        name: str = None,
        update_time: int = None,
        version: int = None,
    ):
        self.create_time = create_time
        self.description = description
        self.id = id
        self.is_template = is_template
        self.name = name
        self.update_time = update_time
        self.version = version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.description is not None:
            result['Description'] = self.description
        if self.id is not None:
            result['Id'] = self.id
        if self.is_template is not None:
            result['IsTemplate'] = self.is_template
        if self.name is not None:
            result['Name'] = self.name
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('IsTemplate') is not None:
            self.is_template = m.get('IsTemplate')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class DescribeSchemaDetailResponseBodyResult(TeaModel):
    def __init__(
        self,
        responses: List[DescribeSchemaDetailResponseBodyResultResponses] = None,
        schema: DescribeSchemaDetailResponseBodyResultSchema = None,
    ):
        self.responses = responses
        self.schema = schema

    def validate(self):
        if self.responses:
            for k in self.responses:
                if k:
                    k.validate()
        if self.schema:
            self.schema.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Responses'] = []
        if self.responses is not None:
            for k in self.responses:
                result['Responses'].append(k.to_map() if k else None)
        if self.schema is not None:
            result['Schema'] = self.schema.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.responses = []
        if m.get('Responses') is not None:
            for k in m.get('Responses'):
                temp_model = DescribeSchemaDetailResponseBodyResultResponses()
                self.responses.append(temp_model.from_map(k))
        if m.get('Schema') is not None:
            temp_model = DescribeSchemaDetailResponseBodyResultSchema()
            self.schema = temp_model.from_map(m['Schema'])
        return self


class DescribeSchemaDetailResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: DescribeSchemaDetailResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeSchemaDetailResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class DescribeSchemaDetailResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeSchemaDetailResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeSchemaDetailResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeSmartContractJobStatusRequest(TeaModel):
    def __init__(
        self,
        job_id: str = None,
    ):
        # This parameter is required.
        self.job_id = job_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.job_id is not None:
            result['JobId'] = self.job_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        return self


class DescribeSmartContractJobStatusResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: str = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeSmartContractJobStatusResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeSmartContractJobStatusResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeSmartContractJobStatusResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeSmartContractJobsRequest(TeaModel):
    def __init__(
        self,
        size: int = None,
        start: int = None,
    ):
        # This parameter is required.
        self.size = size
        # This parameter is required.
        self.start = start

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.size is not None:
            result['Size'] = self.size
        if self.start is not None:
            result['Start'] = self.start
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Size') is not None:
            self.size = m.get('Size')
        if m.get('Start') is not None:
            self.start = m.get('Start')
        return self


class DescribeSmartContractJobsResponseBodyResultContent(TeaModel):
    def __init__(
        self,
        create_time: int = None,
        finished_time: int = None,
        job_id: str = None,
        name: str = None,
        source_type: str = None,
        status: str = None,
        user_bid: str = None,
        user_id: int = None,
    ):
        self.create_time = create_time
        self.finished_time = finished_time
        self.job_id = job_id
        self.name = name
        self.source_type = source_type
        self.status = status
        self.user_bid = user_bid
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.finished_time is not None:
            result['FinishedTime'] = self.finished_time
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.name is not None:
            result['Name'] = self.name
        if self.source_type is not None:
            result['SourceType'] = self.source_type
        if self.status is not None:
            result['Status'] = self.status
        if self.user_bid is not None:
            result['UserBid'] = self.user_bid
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('FinishedTime') is not None:
            self.finished_time = m.get('FinishedTime')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('SourceType') is not None:
            self.source_type = m.get('SourceType')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('UserBid') is not None:
            self.user_bid = m.get('UserBid')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class DescribeSmartContractJobsResponseBodyResult(TeaModel):
    def __init__(
        self,
        content: List[DescribeSmartContractJobsResponseBodyResultContent] = None,
        first: bool = None,
        last: bool = None,
        number_of_elements: int = None,
        size: int = None,
        total_elements: int = None,
        total_pages: int = None,
    ):
        self.content = content
        self.first = first
        self.last = last
        self.number_of_elements = number_of_elements
        self.size = size
        self.total_elements = total_elements
        self.total_pages = total_pages

    def validate(self):
        if self.content:
            for k in self.content:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Content'] = []
        if self.content is not None:
            for k in self.content:
                result['Content'].append(k.to_map() if k else None)
        if self.first is not None:
            result['First'] = self.first
        if self.last is not None:
            result['Last'] = self.last
        if self.number_of_elements is not None:
            result['NumberOfElements'] = self.number_of_elements
        if self.size is not None:
            result['Size'] = self.size
        if self.total_elements is not None:
            result['TotalElements'] = self.total_elements
        if self.total_pages is not None:
            result['TotalPages'] = self.total_pages
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.content = []
        if m.get('Content') is not None:
            for k in m.get('Content'):
                temp_model = DescribeSmartContractJobsResponseBodyResultContent()
                self.content.append(temp_model.from_map(k))
        if m.get('First') is not None:
            self.first = m.get('First')
        if m.get('Last') is not None:
            self.last = m.get('Last')
        if m.get('NumberOfElements') is not None:
            self.number_of_elements = m.get('NumberOfElements')
        if m.get('Size') is not None:
            self.size = m.get('Size')
        if m.get('TotalElements') is not None:
            self.total_elements = m.get('TotalElements')
        if m.get('TotalPages') is not None:
            self.total_pages = m.get('TotalPages')
        return self


class DescribeSmartContractJobsResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: DescribeSmartContractJobsResponseBodyResult = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeSmartContractJobsResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeSmartContractJobsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeSmartContractJobsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeSmartContractJobsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeSmartContractJobsByNameRequest(TeaModel):
    def __init__(
        self,
        name: str = None,
        size: int = None,
        start: int = None,
    ):
        self.name = name
        self.size = size
        # This parameter is required.
        self.start = start

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name is not None:
            result['Name'] = self.name
        if self.size is not None:
            result['Size'] = self.size
        if self.start is not None:
            result['Start'] = self.start
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Size') is not None:
            self.size = m.get('Size')
        if m.get('Start') is not None:
            self.start = m.get('Start')
        return self


class DescribeSmartContractJobsByNameResponseBodyResultContent(TeaModel):
    def __init__(
        self,
        create_time: int = None,
        finished_time: int = None,
        job_id: str = None,
        name: str = None,
        source_type: str = None,
        status: str = None,
        user_bid: str = None,
        user_id: str = None,
    ):
        self.create_time = create_time
        self.finished_time = finished_time
        self.job_id = job_id
        self.name = name
        self.source_type = source_type
        self.status = status
        self.user_bid = user_bid
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.finished_time is not None:
            result['FinishedTime'] = self.finished_time
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.name is not None:
            result['Name'] = self.name
        if self.source_type is not None:
            result['SourceType'] = self.source_type
        if self.status is not None:
            result['Status'] = self.status
        if self.user_bid is not None:
            result['UserBid'] = self.user_bid
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('FinishedTime') is not None:
            self.finished_time = m.get('FinishedTime')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('SourceType') is not None:
            self.source_type = m.get('SourceType')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('UserBid') is not None:
            self.user_bid = m.get('UserBid')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class DescribeSmartContractJobsByNameResponseBodyResult(TeaModel):
    def __init__(
        self,
        content: List[DescribeSmartContractJobsByNameResponseBodyResultContent] = None,
        first: bool = None,
        last: bool = None,
        number_of_elements: int = None,
        size: int = None,
        total_elements: int = None,
        total_pages: int = None,
    ):
        self.content = content
        self.first = first
        self.last = last
        self.number_of_elements = number_of_elements
        self.size = size
        self.total_elements = total_elements
        self.total_pages = total_pages

    def validate(self):
        if self.content:
            for k in self.content:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Content'] = []
        if self.content is not None:
            for k in self.content:
                result['Content'].append(k.to_map() if k else None)
        if self.first is not None:
            result['First'] = self.first
        if self.last is not None:
            result['Last'] = self.last
        if self.number_of_elements is not None:
            result['NumberOfElements'] = self.number_of_elements
        if self.size is not None:
            result['Size'] = self.size
        if self.total_elements is not None:
            result['TotalElements'] = self.total_elements
        if self.total_pages is not None:
            result['TotalPages'] = self.total_pages
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.content = []
        if m.get('Content') is not None:
            for k in m.get('Content'):
                temp_model = DescribeSmartContractJobsByNameResponseBodyResultContent()
                self.content.append(temp_model.from_map(k))
        if m.get('First') is not None:
            self.first = m.get('First')
        if m.get('Last') is not None:
            self.last = m.get('Last')
        if m.get('NumberOfElements') is not None:
            self.number_of_elements = m.get('NumberOfElements')
        if m.get('Size') is not None:
            self.size = m.get('Size')
        if m.get('TotalElements') is not None:
            self.total_elements = m.get('TotalElements')
        if m.get('TotalPages') is not None:
            self.total_pages = m.get('TotalPages')
        return self


class DescribeSmartContractJobsByNameResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: DescribeSmartContractJobsByNameResponseBodyResult = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeSmartContractJobsByNameResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeSmartContractJobsByNameResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeSmartContractJobsByNameResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeSmartContractJobsByNameResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeSmartContractResultRequest(TeaModel):
    def __init__(
        self,
        job_id: str = None,
    ):
        # This parameter is required.
        self.job_id = job_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.job_id is not None:
            result['JobId'] = self.job_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        return self


class DescribeSmartContractResultResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: str = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeSmartContractResultResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeSmartContractResultResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeSmartContractResultResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeSmartContractResultContentRequest(TeaModel):
    def __init__(
        self,
        job_id: str = None,
    ):
        # This parameter is required.
        self.job_id = job_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.job_id is not None:
            result['JobId'] = self.job_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        return self


class DescribeSmartContractResultContentResponseBodyResultDiagnosticsRange(TeaModel):
    def __init__(
        self,
        character: int = None,
        line: int = None,
    ):
        self.character = character
        self.line = line

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.character is not None:
            result['Character'] = self.character
        if self.line is not None:
            result['Line'] = self.line
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Character') is not None:
            self.character = m.get('Character')
        if m.get('Line') is not None:
            self.line = m.get('Line')
        return self


class DescribeSmartContractResultContentResponseBodyResultDiagnosticsTraceLocationRange(TeaModel):
    def __init__(
        self,
        character: int = None,
        line: int = None,
    ):
        self.character = character
        self.line = line

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.character is not None:
            result['Character'] = self.character
        if self.line is not None:
            result['Line'] = self.line
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Character') is not None:
            self.character = m.get('Character')
        if m.get('Line') is not None:
            self.line = m.get('Line')
        return self


class DescribeSmartContractResultContentResponseBodyResultDiagnosticsTraceLocation(TeaModel):
    def __init__(
        self,
        range: List[DescribeSmartContractResultContentResponseBodyResultDiagnosticsTraceLocationRange] = None,
        uri: str = None,
    ):
        self.range = range
        self.uri = uri

    def validate(self):
        if self.range:
            for k in self.range:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Range'] = []
        if self.range is not None:
            for k in self.range:
                result['Range'].append(k.to_map() if k else None)
        if self.uri is not None:
            result['Uri'] = self.uri
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.range = []
        if m.get('Range') is not None:
            for k in m.get('Range'):
                temp_model = DescribeSmartContractResultContentResponseBodyResultDiagnosticsTraceLocationRange()
                self.range.append(temp_model.from_map(k))
        if m.get('Uri') is not None:
            self.uri = m.get('Uri')
        return self


class DescribeSmartContractResultContentResponseBodyResultDiagnosticsTrace(TeaModel):
    def __init__(
        self,
        location: DescribeSmartContractResultContentResponseBodyResultDiagnosticsTraceLocation = None,
        message: str = None,
    ):
        self.location = location
        self.message = message

    def validate(self):
        if self.location:
            self.location.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.location is not None:
            result['Location'] = self.location.to_map()
        if self.message is not None:
            result['Message'] = self.message
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Location') is not None:
            temp_model = DescribeSmartContractResultContentResponseBodyResultDiagnosticsTraceLocation()
            self.location = temp_model.from_map(m['Location'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        return self


class DescribeSmartContractResultContentResponseBodyResultDiagnostics(TeaModel):
    def __init__(
        self,
        advice: str = None,
        code: str = None,
        detail: str = None,
        message: str = None,
        range: List[DescribeSmartContractResultContentResponseBodyResultDiagnosticsRange] = None,
        severity: int = None,
        source: str = None,
        trace: List[DescribeSmartContractResultContentResponseBodyResultDiagnosticsTrace] = None,
    ):
        self.advice = advice
        self.code = code
        self.detail = detail
        self.message = message
        self.range = range
        self.severity = severity
        self.source = source
        self.trace = trace

    def validate(self):
        if self.range:
            for k in self.range:
                if k:
                    k.validate()
        if self.trace:
            for k in self.trace:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.advice is not None:
            result['Advice'] = self.advice
        if self.code is not None:
            result['Code'] = self.code
        if self.detail is not None:
            result['Detail'] = self.detail
        if self.message is not None:
            result['Message'] = self.message
        result['Range'] = []
        if self.range is not None:
            for k in self.range:
                result['Range'].append(k.to_map() if k else None)
        if self.severity is not None:
            result['Severity'] = self.severity
        if self.source is not None:
            result['Source'] = self.source
        result['Trace'] = []
        if self.trace is not None:
            for k in self.trace:
                result['Trace'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Advice') is not None:
            self.advice = m.get('Advice')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Detail') is not None:
            self.detail = m.get('Detail')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        self.range = []
        if m.get('Range') is not None:
            for k in m.get('Range'):
                temp_model = DescribeSmartContractResultContentResponseBodyResultDiagnosticsRange()
                self.range.append(temp_model.from_map(k))
        if m.get('Severity') is not None:
            self.severity = m.get('Severity')
        if m.get('Source') is not None:
            self.source = m.get('Source')
        self.trace = []
        if m.get('Trace') is not None:
            for k in m.get('Trace'):
                temp_model = DescribeSmartContractResultContentResponseBodyResultDiagnosticsTrace()
                self.trace.append(temp_model.from_map(k))
        return self


class DescribeSmartContractResultContentResponseBodyResult(TeaModel):
    def __init__(
        self,
        diagnostics: List[DescribeSmartContractResultContentResponseBodyResultDiagnostics] = None,
        uri: str = None,
    ):
        self.diagnostics = diagnostics
        self.uri = uri

    def validate(self):
        if self.diagnostics:
            for k in self.diagnostics:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Diagnostics'] = []
        if self.diagnostics is not None:
            for k in self.diagnostics:
                result['Diagnostics'].append(k.to_map() if k else None)
        if self.uri is not None:
            result['Uri'] = self.uri
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.diagnostics = []
        if m.get('Diagnostics') is not None:
            for k in m.get('Diagnostics'):
                temp_model = DescribeSmartContractResultContentResponseBodyResultDiagnostics()
                self.diagnostics.append(temp_model.from_map(k))
        if m.get('Uri') is not None:
            self.uri = m.get('Uri')
        return self


class DescribeSmartContractResultContentResponseBody(TeaModel):
    def __init__(
        self,
        dynamic_code: str = None,
        dynamic_message: str = None,
        error_code: int = None,
        request_id: str = None,
        result: List[DescribeSmartContractResultContentResponseBodyResult] = None,
        success: bool = None,
    ):
        self.dynamic_code = dynamic_code
        self.dynamic_message = dynamic_message
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dynamic_code is not None:
            result['DynamicCode'] = self.dynamic_code
        if self.dynamic_message is not None:
            result['DynamicMessage'] = self.dynamic_message
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DynamicCode') is not None:
            self.dynamic_code = m.get('DynamicCode')
        if m.get('DynamicMessage') is not None:
            self.dynamic_message = m.get('DynamicMessage')
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = DescribeSmartContractResultContentResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeSmartContractResultContentResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeSmartContractResultContentResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeSmartContractResultContentResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeSubscribeCloudServiceIntegrationStateRequest(TeaModel):
    def __init__(
        self,
        organization_id: str = None,
    ):
        # This parameter is required.
        self.organization_id = organization_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        return self


class DescribeSubscribeCloudServiceIntegrationStateResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: str = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeSubscribeCloudServiceIntegrationStateResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeSubscribeCloudServiceIntegrationStateResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeSubscribeCloudServiceIntegrationStateResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeTasksResponseBodyResult(TeaModel):
    def __init__(
        self,
        action: str = None,
        assignee: str = None,
        handled: bool = None,
        operation_type: str = None,
        request_time: int = None,
        response_time: str = None,
        result: str = None,
        sender: str = None,
        target: str = None,
        task_id: int = None,
        task_state: str = None,
    ):
        self.action = action
        self.assignee = assignee
        self.handled = handled
        self.operation_type = operation_type
        self.request_time = request_time
        self.response_time = response_time
        self.result = result
        self.sender = sender
        self.target = target
        self.task_id = task_id
        self.task_state = task_state

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.action is not None:
            result['Action'] = self.action
        if self.assignee is not None:
            result['Assignee'] = self.assignee
        if self.handled is not None:
            result['Handled'] = self.handled
        if self.operation_type is not None:
            result['OperationType'] = self.operation_type
        if self.request_time is not None:
            result['RequestTime'] = self.request_time
        if self.response_time is not None:
            result['ResponseTime'] = self.response_time
        if self.result is not None:
            result['Result'] = self.result
        if self.sender is not None:
            result['Sender'] = self.sender
        if self.target is not None:
            result['Target'] = self.target
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.task_state is not None:
            result['TaskState'] = self.task_state
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Action') is not None:
            self.action = m.get('Action')
        if m.get('Assignee') is not None:
            self.assignee = m.get('Assignee')
        if m.get('Handled') is not None:
            self.handled = m.get('Handled')
        if m.get('OperationType') is not None:
            self.operation_type = m.get('OperationType')
        if m.get('RequestTime') is not None:
            self.request_time = m.get('RequestTime')
        if m.get('ResponseTime') is not None:
            self.response_time = m.get('ResponseTime')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        if m.get('Sender') is not None:
            self.sender = m.get('Sender')
        if m.get('Target') is not None:
            self.target = m.get('Target')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('TaskState') is not None:
            self.task_state = m.get('TaskState')
        return self


class DescribeTasksResponseBody(TeaModel):
    def __init__(
        self,
        dynamic_code: str = None,
        dynamic_message: str = None,
        error_code: int = None,
        request_id: str = None,
        result: List[DescribeTasksResponseBodyResult] = None,
        success: bool = None,
    ):
        self.dynamic_code = dynamic_code
        self.dynamic_message = dynamic_message
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dynamic_code is not None:
            result['DynamicCode'] = self.dynamic_code
        if self.dynamic_message is not None:
            result['DynamicMessage'] = self.dynamic_message
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DynamicCode') is not None:
            self.dynamic_code = m.get('DynamicCode')
        if m.get('DynamicMessage') is not None:
            self.dynamic_message = m.get('DynamicMessage')
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = DescribeTasksResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeTasksResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeTasksResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeTasksResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeTemplatesResponseBodyResultSchemaList(TeaModel):
    def __init__(
        self,
        create_time: int = None,
        description: str = None,
        id: int = None,
        is_template: int = None,
        name: str = None,
        update_time: int = None,
        version: int = None,
    ):
        self.create_time = create_time
        self.description = description
        self.id = id
        self.is_template = is_template
        self.name = name
        self.update_time = update_time
        self.version = version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.description is not None:
            result['Description'] = self.description
        if self.id is not None:
            result['Id'] = self.id
        if self.is_template is not None:
            result['IsTemplate'] = self.is_template
        if self.name is not None:
            result['Name'] = self.name
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('IsTemplate') is not None:
            self.is_template = m.get('IsTemplate')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class DescribeTemplatesResponseBodyResult(TeaModel):
    def __init__(
        self,
        schema_list: List[DescribeTemplatesResponseBodyResultSchemaList] = None,
    ):
        self.schema_list = schema_list

    def validate(self):
        if self.schema_list:
            for k in self.schema_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['SchemaList'] = []
        if self.schema_list is not None:
            for k in self.schema_list:
                result['SchemaList'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.schema_list = []
        if m.get('SchemaList') is not None:
            for k in m.get('SchemaList'):
                temp_model = DescribeTemplatesResponseBodyResultSchemaList()
                self.schema_list.append(temp_model.from_map(k))
        return self


class DescribeTemplatesResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: DescribeTemplatesResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeTemplatesResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class DescribeTemplatesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeTemplatesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeTemplatesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeTransactionRequest(TeaModel):
    def __init__(
        self,
        bizid: str = None,
        hash: str = None,
    ):
        self.bizid = bizid
        self.hash = hash

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        if self.hash is not None:
            result['Hash'] = self.hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        if m.get('Hash') is not None:
            self.hash = m.get('Hash')
        return self


class DescribeTransactionResponseBodyResultTransactionV10(TeaModel):
    def __init__(
        self,
        data: str = None,
        extentions: List[str] = None,
        from_: str = None,
        gas: str = None,
        hash: str = None,
        nonce: str = None,
        period: int = None,
        signature_list: List[str] = None,
        timestamp: int = None,
        to: str = None,
        tx_type: str = None,
        value: str = None,
    ):
        self.data = data
        self.extentions = extentions
        self.from_ = from_
        self.gas = gas
        self.hash = hash
        self.nonce = nonce
        self.period = period
        self.signature_list = signature_list
        self.timestamp = timestamp
        self.to = to
        self.tx_type = tx_type
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data
        if self.extentions is not None:
            result['Extentions'] = self.extentions
        if self.from_ is not None:
            result['From'] = self.from_
        if self.gas is not None:
            result['Gas'] = self.gas
        if self.hash is not None:
            result['Hash'] = self.hash
        if self.nonce is not None:
            result['Nonce'] = self.nonce
        if self.period is not None:
            result['Period'] = self.period
        if self.signature_list is not None:
            result['SignatureList'] = self.signature_list
        if self.timestamp is not None:
            result['Timestamp'] = self.timestamp
        if self.to is not None:
            result['To'] = self.to
        if self.tx_type is not None:
            result['TxType'] = self.tx_type
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Extentions') is not None:
            self.extentions = m.get('Extentions')
        if m.get('From') is not None:
            self.from_ = m.get('From')
        if m.get('Gas') is not None:
            self.gas = m.get('Gas')
        if m.get('Hash') is not None:
            self.hash = m.get('Hash')
        if m.get('Nonce') is not None:
            self.nonce = m.get('Nonce')
        if m.get('Period') is not None:
            self.period = m.get('Period')
        if m.get('SignatureList') is not None:
            self.signature_list = m.get('SignatureList')
        if m.get('Timestamp') is not None:
            self.timestamp = m.get('Timestamp')
        if m.get('To') is not None:
            self.to = m.get('To')
        if m.get('TxType') is not None:
            self.tx_type = m.get('TxType')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class DescribeTransactionResponseBodyResult(TeaModel):
    def __init__(
        self,
        block_hash: str = None,
        block_height: int = None,
        block_version: int = None,
        category: int = None,
        content: str = None,
        content_hash: str = None,
        create_time: int = None,
        hash: str = None,
        key_name: str = None,
        key_wrap: str = None,
        nonce: str = None,
        reference_count: int = None,
        reference_list: List[str] = None,
        trans_type_v6: str = None,
        transaction_v10: DescribeTransactionResponseBodyResultTransactionV10 = None,
    ):
        self.block_hash = block_hash
        self.block_height = block_height
        self.block_version = block_version
        self.category = category
        self.content = content
        self.content_hash = content_hash
        self.create_time = create_time
        self.hash = hash
        self.key_name = key_name
        self.key_wrap = key_wrap
        self.nonce = nonce
        self.reference_count = reference_count
        self.reference_list = reference_list
        self.trans_type_v6 = trans_type_v6
        self.transaction_v10 = transaction_v10

    def validate(self):
        if self.transaction_v10:
            self.transaction_v10.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.block_hash is not None:
            result['BlockHash'] = self.block_hash
        if self.block_height is not None:
            result['BlockHeight'] = self.block_height
        if self.block_version is not None:
            result['BlockVersion'] = self.block_version
        if self.category is not None:
            result['Category'] = self.category
        if self.content is not None:
            result['Content'] = self.content
        if self.content_hash is not None:
            result['ContentHash'] = self.content_hash
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.hash is not None:
            result['Hash'] = self.hash
        if self.key_name is not None:
            result['KeyName'] = self.key_name
        if self.key_wrap is not None:
            result['KeyWrap'] = self.key_wrap
        if self.nonce is not None:
            result['Nonce'] = self.nonce
        if self.reference_count is not None:
            result['ReferenceCount'] = self.reference_count
        if self.reference_list is not None:
            result['ReferenceList'] = self.reference_list
        if self.trans_type_v6 is not None:
            result['TransTypeV6'] = self.trans_type_v6
        if self.transaction_v10 is not None:
            result['TransactionV10'] = self.transaction_v10.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BlockHash') is not None:
            self.block_hash = m.get('BlockHash')
        if m.get('BlockHeight') is not None:
            self.block_height = m.get('BlockHeight')
        if m.get('BlockVersion') is not None:
            self.block_version = m.get('BlockVersion')
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('ContentHash') is not None:
            self.content_hash = m.get('ContentHash')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Hash') is not None:
            self.hash = m.get('Hash')
        if m.get('KeyName') is not None:
            self.key_name = m.get('KeyName')
        if m.get('KeyWrap') is not None:
            self.key_wrap = m.get('KeyWrap')
        if m.get('Nonce') is not None:
            self.nonce = m.get('Nonce')
        if m.get('ReferenceCount') is not None:
            self.reference_count = m.get('ReferenceCount')
        if m.get('ReferenceList') is not None:
            self.reference_list = m.get('ReferenceList')
        if m.get('TransTypeV6') is not None:
            self.trans_type_v6 = m.get('TransTypeV6')
        if m.get('TransactionV10') is not None:
            temp_model = DescribeTransactionResponseBodyResultTransactionV10()
            self.transaction_v10 = temp_model.from_map(m['TransactionV10'])
        return self


class DescribeTransactionResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: DescribeTransactionResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeTransactionResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class DescribeTransactionResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeTransactionResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeTransactionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeTransactionFor2CBrowserRequest(TeaModel):
    def __init__(
        self,
        alipay_auth_code: str = None,
        bizid: str = None,
        hash: str = None,
    ):
        # This parameter is required.
        self.alipay_auth_code = alipay_auth_code
        # This parameter is required.
        self.bizid = bizid
        # This parameter is required.
        self.hash = hash

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alipay_auth_code is not None:
            result['AlipayAuthCode'] = self.alipay_auth_code
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        if self.hash is not None:
            result['Hash'] = self.hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AlipayAuthCode') is not None:
            self.alipay_auth_code = m.get('AlipayAuthCode')
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        if m.get('Hash') is not None:
            self.hash = m.get('Hash')
        return self


class DescribeTransactionFor2CBrowserResponseBodyResultTransactionV10(TeaModel):
    def __init__(
        self,
        data: str = None,
        extentions: List[str] = None,
        from_: str = None,
        gas: str = None,
        hash: str = None,
        nonce: str = None,
        period: int = None,
        signature_list: List[str] = None,
        timestamp: int = None,
        to: str = None,
        tx_type: str = None,
        value: str = None,
    ):
        self.data = data
        self.extentions = extentions
        self.from_ = from_
        self.gas = gas
        self.hash = hash
        self.nonce = nonce
        self.period = period
        self.signature_list = signature_list
        self.timestamp = timestamp
        self.to = to
        self.tx_type = tx_type
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data
        if self.extentions is not None:
            result['Extentions'] = self.extentions
        if self.from_ is not None:
            result['From'] = self.from_
        if self.gas is not None:
            result['Gas'] = self.gas
        if self.hash is not None:
            result['Hash'] = self.hash
        if self.nonce is not None:
            result['Nonce'] = self.nonce
        if self.period is not None:
            result['Period'] = self.period
        if self.signature_list is not None:
            result['SignatureList'] = self.signature_list
        if self.timestamp is not None:
            result['Timestamp'] = self.timestamp
        if self.to is not None:
            result['To'] = self.to
        if self.tx_type is not None:
            result['TxType'] = self.tx_type
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Extentions') is not None:
            self.extentions = m.get('Extentions')
        if m.get('From') is not None:
            self.from_ = m.get('From')
        if m.get('Gas') is not None:
            self.gas = m.get('Gas')
        if m.get('Hash') is not None:
            self.hash = m.get('Hash')
        if m.get('Nonce') is not None:
            self.nonce = m.get('Nonce')
        if m.get('Period') is not None:
            self.period = m.get('Period')
        if m.get('SignatureList') is not None:
            self.signature_list = m.get('SignatureList')
        if m.get('Timestamp') is not None:
            self.timestamp = m.get('Timestamp')
        if m.get('To') is not None:
            self.to = m.get('To')
        if m.get('TxType') is not None:
            self.tx_type = m.get('TxType')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class DescribeTransactionFor2CBrowserResponseBodyResult(TeaModel):
    def __init__(
        self,
        block_hash: str = None,
        block_height: int = None,
        block_version: int = None,
        category: int = None,
        content: str = None,
        content_hash: str = None,
        create_time: int = None,
        hash: str = None,
        key_name: str = None,
        key_wrap: str = None,
        nonce: str = None,
        reference_count: int = None,
        reference_list: List[str] = None,
        trans_type_v6: str = None,
        transaction_v10: DescribeTransactionFor2CBrowserResponseBodyResultTransactionV10 = None,
    ):
        self.block_hash = block_hash
        self.block_height = block_height
        self.block_version = block_version
        self.category = category
        self.content = content
        self.content_hash = content_hash
        self.create_time = create_time
        self.hash = hash
        self.key_name = key_name
        self.key_wrap = key_wrap
        self.nonce = nonce
        self.reference_count = reference_count
        self.reference_list = reference_list
        self.trans_type_v6 = trans_type_v6
        self.transaction_v10 = transaction_v10

    def validate(self):
        if self.transaction_v10:
            self.transaction_v10.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.block_hash is not None:
            result['BlockHash'] = self.block_hash
        if self.block_height is not None:
            result['BlockHeight'] = self.block_height
        if self.block_version is not None:
            result['BlockVersion'] = self.block_version
        if self.category is not None:
            result['Category'] = self.category
        if self.content is not None:
            result['Content'] = self.content
        if self.content_hash is not None:
            result['ContentHash'] = self.content_hash
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.hash is not None:
            result['Hash'] = self.hash
        if self.key_name is not None:
            result['KeyName'] = self.key_name
        if self.key_wrap is not None:
            result['KeyWrap'] = self.key_wrap
        if self.nonce is not None:
            result['Nonce'] = self.nonce
        if self.reference_count is not None:
            result['ReferenceCount'] = self.reference_count
        if self.reference_list is not None:
            result['ReferenceList'] = self.reference_list
        if self.trans_type_v6 is not None:
            result['TransTypeV6'] = self.trans_type_v6
        if self.transaction_v10 is not None:
            result['TransactionV10'] = self.transaction_v10.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BlockHash') is not None:
            self.block_hash = m.get('BlockHash')
        if m.get('BlockHeight') is not None:
            self.block_height = m.get('BlockHeight')
        if m.get('BlockVersion') is not None:
            self.block_version = m.get('BlockVersion')
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('ContentHash') is not None:
            self.content_hash = m.get('ContentHash')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Hash') is not None:
            self.hash = m.get('Hash')
        if m.get('KeyName') is not None:
            self.key_name = m.get('KeyName')
        if m.get('KeyWrap') is not None:
            self.key_wrap = m.get('KeyWrap')
        if m.get('Nonce') is not None:
            self.nonce = m.get('Nonce')
        if m.get('ReferenceCount') is not None:
            self.reference_count = m.get('ReferenceCount')
        if m.get('ReferenceList') is not None:
            self.reference_list = m.get('ReferenceList')
        if m.get('TransTypeV6') is not None:
            self.trans_type_v6 = m.get('TransTypeV6')
        if m.get('TransactionV10') is not None:
            temp_model = DescribeTransactionFor2CBrowserResponseBodyResultTransactionV10()
            self.transaction_v10 = temp_model.from_map(m['TransactionV10'])
        return self


class DescribeTransactionFor2CBrowserResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: DescribeTransactionFor2CBrowserResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeTransactionFor2CBrowserResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class DescribeTransactionFor2CBrowserResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeTransactionFor2CBrowserResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeTransactionFor2CBrowserResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeTransactionQRCodeRequest(TeaModel):
    def __init__(
        self,
        bizid: str = None,
        hash: str = None,
    ):
        self.bizid = bizid
        self.hash = hash

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        if self.hash is not None:
            result['Hash'] = self.hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        if m.get('Hash') is not None:
            self.hash = m.get('Hash')
        return self


class DescribeTransactionQRCodeResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: str = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class DescribeTransactionQRCodeResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeTransactionQRCodeResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeTransactionQRCodeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeTransactionReceiptFor2CBrowserRequest(TeaModel):
    def __init__(
        self,
        alipay_auth_code: str = None,
        bizid: str = None,
        hash: str = None,
    ):
        self.alipay_auth_code = alipay_auth_code
        self.bizid = bizid
        self.hash = hash

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alipay_auth_code is not None:
            result['AlipayAuthCode'] = self.alipay_auth_code
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        if self.hash is not None:
            result['Hash'] = self.hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AlipayAuthCode') is not None:
            self.alipay_auth_code = m.get('AlipayAuthCode')
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        if m.get('Hash') is not None:
            self.hash = m.get('Hash')
        return self


class DescribeTransactionReceiptFor2CBrowserResponseBodyResult(TeaModel):
    def __init__(
        self,
        data: str = None,
        gas_used: str = None,
        logs: List[str] = None,
        result: int = None,
    ):
        self.data = data
        self.gas_used = gas_used
        self.logs = logs
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data
        if self.gas_used is not None:
            result['GasUsed'] = self.gas_used
        if self.logs is not None:
            result['Logs'] = self.logs
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('GasUsed') is not None:
            self.gas_used = m.get('GasUsed')
        if m.get('Logs') is not None:
            self.logs = m.get('Logs')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class DescribeTransactionReceiptFor2CBrowserResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: DescribeTransactionReceiptFor2CBrowserResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeTransactionReceiptFor2CBrowserResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class DescribeTransactionReceiptFor2CBrowserResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeTransactionReceiptFor2CBrowserResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeTransactionReceiptFor2CBrowserResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeTriggerRequest(TeaModel):
    def __init__(
        self,
        channel_id: str = None,
        name: str = None,
        organization_id: str = None,
    ):
        # This parameter is required.
        self.channel_id = channel_id
        # This parameter is required.
        self.name = name
        # This parameter is required.
        self.organization_id = organization_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.name is not None:
            result['Name'] = self.name
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        return self


class DescribeTriggerResponseBodyResultCheckpoint(TeaModel):
    def __init__(
        self,
        error_count: int = None,
        height: int = None,
        index: int = None,
        type: str = None,
    ):
        self.error_count = error_count
        self.height = height
        self.index = index
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_count is not None:
            result['ErrorCount'] = self.error_count
        if self.height is not None:
            result['Height'] = self.height
        if self.index is not None:
            result['Index'] = self.index
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCount') is not None:
            self.error_count = m.get('ErrorCount')
        if m.get('Height') is not None:
            self.height = m.get('Height')
        if m.get('Index') is not None:
            self.index = m.get('Index')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class DescribeTriggerResponseBodyResult(TeaModel):
    def __init__(
        self,
        channel_id: str = None,
        channel_name: str = None,
        checkpoint: DescribeTriggerResponseBodyResultCheckpoint = None,
        create_time: int = None,
        error_message: str = None,
        name: str = None,
        options: str = None,
        source: str = None,
        status: int = None,
        type: str = None,
    ):
        self.channel_id = channel_id
        self.channel_name = channel_name
        self.checkpoint = checkpoint
        self.create_time = create_time
        self.error_message = error_message
        self.name = name
        self.options = options
        self.source = source
        self.status = status
        self.type = type

    def validate(self):
        if self.checkpoint:
            self.checkpoint.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.channel_name is not None:
            result['ChannelName'] = self.channel_name
        if self.checkpoint is not None:
            result['Checkpoint'] = self.checkpoint.to_map()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.name is not None:
            result['Name'] = self.name
        if self.options is not None:
            result['Options'] = self.options
        if self.source is not None:
            result['Source'] = self.source
        if self.status is not None:
            result['Status'] = self.status
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('ChannelName') is not None:
            self.channel_name = m.get('ChannelName')
        if m.get('Checkpoint') is not None:
            temp_model = DescribeTriggerResponseBodyResultCheckpoint()
            self.checkpoint = temp_model.from_map(m['Checkpoint'])
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Options') is not None:
            self.options = m.get('Options')
        if m.get('Source') is not None:
            self.source = m.get('Source')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class DescribeTriggerResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: DescribeTriggerResponseBodyResult = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DescribeTriggerResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeTriggerResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeTriggerResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeTriggerResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DestroyConsortiumRequest(TeaModel):
    def __init__(
        self,
        consortium_id: str = None,
    ):
        # This parameter is required.
        self.consortium_id = consortium_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        return self


class DestroyConsortiumResponseBodyResult(TeaModel):
    def __init__(
        self,
        consortium_id: str = None,
        name: str = None,
    ):
        self.consortium_id = consortium_id
        self.name = name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.name is not None:
            result['Name'] = self.name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        return self


class DestroyConsortiumResponseBody(TeaModel):
    def __init__(
        self,
        dynamic_code: str = None,
        dynamic_message: str = None,
        error_code: int = None,
        request_id: str = None,
        result: DestroyConsortiumResponseBodyResult = None,
        success: bool = None,
    ):
        self.dynamic_code = dynamic_code
        self.dynamic_message = dynamic_message
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dynamic_code is not None:
            result['DynamicCode'] = self.dynamic_code
        if self.dynamic_message is not None:
            result['DynamicMessage'] = self.dynamic_message
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DynamicCode') is not None:
            self.dynamic_code = m.get('DynamicCode')
        if m.get('DynamicMessage') is not None:
            self.dynamic_message = m.get('DynamicMessage')
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DestroyConsortiumResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DestroyConsortiumResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DestroyConsortiumResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DestroyConsortiumResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DestroyEthereumRequest(TeaModel):
    def __init__(
        self,
        ethereum_id: str = None,
    ):
        # This parameter is required.
        self.ethereum_id = ethereum_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ethereum_id is not None:
            result['EthereumId'] = self.ethereum_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EthereumId') is not None:
            self.ethereum_id = m.get('EthereumId')
        return self


class DestroyEthereumResponseBodyResult(TeaModel):
    def __init__(
        self,
        consensus: str = None,
        creator: str = None,
        description: str = None,
        id: str = None,
        name: str = None,
        network_id: str = None,
        region_id: str = None,
        state: str = None,
    ):
        self.consensus = consensus
        self.creator = creator
        self.description = description
        self.id = id
        self.name = name
        self.network_id = network_id
        self.region_id = region_id
        self.state = state

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.consensus is not None:
            result['Consensus'] = self.consensus
        if self.creator is not None:
            result['Creator'] = self.creator
        if self.description is not None:
            result['Description'] = self.description
        if self.id is not None:
            result['Id'] = self.id
        if self.name is not None:
            result['Name'] = self.name
        if self.network_id is not None:
            result['NetworkId'] = self.network_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.state is not None:
            result['State'] = self.state
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Consensus') is not None:
            self.consensus = m.get('Consensus')
        if m.get('Creator') is not None:
            self.creator = m.get('Creator')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('NetworkId') is not None:
            self.network_id = m.get('NetworkId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('State') is not None:
            self.state = m.get('State')
        return self


class DestroyEthereumResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: DestroyEthereumResponseBodyResult = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DestroyEthereumResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DestroyEthereumResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DestroyEthereumResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DestroyEthereumResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DestroyOrganizationRequest(TeaModel):
    def __init__(
        self,
        organization_id: str = None,
    ):
        # This parameter is required.
        self.organization_id = organization_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        return self


class DestroyOrganizationResponseBodyResult(TeaModel):
    def __init__(
        self,
        name: str = None,
        organization_id: str = None,
    ):
        self.name = name
        self.organization_id = organization_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name is not None:
            result['Name'] = self.name
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        return self


class DestroyOrganizationResponseBody(TeaModel):
    def __init__(
        self,
        dynamic_code: str = None,
        dynamic_message: str = None,
        error_code: int = None,
        request_id: str = None,
        result: DestroyOrganizationResponseBodyResult = None,
        success: bool = None,
    ):
        self.dynamic_code = dynamic_code
        self.dynamic_message = dynamic_message
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dynamic_code is not None:
            result['DynamicCode'] = self.dynamic_code
        if self.dynamic_message is not None:
            result['DynamicMessage'] = self.dynamic_message
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DynamicCode') is not None:
            self.dynamic_code = m.get('DynamicCode')
        if m.get('DynamicMessage') is not None:
            self.dynamic_message = m.get('DynamicMessage')
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DestroyOrganizationResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DestroyOrganizationResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DestroyOrganizationResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DestroyOrganizationResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DownloadAllRequest(TeaModel):
    def __init__(
        self,
        bizid: str = None,
    ):
        self.bizid = bizid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        return self


class DownloadAllResponseBodyResult(TeaModel):
    def __init__(
        self,
        bizview_url: str = None,
        cert_url: str = None,
        sdk_url: str = None,
    ):
        self.bizview_url = bizview_url
        self.cert_url = cert_url
        self.sdk_url = sdk_url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizview_url is not None:
            result['BizviewUrl'] = self.bizview_url
        if self.cert_url is not None:
            result['CertUrl'] = self.cert_url
        if self.sdk_url is not None:
            result['SdkUrl'] = self.sdk_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizviewUrl') is not None:
            self.bizview_url = m.get('BizviewUrl')
        if m.get('CertUrl') is not None:
            self.cert_url = m.get('CertUrl')
        if m.get('SdkUrl') is not None:
            self.sdk_url = m.get('SdkUrl')
        return self


class DownloadAllResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: DownloadAllResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DownloadAllResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class DownloadAllResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DownloadAllResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DownloadAllResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DownloadBizviewRequest(TeaModel):
    def __init__(
        self,
        bizid: str = None,
    ):
        self.bizid = bizid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        return self


class DownloadBizviewResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: str = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class DownloadBizviewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DownloadBizviewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DownloadBizviewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DownloadFabricChannelSDKRequest(TeaModel):
    def __init__(
        self,
        channel_id: str = None,
        location: str = None,
        organization_id: str = None,
        username: str = None,
    ):
        self.channel_id = channel_id
        self.location = location
        # This parameter is required.
        self.organization_id = organization_id
        # This parameter is required.
        self.username = username

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.location is not None:
            result['Location'] = self.location
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        if self.username is not None:
            result['Username'] = self.username
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('Location') is not None:
            self.location = m.get('Location')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        if m.get('Username') is not None:
            self.username = m.get('Username')
        return self


class DownloadFabricChannelSDKResponseBodyResult(TeaModel):
    def __init__(
        self,
        content: str = None,
        path: str = None,
    ):
        self.content = content
        self.path = path

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['Content'] = self.content
        if self.path is not None:
            result['Path'] = self.path
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('Path') is not None:
            self.path = m.get('Path')
        return self


class DownloadFabricChannelSDKResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: List[DownloadFabricChannelSDKResponseBodyResult] = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = DownloadFabricChannelSDKResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DownloadFabricChannelSDKResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DownloadFabricChannelSDKResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DownloadFabricChannelSDKResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DownloadOrganizationSDKRequest(TeaModel):
    def __init__(
        self,
        location: str = None,
        organization_id: str = None,
        username: str = None,
    ):
        self.location = location
        # This parameter is required.
        self.organization_id = organization_id
        self.username = username

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.location is not None:
            result['Location'] = self.location
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        if self.username is not None:
            result['Username'] = self.username
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Location') is not None:
            self.location = m.get('Location')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        if m.get('Username') is not None:
            self.username = m.get('Username')
        return self


class DownloadOrganizationSDKResponseBodyResult(TeaModel):
    def __init__(
        self,
        content: str = None,
        path: str = None,
    ):
        self.content = content
        self.path = path

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['Content'] = self.content
        if self.path is not None:
            result['Path'] = self.path
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('Path') is not None:
            self.path = m.get('Path')
        return self


class DownloadOrganizationSDKResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: List[DownloadOrganizationSDKResponseBodyResult] = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = DownloadOrganizationSDKResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DownloadOrganizationSDKResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DownloadOrganizationSDKResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DownloadOrganizationSDKResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DownloadSDK2Request(TeaModel):
    def __init__(
        self,
        bizid: str = None,
    ):
        self.bizid = bizid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        return self


class DownloadSDK2ResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: str = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class DownloadSDK2Response(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DownloadSDK2ResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DownloadSDK2ResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DownloadSdkRequest(TeaModel):
    def __init__(
        self,
        bizid: str = None,
    ):
        self.bizid = bizid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        return self


class DownloadSdkResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: str = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class DownloadSdkResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DownloadSdkResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DownloadSdkResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DownloadSignedDataRequest(TeaModel):
    def __init__(
        self,
        bizid: str = None,
        path: str = None,
    ):
        self.bizid = bizid
        self.path = path

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        if self.path is not None:
            result['Path'] = self.path
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        if m.get('Path') is not None:
            self.path = m.get('Path')
        return self


class DownloadSignedDataResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: str = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class DownloadSignedDataResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DownloadSignedDataResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DownloadSignedDataResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DuplicateAntChainContractProjectRequest(TeaModel):
    def __init__(
        self,
        description: str = None,
        name: str = None,
        project_id: str = None,
        project_version: str = None,
    ):
        self.description = description
        self.name = name
        self.project_id = project_id
        self.project_version = project_version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.project_id is not None:
            result['ProjectId'] = self.project_id
        if self.project_version is not None:
            result['ProjectVersion'] = self.project_version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('ProjectId') is not None:
            self.project_id = m.get('ProjectId')
        if m.get('ProjectVersion') is not None:
            self.project_version = m.get('ProjectVersion')
        return self


class DuplicateAntChainContractProjectResponseBodyResult(TeaModel):
    def __init__(
        self,
        consortium_id: str = None,
        description: str = None,
        gmt_create: int = None,
        gmt_modified: int = None,
        id: str = None,
        name: str = None,
        version: str = None,
    ):
        self.consortium_id = consortium_id
        self.description = description
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.id = id
        self.name = name
        self.version = version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.description is not None:
            result['Description'] = self.description
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.name is not None:
            result['Name'] = self.name
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class DuplicateAntChainContractProjectResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: DuplicateAntChainContractProjectResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = DuplicateAntChainContractProjectResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class DuplicateAntChainContractProjectResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DuplicateAntChainContractProjectResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DuplicateAntChainContractProjectResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FreezeAccountRequest(TeaModel):
    def __init__(
        self,
        account: str = None,
        bizid: str = None,
    ):
        self.account = account
        self.bizid = bizid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account is not None:
            result['Account'] = self.account
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Account') is not None:
            self.account = m.get('Account')
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        return self


class FreezeAccountResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: str = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class FreezeAccountResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: FreezeAccountResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FreezeAccountResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FreezeAntChainAccountRequest(TeaModel):
    def __init__(
        self,
        account: str = None,
        ant_chain_id: str = None,
    ):
        # This parameter is required.
        self.account = account
        # This parameter is required.
        self.ant_chain_id = ant_chain_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account is not None:
            result['Account'] = self.account
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Account') is not None:
            self.account = m.get('Account')
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        return self


class FreezeAntChainAccountResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: str = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class FreezeAntChainAccountResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: FreezeAntChainAccountResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FreezeAntChainAccountResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetAppliesRequest(TeaModel):
    def __init__(
        self,
        bizid: str = None,
        current: int = None,
        page_size: int = None,
        status: str = None,
    ):
        self.bizid = bizid
        self.current = current
        self.page_size = page_size
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        if self.current is not None:
            result['Current'] = self.current
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        if m.get('Current') is not None:
            self.current = m.get('Current')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetAppliesResponseBodyResultApplyHistoryList(TeaModel):
    def __init__(
        self,
        bizid: str = None,
        createtime: int = None,
        id: int = None,
        reject_reason: str = None,
        req_addr: str = None,
        signed_addr: str = None,
        status: int = None,
        updatetime: int = None,
        username: str = None,
    ):
        self.bizid = bizid
        self.createtime = createtime
        self.id = id
        self.reject_reason = reject_reason
        self.req_addr = req_addr
        self.signed_addr = signed_addr
        self.status = status
        self.updatetime = updatetime
        self.username = username

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        if self.createtime is not None:
            result['Createtime'] = self.createtime
        if self.id is not None:
            result['Id'] = self.id
        if self.reject_reason is not None:
            result['RejectReason'] = self.reject_reason
        if self.req_addr is not None:
            result['ReqAddr'] = self.req_addr
        if self.signed_addr is not None:
            result['SignedAddr'] = self.signed_addr
        if self.status is not None:
            result['Status'] = self.status
        if self.updatetime is not None:
            result['Updatetime'] = self.updatetime
        if self.username is not None:
            result['Username'] = self.username
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        if m.get('Createtime') is not None:
            self.createtime = m.get('Createtime')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('RejectReason') is not None:
            self.reject_reason = m.get('RejectReason')
        if m.get('ReqAddr') is not None:
            self.req_addr = m.get('ReqAddr')
        if m.get('SignedAddr') is not None:
            self.signed_addr = m.get('SignedAddr')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Updatetime') is not None:
            self.updatetime = m.get('Updatetime')
        if m.get('Username') is not None:
            self.username = m.get('Username')
        return self


class GetAppliesResponseBodyResultPagination(TeaModel):
    def __init__(
        self,
        current: int = None,
        page_size: int = None,
        total: int = None,
    ):
        self.current = current
        self.page_size = page_size
        self.total = total

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.current is not None:
            result['Current'] = self.current
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total is not None:
            result['Total'] = self.total
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Current') is not None:
            self.current = m.get('Current')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('Total') is not None:
            self.total = m.get('Total')
        return self


class GetAppliesResponseBodyResult(TeaModel):
    def __init__(
        self,
        apply_history_list: List[GetAppliesResponseBodyResultApplyHistoryList] = None,
        pagination: GetAppliesResponseBodyResultPagination = None,
    ):
        self.apply_history_list = apply_history_list
        self.pagination = pagination

    def validate(self):
        if self.apply_history_list:
            for k in self.apply_history_list:
                if k:
                    k.validate()
        if self.pagination:
            self.pagination.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['ApplyHistoryList'] = []
        if self.apply_history_list is not None:
            for k in self.apply_history_list:
                result['ApplyHistoryList'].append(k.to_map() if k else None)
        if self.pagination is not None:
            result['Pagination'] = self.pagination.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.apply_history_list = []
        if m.get('ApplyHistoryList') is not None:
            for k in m.get('ApplyHistoryList'):
                temp_model = GetAppliesResponseBodyResultApplyHistoryList()
                self.apply_history_list.append(temp_model.from_map(k))
        if m.get('Pagination') is not None:
            temp_model = GetAppliesResponseBodyResultPagination()
            self.pagination = temp_model.from_map(m['Pagination'])
        return self


class GetAppliesResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: GetAppliesResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = GetAppliesResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class GetAppliesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetAppliesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetAppliesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetBcSchemaRequest(TeaModel):
    def __init__(
        self,
        bizid: str = None,
    ):
        self.bizid = bizid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        return self


class GetBcSchemaResponseBodyResultResponsesPropertiesDataSource(TeaModel):
    def __init__(
        self,
        allow_null: int = None,
        annotation: str = None,
        field: str = None,
        indexes: int = None,
        key: int = None,
        length: int = None,
        reg: str = None,
        type: str = None,
    ):
        self.allow_null = allow_null
        self.annotation = annotation
        self.field = field
        self.indexes = indexes
        self.key = key
        self.length = length
        self.reg = reg
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.allow_null is not None:
            result['AllowNull'] = self.allow_null
        if self.annotation is not None:
            result['Annotation'] = self.annotation
        if self.field is not None:
            result['Field'] = self.field
        if self.indexes is not None:
            result['Indexes'] = self.indexes
        if self.key is not None:
            result['Key'] = self.key
        if self.length is not None:
            result['Length'] = self.length
        if self.reg is not None:
            result['Reg'] = self.reg
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AllowNull') is not None:
            self.allow_null = m.get('AllowNull')
        if m.get('Annotation') is not None:
            self.annotation = m.get('Annotation')
        if m.get('Field') is not None:
            self.field = m.get('Field')
        if m.get('Indexes') is not None:
            self.indexes = m.get('Indexes')
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Length') is not None:
            self.length = m.get('Length')
        if m.get('Reg') is not None:
            self.reg = m.get('Reg')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class GetBcSchemaResponseBodyResultResponsesProperties(TeaModel):
    def __init__(
        self,
        count: int = None,
        data_source: List[GetBcSchemaResponseBodyResultResponsesPropertiesDataSource] = None,
    ):
        self.count = count
        self.data_source = data_source

    def validate(self):
        if self.data_source:
            for k in self.data_source:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.count is not None:
            result['Count'] = self.count
        result['DataSource'] = []
        if self.data_source is not None:
            for k in self.data_source:
                result['DataSource'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Count') is not None:
            self.count = m.get('Count')
        self.data_source = []
        if m.get('DataSource') is not None:
            for k in m.get('DataSource'):
                temp_model = GetBcSchemaResponseBodyResultResponsesPropertiesDataSource()
                self.data_source.append(temp_model.from_map(k))
        return self


class GetBcSchemaResponseBodyResultResponses(TeaModel):
    def __init__(
        self,
        category: str = None,
        category_name: str = None,
        description: str = None,
        properties: GetBcSchemaResponseBodyResultResponsesProperties = None,
    ):
        self.category = category
        self.category_name = category_name
        self.description = description
        self.properties = properties

    def validate(self):
        if self.properties:
            self.properties.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['Category'] = self.category
        if self.category_name is not None:
            result['CategoryName'] = self.category_name
        if self.description is not None:
            result['Description'] = self.description
        if self.properties is not None:
            result['Properties'] = self.properties.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('CategoryName') is not None:
            self.category_name = m.get('CategoryName')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Properties') is not None:
            temp_model = GetBcSchemaResponseBodyResultResponsesProperties()
            self.properties = temp_model.from_map(m['Properties'])
        return self


class GetBcSchemaResponseBodyResultSchema(TeaModel):
    def __init__(
        self,
        create_time: int = None,
        description: str = None,
        id: int = None,
        is_template: bool = None,
        name: str = None,
        update_time: int = None,
        version: int = None,
    ):
        self.create_time = create_time
        self.description = description
        self.id = id
        self.is_template = is_template
        self.name = name
        self.update_time = update_time
        self.version = version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.description is not None:
            result['Description'] = self.description
        if self.id is not None:
            result['Id'] = self.id
        if self.is_template is not None:
            result['IsTemplate'] = self.is_template
        if self.name is not None:
            result['Name'] = self.name
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('IsTemplate') is not None:
            self.is_template = m.get('IsTemplate')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class GetBcSchemaResponseBodyResult(TeaModel):
    def __init__(
        self,
        responses: List[GetBcSchemaResponseBodyResultResponses] = None,
        schema: GetBcSchemaResponseBodyResultSchema = None,
    ):
        self.responses = responses
        self.schema = schema

    def validate(self):
        if self.responses:
            for k in self.responses:
                if k:
                    k.validate()
        if self.schema:
            self.schema.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Responses'] = []
        if self.responses is not None:
            for k in self.responses:
                result['Responses'].append(k.to_map() if k else None)
        if self.schema is not None:
            result['Schema'] = self.schema.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.responses = []
        if m.get('Responses') is not None:
            for k in m.get('Responses'):
                temp_model = GetBcSchemaResponseBodyResultResponses()
                self.responses.append(temp_model.from_map(k))
        if m.get('Schema') is not None:
            temp_model = GetBcSchemaResponseBodyResultSchema()
            self.schema = temp_model.from_map(m['Schema'])
        return self


class GetBcSchemaResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: GetBcSchemaResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = GetBcSchemaResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class GetBcSchemaResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetBcSchemaResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetBcSchemaResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetBlockchainCreateTaskRequest(TeaModel):
    def __init__(
        self,
        current: int = None,
        page_size: int = None,
    ):
        self.current = current
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.current is not None:
            result['Current'] = self.current
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Current') is not None:
            self.current = m.get('Current')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class GetBlockchainCreateTaskResponseBodyResultBlockchainCreateTasksBlockchainCreateTasks(TeaModel):
    def __init__(
        self,
        bizid: str = None,
        create_time: int = None,
        memo: str = None,
        name: str = None,
        status: str = None,
    ):
        self.bizid = bizid
        self.create_time = create_time
        self.memo = memo
        self.name = name
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.memo is not None:
            result['Memo'] = self.memo
        if self.name is not None:
            result['Name'] = self.name
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Memo') is not None:
            self.memo = m.get('Memo')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetBlockchainCreateTaskResponseBodyResultBlockchainCreateTasks(TeaModel):
    def __init__(
        self,
        blockchain_create_tasks: List[GetBlockchainCreateTaskResponseBodyResultBlockchainCreateTasksBlockchainCreateTasks] = None,
    ):
        self.blockchain_create_tasks = blockchain_create_tasks

    def validate(self):
        if self.blockchain_create_tasks:
            for k in self.blockchain_create_tasks:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['BlockchainCreateTasks'] = []
        if self.blockchain_create_tasks is not None:
            for k in self.blockchain_create_tasks:
                result['BlockchainCreateTasks'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.blockchain_create_tasks = []
        if m.get('BlockchainCreateTasks') is not None:
            for k in m.get('BlockchainCreateTasks'):
                temp_model = GetBlockchainCreateTaskResponseBodyResultBlockchainCreateTasksBlockchainCreateTasks()
                self.blockchain_create_tasks.append(temp_model.from_map(k))
        return self


class GetBlockchainCreateTaskResponseBodyResultPagination(TeaModel):
    def __init__(
        self,
        current: int = None,
        page_size: int = None,
        total: int = None,
    ):
        self.current = current
        self.page_size = page_size
        self.total = total

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.current is not None:
            result['Current'] = self.current
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total is not None:
            result['Total'] = self.total
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Current') is not None:
            self.current = m.get('Current')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('Total') is not None:
            self.total = m.get('Total')
        return self


class GetBlockchainCreateTaskResponseBodyResult(TeaModel):
    def __init__(
        self,
        blockchain_create_tasks: GetBlockchainCreateTaskResponseBodyResultBlockchainCreateTasks = None,
        pagination: GetBlockchainCreateTaskResponseBodyResultPagination = None,
    ):
        self.blockchain_create_tasks = blockchain_create_tasks
        self.pagination = pagination

    def validate(self):
        if self.blockchain_create_tasks:
            self.blockchain_create_tasks.validate()
        if self.pagination:
            self.pagination.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.blockchain_create_tasks is not None:
            result['BlockchainCreateTasks'] = self.blockchain_create_tasks.to_map()
        if self.pagination is not None:
            result['Pagination'] = self.pagination.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BlockchainCreateTasks') is not None:
            temp_model = GetBlockchainCreateTaskResponseBodyResultBlockchainCreateTasks()
            self.blockchain_create_tasks = temp_model.from_map(m['BlockchainCreateTasks'])
        if m.get('Pagination') is not None:
            temp_model = GetBlockchainCreateTaskResponseBodyResultPagination()
            self.pagination = temp_model.from_map(m['Pagination'])
        return self


class GetBlockchainCreateTaskResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: GetBlockchainCreateTaskResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = GetBlockchainCreateTaskResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class GetBlockchainCreateTaskResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetBlockchainCreateTaskResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetBlockchainCreateTaskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetBlockchainInfoRequest(TeaModel):
    def __init__(
        self,
        bizid: str = None,
    ):
        self.bizid = bizid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        return self


class GetBlockchainInfoResponseBodyResultNodeInfoList(TeaModel):
    def __init__(
        self,
        block_height: int = None,
        node_name: str = None,
        status: bool = None,
        version: str = None,
    ):
        self.block_height = block_height
        self.node_name = node_name
        self.status = status
        self.version = version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.block_height is not None:
            result['BlockHeight'] = self.block_height
        if self.node_name is not None:
            result['NodeName'] = self.node_name
        if self.status is not None:
            result['Status'] = self.status
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BlockHeight') is not None:
            self.block_height = m.get('BlockHeight')
        if m.get('NodeName') is not None:
            self.node_name = m.get('NodeName')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class GetBlockchainInfoResponseBodyResult(TeaModel):
    def __init__(
        self,
        abnormal_nodes: int = None,
        bizid: str = None,
        block_height: int = None,
        create_time: int = None,
        is_role: bool = None,
        node_info_list: List[GetBlockchainInfoResponseBodyResultNodeInfoList] = None,
        node_number: int = None,
        normal: bool = None,
        transaction_sum: int = None,
        version: str = None,
    ):
        self.abnormal_nodes = abnormal_nodes
        self.bizid = bizid
        self.block_height = block_height
        self.create_time = create_time
        self.is_role = is_role
        self.node_info_list = node_info_list
        self.node_number = node_number
        self.normal = normal
        self.transaction_sum = transaction_sum
        self.version = version

    def validate(self):
        if self.node_info_list:
            for k in self.node_info_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.abnormal_nodes is not None:
            result['AbnormalNodes'] = self.abnormal_nodes
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        if self.block_height is not None:
            result['BlockHeight'] = self.block_height
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.is_role is not None:
            result['IsRole'] = self.is_role
        result['NodeInfoList'] = []
        if self.node_info_list is not None:
            for k in self.node_info_list:
                result['NodeInfoList'].append(k.to_map() if k else None)
        if self.node_number is not None:
            result['NodeNumber'] = self.node_number
        if self.normal is not None:
            result['Normal'] = self.normal
        if self.transaction_sum is not None:
            result['TransactionSum'] = self.transaction_sum
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AbnormalNodes') is not None:
            self.abnormal_nodes = m.get('AbnormalNodes')
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        if m.get('BlockHeight') is not None:
            self.block_height = m.get('BlockHeight')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('IsRole') is not None:
            self.is_role = m.get('IsRole')
        self.node_info_list = []
        if m.get('NodeInfoList') is not None:
            for k in m.get('NodeInfoList'):
                temp_model = GetBlockchainInfoResponseBodyResultNodeInfoList()
                self.node_info_list.append(temp_model.from_map(k))
        if m.get('NodeNumber') is not None:
            self.node_number = m.get('NodeNumber')
        if m.get('Normal') is not None:
            self.normal = m.get('Normal')
        if m.get('TransactionSum') is not None:
            self.transaction_sum = m.get('TransactionSum')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class GetBlockchainInfoResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: GetBlockchainInfoResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = GetBlockchainInfoResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class GetBlockchainInfoResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetBlockchainInfoResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetBlockchainInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetMyBlockchainsResponseBodyResult(TeaModel):
    def __init__(
        self,
        bizid: str = None,
        createtime: int = None,
        id: int = None,
        reject_reason: str = None,
        req_addr: str = None,
        signed_addr: str = None,
        status: int = None,
        updatetime: int = None,
        username: str = None,
    ):
        self.bizid = bizid
        self.createtime = createtime
        self.id = id
        self.reject_reason = reject_reason
        self.req_addr = req_addr
        self.signed_addr = signed_addr
        self.status = status
        self.updatetime = updatetime
        self.username = username

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        if self.createtime is not None:
            result['Createtime'] = self.createtime
        if self.id is not None:
            result['Id'] = self.id
        if self.reject_reason is not None:
            result['RejectReason'] = self.reject_reason
        if self.req_addr is not None:
            result['ReqAddr'] = self.req_addr
        if self.signed_addr is not None:
            result['SignedAddr'] = self.signed_addr
        if self.status is not None:
            result['Status'] = self.status
        if self.updatetime is not None:
            result['Updatetime'] = self.updatetime
        if self.username is not None:
            result['Username'] = self.username
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        if m.get('Createtime') is not None:
            self.createtime = m.get('Createtime')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('RejectReason') is not None:
            self.reject_reason = m.get('RejectReason')
        if m.get('ReqAddr') is not None:
            self.req_addr = m.get('ReqAddr')
        if m.get('SignedAddr') is not None:
            self.signed_addr = m.get('SignedAddr')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Updatetime') is not None:
            self.updatetime = m.get('Updatetime')
        if m.get('Username') is not None:
            self.username = m.get('Username')
        return self


class GetMyBlockchainsResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: List[GetMyBlockchainsResponseBodyResult] = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = GetMyBlockchainsResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        return self


class GetMyBlockchainsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetMyBlockchainsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetMyBlockchainsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetMySuccessAppliesResponseBodyResultNodeInfoList(TeaModel):
    def __init__(
        self,
        block_height: int = None,
        node_name: str = None,
        status: bool = None,
        version: str = None,
    ):
        self.block_height = block_height
        self.node_name = node_name
        self.status = status
        self.version = version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.block_height is not None:
            result['BlockHeight'] = self.block_height
        if self.node_name is not None:
            result['NodeName'] = self.node_name
        if self.status is not None:
            result['Status'] = self.status
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BlockHeight') is not None:
            self.block_height = m.get('BlockHeight')
        if m.get('NodeName') is not None:
            self.node_name = m.get('NodeName')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class GetMySuccessAppliesResponseBodyResult(TeaModel):
    def __init__(
        self,
        abnormal_nodes: int = None,
        bizid: str = None,
        block_height: int = None,
        create_time: int = None,
        is_role: bool = None,
        name: str = None,
        node_info_list: List[GetMySuccessAppliesResponseBodyResultNodeInfoList] = None,
        node_number: int = None,
        normal: bool = None,
        transaction_sum: int = None,
        version: str = None,
    ):
        self.abnormal_nodes = abnormal_nodes
        self.bizid = bizid
        self.block_height = block_height
        self.create_time = create_time
        self.is_role = is_role
        self.name = name
        self.node_info_list = node_info_list
        self.node_number = node_number
        self.normal = normal
        self.transaction_sum = transaction_sum
        self.version = version

    def validate(self):
        if self.node_info_list:
            for k in self.node_info_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.abnormal_nodes is not None:
            result['AbnormalNodes'] = self.abnormal_nodes
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        if self.block_height is not None:
            result['BlockHeight'] = self.block_height
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.is_role is not None:
            result['IsRole'] = self.is_role
        if self.name is not None:
            result['Name'] = self.name
        result['NodeInfoList'] = []
        if self.node_info_list is not None:
            for k in self.node_info_list:
                result['NodeInfoList'].append(k.to_map() if k else None)
        if self.node_number is not None:
            result['NodeNumber'] = self.node_number
        if self.normal is not None:
            result['Normal'] = self.normal
        if self.transaction_sum is not None:
            result['TransactionSum'] = self.transaction_sum
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AbnormalNodes') is not None:
            self.abnormal_nodes = m.get('AbnormalNodes')
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        if m.get('BlockHeight') is not None:
            self.block_height = m.get('BlockHeight')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('IsRole') is not None:
            self.is_role = m.get('IsRole')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        self.node_info_list = []
        if m.get('NodeInfoList') is not None:
            for k in m.get('NodeInfoList'):
                temp_model = GetMySuccessAppliesResponseBodyResultNodeInfoList()
                self.node_info_list.append(temp_model.from_map(k))
        if m.get('NodeNumber') is not None:
            self.node_number = m.get('NodeNumber')
        if m.get('Normal') is not None:
            self.normal = m.get('Normal')
        if m.get('TransactionSum') is not None:
            self.transaction_sum = m.get('TransactionSum')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class GetMySuccessAppliesResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: List[GetMySuccessAppliesResponseBodyResult] = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = GetMySuccessAppliesResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        return self


class GetMySuccessAppliesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetMySuccessAppliesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetMySuccessAppliesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetOssPropertiesRequest(TeaModel):
    def __init__(
        self,
        bizid: str = None,
    ):
        self.bizid = bizid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        return self


class GetOssPropertiesResponseBodyResult(TeaModel):
    def __init__(
        self,
        access_key_id: str = None,
        access_key_secret: str = None,
        bucket_name: str = None,
        endpoint: str = None,
        folder_name: str = None,
    ):
        self.access_key_id = access_key_id
        self.access_key_secret = access_key_secret
        self.bucket_name = bucket_name
        self.endpoint = endpoint
        self.folder_name = folder_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.access_key_id is not None:
            result['AccessKeyId'] = self.access_key_id
        if self.access_key_secret is not None:
            result['AccessKeySecret'] = self.access_key_secret
        if self.bucket_name is not None:
            result['BucketName'] = self.bucket_name
        if self.endpoint is not None:
            result['Endpoint'] = self.endpoint
        if self.folder_name is not None:
            result['FolderName'] = self.folder_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccessKeyId') is not None:
            self.access_key_id = m.get('AccessKeyId')
        if m.get('AccessKeySecret') is not None:
            self.access_key_secret = m.get('AccessKeySecret')
        if m.get('BucketName') is not None:
            self.bucket_name = m.get('BucketName')
        if m.get('Endpoint') is not None:
            self.endpoint = m.get('Endpoint')
        if m.get('FolderName') is not None:
            self.folder_name = m.get('FolderName')
        return self


class GetOssPropertiesResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: GetOssPropertiesResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = GetOssPropertiesResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class GetOssPropertiesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetOssPropertiesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetOssPropertiesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetTemplatesResponseBodyResultSchemaList(TeaModel):
    def __init__(
        self,
        create_time: int = None,
        description: str = None,
        id: int = None,
        is_template: int = None,
        name: str = None,
        update_time: int = None,
        version: int = None,
    ):
        self.create_time = create_time
        self.description = description
        self.id = id
        self.is_template = is_template
        self.name = name
        self.update_time = update_time
        self.version = version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.description is not None:
            result['Description'] = self.description
        if self.id is not None:
            result['Id'] = self.id
        if self.is_template is not None:
            result['IsTemplate'] = self.is_template
        if self.name is not None:
            result['Name'] = self.name
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('IsTemplate') is not None:
            self.is_template = m.get('IsTemplate')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class GetTemplatesResponseBodyResult(TeaModel):
    def __init__(
        self,
        schema_list: List[GetTemplatesResponseBodyResultSchemaList] = None,
    ):
        self.schema_list = schema_list

    def validate(self):
        if self.schema_list:
            for k in self.schema_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['SchemaList'] = []
        if self.schema_list is not None:
            for k in self.schema_list:
                result['SchemaList'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.schema_list = []
        if m.get('SchemaList') is not None:
            for k in m.get('SchemaList'):
                temp_model = GetTemplatesResponseBodyResultSchemaList()
                self.schema_list.append(temp_model.from_map(k))
        return self


class GetTemplatesResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: GetTemplatesResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = GetTemplatesResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class GetTemplatesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetTemplatesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetTemplatesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InstallChaincodeRequest(TeaModel):
    def __init__(
        self,
        chaincode_id: str = None,
        location: str = None,
        organization_id: str = None,
    ):
        # This parameter is required.
        self.chaincode_id = chaincode_id
        self.location = location
        # This parameter is required.
        self.organization_id = organization_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.chaincode_id is not None:
            result['ChaincodeId'] = self.chaincode_id
        if self.location is not None:
            result['Location'] = self.location
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChaincodeId') is not None:
            self.chaincode_id = m.get('ChaincodeId')
        if m.get('Location') is not None:
            self.location = m.get('Location')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        return self


class InstallChaincodeResponseBodyResult(TeaModel):
    def __init__(
        self,
        chaincode_id: str = None,
        channel_name: str = None,
        consortium_id: str = None,
        create_time: str = None,
        deploy_time: str = None,
        endorse_policy: str = None,
        input: str = None,
        install: bool = None,
        message: str = None,
        name: str = None,
        path: str = None,
        provider_id: str = None,
        provider_name: str = None,
        state: str = None,
        type: int = None,
        version: str = None,
    ):
        self.chaincode_id = chaincode_id
        self.channel_name = channel_name
        self.consortium_id = consortium_id
        self.create_time = create_time
        self.deploy_time = deploy_time
        self.endorse_policy = endorse_policy
        self.input = input
        self.install = install
        self.message = message
        self.name = name
        self.path = path
        self.provider_id = provider_id
        self.provider_name = provider_name
        self.state = state
        self.type = type
        self.version = version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.chaincode_id is not None:
            result['ChaincodeId'] = self.chaincode_id
        if self.channel_name is not None:
            result['ChannelName'] = self.channel_name
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.deploy_time is not None:
            result['DeployTime'] = self.deploy_time
        if self.endorse_policy is not None:
            result['EndorsePolicy'] = self.endorse_policy
        if self.input is not None:
            result['Input'] = self.input
        if self.install is not None:
            result['Install'] = self.install
        if self.message is not None:
            result['Message'] = self.message
        if self.name is not None:
            result['Name'] = self.name
        if self.path is not None:
            result['Path'] = self.path
        if self.provider_id is not None:
            result['ProviderId'] = self.provider_id
        if self.provider_name is not None:
            result['ProviderName'] = self.provider_name
        if self.state is not None:
            result['State'] = self.state
        if self.type is not None:
            result['Type'] = self.type
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChaincodeId') is not None:
            self.chaincode_id = m.get('ChaincodeId')
        if m.get('ChannelName') is not None:
            self.channel_name = m.get('ChannelName')
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('DeployTime') is not None:
            self.deploy_time = m.get('DeployTime')
        if m.get('EndorsePolicy') is not None:
            self.endorse_policy = m.get('EndorsePolicy')
        if m.get('Input') is not None:
            self.input = m.get('Input')
        if m.get('Install') is not None:
            self.install = m.get('Install')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Path') is not None:
            self.path = m.get('Path')
        if m.get('ProviderId') is not None:
            self.provider_id = m.get('ProviderId')
        if m.get('ProviderName') is not None:
            self.provider_name = m.get('ProviderName')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class InstallChaincodeResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: InstallChaincodeResponseBodyResult = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = InstallChaincodeResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class InstallChaincodeResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: InstallChaincodeResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = InstallChaincodeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InstallFabricChaincodePackageRequest(TeaModel):
    def __init__(
        self,
        chaincode_package_id: str = None,
        location: str = None,
        organization_id: str = None,
    ):
        # This parameter is required.
        self.chaincode_package_id = chaincode_package_id
        self.location = location
        # This parameter is required.
        self.organization_id = organization_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.chaincode_package_id is not None:
            result['ChaincodePackageId'] = self.chaincode_package_id
        if self.location is not None:
            result['Location'] = self.location
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChaincodePackageId') is not None:
            self.chaincode_package_id = m.get('ChaincodePackageId')
        if m.get('Location') is not None:
            self.location = m.get('Location')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        return self


class InstallFabricChaincodePackageResponseBodyResult(TeaModel):
    def __init__(
        self,
        chaincode_package_id: str = None,
        checksum: str = None,
        delete_time: int = None,
        deleted: bool = None,
        install_time: int = None,
        label: str = None,
        md_5sum: str = None,
        organization_id: str = None,
        oss_bucket: str = None,
        oss_url: str = None,
        provider_bid: str = None,
        provider_uid: int = None,
        state: str = None,
        type: int = None,
        type_name: str = None,
        upload_time: int = None,
    ):
        self.chaincode_package_id = chaincode_package_id
        self.checksum = checksum
        self.delete_time = delete_time
        self.deleted = deleted
        self.install_time = install_time
        self.label = label
        self.md_5sum = md_5sum
        self.organization_id = organization_id
        self.oss_bucket = oss_bucket
        self.oss_url = oss_url
        self.provider_bid = provider_bid
        self.provider_uid = provider_uid
        self.state = state
        self.type = type
        self.type_name = type_name
        self.upload_time = upload_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.chaincode_package_id is not None:
            result['ChaincodePackageId'] = self.chaincode_package_id
        if self.checksum is not None:
            result['Checksum'] = self.checksum
        if self.delete_time is not None:
            result['DeleteTime'] = self.delete_time
        if self.deleted is not None:
            result['Deleted'] = self.deleted
        if self.install_time is not None:
            result['InstallTime'] = self.install_time
        if self.label is not None:
            result['Label'] = self.label
        if self.md_5sum is not None:
            result['Md5sum'] = self.md_5sum
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        if self.oss_bucket is not None:
            result['OssBucket'] = self.oss_bucket
        if self.oss_url is not None:
            result['OssURL'] = self.oss_url
        if self.provider_bid is not None:
            result['ProviderBid'] = self.provider_bid
        if self.provider_uid is not None:
            result['ProviderUid'] = self.provider_uid
        if self.state is not None:
            result['State'] = self.state
        if self.type is not None:
            result['Type'] = self.type
        if self.type_name is not None:
            result['TypeName'] = self.type_name
        if self.upload_time is not None:
            result['UploadTime'] = self.upload_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChaincodePackageId') is not None:
            self.chaincode_package_id = m.get('ChaincodePackageId')
        if m.get('Checksum') is not None:
            self.checksum = m.get('Checksum')
        if m.get('DeleteTime') is not None:
            self.delete_time = m.get('DeleteTime')
        if m.get('Deleted') is not None:
            self.deleted = m.get('Deleted')
        if m.get('InstallTime') is not None:
            self.install_time = m.get('InstallTime')
        if m.get('Label') is not None:
            self.label = m.get('Label')
        if m.get('Md5sum') is not None:
            self.md_5sum = m.get('Md5sum')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        if m.get('OssBucket') is not None:
            self.oss_bucket = m.get('OssBucket')
        if m.get('OssURL') is not None:
            self.oss_url = m.get('OssURL')
        if m.get('ProviderBid') is not None:
            self.provider_bid = m.get('ProviderBid')
        if m.get('ProviderUid') is not None:
            self.provider_uid = m.get('ProviderUid')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('TypeName') is not None:
            self.type_name = m.get('TypeName')
        if m.get('UploadTime') is not None:
            self.upload_time = m.get('UploadTime')
        return self


class InstallFabricChaincodePackageResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        message: str = None,
        request_id: str = None,
        result: InstallFabricChaincodePackageResponseBodyResult = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.message = message
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = InstallFabricChaincodePackageResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class InstallFabricChaincodePackageResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: InstallFabricChaincodePackageResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = InstallFabricChaincodePackageResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InstantiateChaincodeRequest(TeaModel):
    def __init__(
        self,
        chaincode_id: str = None,
        collection_config: str = None,
        endorse_policy: str = None,
        location: str = None,
        organization_id: str = None,
    ):
        # This parameter is required.
        self.chaincode_id = chaincode_id
        self.collection_config = collection_config
        self.endorse_policy = endorse_policy
        self.location = location
        # This parameter is required.
        self.organization_id = organization_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.chaincode_id is not None:
            result['ChaincodeId'] = self.chaincode_id
        if self.collection_config is not None:
            result['CollectionConfig'] = self.collection_config
        if self.endorse_policy is not None:
            result['EndorsePolicy'] = self.endorse_policy
        if self.location is not None:
            result['Location'] = self.location
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChaincodeId') is not None:
            self.chaincode_id = m.get('ChaincodeId')
        if m.get('CollectionConfig') is not None:
            self.collection_config = m.get('CollectionConfig')
        if m.get('EndorsePolicy') is not None:
            self.endorse_policy = m.get('EndorsePolicy')
        if m.get('Location') is not None:
            self.location = m.get('Location')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        return self


class InstantiateChaincodeResponseBodyResult(TeaModel):
    def __init__(
        self,
        chaincode_id: str = None,
        channel_name: str = None,
        consortium_id: str = None,
        create_time: str = None,
        deploy_time: str = None,
        endorse_policy: str = None,
        input: str = None,
        install: bool = None,
        message: str = None,
        name: str = None,
        path: str = None,
        provider_id: str = None,
        provider_name: str = None,
        state: str = None,
        type: int = None,
        version: str = None,
    ):
        self.chaincode_id = chaincode_id
        self.channel_name = channel_name
        self.consortium_id = consortium_id
        self.create_time = create_time
        self.deploy_time = deploy_time
        self.endorse_policy = endorse_policy
        self.input = input
        self.install = install
        self.message = message
        self.name = name
        self.path = path
        self.provider_id = provider_id
        self.provider_name = provider_name
        self.state = state
        self.type = type
        self.version = version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.chaincode_id is not None:
            result['ChaincodeId'] = self.chaincode_id
        if self.channel_name is not None:
            result['ChannelName'] = self.channel_name
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.deploy_time is not None:
            result['DeployTime'] = self.deploy_time
        if self.endorse_policy is not None:
            result['EndorsePolicy'] = self.endorse_policy
        if self.input is not None:
            result['Input'] = self.input
        if self.install is not None:
            result['Install'] = self.install
        if self.message is not None:
            result['Message'] = self.message
        if self.name is not None:
            result['Name'] = self.name
        if self.path is not None:
            result['Path'] = self.path
        if self.provider_id is not None:
            result['ProviderId'] = self.provider_id
        if self.provider_name is not None:
            result['ProviderName'] = self.provider_name
        if self.state is not None:
            result['State'] = self.state
        if self.type is not None:
            result['Type'] = self.type
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChaincodeId') is not None:
            self.chaincode_id = m.get('ChaincodeId')
        if m.get('ChannelName') is not None:
            self.channel_name = m.get('ChannelName')
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('DeployTime') is not None:
            self.deploy_time = m.get('DeployTime')
        if m.get('EndorsePolicy') is not None:
            self.endorse_policy = m.get('EndorsePolicy')
        if m.get('Input') is not None:
            self.input = m.get('Input')
        if m.get('Install') is not None:
            self.install = m.get('Install')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Path') is not None:
            self.path = m.get('Path')
        if m.get('ProviderId') is not None:
            self.provider_id = m.get('ProviderId')
        if m.get('ProviderName') is not None:
            self.provider_name = m.get('ProviderName')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class InstantiateChaincodeResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: InstantiateChaincodeResponseBodyResult = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = InstantiateChaincodeResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class InstantiateChaincodeResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: InstantiateChaincodeResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = InstantiateChaincodeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InviteUserRequest(TeaModel):
    def __init__(
        self,
        bid: str = None,
        bizid: str = None,
        user_email: str = None,
        user_id: int = None,
    ):
        self.bid = bid
        self.bizid = bizid
        self.user_email = user_email
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bid is not None:
            result['Bid'] = self.bid
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        if self.user_email is not None:
            result['UserEmail'] = self.user_email
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bid') is not None:
            self.bid = m.get('Bid')
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        if m.get('UserEmail') is not None:
            self.user_email = m.get('UserEmail')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class InviteUserResponseBodyResult(TeaModel):
    def __init__(
        self,
        bid: str = None,
        bizid: str = None,
        code: str = None,
        create_time: int = None,
        email: str = None,
        from_bid: str = None,
        from_user_id: int = None,
        status: int = None,
        update_time: int = None,
        user_id: int = None,
    ):
        self.bid = bid
        self.bizid = bizid
        self.code = code
        self.create_time = create_time
        self.email = email
        self.from_bid = from_bid
        self.from_user_id = from_user_id
        self.status = status
        self.update_time = update_time
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bid is not None:
            result['Bid'] = self.bid
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        if self.code is not None:
            result['Code'] = self.code
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.email is not None:
            result['Email'] = self.email
        if self.from_bid is not None:
            result['FromBid'] = self.from_bid
        if self.from_user_id is not None:
            result['FromUserId'] = self.from_user_id
        if self.status is not None:
            result['Status'] = self.status
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bid') is not None:
            self.bid = m.get('Bid')
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Email') is not None:
            self.email = m.get('Email')
        if m.get('FromBid') is not None:
            self.from_bid = m.get('FromBid')
        if m.get('FromUserId') is not None:
            self.from_user_id = m.get('FromUserId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class InviteUserResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: InviteUserResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = InviteUserResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class InviteUserResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: InviteUserResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = InviteUserResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class JoinChannelRequest(TeaModel):
    def __init__(
        self,
        channel_id: str = None,
        do: str = None,
        location: str = None,
    ):
        # This parameter is required.
        self.channel_id = channel_id
        # This parameter is required.
        self.do = do
        self.location = location

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.do is not None:
            result['Do'] = self.do
        if self.location is not None:
            result['Location'] = self.location
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('Do') is not None:
            self.do = m.get('Do')
        if m.get('Location') is not None:
            self.location = m.get('Location')
        return self


class JoinChannelResponseBodyResult(TeaModel):
    def __init__(
        self,
        accept_time: str = None,
        approve_time: str = None,
        channel_id: str = None,
        confirm_time: str = None,
        destroy_time: str = None,
        invite_time: str = None,
        organization_id: str = None,
        state: str = None,
        with_peer: bool = None,
    ):
        self.accept_time = accept_time
        self.approve_time = approve_time
        self.channel_id = channel_id
        self.confirm_time = confirm_time
        self.destroy_time = destroy_time
        self.invite_time = invite_time
        self.organization_id = organization_id
        self.state = state
        self.with_peer = with_peer

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.accept_time is not None:
            result['AcceptTime'] = self.accept_time
        if self.approve_time is not None:
            result['ApproveTime'] = self.approve_time
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.confirm_time is not None:
            result['ConfirmTime'] = self.confirm_time
        if self.destroy_time is not None:
            result['DestroyTime'] = self.destroy_time
        if self.invite_time is not None:
            result['InviteTime'] = self.invite_time
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        if self.state is not None:
            result['State'] = self.state
        if self.with_peer is not None:
            result['WithPeer'] = self.with_peer
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AcceptTime') is not None:
            self.accept_time = m.get('AcceptTime')
        if m.get('ApproveTime') is not None:
            self.approve_time = m.get('ApproveTime')
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('ConfirmTime') is not None:
            self.confirm_time = m.get('ConfirmTime')
        if m.get('DestroyTime') is not None:
            self.destroy_time = m.get('DestroyTime')
        if m.get('InviteTime') is not None:
            self.invite_time = m.get('InviteTime')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('WithPeer') is not None:
            self.with_peer = m.get('WithPeer')
        return self


class JoinChannelResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: List[JoinChannelResponseBodyResult] = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = JoinChannelResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class JoinChannelResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: JoinChannelResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = JoinChannelResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListTagResourcesRequestTag(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListTagResourcesRequest(TeaModel):
    def __init__(
        self,
        next_token: str = None,
        resource_id: List[str] = None,
        resource_type: str = None,
        tag: List[ListTagResourcesRequestTag] = None,
    ):
        self.next_token = next_token
        self.resource_id = resource_id
        # This parameter is required.
        self.resource_type = resource_type
        self.tag = tag

    def validate(self):
        if self.tag:
            for k in self.tag:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.resource_id is not None:
            result['ResourceId'] = self.resource_id
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        result['Tag'] = []
        if self.tag is not None:
            for k in self.tag:
                result['Tag'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('ResourceId') is not None:
            self.resource_id = m.get('ResourceId')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        self.tag = []
        if m.get('Tag') is not None:
            for k in m.get('Tag'):
                temp_model = ListTagResourcesRequestTag()
                self.tag.append(temp_model.from_map(k))
        return self


class ListTagResourcesResponseBodyTagResources(TeaModel):
    def __init__(
        self,
        resource_id: str = None,
        resource_type: str = None,
        tag_key: str = None,
        tag_value: str = None,
    ):
        self.resource_id = resource_id
        self.resource_type = resource_type
        self.tag_key = tag_key
        self.tag_value = tag_value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.resource_id is not None:
            result['ResourceId'] = self.resource_id
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        if self.tag_key is not None:
            result['TagKey'] = self.tag_key
        if self.tag_value is not None:
            result['TagValue'] = self.tag_value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ResourceId') is not None:
            self.resource_id = m.get('ResourceId')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        if m.get('TagKey') is not None:
            self.tag_key = m.get('TagKey')
        if m.get('TagValue') is not None:
            self.tag_value = m.get('TagValue')
        return self


class ListTagResourcesResponseBody(TeaModel):
    def __init__(
        self,
        next_token: str = None,
        request_id: str = None,
        tag_resources: List[ListTagResourcesResponseBodyTagResources] = None,
    ):
        self.next_token = next_token
        self.request_id = request_id
        self.tag_resources = tag_resources

    def validate(self):
        if self.tag_resources:
            for k in self.tag_resources:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['TagResources'] = []
        if self.tag_resources is not None:
            for k in self.tag_resources:
                result['TagResources'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.tag_resources = []
        if m.get('TagResources') is not None:
            for k in m.get('TagResources'):
                temp_model = ListTagResourcesResponseBodyTagResources()
                self.tag_resources.append(temp_model.from_map(k))
        return self


class ListTagResourcesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListTagResourcesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListTagResourcesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyTriggerRequest(TeaModel):
    def __init__(
        self,
        channel_id: str = None,
        name: str = None,
        options: str = None,
        organization_id: str = None,
        source: str = None,
        status: str = None,
    ):
        # This parameter is required.
        self.channel_id = channel_id
        # This parameter is required.
        self.name = name
        self.options = options
        # This parameter is required.
        self.organization_id = organization_id
        self.source = source
        # This parameter is required.
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.name is not None:
            result['Name'] = self.name
        if self.options is not None:
            result['Options'] = self.options
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        if self.source is not None:
            result['Source'] = self.source
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Options') is not None:
            self.options = m.get('Options')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        if m.get('Source') is not None:
            self.source = m.get('Source')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class ModifyTriggerResponseBodyResultCheckpoint(TeaModel):
    def __init__(
        self,
        error_count: int = None,
        height: int = None,
        index: int = None,
        type: str = None,
    ):
        self.error_count = error_count
        self.height = height
        self.index = index
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_count is not None:
            result['ErrorCount'] = self.error_count
        if self.height is not None:
            result['Height'] = self.height
        if self.index is not None:
            result['Index'] = self.index
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCount') is not None:
            self.error_count = m.get('ErrorCount')
        if m.get('Height') is not None:
            self.height = m.get('Height')
        if m.get('Index') is not None:
            self.index = m.get('Index')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class ModifyTriggerResponseBodyResult(TeaModel):
    def __init__(
        self,
        channel_id: str = None,
        channel_name: str = None,
        checkpoint: ModifyTriggerResponseBodyResultCheckpoint = None,
        create_time: int = None,
        error_message: str = None,
        name: str = None,
        options: str = None,
        source: str = None,
        status: int = None,
        type: str = None,
    ):
        self.channel_id = channel_id
        self.channel_name = channel_name
        self.checkpoint = checkpoint
        self.create_time = create_time
        self.error_message = error_message
        self.name = name
        self.options = options
        self.source = source
        self.status = status
        self.type = type

    def validate(self):
        if self.checkpoint:
            self.checkpoint.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.channel_name is not None:
            result['ChannelName'] = self.channel_name
        if self.checkpoint is not None:
            result['Checkpoint'] = self.checkpoint.to_map()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.name is not None:
            result['Name'] = self.name
        if self.options is not None:
            result['Options'] = self.options
        if self.source is not None:
            result['Source'] = self.source
        if self.status is not None:
            result['Status'] = self.status
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('ChannelName') is not None:
            self.channel_name = m.get('ChannelName')
        if m.get('Checkpoint') is not None:
            temp_model = ModifyTriggerResponseBodyResultCheckpoint()
            self.checkpoint = temp_model.from_map(m['Checkpoint'])
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Options') is not None:
            self.options = m.get('Options')
        if m.get('Source') is not None:
            self.source = m.get('Source')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class ModifyTriggerResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: ModifyTriggerResponseBodyResult = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = ModifyTriggerResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifyTriggerResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ModifyTriggerResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ModifyTriggerResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class OperateUserRequest(TeaModel):
    def __init__(
        self,
        bid: str = None,
        bizid: str = None,
        operation: int = None,
        user_name: str = None,
    ):
        self.bid = bid
        self.bizid = bizid
        self.operation = operation
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bid is not None:
            result['Bid'] = self.bid
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        if self.operation is not None:
            result['Operation'] = self.operation
        if self.user_name is not None:
            result['UserName'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bid') is not None:
            self.bid = m.get('Bid')
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        if m.get('Operation') is not None:
            self.operation = m.get('Operation')
        if m.get('UserName') is not None:
            self.user_name = m.get('UserName')
        return self


class OperateUserResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: str = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class OperateUserResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: OperateUserResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = OperateUserResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ProcessCloudIDEContractTransactionRequest(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        transaction: str = None,
    ):
        # This parameter is required.
        self.ant_chain_id = ant_chain_id
        # This parameter is required.
        self.transaction = transaction

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.transaction is not None:
            result['Transaction'] = self.transaction
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('Transaction') is not None:
            self.transaction = m.get('Transaction')
        return self


class ProcessCloudIDEContractTransactionResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: str = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class ProcessCloudIDEContractTransactionResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ProcessCloudIDEContractTransactionResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ProcessCloudIDEContractTransactionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ProcessPublicCloudIDEContractTransactionRequest(TeaModel):
    def __init__(
        self,
        bizid: str = None,
        transaction: str = None,
    ):
        self.bizid = bizid
        self.transaction = transaction

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        if self.transaction is not None:
            result['Transaction'] = self.transaction
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        if m.get('Transaction') is not None:
            self.transaction = m.get('Transaction')
        return self


class ProcessPublicCloudIDEContractTransactionResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: str = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class ProcessPublicCloudIDEContractTransactionResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ProcessPublicCloudIDEContractTransactionResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ProcessPublicCloudIDEContractTransactionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryBlockRequest(TeaModel):
    def __init__(
        self,
        bizid: str = None,
        height: int = None,
    ):
        self.bizid = bizid
        self.height = height

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        if self.height is not None:
            result['Height'] = self.height
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        if m.get('Height') is not None:
            self.height = m.get('Height')
        return self


class QueryBlockResponseBodyResult(TeaModel):
    def __init__(
        self,
        alias: str = None,
        block_hash: str = None,
        create_time: int = None,
        height: int = None,
        previous_hash: str = None,
        root_tx_hash: str = None,
        trans_summary_list: str = None,
        transaction_size: int = None,
    ):
        self.alias = alias
        self.block_hash = block_hash
        self.create_time = create_time
        self.height = height
        self.previous_hash = previous_hash
        self.root_tx_hash = root_tx_hash
        self.trans_summary_list = trans_summary_list
        self.transaction_size = transaction_size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alias is not None:
            result['Alias'] = self.alias
        if self.block_hash is not None:
            result['BlockHash'] = self.block_hash
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.height is not None:
            result['Height'] = self.height
        if self.previous_hash is not None:
            result['PreviousHash'] = self.previous_hash
        if self.root_tx_hash is not None:
            result['RootTxHash'] = self.root_tx_hash
        if self.trans_summary_list is not None:
            result['TransSummaryList'] = self.trans_summary_list
        if self.transaction_size is not None:
            result['TransactionSize'] = self.transaction_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Alias') is not None:
            self.alias = m.get('Alias')
        if m.get('BlockHash') is not None:
            self.block_hash = m.get('BlockHash')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Height') is not None:
            self.height = m.get('Height')
        if m.get('PreviousHash') is not None:
            self.previous_hash = m.get('PreviousHash')
        if m.get('RootTxHash') is not None:
            self.root_tx_hash = m.get('RootTxHash')
        if m.get('TransSummaryList') is not None:
            self.trans_summary_list = m.get('TransSummaryList')
        if m.get('TransactionSize') is not None:
            self.transaction_size = m.get('TransactionSize')
        return self


class QueryBlockResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: QueryBlockResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = QueryBlockResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class QueryBlockResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryBlockResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryBlockResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryConsortiumDeletableRequest(TeaModel):
    def __init__(
        self,
        consortium_id: str = None,
        location: str = None,
    ):
        # This parameter is required.
        self.consortium_id = consortium_id
        self.location = location

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.location is not None:
            result['Location'] = self.location
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('Location') is not None:
            self.location = m.get('Location')
        return self


class QueryConsortiumDeletableResponseBodyResult(TeaModel):
    def __init__(
        self,
        code_name: str = None,
        consortium_id: str = None,
        deletable: bool = None,
        description: str = None,
        domain: str = None,
        name: str = None,
        region_id: str = None,
        state: str = None,
        zone_id: str = None,
    ):
        self.code_name = code_name
        self.consortium_id = consortium_id
        self.deletable = deletable
        self.description = description
        self.domain = domain
        self.name = name
        self.region_id = region_id
        self.state = state
        self.zone_id = zone_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code_name is not None:
            result['CodeName'] = self.code_name
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.deletable is not None:
            result['Deletable'] = self.deletable
        if self.description is not None:
            result['Description'] = self.description
        if self.domain is not None:
            result['Domain'] = self.domain
        if self.name is not None:
            result['Name'] = self.name
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.state is not None:
            result['State'] = self.state
        if self.zone_id is not None:
            result['ZoneId'] = self.zone_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CodeName') is not None:
            self.code_name = m.get('CodeName')
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('Deletable') is not None:
            self.deletable = m.get('Deletable')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Domain') is not None:
            self.domain = m.get('Domain')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('ZoneId') is not None:
            self.zone_id = m.get('ZoneId')
        return self


class QueryConsortiumDeletableResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: QueryConsortiumDeletableResponseBodyResult = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = QueryConsortiumDeletableResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class QueryConsortiumDeletableResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryConsortiumDeletableResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryConsortiumDeletableResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryEthereumDeletableRequest(TeaModel):
    def __init__(
        self,
        ethereum_id: str = None,
    ):
        # This parameter is required.
        self.ethereum_id = ethereum_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ethereum_id is not None:
            result['EthereumId'] = self.ethereum_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EthereumId') is not None:
            self.ethereum_id = m.get('EthereumId')
        return self


class QueryEthereumDeletableResponseBodyResult(TeaModel):
    def __init__(
        self,
        deletable: bool = None,
        ethereum_id: str = None,
    ):
        self.deletable = deletable
        self.ethereum_id = ethereum_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.deletable is not None:
            result['Deletable'] = self.deletable
        if self.ethereum_id is not None:
            result['EthereumId'] = self.ethereum_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Deletable') is not None:
            self.deletable = m.get('Deletable')
        if m.get('EthereumId') is not None:
            self.ethereum_id = m.get('EthereumId')
        return self


class QueryEthereumDeletableResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: QueryEthereumDeletableResponseBodyResult = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = QueryEthereumDeletableResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class QueryEthereumDeletableResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryEthereumDeletableResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryEthereumDeletableResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryMetricRequest(TeaModel):
    def __init__(
        self,
        bizid: str = None,
        inner_ip: str = None,
        metric: str = None,
        period: str = None,
        port: str = None,
        time_area: str = None,
    ):
        self.bizid = bizid
        self.inner_ip = inner_ip
        self.metric = metric
        self.period = period
        self.port = port
        self.time_area = time_area

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        if self.inner_ip is not None:
            result['InnerIp'] = self.inner_ip
        if self.metric is not None:
            result['Metric'] = self.metric
        if self.period is not None:
            result['Period'] = self.period
        if self.port is not None:
            result['Port'] = self.port
        if self.time_area is not None:
            result['TimeArea'] = self.time_area
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        if m.get('InnerIp') is not None:
            self.inner_ip = m.get('InnerIp')
        if m.get('Metric') is not None:
            self.metric = m.get('Metric')
        if m.get('Period') is not None:
            self.period = m.get('Period')
        if m.get('Port') is not None:
            self.port = m.get('Port')
        if m.get('TimeArea') is not None:
            self.time_area = m.get('TimeArea')
        return self


class QueryMetricResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: str = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class QueryMetricResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryMetricResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryMetricResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryOrganizationDeletableRequest(TeaModel):
    def __init__(
        self,
        location: str = None,
        organization_id: str = None,
    ):
        self.location = location
        # This parameter is required.
        self.organization_id = organization_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.location is not None:
            result['Location'] = self.location
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Location') is not None:
            self.location = m.get('Location')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        return self


class QueryOrganizationDeletableResponseBodyResult(TeaModel):
    def __init__(
        self,
        code_name: str = None,
        deletable: bool = None,
        description: str = None,
        domain: str = None,
        name: str = None,
        organization_id: str = None,
        region_id: str = None,
        state: str = None,
        zone_id: str = None,
    ):
        self.code_name = code_name
        self.deletable = deletable
        self.description = description
        self.domain = domain
        self.name = name
        self.organization_id = organization_id
        self.region_id = region_id
        self.state = state
        self.zone_id = zone_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code_name is not None:
            result['CodeName'] = self.code_name
        if self.deletable is not None:
            result['Deletable'] = self.deletable
        if self.description is not None:
            result['Description'] = self.description
        if self.domain is not None:
            result['Domain'] = self.domain
        if self.name is not None:
            result['Name'] = self.name
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.state is not None:
            result['State'] = self.state
        if self.zone_id is not None:
            result['ZoneId'] = self.zone_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CodeName') is not None:
            self.code_name = m.get('CodeName')
        if m.get('Deletable') is not None:
            self.deletable = m.get('Deletable')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Domain') is not None:
            self.domain = m.get('Domain')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('ZoneId') is not None:
            self.zone_id = m.get('ZoneId')
        return self


class QueryOrganizationDeletableResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: QueryOrganizationDeletableResponseBodyResult = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = QueryOrganizationDeletableResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class QueryOrganizationDeletableResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryOrganizationDeletableResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryOrganizationDeletableResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryTransactionRequest(TeaModel):
    def __init__(
        self,
        bizid: str = None,
        hash: str = None,
    ):
        self.bizid = bizid
        self.hash = hash

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        if self.hash is not None:
            result['Hash'] = self.hash
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        if m.get('Hash') is not None:
            self.hash = m.get('Hash')
        return self


class QueryTransactionResponseBodyResultReferenceList(TeaModel):
    def __init__(
        self,
        data: str = None,
        length: int = None,
        type: int = None,
    ):
        self.data = data
        self.length = length
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data
        if self.length is not None:
            result['Length'] = self.length
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Length') is not None:
            self.length = m.get('Length')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class QueryTransactionResponseBodyResult(TeaModel):
    def __init__(
        self,
        block_height: int = None,
        block_version: int = None,
        category: int = None,
        content: str = None,
        content_hash: str = None,
        create_time: int = None,
        hash: str = None,
        key_name: str = None,
        key_wrap: str = None,
        nonce: str = None,
        reference_count: int = None,
        reference_list: QueryTransactionResponseBodyResultReferenceList = None,
        type: int = None,
    ):
        self.block_height = block_height
        self.block_version = block_version
        self.category = category
        self.content = content
        self.content_hash = content_hash
        self.create_time = create_time
        self.hash = hash
        self.key_name = key_name
        self.key_wrap = key_wrap
        self.nonce = nonce
        self.reference_count = reference_count
        self.reference_list = reference_list
        self.type = type

    def validate(self):
        if self.reference_list:
            self.reference_list.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.block_height is not None:
            result['BlockHeight'] = self.block_height
        if self.block_version is not None:
            result['BlockVersion'] = self.block_version
        if self.category is not None:
            result['Category'] = self.category
        if self.content is not None:
            result['Content'] = self.content
        if self.content_hash is not None:
            result['ContentHash'] = self.content_hash
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.hash is not None:
            result['Hash'] = self.hash
        if self.key_name is not None:
            result['KeyName'] = self.key_name
        if self.key_wrap is not None:
            result['KeyWrap'] = self.key_wrap
        if self.nonce is not None:
            result['Nonce'] = self.nonce
        if self.reference_count is not None:
            result['ReferenceCount'] = self.reference_count
        if self.reference_list is not None:
            result['ReferenceList'] = self.reference_list.to_map()
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BlockHeight') is not None:
            self.block_height = m.get('BlockHeight')
        if m.get('BlockVersion') is not None:
            self.block_version = m.get('BlockVersion')
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('ContentHash') is not None:
            self.content_hash = m.get('ContentHash')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Hash') is not None:
            self.hash = m.get('Hash')
        if m.get('KeyName') is not None:
            self.key_name = m.get('KeyName')
        if m.get('KeyWrap') is not None:
            self.key_wrap = m.get('KeyWrap')
        if m.get('Nonce') is not None:
            self.nonce = m.get('Nonce')
        if m.get('ReferenceCount') is not None:
            self.reference_count = m.get('ReferenceCount')
        if m.get('ReferenceList') is not None:
            temp_model = QueryTransactionResponseBodyResultReferenceList()
            self.reference_list = temp_model.from_map(m['ReferenceList'])
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class QueryTransactionResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: QueryTransactionResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = QueryTransactionResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class QueryTransactionResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryTransactionResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryTransactionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class RejectUserRequest(TeaModel):
    def __init__(
        self,
        bid: str = None,
        bizid: str = None,
        reason: str = None,
        user_name: str = None,
    ):
        self.bid = bid
        self.bizid = bizid
        self.reason = reason
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bid is not None:
            result['Bid'] = self.bid
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        if self.reason is not None:
            result['Reason'] = self.reason
        if self.user_name is not None:
            result['UserName'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bid') is not None:
            self.bid = m.get('Bid')
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        if m.get('Reason') is not None:
            self.reason = m.get('Reason')
        if m.get('UserName') is not None:
            self.user_name = m.get('UserName')
        return self


class RejectUserResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: str = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class RejectUserResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: RejectUserResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = RejectUserResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class RenameBlockchainRequest(TeaModel):
    def __init__(
        self,
        bizid: str = None,
        new_name: str = None,
    ):
        self.bizid = bizid
        self.new_name = new_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        if self.new_name is not None:
            result['NewName'] = self.new_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        if m.get('NewName') is not None:
            self.new_name = m.get('NewName')
        return self


class RenameBlockchainResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: str = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class RenameBlockchainResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: RenameBlockchainResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = RenameBlockchainResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ResetAntChainCertificateRequest(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
    ):
        # This parameter is required.
        self.ant_chain_id = ant_chain_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        return self


class ResetAntChainCertificateResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: str = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class ResetAntChainCertificateResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ResetAntChainCertificateResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ResetAntChainCertificateResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ResetAntChainUserCertificateRequest(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        bid: str = None,
        operation: int = None,
        username: str = None,
    ):
        # This parameter is required.
        self.ant_chain_id = ant_chain_id
        # This parameter is required.
        self.bid = bid
        # This parameter is required.
        self.operation = operation
        # This parameter is required.
        self.username = username

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.bid is not None:
            result['Bid'] = self.bid
        if self.operation is not None:
            result['Operation'] = self.operation
        if self.username is not None:
            result['Username'] = self.username
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('Bid') is not None:
            self.bid = m.get('Bid')
        if m.get('Operation') is not None:
            self.operation = m.get('Operation')
        if m.get('Username') is not None:
            self.username = m.get('Username')
        return self


class ResetAntChainUserCertificateResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: str = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class ResetAntChainUserCertificateResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ResetAntChainUserCertificateResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ResetAntChainUserCertificateResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ResetCertificateRequest(TeaModel):
    def __init__(
        self,
        bizid: str = None,
    ):
        self.bizid = bizid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        return self


class ResetCertificateResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: str = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class ResetCertificateResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ResetCertificateResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ResetCertificateResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ResetOrganizationUserPasswordRequest(TeaModel):
    def __init__(
        self,
        location: str = None,
        organization_id: str = None,
        password: str = None,
        username: str = None,
    ):
        self.location = location
        # This parameter is required.
        self.organization_id = organization_id
        self.password = password
        # This parameter is required.
        self.username = username

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.location is not None:
            result['Location'] = self.location
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        if self.password is not None:
            result['Password'] = self.password
        if self.username is not None:
            result['Username'] = self.username
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Location') is not None:
            self.location = m.get('Location')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        if m.get('Password') is not None:
            self.password = m.get('Password')
        if m.get('Username') is not None:
            self.username = m.get('Username')
        return self


class ResetOrganizationUserPasswordResponseBodyResult(TeaModel):
    def __init__(
        self,
        create_time: str = None,
        expire_time: str = None,
        fullname: str = None,
        organization_id: str = None,
        password: str = None,
        username: str = None,
    ):
        self.create_time = create_time
        self.expire_time = expire_time
        self.fullname = fullname
        self.organization_id = organization_id
        self.password = password
        self.username = username

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.fullname is not None:
            result['Fullname'] = self.fullname
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        if self.password is not None:
            result['Password'] = self.password
        if self.username is not None:
            result['Username'] = self.username
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('Fullname') is not None:
            self.fullname = m.get('Fullname')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        if m.get('Password') is not None:
            self.password = m.get('Password')
        if m.get('Username') is not None:
            self.username = m.get('Username')
        return self


class ResetOrganizationUserPasswordResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: ResetOrganizationUserPasswordResponseBodyResult = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = ResetOrganizationUserPasswordResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ResetOrganizationUserPasswordResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ResetOrganizationUserPasswordResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ResetOrganizationUserPasswordResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ResetPublicAntChainCertificateRequest(TeaModel):
    def __init__(
        self,
        bizid: str = None,
    ):
        self.bizid = bizid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        return self


class ResetPublicAntChainCertificateResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: str = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class ResetPublicAntChainCertificateResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ResetPublicAntChainCertificateResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ResetPublicAntChainCertificateResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ResetUserRequest(TeaModel):
    def __init__(
        self,
        bid: str = None,
        bizid: str = None,
        operation: int = None,
        user_name: str = None,
    ):
        self.bid = bid
        self.bizid = bizid
        self.operation = operation
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bid is not None:
            result['Bid'] = self.bid
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        if self.operation is not None:
            result['Operation'] = self.operation
        if self.user_name is not None:
            result['UserName'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bid') is not None:
            self.bid = m.get('Bid')
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        if m.get('Operation') is not None:
            self.operation = m.get('Operation')
        if m.get('UserName') is not None:
            self.user_name = m.get('UserName')
        return self


class ResetUserResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: str = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class ResetUserResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ResetUserResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ResetUserResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SchemaDetailRequest(TeaModel):
    def __init__(
        self,
        bizid: str = None,
        schema_id: int = None,
    ):
        self.bizid = bizid
        self.schema_id = schema_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        if self.schema_id is not None:
            result['SchemaId'] = self.schema_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        if m.get('SchemaId') is not None:
            self.schema_id = m.get('SchemaId')
        return self


class SchemaDetailResponseBodyResultResponsesPropertiesDataSource(TeaModel):
    def __init__(
        self,
        allow_null: int = None,
        annotation: str = None,
        field: str = None,
        indexes: int = None,
        key: int = None,
        length: int = None,
        reg: str = None,
        type: str = None,
    ):
        self.allow_null = allow_null
        self.annotation = annotation
        self.field = field
        self.indexes = indexes
        self.key = key
        self.length = length
        self.reg = reg
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.allow_null is not None:
            result['AllowNull'] = self.allow_null
        if self.annotation is not None:
            result['Annotation'] = self.annotation
        if self.field is not None:
            result['Field'] = self.field
        if self.indexes is not None:
            result['Indexes'] = self.indexes
        if self.key is not None:
            result['Key'] = self.key
        if self.length is not None:
            result['Length'] = self.length
        if self.reg is not None:
            result['Reg'] = self.reg
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AllowNull') is not None:
            self.allow_null = m.get('AllowNull')
        if m.get('Annotation') is not None:
            self.annotation = m.get('Annotation')
        if m.get('Field') is not None:
            self.field = m.get('Field')
        if m.get('Indexes') is not None:
            self.indexes = m.get('Indexes')
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Length') is not None:
            self.length = m.get('Length')
        if m.get('Reg') is not None:
            self.reg = m.get('Reg')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class SchemaDetailResponseBodyResultResponsesProperties(TeaModel):
    def __init__(
        self,
        count: int = None,
        data_source: List[SchemaDetailResponseBodyResultResponsesPropertiesDataSource] = None,
    ):
        self.count = count
        self.data_source = data_source

    def validate(self):
        if self.data_source:
            for k in self.data_source:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.count is not None:
            result['Count'] = self.count
        result['DataSource'] = []
        if self.data_source is not None:
            for k in self.data_source:
                result['DataSource'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Count') is not None:
            self.count = m.get('Count')
        self.data_source = []
        if m.get('DataSource') is not None:
            for k in m.get('DataSource'):
                temp_model = SchemaDetailResponseBodyResultResponsesPropertiesDataSource()
                self.data_source.append(temp_model.from_map(k))
        return self


class SchemaDetailResponseBodyResultResponses(TeaModel):
    def __init__(
        self,
        category: str = None,
        category_name: str = None,
        description: str = None,
        properties: SchemaDetailResponseBodyResultResponsesProperties = None,
    ):
        self.category = category
        self.category_name = category_name
        self.description = description
        self.properties = properties

    def validate(self):
        if self.properties:
            self.properties.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['Category'] = self.category
        if self.category_name is not None:
            result['CategoryName'] = self.category_name
        if self.description is not None:
            result['Description'] = self.description
        if self.properties is not None:
            result['Properties'] = self.properties.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('CategoryName') is not None:
            self.category_name = m.get('CategoryName')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Properties') is not None:
            temp_model = SchemaDetailResponseBodyResultResponsesProperties()
            self.properties = temp_model.from_map(m['Properties'])
        return self


class SchemaDetailResponseBodyResultSchema(TeaModel):
    def __init__(
        self,
        create_time: int = None,
        description: str = None,
        id: int = None,
        is_template: bool = None,
        name: str = None,
        update_time: int = None,
        version: int = None,
    ):
        self.create_time = create_time
        self.description = description
        self.id = id
        self.is_template = is_template
        self.name = name
        self.update_time = update_time
        self.version = version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.description is not None:
            result['Description'] = self.description
        if self.id is not None:
            result['Id'] = self.id
        if self.is_template is not None:
            result['IsTemplate'] = self.is_template
        if self.name is not None:
            result['Name'] = self.name
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('IsTemplate') is not None:
            self.is_template = m.get('IsTemplate')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class SchemaDetailResponseBodyResult(TeaModel):
    def __init__(
        self,
        responses: List[SchemaDetailResponseBodyResultResponses] = None,
        schema: SchemaDetailResponseBodyResultSchema = None,
    ):
        self.responses = responses
        self.schema = schema

    def validate(self):
        if self.responses:
            for k in self.responses:
                if k:
                    k.validate()
        if self.schema:
            self.schema.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Responses'] = []
        if self.responses is not None:
            for k in self.responses:
                result['Responses'].append(k.to_map() if k else None)
        if self.schema is not None:
            result['Schema'] = self.schema.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.responses = []
        if m.get('Responses') is not None:
            for k in m.get('Responses'):
                temp_model = SchemaDetailResponseBodyResultResponses()
                self.responses.append(temp_model.from_map(k))
        if m.get('Schema') is not None:
            temp_model = SchemaDetailResponseBodyResultSchema()
            self.schema = temp_model.from_map(m['Schema'])
        return self


class SchemaDetailResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: SchemaDetailResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = SchemaDetailResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class SchemaDetailResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: SchemaDetailResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SchemaDetailResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class StartSmartContractJobRequest(TeaModel):
    def __init__(
        self,
        job_id: str = None,
        job_name: str = None,
        source_opt: str = None,
        source_type: str = None,
    ):
        # This parameter is required.
        self.job_id = job_id
        # This parameter is required.
        self.job_name = job_name
        self.source_opt = source_opt
        # This parameter is required.
        self.source_type = source_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.job_name is not None:
            result['JobName'] = self.job_name
        if self.source_opt is not None:
            result['SourceOpt'] = self.source_opt
        if self.source_type is not None:
            result['SourceType'] = self.source_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('JobName') is not None:
            self.job_name = m.get('JobName')
        if m.get('SourceOpt') is not None:
            self.source_opt = m.get('SourceOpt')
        if m.get('SourceType') is not None:
            self.source_type = m.get('SourceType')
        return self


class StartSmartContractJobResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: str = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class StartSmartContractJobResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: StartSmartContractJobResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = StartSmartContractJobResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SubmitFabricChaincodeDefinitionRequest(TeaModel):
    def __init__(
        self,
        chaincode_package_id: str = None,
        chaincode_version: str = None,
        channel_id: str = None,
        collection_config: str = None,
        endorse_policy: str = None,
        init_required: bool = None,
        location: str = None,
        name: str = None,
        organization_id: str = None,
    ):
        # This parameter is required.
        self.chaincode_package_id = chaincode_package_id
        # This parameter is required.
        self.chaincode_version = chaincode_version
        # This parameter is required.
        self.channel_id = channel_id
        self.collection_config = collection_config
        self.endorse_policy = endorse_policy
        self.init_required = init_required
        self.location = location
        # This parameter is required.
        self.name = name
        # This parameter is required.
        self.organization_id = organization_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.chaincode_package_id is not None:
            result['ChaincodePackageId'] = self.chaincode_package_id
        if self.chaincode_version is not None:
            result['ChaincodeVersion'] = self.chaincode_version
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.collection_config is not None:
            result['CollectionConfig'] = self.collection_config
        if self.endorse_policy is not None:
            result['EndorsePolicy'] = self.endorse_policy
        if self.init_required is not None:
            result['InitRequired'] = self.init_required
        if self.location is not None:
            result['Location'] = self.location
        if self.name is not None:
            result['Name'] = self.name
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChaincodePackageId') is not None:
            self.chaincode_package_id = m.get('ChaincodePackageId')
        if m.get('ChaincodeVersion') is not None:
            self.chaincode_version = m.get('ChaincodeVersion')
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('CollectionConfig') is not None:
            self.collection_config = m.get('CollectionConfig')
        if m.get('EndorsePolicy') is not None:
            self.endorse_policy = m.get('EndorsePolicy')
        if m.get('InitRequired') is not None:
            self.init_required = m.get('InitRequired')
        if m.get('Location') is not None:
            self.location = m.get('Location')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        return self


class SubmitFabricChaincodeDefinitionResponseBodyResult(TeaModel):
    def __init__(
        self,
        chaincode_id: str = None,
        channel_name: str = None,
        consortium_id: str = None,
        create_time: str = None,
        deploy_time: str = None,
        endorse_policy: str = None,
        input: str = None,
        install: bool = None,
        message: str = None,
        name: str = None,
        path: str = None,
        provider_id: str = None,
        provider_name: str = None,
        state: str = None,
        type: int = None,
        version: str = None,
    ):
        self.chaincode_id = chaincode_id
        self.channel_name = channel_name
        self.consortium_id = consortium_id
        self.create_time = create_time
        self.deploy_time = deploy_time
        self.endorse_policy = endorse_policy
        self.input = input
        self.install = install
        self.message = message
        self.name = name
        self.path = path
        self.provider_id = provider_id
        self.provider_name = provider_name
        self.state = state
        self.type = type
        self.version = version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.chaincode_id is not None:
            result['ChaincodeId'] = self.chaincode_id
        if self.channel_name is not None:
            result['ChannelName'] = self.channel_name
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.deploy_time is not None:
            result['DeployTime'] = self.deploy_time
        if self.endorse_policy is not None:
            result['EndorsePolicy'] = self.endorse_policy
        if self.input is not None:
            result['Input'] = self.input
        if self.install is not None:
            result['Install'] = self.install
        if self.message is not None:
            result['Message'] = self.message
        if self.name is not None:
            result['Name'] = self.name
        if self.path is not None:
            result['Path'] = self.path
        if self.provider_id is not None:
            result['ProviderId'] = self.provider_id
        if self.provider_name is not None:
            result['ProviderName'] = self.provider_name
        if self.state is not None:
            result['State'] = self.state
        if self.type is not None:
            result['Type'] = self.type
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChaincodeId') is not None:
            self.chaincode_id = m.get('ChaincodeId')
        if m.get('ChannelName') is not None:
            self.channel_name = m.get('ChannelName')
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('DeployTime') is not None:
            self.deploy_time = m.get('DeployTime')
        if m.get('EndorsePolicy') is not None:
            self.endorse_policy = m.get('EndorsePolicy')
        if m.get('Input') is not None:
            self.input = m.get('Input')
        if m.get('Install') is not None:
            self.install = m.get('Install')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Path') is not None:
            self.path = m.get('Path')
        if m.get('ProviderId') is not None:
            self.provider_id = m.get('ProviderId')
        if m.get('ProviderName') is not None:
            self.provider_name = m.get('ProviderName')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class SubmitFabricChaincodeDefinitionResponseBody(TeaModel):
    def __init__(
        self,
        chaincode_definition_id: str = None,
        chaincode_package_id: str = None,
        error_code: int = None,
        init_required: bool = None,
        request_id: str = None,
        result: SubmitFabricChaincodeDefinitionResponseBodyResult = None,
        success: bool = None,
    ):
        self.chaincode_definition_id = chaincode_definition_id
        self.chaincode_package_id = chaincode_package_id
        self.error_code = error_code
        self.init_required = init_required
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.chaincode_definition_id is not None:
            result['ChaincodeDefinitionId'] = self.chaincode_definition_id
        if self.chaincode_package_id is not None:
            result['ChaincodePackageId'] = self.chaincode_package_id
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.init_required is not None:
            result['InitRequired'] = self.init_required
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChaincodeDefinitionId') is not None:
            self.chaincode_definition_id = m.get('ChaincodeDefinitionId')
        if m.get('ChaincodePackageId') is not None:
            self.chaincode_package_id = m.get('ChaincodePackageId')
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('InitRequired') is not None:
            self.init_required = m.get('InitRequired')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = SubmitFabricChaincodeDefinitionResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class SubmitFabricChaincodeDefinitionResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: SubmitFabricChaincodeDefinitionResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SubmitFabricChaincodeDefinitionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SyncFabricChaincodeStatusRequest(TeaModel):
    def __init__(
        self,
        chaincode_id: str = None,
        organization_id: str = None,
    ):
        # This parameter is required.
        self.chaincode_id = chaincode_id
        # This parameter is required.
        self.organization_id = organization_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.chaincode_id is not None:
            result['ChaincodeId'] = self.chaincode_id
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChaincodeId') is not None:
            self.chaincode_id = m.get('ChaincodeId')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        return self


class SyncFabricChaincodeStatusResponseBodyResult(TeaModel):
    def __init__(
        self,
        chaincode_id: str = None,
        input: str = None,
        name: str = None,
        path: int = None,
        state: str = None,
        type: int = None,
        version: str = None,
    ):
        self.chaincode_id = chaincode_id
        self.input = input
        self.name = name
        self.path = path
        self.state = state
        self.type = type
        self.version = version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.chaincode_id is not None:
            result['ChaincodeId'] = self.chaincode_id
        if self.input is not None:
            result['Input'] = self.input
        if self.name is not None:
            result['Name'] = self.name
        if self.path is not None:
            result['Path'] = self.path
        if self.state is not None:
            result['State'] = self.state
        if self.type is not None:
            result['Type'] = self.type
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChaincodeId') is not None:
            self.chaincode_id = m.get('ChaincodeId')
        if m.get('Input') is not None:
            self.input = m.get('Input')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Path') is not None:
            self.path = m.get('Path')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class SyncFabricChaincodeStatusResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: SyncFabricChaincodeStatusResponseBodyResult = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = SyncFabricChaincodeStatusResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class SyncFabricChaincodeStatusResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: SyncFabricChaincodeStatusResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SyncFabricChaincodeStatusResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SynchronizeChaincodeRequest(TeaModel):
    def __init__(
        self,
        chaincode_id: str = None,
        organization_id: str = None,
    ):
        # This parameter is required.
        self.chaincode_id = chaincode_id
        # This parameter is required.
        self.organization_id = organization_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.chaincode_id is not None:
            result['ChaincodeId'] = self.chaincode_id
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChaincodeId') is not None:
            self.chaincode_id = m.get('ChaincodeId')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        return self


class SynchronizeChaincodeResponseBodyResult(TeaModel):
    def __init__(
        self,
        chaincode_id: str = None,
        channel_name: str = None,
        consortium_id: str = None,
        create_time: str = None,
        deploy_time: str = None,
        endorse_policy: str = None,
        input: str = None,
        install: bool = None,
        message: str = None,
        name: str = None,
        path: str = None,
        provider_id: str = None,
        provider_name: str = None,
        state: str = None,
        type: int = None,
        version: str = None,
    ):
        self.chaincode_id = chaincode_id
        self.channel_name = channel_name
        self.consortium_id = consortium_id
        self.create_time = create_time
        self.deploy_time = deploy_time
        self.endorse_policy = endorse_policy
        self.input = input
        self.install = install
        self.message = message
        self.name = name
        self.path = path
        self.provider_id = provider_id
        self.provider_name = provider_name
        self.state = state
        self.type = type
        self.version = version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.chaincode_id is not None:
            result['ChaincodeId'] = self.chaincode_id
        if self.channel_name is not None:
            result['ChannelName'] = self.channel_name
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.deploy_time is not None:
            result['DeployTime'] = self.deploy_time
        if self.endorse_policy is not None:
            result['EndorsePolicy'] = self.endorse_policy
        if self.input is not None:
            result['Input'] = self.input
        if self.install is not None:
            result['Install'] = self.install
        if self.message is not None:
            result['Message'] = self.message
        if self.name is not None:
            result['Name'] = self.name
        if self.path is not None:
            result['Path'] = self.path
        if self.provider_id is not None:
            result['ProviderId'] = self.provider_id
        if self.provider_name is not None:
            result['ProviderName'] = self.provider_name
        if self.state is not None:
            result['State'] = self.state
        if self.type is not None:
            result['Type'] = self.type
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChaincodeId') is not None:
            self.chaincode_id = m.get('ChaincodeId')
        if m.get('ChannelName') is not None:
            self.channel_name = m.get('ChannelName')
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('DeployTime') is not None:
            self.deploy_time = m.get('DeployTime')
        if m.get('EndorsePolicy') is not None:
            self.endorse_policy = m.get('EndorsePolicy')
        if m.get('Input') is not None:
            self.input = m.get('Input')
        if m.get('Install') is not None:
            self.install = m.get('Install')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Path') is not None:
            self.path = m.get('Path')
        if m.get('ProviderId') is not None:
            self.provider_id = m.get('ProviderId')
        if m.get('ProviderName') is not None:
            self.provider_name = m.get('ProviderName')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class SynchronizeChaincodeResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: SynchronizeChaincodeResponseBodyResult = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = SynchronizeChaincodeResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class SynchronizeChaincodeResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: SynchronizeChaincodeResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SynchronizeChaincodeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TagResourcesRequestTag(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class TagResourcesRequest(TeaModel):
    def __init__(
        self,
        resource_id: List[str] = None,
        resource_type: str = None,
        tag: List[TagResourcesRequestTag] = None,
    ):
        self.resource_id = resource_id
        # This parameter is required.
        self.resource_type = resource_type
        self.tag = tag

    def validate(self):
        if self.tag:
            for k in self.tag:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.resource_id is not None:
            result['ResourceId'] = self.resource_id
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        result['Tag'] = []
        if self.tag is not None:
            for k in self.tag:
                result['Tag'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ResourceId') is not None:
            self.resource_id = m.get('ResourceId')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        self.tag = []
        if m.get('Tag') is not None:
            for k in m.get('Tag'):
                temp_model = TagResourcesRequestTag()
                self.tag.append(temp_model.from_map(k))
        return self


class TagResourcesResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: bool = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class TagResourcesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: TagResourcesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TagResourcesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UnfreezeAccountRequest(TeaModel):
    def __init__(
        self,
        account: str = None,
        bizid: str = None,
    ):
        self.account = account
        self.bizid = bizid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account is not None:
            result['Account'] = self.account
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Account') is not None:
            self.account = m.get('Account')
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        return self


class UnfreezeAccountResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: str = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class UnfreezeAccountResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UnfreezeAccountResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UnfreezeAccountResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UnfreezeAntChainAccountRequest(TeaModel):
    def __init__(
        self,
        account: str = None,
        ant_chain_id: str = None,
    ):
        # This parameter is required.
        self.account = account
        # This parameter is required.
        self.ant_chain_id = ant_chain_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account is not None:
            result['Account'] = self.account
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Account') is not None:
            self.account = m.get('Account')
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        return self


class UnfreezeAntChainAccountResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: str = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class UnfreezeAntChainAccountResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UnfreezeAntChainAccountResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UnfreezeAntChainAccountResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UntagResourcesRequest(TeaModel):
    def __init__(
        self,
        all: bool = None,
        resource_id: List[str] = None,
        resource_type: str = None,
        tag_key: List[str] = None,
    ):
        self.all = all
        self.resource_id = resource_id
        # This parameter is required.
        self.resource_type = resource_type
        self.tag_key = tag_key

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.all is not None:
            result['All'] = self.all
        if self.resource_id is not None:
            result['ResourceId'] = self.resource_id
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        if self.tag_key is not None:
            result['TagKey'] = self.tag_key
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('All') is not None:
            self.all = m.get('All')
        if m.get('ResourceId') is not None:
            self.resource_id = m.get('ResourceId')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        if m.get('TagKey') is not None:
            self.tag_key = m.get('TagKey')
        return self


class UntagResourcesResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: bool = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class UntagResourcesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UntagResourcesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UntagResourcesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateAntChainRequest(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        ant_chain_name: str = None,
    ):
        # This parameter is required.
        self.ant_chain_id = ant_chain_id
        # This parameter is required.
        self.ant_chain_name = ant_chain_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.ant_chain_name is not None:
            result['AntChainName'] = self.ant_chain_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('AntChainName') is not None:
            self.ant_chain_name = m.get('AntChainName')
        return self


class UpdateAntChainResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: str = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class UpdateAntChainResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UpdateAntChainResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateAntChainResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateAntChainConsortiumRequest(TeaModel):
    def __init__(
        self,
        consortium_description: str = None,
        consortium_id: str = None,
        consortium_name: str = None,
    ):
        self.consortium_description = consortium_description
        # This parameter is required.
        self.consortium_id = consortium_id
        # This parameter is required.
        self.consortium_name = consortium_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.consortium_description is not None:
            result['ConsortiumDescription'] = self.consortium_description
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.consortium_name is not None:
            result['ConsortiumName'] = self.consortium_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ConsortiumDescription') is not None:
            self.consortium_description = m.get('ConsortiumDescription')
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('ConsortiumName') is not None:
            self.consortium_name = m.get('ConsortiumName')
        return self


class UpdateAntChainConsortiumResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: str = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class UpdateAntChainConsortiumResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UpdateAntChainConsortiumResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateAntChainConsortiumResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateAntChainContractContentRequest(TeaModel):
    def __init__(
        self,
        content: str = None,
        content_id: str = None,
        content_name: str = None,
        parent_content_id: str = None,
    ):
        self.content = content
        # This parameter is required.
        self.content_id = content_id
        self.content_name = content_name
        self.parent_content_id = parent_content_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['Content'] = self.content
        if self.content_id is not None:
            result['ContentId'] = self.content_id
        if self.content_name is not None:
            result['ContentName'] = self.content_name
        if self.parent_content_id is not None:
            result['ParentContentId'] = self.parent_content_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('ContentId') is not None:
            self.content_id = m.get('ContentId')
        if m.get('ContentName') is not None:
            self.content_name = m.get('ContentName')
        if m.get('ParentContentId') is not None:
            self.parent_content_id = m.get('ParentContentId')
        return self


class UpdateAntChainContractContentResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: str = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class UpdateAntChainContractContentResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UpdateAntChainContractContentResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateAntChainContractContentResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateAntChainContractProjectRequest(TeaModel):
    def __init__(
        self,
        project_description: str = None,
        project_id: str = None,
        project_name: str = None,
        project_version: str = None,
    ):
        self.project_description = project_description
        # This parameter is required.
        self.project_id = project_id
        self.project_name = project_name
        self.project_version = project_version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.project_description is not None:
            result['ProjectDescription'] = self.project_description
        if self.project_id is not None:
            result['ProjectId'] = self.project_id
        if self.project_name is not None:
            result['ProjectName'] = self.project_name
        if self.project_version is not None:
            result['ProjectVersion'] = self.project_version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ProjectDescription') is not None:
            self.project_description = m.get('ProjectDescription')
        if m.get('ProjectId') is not None:
            self.project_id = m.get('ProjectId')
        if m.get('ProjectName') is not None:
            self.project_name = m.get('ProjectName')
        if m.get('ProjectVersion') is not None:
            self.project_version = m.get('ProjectVersion')
        return self


class UpdateAntChainContractProjectResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: str = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class UpdateAntChainContractProjectResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UpdateAntChainContractProjectResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateAntChainContractProjectResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateAntChainMemberRequest(TeaModel):
    def __init__(
        self,
        consortium_id: str = None,
        member_id: str = None,
        member_name: str = None,
    ):
        # This parameter is required.
        self.consortium_id = consortium_id
        # This parameter is required.
        self.member_id = member_id
        # This parameter is required.
        self.member_name = member_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.member_id is not None:
            result['MemberId'] = self.member_id
        if self.member_name is not None:
            result['MemberName'] = self.member_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('MemberId') is not None:
            self.member_id = m.get('MemberId')
        if m.get('MemberName') is not None:
            self.member_name = m.get('MemberName')
        return self


class UpdateAntChainMemberResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: str = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class UpdateAntChainMemberResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UpdateAntChainMemberResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateAntChainMemberResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateAntChainQRCodeAuthorizationRequest(TeaModel):
    def __init__(
        self,
        ant_chain_id: str = None,
        authorization_type: str = None,
        qrcode_type: str = None,
    ):
        # This parameter is required.
        self.ant_chain_id = ant_chain_id
        # This parameter is required.
        self.authorization_type = authorization_type
        # This parameter is required.
        self.qrcode_type = qrcode_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ant_chain_id is not None:
            result['AntChainId'] = self.ant_chain_id
        if self.authorization_type is not None:
            result['AuthorizationType'] = self.authorization_type
        if self.qrcode_type is not None:
            result['QRCodeType'] = self.qrcode_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AntChainId') is not None:
            self.ant_chain_id = m.get('AntChainId')
        if m.get('AuthorizationType') is not None:
            self.authorization_type = m.get('AuthorizationType')
        if m.get('QRCodeType') is not None:
            self.qrcode_type = m.get('QRCodeType')
        return self


class UpdateAntChainQRCodeAuthorizationResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: str = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class UpdateAntChainQRCodeAuthorizationResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UpdateAntChainQRCodeAuthorizationResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateAntChainQRCodeAuthorizationResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateBlockchainSchemaRequest(TeaModel):
    def __init__(
        self,
        bizid: str = None,
        category_configs: str = None,
        description: str = None,
        schema_id: int = None,
        schema_name: str = None,
    ):
        self.bizid = bizid
        self.category_configs = category_configs
        self.description = description
        self.schema_id = schema_id
        self.schema_name = schema_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        if self.category_configs is not None:
            result['CategoryConfigs'] = self.category_configs
        if self.description is not None:
            result['Description'] = self.description
        if self.schema_id is not None:
            result['SchemaId'] = self.schema_id
        if self.schema_name is not None:
            result['SchemaName'] = self.schema_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        if m.get('CategoryConfigs') is not None:
            self.category_configs = m.get('CategoryConfigs')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('SchemaId') is not None:
            self.schema_id = m.get('SchemaId')
        if m.get('SchemaName') is not None:
            self.schema_name = m.get('SchemaName')
        return self


class UpdateBlockchainSchemaResponseBodyResultResponsesPropertiesDataSource(TeaModel):
    def __init__(
        self,
        allow_null: int = None,
        annotation: str = None,
        field: str = None,
        indexes: int = None,
        key: int = None,
        length: int = None,
        reg: str = None,
        type: str = None,
    ):
        self.allow_null = allow_null
        self.annotation = annotation
        self.field = field
        self.indexes = indexes
        self.key = key
        self.length = length
        self.reg = reg
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.allow_null is not None:
            result['AllowNull'] = self.allow_null
        if self.annotation is not None:
            result['Annotation'] = self.annotation
        if self.field is not None:
            result['Field'] = self.field
        if self.indexes is not None:
            result['Indexes'] = self.indexes
        if self.key is not None:
            result['Key'] = self.key
        if self.length is not None:
            result['Length'] = self.length
        if self.reg is not None:
            result['Reg'] = self.reg
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AllowNull') is not None:
            self.allow_null = m.get('AllowNull')
        if m.get('Annotation') is not None:
            self.annotation = m.get('Annotation')
        if m.get('Field') is not None:
            self.field = m.get('Field')
        if m.get('Indexes') is not None:
            self.indexes = m.get('Indexes')
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Length') is not None:
            self.length = m.get('Length')
        if m.get('Reg') is not None:
            self.reg = m.get('Reg')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class UpdateBlockchainSchemaResponseBodyResultResponsesProperties(TeaModel):
    def __init__(
        self,
        count: int = None,
        data_source: List[UpdateBlockchainSchemaResponseBodyResultResponsesPropertiesDataSource] = None,
    ):
        self.count = count
        self.data_source = data_source

    def validate(self):
        if self.data_source:
            for k in self.data_source:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.count is not None:
            result['Count'] = self.count
        result['DataSource'] = []
        if self.data_source is not None:
            for k in self.data_source:
                result['DataSource'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Count') is not None:
            self.count = m.get('Count')
        self.data_source = []
        if m.get('DataSource') is not None:
            for k in m.get('DataSource'):
                temp_model = UpdateBlockchainSchemaResponseBodyResultResponsesPropertiesDataSource()
                self.data_source.append(temp_model.from_map(k))
        return self


class UpdateBlockchainSchemaResponseBodyResultResponses(TeaModel):
    def __init__(
        self,
        category: str = None,
        category_name: str = None,
        description: str = None,
        properties: UpdateBlockchainSchemaResponseBodyResultResponsesProperties = None,
    ):
        self.category = category
        self.category_name = category_name
        self.description = description
        self.properties = properties

    def validate(self):
        if self.properties:
            self.properties.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['Category'] = self.category
        if self.category_name is not None:
            result['CategoryName'] = self.category_name
        if self.description is not None:
            result['Description'] = self.description
        if self.properties is not None:
            result['Properties'] = self.properties.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('CategoryName') is not None:
            self.category_name = m.get('CategoryName')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Properties') is not None:
            temp_model = UpdateBlockchainSchemaResponseBodyResultResponsesProperties()
            self.properties = temp_model.from_map(m['Properties'])
        return self


class UpdateBlockchainSchemaResponseBodyResultSchema(TeaModel):
    def __init__(
        self,
        create_time: int = None,
        description: str = None,
        id: int = None,
        is_template: bool = None,
        name: str = None,
        update_time: int = None,
        version: int = None,
    ):
        self.create_time = create_time
        self.description = description
        self.id = id
        self.is_template = is_template
        self.name = name
        self.update_time = update_time
        self.version = version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.description is not None:
            result['Description'] = self.description
        if self.id is not None:
            result['Id'] = self.id
        if self.is_template is not None:
            result['IsTemplate'] = self.is_template
        if self.name is not None:
            result['Name'] = self.name
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('IsTemplate') is not None:
            self.is_template = m.get('IsTemplate')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class UpdateBlockchainSchemaResponseBodyResult(TeaModel):
    def __init__(
        self,
        responses: List[UpdateBlockchainSchemaResponseBodyResultResponses] = None,
        schema: UpdateBlockchainSchemaResponseBodyResultSchema = None,
    ):
        self.responses = responses
        self.schema = schema

    def validate(self):
        if self.responses:
            for k in self.responses:
                if k:
                    k.validate()
        if self.schema:
            self.schema.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Responses'] = []
        if self.responses is not None:
            for k in self.responses:
                result['Responses'].append(k.to_map() if k else None)
        if self.schema is not None:
            result['Schema'] = self.schema.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.responses = []
        if m.get('Responses') is not None:
            for k in m.get('Responses'):
                temp_model = UpdateBlockchainSchemaResponseBodyResultResponses()
                self.responses.append(temp_model.from_map(k))
        if m.get('Schema') is not None:
            temp_model = UpdateBlockchainSchemaResponseBodyResultSchema()
            self.schema = temp_model.from_map(m['Schema'])
        return self


class UpdateBlockchainSchemaResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: UpdateBlockchainSchemaResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = UpdateBlockchainSchemaResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class UpdateBlockchainSchemaResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UpdateBlockchainSchemaResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateBlockchainSchemaResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateChannelConfigRequest(TeaModel):
    def __init__(
        self,
        batch_timeout: int = None,
        channel_id: str = None,
        max_message_count: int = None,
        organization_id: str = None,
        preferred_max_bytes: int = None,
    ):
        # This parameter is required.
        self.batch_timeout = batch_timeout
        # This parameter is required.
        self.channel_id = channel_id
        # This parameter is required.
        self.max_message_count = max_message_count
        self.organization_id = organization_id
        # This parameter is required.
        self.preferred_max_bytes = preferred_max_bytes

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.batch_timeout is not None:
            result['BatchTimeout'] = self.batch_timeout
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.max_message_count is not None:
            result['MaxMessageCount'] = self.max_message_count
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        if self.preferred_max_bytes is not None:
            result['PreferredMaxBytes'] = self.preferred_max_bytes
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BatchTimeout') is not None:
            self.batch_timeout = m.get('BatchTimeout')
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('MaxMessageCount') is not None:
            self.max_message_count = m.get('MaxMessageCount')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        if m.get('PreferredMaxBytes') is not None:
            self.preferred_max_bytes = m.get('PreferredMaxBytes')
        return self


class UpdateChannelConfigResponseBodyResult(TeaModel):
    def __init__(
        self,
        batch_timeout: int = None,
        block_count: int = None,
        chaincode_count: int = None,
        channel_id: str = None,
        consortium_id: str = None,
        consortium_name: str = None,
        create_time: str = None,
        max_message_count: int = None,
        member_count: int = None,
        name: str = None,
        owner_bid: str = None,
        owner_name: str = None,
        owner_uid: int = None,
        preferred_max_bytes: int = None,
        request_id: str = None,
        state: str = None,
        support_config: bool = None,
        update_time: str = None,
    ):
        self.batch_timeout = batch_timeout
        self.block_count = block_count
        self.chaincode_count = chaincode_count
        self.channel_id = channel_id
        self.consortium_id = consortium_id
        self.consortium_name = consortium_name
        self.create_time = create_time
        self.max_message_count = max_message_count
        self.member_count = member_count
        self.name = name
        self.owner_bid = owner_bid
        self.owner_name = owner_name
        self.owner_uid = owner_uid
        self.preferred_max_bytes = preferred_max_bytes
        self.request_id = request_id
        self.state = state
        self.support_config = support_config
        self.update_time = update_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.batch_timeout is not None:
            result['BatchTimeout'] = self.batch_timeout
        if self.block_count is not None:
            result['BlockCount'] = self.block_count
        if self.chaincode_count is not None:
            result['ChaincodeCount'] = self.chaincode_count
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.consortium_name is not None:
            result['ConsortiumName'] = self.consortium_name
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.max_message_count is not None:
            result['MaxMessageCount'] = self.max_message_count
        if self.member_count is not None:
            result['MemberCount'] = self.member_count
        if self.name is not None:
            result['Name'] = self.name
        if self.owner_bid is not None:
            result['OwnerBid'] = self.owner_bid
        if self.owner_name is not None:
            result['OwnerName'] = self.owner_name
        if self.owner_uid is not None:
            result['OwnerUid'] = self.owner_uid
        if self.preferred_max_bytes is not None:
            result['PreferredMaxBytes'] = self.preferred_max_bytes
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.state is not None:
            result['State'] = self.state
        if self.support_config is not None:
            result['SupportConfig'] = self.support_config
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BatchTimeout') is not None:
            self.batch_timeout = m.get('BatchTimeout')
        if m.get('BlockCount') is not None:
            self.block_count = m.get('BlockCount')
        if m.get('ChaincodeCount') is not None:
            self.chaincode_count = m.get('ChaincodeCount')
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('ConsortiumName') is not None:
            self.consortium_name = m.get('ConsortiumName')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('MaxMessageCount') is not None:
            self.max_message_count = m.get('MaxMessageCount')
        if m.get('MemberCount') is not None:
            self.member_count = m.get('MemberCount')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('OwnerBid') is not None:
            self.owner_bid = m.get('OwnerBid')
        if m.get('OwnerName') is not None:
            self.owner_name = m.get('OwnerName')
        if m.get('OwnerUid') is not None:
            self.owner_uid = m.get('OwnerUid')
        if m.get('PreferredMaxBytes') is not None:
            self.preferred_max_bytes = m.get('PreferredMaxBytes')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('SupportConfig') is not None:
            self.support_config = m.get('SupportConfig')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        return self


class UpdateChannelConfigResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: UpdateChannelConfigResponseBodyResult = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = UpdateChannelConfigResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class UpdateChannelConfigResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UpdateChannelConfigResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateChannelConfigResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateEthereumRequest(TeaModel):
    def __init__(
        self,
        description: str = None,
        ethereum_id: str = None,
        name: str = None,
    ):
        self.description = description
        # This parameter is required.
        self.ethereum_id = ethereum_id
        self.name = name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.ethereum_id is not None:
            result['EthereumId'] = self.ethereum_id
        if self.name is not None:
            result['Name'] = self.name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('EthereumId') is not None:
            self.ethereum_id = m.get('EthereumId')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        return self


class UpdateEthereumResponseBodyResult(TeaModel):
    def __init__(
        self,
        consensus: str = None,
        creator: str = None,
        description: str = None,
        id: str = None,
        name: str = None,
        network_id: str = None,
        region_id: str = None,
        state: str = None,
    ):
        self.consensus = consensus
        self.creator = creator
        self.description = description
        self.id = id
        self.name = name
        self.network_id = network_id
        self.region_id = region_id
        self.state = state

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.consensus is not None:
            result['Consensus'] = self.consensus
        if self.creator is not None:
            result['Creator'] = self.creator
        if self.description is not None:
            result['Description'] = self.description
        if self.id is not None:
            result['Id'] = self.id
        if self.name is not None:
            result['Name'] = self.name
        if self.network_id is not None:
            result['NetworkId'] = self.network_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.state is not None:
            result['State'] = self.state
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Consensus') is not None:
            self.consensus = m.get('Consensus')
        if m.get('Creator') is not None:
            self.creator = m.get('Creator')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('NetworkId') is not None:
            self.network_id = m.get('NetworkId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('State') is not None:
            self.state = m.get('State')
        return self


class UpdateEthereumResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: UpdateEthereumResponseBodyResult = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = UpdateEthereumResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class UpdateEthereumResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UpdateEthereumResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateEthereumResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateEthereumClientUserPasswordRequest(TeaModel):
    def __init__(
        self,
        node_id: str = None,
        password: str = None,
        username: str = None,
    ):
        # This parameter is required.
        self.node_id = node_id
        # This parameter is required.
        self.password = password
        # This parameter is required.
        self.username = username

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.node_id is not None:
            result['NodeId'] = self.node_id
        if self.password is not None:
            result['Password'] = self.password
        if self.username is not None:
            result['Username'] = self.username
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('NodeId') is not None:
            self.node_id = m.get('NodeId')
        if m.get('Password') is not None:
            self.password = m.get('Password')
        if m.get('Username') is not None:
            self.username = m.get('Username')
        return self


class UpdateEthereumClientUserPasswordResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: str = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class UpdateEthereumClientUserPasswordResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UpdateEthereumClientUserPasswordResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateEthereumClientUserPasswordResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateEthereumNodeRequest(TeaModel):
    def __init__(
        self,
        description: str = None,
        node_id: str = None,
        node_name: str = None,
    ):
        self.description = description
        # This parameter is required.
        self.node_id = node_id
        self.node_name = node_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.node_id is not None:
            result['NodeId'] = self.node_id
        if self.node_name is not None:
            result['NodeName'] = self.node_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('NodeId') is not None:
            self.node_id = m.get('NodeId')
        if m.get('NodeName') is not None:
            self.node_name = m.get('NodeName')
        return self


class UpdateEthereumNodeResponseBodyResult(TeaModel):
    def __init__(
        self,
        create_time: int = None,
        creator: str = None,
        description: str = None,
        ethereum_id: str = None,
        ethereum_name: str = None,
        id: str = None,
        network_id: str = None,
        node_name: str = None,
        public_ip: str = None,
        region_id: str = None,
        rpc_port: int = None,
        state: str = None,
        ws_port: int = None,
    ):
        self.create_time = create_time
        self.creator = creator
        self.description = description
        self.ethereum_id = ethereum_id
        self.ethereum_name = ethereum_name
        self.id = id
        self.network_id = network_id
        self.node_name = node_name
        self.public_ip = public_ip
        self.region_id = region_id
        self.rpc_port = rpc_port
        self.state = state
        self.ws_port = ws_port

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.creator is not None:
            result['Creator'] = self.creator
        if self.description is not None:
            result['Description'] = self.description
        if self.ethereum_id is not None:
            result['EthereumId'] = self.ethereum_id
        if self.ethereum_name is not None:
            result['EthereumName'] = self.ethereum_name
        if self.id is not None:
            result['Id'] = self.id
        if self.network_id is not None:
            result['NetworkId'] = self.network_id
        if self.node_name is not None:
            result['NodeName'] = self.node_name
        if self.public_ip is not None:
            result['PublicIp'] = self.public_ip
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.rpc_port is not None:
            result['RpcPort'] = self.rpc_port
        if self.state is not None:
            result['State'] = self.state
        if self.ws_port is not None:
            result['WsPort'] = self.ws_port
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Creator') is not None:
            self.creator = m.get('Creator')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('EthereumId') is not None:
            self.ethereum_id = m.get('EthereumId')
        if m.get('EthereumName') is not None:
            self.ethereum_name = m.get('EthereumName')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('NetworkId') is not None:
            self.network_id = m.get('NetworkId')
        if m.get('NodeName') is not None:
            self.node_name = m.get('NodeName')
        if m.get('PublicIp') is not None:
            self.public_ip = m.get('PublicIp')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('RpcPort') is not None:
            self.rpc_port = m.get('RpcPort')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('WsPort') is not None:
            self.ws_port = m.get('WsPort')
        return self


class UpdateEthereumNodeResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: UpdateEthereumNodeResponseBodyResult = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = UpdateEthereumNodeResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class UpdateEthereumNodeResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UpdateEthereumNodeResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateEthereumNodeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateEthereumNodeConfigurationRequest(TeaModel):
    def __init__(
        self,
        ip: str = None,
        node_id: str = None,
        node_pub: str = None,
        p_2p_port: int = None,
        raft_port: int = None,
        rpc_port: int = None,
        tmport: int = None,
        tmpub: str = None,
        wsport: int = None,
    ):
        # This parameter is required.
        self.ip = ip
        # This parameter is required.
        self.node_id = node_id
        # This parameter is required.
        self.node_pub = node_pub
        # This parameter is required.
        self.p_2p_port = p_2p_port
        self.raft_port = raft_port
        self.rpc_port = rpc_port
        # This parameter is required.
        self.tmport = tmport
        # This parameter is required.
        self.tmpub = tmpub
        self.wsport = wsport

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ip is not None:
            result['IP'] = self.ip
        if self.node_id is not None:
            result['NodeId'] = self.node_id
        if self.node_pub is not None:
            result['NodePub'] = self.node_pub
        if self.p_2p_port is not None:
            result['P2pPort'] = self.p_2p_port
        if self.raft_port is not None:
            result['RaftPort'] = self.raft_port
        if self.rpc_port is not None:
            result['RpcPort'] = self.rpc_port
        if self.tmport is not None:
            result['TMPort'] = self.tmport
        if self.tmpub is not None:
            result['TMPub'] = self.tmpub
        if self.wsport is not None:
            result['WSPort'] = self.wsport
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('IP') is not None:
            self.ip = m.get('IP')
        if m.get('NodeId') is not None:
            self.node_id = m.get('NodeId')
        if m.get('NodePub') is not None:
            self.node_pub = m.get('NodePub')
        if m.get('P2pPort') is not None:
            self.p_2p_port = m.get('P2pPort')
        if m.get('RaftPort') is not None:
            self.raft_port = m.get('RaftPort')
        if m.get('RpcPort') is not None:
            self.rpc_port = m.get('RpcPort')
        if m.get('TMPort') is not None:
            self.tmport = m.get('TMPort')
        if m.get('TMPub') is not None:
            self.tmpub = m.get('TMPub')
        if m.get('WSPort') is not None:
            self.wsport = m.get('WSPort')
        return self


class UpdateEthereumNodeConfigurationResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: str = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class UpdateEthereumNodeConfigurationResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UpdateEthereumNodeConfigurationResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateEthereumNodeConfigurationResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateGovernanceTaskRequest(TeaModel):
    def __init__(
        self,
        channel_id: str = None,
        organization_id: str = None,
        task_action: str = None,
        task_id: str = None,
    ):
        # This parameter is required.
        self.channel_id = channel_id
        # This parameter is required.
        self.organization_id = organization_id
        # This parameter is required.
        self.task_action = task_action
        # This parameter is required.
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        if self.task_action is not None:
            result['TaskAction'] = self.task_action
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        if m.get('TaskAction') is not None:
            self.task_action = m.get('TaskAction')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class UpdateGovernanceTaskResponseBodyResultContentAddedOrganizationsAnchorPeers(TeaModel):
    def __init__(
        self,
        host: str = None,
        port: int = None,
    ):
        self.host = host
        self.port = port

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.host is not None:
            result['Host'] = self.host
        if self.port is not None:
            result['Port'] = self.port
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Host') is not None:
            self.host = m.get('Host')
        if m.get('Port') is not None:
            self.port = m.get('Port')
        return self


class UpdateGovernanceTaskResponseBodyResultContentAddedOrganizationsOrdererNodes(TeaModel):
    def __init__(
        self,
        address: str = None,
        certificate: str = None,
        key: str = None,
        tlsroot: str = None,
    ):
        self.address = address
        self.certificate = certificate
        self.key = key
        self.tlsroot = tlsroot

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.address is not None:
            result['Address'] = self.address
        if self.certificate is not None:
            result['Certificate'] = self.certificate
        if self.key is not None:
            result['Key'] = self.key
        if self.tlsroot is not None:
            result['Tlsroot'] = self.tlsroot
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Address') is not None:
            self.address = m.get('Address')
        if m.get('Certificate') is not None:
            self.certificate = m.get('Certificate')
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Tlsroot') is not None:
            self.tlsroot = m.get('Tlsroot')
        return self


class UpdateGovernanceTaskResponseBodyResultContentAddedOrganizations(TeaModel):
    def __init__(
        self,
        anchor_peers: List[UpdateGovernanceTaskResponseBodyResultContentAddedOrganizationsAnchorPeers] = None,
        crls: str = None,
        msp_id: str = None,
        msp_type: str = None,
        orderer: bool = None,
        orderer_nodes: List[UpdateGovernanceTaskResponseBodyResultContentAddedOrganizationsOrdererNodes] = None,
        root_certificates: str = None,
        tls_root_certificates: str = None,
    ):
        self.anchor_peers = anchor_peers
        self.crls = crls
        self.msp_id = msp_id
        self.msp_type = msp_type
        self.orderer = orderer
        self.orderer_nodes = orderer_nodes
        self.root_certificates = root_certificates
        self.tls_root_certificates = tls_root_certificates

    def validate(self):
        if self.anchor_peers:
            for k in self.anchor_peers:
                if k:
                    k.validate()
        if self.orderer_nodes:
            for k in self.orderer_nodes:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AnchorPeers'] = []
        if self.anchor_peers is not None:
            for k in self.anchor_peers:
                result['AnchorPeers'].append(k.to_map() if k else None)
        if self.crls is not None:
            result['Crls'] = self.crls
        if self.msp_id is not None:
            result['MspId'] = self.msp_id
        if self.msp_type is not None:
            result['MspType'] = self.msp_type
        if self.orderer is not None:
            result['Orderer'] = self.orderer
        result['OrdererNodes'] = []
        if self.orderer_nodes is not None:
            for k in self.orderer_nodes:
                result['OrdererNodes'].append(k.to_map() if k else None)
        if self.root_certificates is not None:
            result['RootCertificates'] = self.root_certificates
        if self.tls_root_certificates is not None:
            result['TlsRootCertificates'] = self.tls_root_certificates
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.anchor_peers = []
        if m.get('AnchorPeers') is not None:
            for k in m.get('AnchorPeers'):
                temp_model = UpdateGovernanceTaskResponseBodyResultContentAddedOrganizationsAnchorPeers()
                self.anchor_peers.append(temp_model.from_map(k))
        if m.get('Crls') is not None:
            self.crls = m.get('Crls')
        if m.get('MspId') is not None:
            self.msp_id = m.get('MspId')
        if m.get('MspType') is not None:
            self.msp_type = m.get('MspType')
        if m.get('Orderer') is not None:
            self.orderer = m.get('Orderer')
        self.orderer_nodes = []
        if m.get('OrdererNodes') is not None:
            for k in m.get('OrdererNodes'):
                temp_model = UpdateGovernanceTaskResponseBodyResultContentAddedOrganizationsOrdererNodes()
                self.orderer_nodes.append(temp_model.from_map(k))
        if m.get('RootCertificates') is not None:
            self.root_certificates = m.get('RootCertificates')
        if m.get('TlsRootCertificates') is not None:
            self.tls_root_certificates = m.get('TlsRootCertificates')
        return self


class UpdateGovernanceTaskResponseBodyResultContentChaincodeSpecPkgCs(TeaModel):
    def __init__(
        self,
        input: str = None,
        name: str = None,
        path: str = None,
        type: int = None,
        version: str = None,
    ):
        self.input = input
        self.name = name
        self.path = path
        self.type = type
        self.version = version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.input is not None:
            result['Input'] = self.input
        if self.name is not None:
            result['Name'] = self.name
        if self.path is not None:
            result['Path'] = self.path
        if self.type is not None:
            result['Type'] = self.type
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Input') is not None:
            self.input = m.get('Input')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Path') is not None:
            self.path = m.get('Path')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class UpdateGovernanceTaskResponseBodyResultContentChaincodeSpecPkg(TeaModel):
    def __init__(
        self,
        cs: UpdateGovernanceTaskResponseBodyResultContentChaincodeSpecPkgCs = None,
        policy: str = None,
        sha_256: str = None,
    ):
        self.cs = cs
        self.policy = policy
        self.sha_256 = sha_256

    def validate(self):
        if self.cs:
            self.cs.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cs is not None:
            result['Cs'] = self.cs.to_map()
        if self.policy is not None:
            result['Policy'] = self.policy
        if self.sha_256 is not None:
            result['Sha256'] = self.sha_256
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Cs') is not None:
            temp_model = UpdateGovernanceTaskResponseBodyResultContentChaincodeSpecPkgCs()
            self.cs = temp_model.from_map(m['Cs'])
        if m.get('Policy') is not None:
            self.policy = m.get('Policy')
        if m.get('Sha256') is not None:
            self.sha_256 = m.get('Sha256')
        return self


class UpdateGovernanceTaskResponseBodyResultContentOrdererConfig(TeaModel):
    def __init__(
        self,
        batch_timeout: str = None,
        max_message_count: int = None,
        preferred_max_bytes: int = None,
    ):
        self.batch_timeout = batch_timeout
        self.max_message_count = max_message_count
        self.preferred_max_bytes = preferred_max_bytes

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.batch_timeout is not None:
            result['BatchTimeout'] = self.batch_timeout
        if self.max_message_count is not None:
            result['MaxMessageCount'] = self.max_message_count
        if self.preferred_max_bytes is not None:
            result['PreferredMaxBytes'] = self.preferred_max_bytes
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BatchTimeout') is not None:
            self.batch_timeout = m.get('BatchTimeout')
        if m.get('MaxMessageCount') is not None:
            self.max_message_count = m.get('MaxMessageCount')
        if m.get('PreferredMaxBytes') is not None:
            self.preferred_max_bytes = m.get('PreferredMaxBytes')
        return self


class UpdateGovernanceTaskResponseBodyResultContentRemovedOrganizationsAnchorPeers(TeaModel):
    def __init__(
        self,
        host: str = None,
        port: int = None,
    ):
        self.host = host
        self.port = port

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.host is not None:
            result['Host'] = self.host
        if self.port is not None:
            result['Port'] = self.port
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Host') is not None:
            self.host = m.get('Host')
        if m.get('Port') is not None:
            self.port = m.get('Port')
        return self


class UpdateGovernanceTaskResponseBodyResultContentRemovedOrganizationsOrdererNodes(TeaModel):
    def __init__(
        self,
        address: str = None,
        certificate: str = None,
        key: str = None,
        tlsroot: str = None,
    ):
        self.address = address
        self.certificate = certificate
        self.key = key
        self.tlsroot = tlsroot

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.address is not None:
            result['Address'] = self.address
        if self.certificate is not None:
            result['Certificate'] = self.certificate
        if self.key is not None:
            result['Key'] = self.key
        if self.tlsroot is not None:
            result['Tlsroot'] = self.tlsroot
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Address') is not None:
            self.address = m.get('Address')
        if m.get('Certificate') is not None:
            self.certificate = m.get('Certificate')
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Tlsroot') is not None:
            self.tlsroot = m.get('Tlsroot')
        return self


class UpdateGovernanceTaskResponseBodyResultContentRemovedOrganizations(TeaModel):
    def __init__(
        self,
        anchor_peers: List[UpdateGovernanceTaskResponseBodyResultContentRemovedOrganizationsAnchorPeers] = None,
        crls: str = None,
        msp_id: str = None,
        msp_type: str = None,
        orderer: bool = None,
        orderer_nodes: List[UpdateGovernanceTaskResponseBodyResultContentRemovedOrganizationsOrdererNodes] = None,
        root_certificates: str = None,
        tls_root_certificates: str = None,
    ):
        self.anchor_peers = anchor_peers
        self.crls = crls
        self.msp_id = msp_id
        self.msp_type = msp_type
        self.orderer = orderer
        self.orderer_nodes = orderer_nodes
        self.root_certificates = root_certificates
        self.tls_root_certificates = tls_root_certificates

    def validate(self):
        if self.anchor_peers:
            for k in self.anchor_peers:
                if k:
                    k.validate()
        if self.orderer_nodes:
            for k in self.orderer_nodes:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AnchorPeers'] = []
        if self.anchor_peers is not None:
            for k in self.anchor_peers:
                result['AnchorPeers'].append(k.to_map() if k else None)
        if self.crls is not None:
            result['Crls'] = self.crls
        if self.msp_id is not None:
            result['MspId'] = self.msp_id
        if self.msp_type is not None:
            result['MspType'] = self.msp_type
        if self.orderer is not None:
            result['Orderer'] = self.orderer
        result['OrdererNodes'] = []
        if self.orderer_nodes is not None:
            for k in self.orderer_nodes:
                result['OrdererNodes'].append(k.to_map() if k else None)
        if self.root_certificates is not None:
            result['RootCertificates'] = self.root_certificates
        if self.tls_root_certificates is not None:
            result['TlsRootCertificates'] = self.tls_root_certificates
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.anchor_peers = []
        if m.get('AnchorPeers') is not None:
            for k in m.get('AnchorPeers'):
                temp_model = UpdateGovernanceTaskResponseBodyResultContentRemovedOrganizationsAnchorPeers()
                self.anchor_peers.append(temp_model.from_map(k))
        if m.get('Crls') is not None:
            self.crls = m.get('Crls')
        if m.get('MspId') is not None:
            self.msp_id = m.get('MspId')
        if m.get('MspType') is not None:
            self.msp_type = m.get('MspType')
        if m.get('Orderer') is not None:
            self.orderer = m.get('Orderer')
        self.orderer_nodes = []
        if m.get('OrdererNodes') is not None:
            for k in m.get('OrdererNodes'):
                temp_model = UpdateGovernanceTaskResponseBodyResultContentRemovedOrganizationsOrdererNodes()
                self.orderer_nodes.append(temp_model.from_map(k))
        if m.get('RootCertificates') is not None:
            self.root_certificates = m.get('RootCertificates')
        if m.get('TlsRootCertificates') is not None:
            self.tls_root_certificates = m.get('TlsRootCertificates')
        return self


class UpdateGovernanceTaskResponseBodyResultContent(TeaModel):
    def __init__(
        self,
        added_organizations: List[UpdateGovernanceTaskResponseBodyResultContentAddedOrganizations] = None,
        chaincode_spec_pkg: UpdateGovernanceTaskResponseBodyResultContentChaincodeSpecPkg = None,
        orderer_config: UpdateGovernanceTaskResponseBodyResultContentOrdererConfig = None,
        raw: str = None,
        removed_organizations: List[UpdateGovernanceTaskResponseBodyResultContentRemovedOrganizations] = None,
        rw_sets: str = None,
    ):
        self.added_organizations = added_organizations
        self.chaincode_spec_pkg = chaincode_spec_pkg
        self.orderer_config = orderer_config
        self.raw = raw
        self.removed_organizations = removed_organizations
        self.rw_sets = rw_sets

    def validate(self):
        if self.added_organizations:
            for k in self.added_organizations:
                if k:
                    k.validate()
        if self.chaincode_spec_pkg:
            self.chaincode_spec_pkg.validate()
        if self.orderer_config:
            self.orderer_config.validate()
        if self.removed_organizations:
            for k in self.removed_organizations:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AddedOrganizations'] = []
        if self.added_organizations is not None:
            for k in self.added_organizations:
                result['AddedOrganizations'].append(k.to_map() if k else None)
        if self.chaincode_spec_pkg is not None:
            result['ChaincodeSpecPkg'] = self.chaincode_spec_pkg.to_map()
        if self.orderer_config is not None:
            result['OrdererConfig'] = self.orderer_config.to_map()
        if self.raw is not None:
            result['Raw'] = self.raw
        result['RemovedOrganizations'] = []
        if self.removed_organizations is not None:
            for k in self.removed_organizations:
                result['RemovedOrganizations'].append(k.to_map() if k else None)
        if self.rw_sets is not None:
            result['RwSets'] = self.rw_sets
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.added_organizations = []
        if m.get('AddedOrganizations') is not None:
            for k in m.get('AddedOrganizations'):
                temp_model = UpdateGovernanceTaskResponseBodyResultContentAddedOrganizations()
                self.added_organizations.append(temp_model.from_map(k))
        if m.get('ChaincodeSpecPkg') is not None:
            temp_model = UpdateGovernanceTaskResponseBodyResultContentChaincodeSpecPkg()
            self.chaincode_spec_pkg = temp_model.from_map(m['ChaincodeSpecPkg'])
        if m.get('OrdererConfig') is not None:
            temp_model = UpdateGovernanceTaskResponseBodyResultContentOrdererConfig()
            self.orderer_config = temp_model.from_map(m['OrdererConfig'])
        if m.get('Raw') is not None:
            self.raw = m.get('Raw')
        self.removed_organizations = []
        if m.get('RemovedOrganizations') is not None:
            for k in m.get('RemovedOrganizations'):
                temp_model = UpdateGovernanceTaskResponseBodyResultContentRemovedOrganizations()
                self.removed_organizations.append(temp_model.from_map(k))
        if m.get('RwSets') is not None:
            self.rw_sets = m.get('RwSets')
        return self


class UpdateGovernanceTaskResponseBodyResult(TeaModel):
    def __init__(
        self,
        channel_name: str = None,
        content: UpdateGovernanceTaskResponseBodyResultContent = None,
        create_time: int = None,
        creator: str = None,
        description: str = None,
        status: str = None,
        task_id: str = None,
        type: str = None,
    ):
        self.channel_name = channel_name
        self.content = content
        self.create_time = create_time
        self.creator = creator
        self.description = description
        self.status = status
        self.task_id = task_id
        self.type = type

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.channel_name is not None:
            result['ChannelName'] = self.channel_name
        if self.content is not None:
            result['Content'] = self.content.to_map()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.creator is not None:
            result['Creator'] = self.creator
        if self.description is not None:
            result['Description'] = self.description
        if self.status is not None:
            result['Status'] = self.status
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChannelName') is not None:
            self.channel_name = m.get('ChannelName')
        if m.get('Content') is not None:
            temp_model = UpdateGovernanceTaskResponseBodyResultContent()
            self.content = temp_model.from_map(m['Content'])
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Creator') is not None:
            self.creator = m.get('Creator')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class UpdateGovernanceTaskResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: UpdateGovernanceTaskResponseBodyResult = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = UpdateGovernanceTaskResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class UpdateGovernanceTaskResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UpdateGovernanceTaskResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateGovernanceTaskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateMemberRoleRequest(TeaModel):
    def __init__(
        self,
        bid: str = None,
        bizid: str = None,
        role: int = None,
        user_id: int = None,
    ):
        self.bid = bid
        self.bizid = bizid
        self.role = role
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bid is not None:
            result['Bid'] = self.bid
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        if self.role is not None:
            result['Role'] = self.role
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bid') is not None:
            self.bid = m.get('Bid')
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class UpdateMemberRoleResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: str = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class UpdateMemberRoleResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UpdateMemberRoleResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateMemberRoleResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateQRCodeAuthorityRequest(TeaModel):
    def __init__(
        self,
        authorized: bool = None,
        bizid: str = None,
    ):
        self.authorized = authorized
        self.bizid = bizid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.authorized is not None:
            result['Authorized'] = self.authorized
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Authorized') is not None:
            self.authorized = m.get('Authorized')
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        return self


class UpdateQRCodeAuthorityResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: str = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class UpdateQRCodeAuthorityResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UpdateQRCodeAuthorityResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateQRCodeAuthorityResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateSchemaRequest(TeaModel):
    def __init__(
        self,
        bizid: str = None,
        category_configs: str = None,
        description: str = None,
        schema_id: int = None,
        schema_name: str = None,
    ):
        self.bizid = bizid
        self.category_configs = category_configs
        self.description = description
        self.schema_id = schema_id
        self.schema_name = schema_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bizid is not None:
            result['Bizid'] = self.bizid
        if self.category_configs is not None:
            result['CategoryConfigs'] = self.category_configs
        if self.description is not None:
            result['Description'] = self.description
        if self.schema_id is not None:
            result['SchemaId'] = self.schema_id
        if self.schema_name is not None:
            result['SchemaName'] = self.schema_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Bizid') is not None:
            self.bizid = m.get('Bizid')
        if m.get('CategoryConfigs') is not None:
            self.category_configs = m.get('CategoryConfigs')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('SchemaId') is not None:
            self.schema_id = m.get('SchemaId')
        if m.get('SchemaName') is not None:
            self.schema_name = m.get('SchemaName')
        return self


class UpdateSchemaResponseBodyResultResponsesPropertiesDataSource(TeaModel):
    def __init__(
        self,
        allow_null: int = None,
        annotation: str = None,
        field: str = None,
        indexes: int = None,
        key: int = None,
        length: int = None,
        reg: str = None,
        type: str = None,
    ):
        self.allow_null = allow_null
        self.annotation = annotation
        self.field = field
        self.indexes = indexes
        self.key = key
        self.length = length
        self.reg = reg
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.allow_null is not None:
            result['AllowNull'] = self.allow_null
        if self.annotation is not None:
            result['Annotation'] = self.annotation
        if self.field is not None:
            result['Field'] = self.field
        if self.indexes is not None:
            result['Indexes'] = self.indexes
        if self.key is not None:
            result['Key'] = self.key
        if self.length is not None:
            result['Length'] = self.length
        if self.reg is not None:
            result['Reg'] = self.reg
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AllowNull') is not None:
            self.allow_null = m.get('AllowNull')
        if m.get('Annotation') is not None:
            self.annotation = m.get('Annotation')
        if m.get('Field') is not None:
            self.field = m.get('Field')
        if m.get('Indexes') is not None:
            self.indexes = m.get('Indexes')
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Length') is not None:
            self.length = m.get('Length')
        if m.get('Reg') is not None:
            self.reg = m.get('Reg')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class UpdateSchemaResponseBodyResultResponsesProperties(TeaModel):
    def __init__(
        self,
        count: int = None,
        data_source: List[UpdateSchemaResponseBodyResultResponsesPropertiesDataSource] = None,
    ):
        self.count = count
        self.data_source = data_source

    def validate(self):
        if self.data_source:
            for k in self.data_source:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.count is not None:
            result['Count'] = self.count
        result['DataSource'] = []
        if self.data_source is not None:
            for k in self.data_source:
                result['DataSource'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Count') is not None:
            self.count = m.get('Count')
        self.data_source = []
        if m.get('DataSource') is not None:
            for k in m.get('DataSource'):
                temp_model = UpdateSchemaResponseBodyResultResponsesPropertiesDataSource()
                self.data_source.append(temp_model.from_map(k))
        return self


class UpdateSchemaResponseBodyResultResponses(TeaModel):
    def __init__(
        self,
        category: str = None,
        category_name: str = None,
        description: str = None,
        properties: UpdateSchemaResponseBodyResultResponsesProperties = None,
    ):
        self.category = category
        self.category_name = category_name
        self.description = description
        self.properties = properties

    def validate(self):
        if self.properties:
            self.properties.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['Category'] = self.category
        if self.category_name is not None:
            result['CategoryName'] = self.category_name
        if self.description is not None:
            result['Description'] = self.description
        if self.properties is not None:
            result['Properties'] = self.properties.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('CategoryName') is not None:
            self.category_name = m.get('CategoryName')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Properties') is not None:
            temp_model = UpdateSchemaResponseBodyResultResponsesProperties()
            self.properties = temp_model.from_map(m['Properties'])
        return self


class UpdateSchemaResponseBodyResultSchema(TeaModel):
    def __init__(
        self,
        create_time: int = None,
        description: str = None,
        id: int = None,
        is_template: bool = None,
        name: str = None,
        update_time: int = None,
        version: int = None,
    ):
        self.create_time = create_time
        self.description = description
        self.id = id
        self.is_template = is_template
        self.name = name
        self.update_time = update_time
        self.version = version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.description is not None:
            result['Description'] = self.description
        if self.id is not None:
            result['Id'] = self.id
        if self.is_template is not None:
            result['IsTemplate'] = self.is_template
        if self.name is not None:
            result['Name'] = self.name
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('IsTemplate') is not None:
            self.is_template = m.get('IsTemplate')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class UpdateSchemaResponseBodyResult(TeaModel):
    def __init__(
        self,
        responses: List[UpdateSchemaResponseBodyResultResponses] = None,
        schema: UpdateSchemaResponseBodyResultSchema = None,
    ):
        self.responses = responses
        self.schema = schema

    def validate(self):
        if self.responses:
            for k in self.responses:
                if k:
                    k.validate()
        if self.schema:
            self.schema.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Responses'] = []
        if self.responses is not None:
            for k in self.responses:
                result['Responses'].append(k.to_map() if k else None)
        if self.schema is not None:
            result['Schema'] = self.schema.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.responses = []
        if m.get('Responses') is not None:
            for k in m.get('Responses'):
                temp_model = UpdateSchemaResponseBodyResultResponses()
                self.responses.append(temp_model.from_map(k))
        if m.get('Schema') is not None:
            temp_model = UpdateSchemaResponseBodyResultSchema()
            self.schema = temp_model.from_map(m['Schema'])
        return self


class UpdateSchemaResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: UpdateSchemaResponseBodyResult = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = UpdateSchemaResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        return self


class UpdateSchemaResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UpdateSchemaResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateSchemaResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpgradeChaincodeRequest(TeaModel):
    def __init__(
        self,
        chaincode_id: str = None,
        collection_config: str = None,
        endorse_policy: str = None,
        location: str = None,
        organization_id: str = None,
    ):
        # This parameter is required.
        self.chaincode_id = chaincode_id
        self.collection_config = collection_config
        self.endorse_policy = endorse_policy
        self.location = location
        # This parameter is required.
        self.organization_id = organization_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.chaincode_id is not None:
            result['ChaincodeId'] = self.chaincode_id
        if self.collection_config is not None:
            result['CollectionConfig'] = self.collection_config
        if self.endorse_policy is not None:
            result['EndorsePolicy'] = self.endorse_policy
        if self.location is not None:
            result['Location'] = self.location
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChaincodeId') is not None:
            self.chaincode_id = m.get('ChaincodeId')
        if m.get('CollectionConfig') is not None:
            self.collection_config = m.get('CollectionConfig')
        if m.get('EndorsePolicy') is not None:
            self.endorse_policy = m.get('EndorsePolicy')
        if m.get('Location') is not None:
            self.location = m.get('Location')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        return self


class UpgradeChaincodeResponseBodyResult(TeaModel):
    def __init__(
        self,
        chaincode_id: str = None,
        channel_name: str = None,
        consortium_id: str = None,
        create_time: str = None,
        deploy_time: str = None,
        endorse_policy: str = None,
        input: str = None,
        install: bool = None,
        message: str = None,
        name: str = None,
        path: str = None,
        provider_id: str = None,
        provider_name: str = None,
        state: str = None,
        type: int = None,
        version: str = None,
    ):
        self.chaincode_id = chaincode_id
        self.channel_name = channel_name
        self.consortium_id = consortium_id
        self.create_time = create_time
        self.deploy_time = deploy_time
        self.endorse_policy = endorse_policy
        self.input = input
        self.install = install
        self.message = message
        self.name = name
        self.path = path
        self.provider_id = provider_id
        self.provider_name = provider_name
        self.state = state
        self.type = type
        self.version = version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.chaincode_id is not None:
            result['ChaincodeId'] = self.chaincode_id
        if self.channel_name is not None:
            result['ChannelName'] = self.channel_name
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.deploy_time is not None:
            result['DeployTime'] = self.deploy_time
        if self.endorse_policy is not None:
            result['EndorsePolicy'] = self.endorse_policy
        if self.input is not None:
            result['Input'] = self.input
        if self.install is not None:
            result['Install'] = self.install
        if self.message is not None:
            result['Message'] = self.message
        if self.name is not None:
            result['Name'] = self.name
        if self.path is not None:
            result['Path'] = self.path
        if self.provider_id is not None:
            result['ProviderId'] = self.provider_id
        if self.provider_name is not None:
            result['ProviderName'] = self.provider_name
        if self.state is not None:
            result['State'] = self.state
        if self.type is not None:
            result['Type'] = self.type
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChaincodeId') is not None:
            self.chaincode_id = m.get('ChaincodeId')
        if m.get('ChannelName') is not None:
            self.channel_name = m.get('ChannelName')
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('DeployTime') is not None:
            self.deploy_time = m.get('DeployTime')
        if m.get('EndorsePolicy') is not None:
            self.endorse_policy = m.get('EndorsePolicy')
        if m.get('Input') is not None:
            self.input = m.get('Input')
        if m.get('Install') is not None:
            self.install = m.get('Install')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Path') is not None:
            self.path = m.get('Path')
        if m.get('ProviderId') is not None:
            self.provider_id = m.get('ProviderId')
        if m.get('ProviderName') is not None:
            self.provider_name = m.get('ProviderName')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class UpgradeChaincodeResponseBody(TeaModel):
    def __init__(
        self,
        error_code: int = None,
        request_id: str = None,
        result: UpgradeChaincodeResponseBodyResult = None,
        success: bool = None,
    ):
        self.error_code = error_code
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = UpgradeChaincodeResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class UpgradeChaincodeResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UpgradeChaincodeResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpgradeChaincodeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpgradeFabricChaincodeDefinitionRequest(TeaModel):
    def __init__(
        self,
        chaincode_id: str = None,
        chaincode_package_id: str = None,
        chaincode_version: str = None,
        channel_id: str = None,
        collection_config: str = None,
        endorse_policy: str = None,
        init_required: bool = None,
        location: str = None,
        organization_id: str = None,
    ):
        # This parameter is required.
        self.chaincode_id = chaincode_id
        # This parameter is required.
        self.chaincode_package_id = chaincode_package_id
        # This parameter is required.
        self.chaincode_version = chaincode_version
        self.channel_id = channel_id
        self.collection_config = collection_config
        self.endorse_policy = endorse_policy
        self.init_required = init_required
        self.location = location
        # This parameter is required.
        self.organization_id = organization_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.chaincode_id is not None:
            result['ChaincodeId'] = self.chaincode_id
        if self.chaincode_package_id is not None:
            result['ChaincodePackageId'] = self.chaincode_package_id
        if self.chaincode_version is not None:
            result['ChaincodeVersion'] = self.chaincode_version
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.collection_config is not None:
            result['CollectionConfig'] = self.collection_config
        if self.endorse_policy is not None:
            result['EndorsePolicy'] = self.endorse_policy
        if self.init_required is not None:
            result['InitRequired'] = self.init_required
        if self.location is not None:
            result['Location'] = self.location
        if self.organization_id is not None:
            result['OrganizationId'] = self.organization_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChaincodeId') is not None:
            self.chaincode_id = m.get('ChaincodeId')
        if m.get('ChaincodePackageId') is not None:
            self.chaincode_package_id = m.get('ChaincodePackageId')
        if m.get('ChaincodeVersion') is not None:
            self.chaincode_version = m.get('ChaincodeVersion')
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('CollectionConfig') is not None:
            self.collection_config = m.get('CollectionConfig')
        if m.get('EndorsePolicy') is not None:
            self.endorse_policy = m.get('EndorsePolicy')
        if m.get('InitRequired') is not None:
            self.init_required = m.get('InitRequired')
        if m.get('Location') is not None:
            self.location = m.get('Location')
        if m.get('OrganizationId') is not None:
            self.organization_id = m.get('OrganizationId')
        return self


class UpgradeFabricChaincodeDefinitionResponseBodyResult(TeaModel):
    def __init__(
        self,
        chaincode_id: str = None,
        chaincode_version: str = None,
        channel_name: str = None,
        consortium_id: str = None,
        create_time: str = None,
        deploy_time: str = None,
        endorse_policy: str = None,
        input: str = None,
        install: bool = None,
        message: str = None,
        name: str = None,
        path: str = None,
        provider_id: str = None,
        provider_name: str = None,
        state: str = None,
        type: int = None,
    ):
        self.chaincode_id = chaincode_id
        self.chaincode_version = chaincode_version
        self.channel_name = channel_name
        self.consortium_id = consortium_id
        self.create_time = create_time
        self.deploy_time = deploy_time
        self.endorse_policy = endorse_policy
        self.input = input
        self.install = install
        self.message = message
        self.name = name
        self.path = path
        self.provider_id = provider_id
        self.provider_name = provider_name
        self.state = state
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.chaincode_id is not None:
            result['ChaincodeId'] = self.chaincode_id
        if self.chaincode_version is not None:
            result['ChaincodeVersion'] = self.chaincode_version
        if self.channel_name is not None:
            result['ChannelName'] = self.channel_name
        if self.consortium_id is not None:
            result['ConsortiumId'] = self.consortium_id
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.deploy_time is not None:
            result['DeployTime'] = self.deploy_time
        if self.endorse_policy is not None:
            result['EndorsePolicy'] = self.endorse_policy
        if self.input is not None:
            result['Input'] = self.input
        if self.install is not None:
            result['Install'] = self.install
        if self.message is not None:
            result['Message'] = self.message
        if self.name is not None:
            result['Name'] = self.name
        if self.path is not None:
            result['Path'] = self.path
        if self.provider_id is not None:
            result['ProviderId'] = self.provider_id
        if self.provider_name is not None:
            result['ProviderName'] = self.provider_name
        if self.state is not None:
            result['State'] = self.state
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChaincodeId') is not None:
            self.chaincode_id = m.get('ChaincodeId')
        if m.get('ChaincodeVersion') is not None:
            self.chaincode_version = m.get('ChaincodeVersion')
        if m.get('ChannelName') is not None:
            self.channel_name = m.get('ChannelName')
        if m.get('ConsortiumId') is not None:
            self.consortium_id = m.get('ConsortiumId')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('DeployTime') is not None:
            self.deploy_time = m.get('DeployTime')
        if m.get('EndorsePolicy') is not None:
            self.endorse_policy = m.get('EndorsePolicy')
        if m.get('Input') is not None:
            self.input = m.get('Input')
        if m.get('Install') is not None:
            self.install = m.get('Install')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Path') is not None:
            self.path = m.get('Path')
        if m.get('ProviderId') is not None:
            self.provider_id = m.get('ProviderId')
        if m.get('ProviderName') is not None:
            self.provider_name = m.get('ProviderName')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class UpgradeFabricChaincodeDefinitionResponseBody(TeaModel):
    def __init__(
        self,
        chaincode_definition_id: str = None,
        chaincode_package_id: str = None,
        error_code: int = None,
        init_required: bool = None,
        request_id: str = None,
        result: UpgradeFabricChaincodeDefinitionResponseBodyResult = None,
        success: bool = None,
    ):
        self.chaincode_definition_id = chaincode_definition_id
        self.chaincode_package_id = chaincode_package_id
        self.error_code = error_code
        self.init_required = init_required
        self.request_id = request_id
        self.result = result
        self.success = success

    def validate(self):
        if self.result:
            self.result.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.chaincode_definition_id is not None:
            result['ChaincodeDefinitionId'] = self.chaincode_definition_id
        if self.chaincode_package_id is not None:
            result['ChaincodePackageId'] = self.chaincode_package_id
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.init_required is not None:
            result['InitRequired'] = self.init_required
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChaincodeDefinitionId') is not None:
            self.chaincode_definition_id = m.get('ChaincodeDefinitionId')
        if m.get('ChaincodePackageId') is not None:
            self.chaincode_package_id = m.get('ChaincodePackageId')
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('InitRequired') is not None:
            self.init_required = m.get('InitRequired')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            temp_model = UpgradeFabricChaincodeDefinitionResponseBodyResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class UpgradeFabricChaincodeDefinitionResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UpgradeFabricChaincodeDefinitionResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpgradeFabricChaincodeDefinitionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self



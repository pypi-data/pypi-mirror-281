{"version":3,"file":"786.js","mappings":"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","names":["HsFeatureFilterPipe","transform","features","searchText","toLocaleLowerCase","filter","feature","name","includes","slice","static","this","t","core","EJ8","pure","HsFeatureTableService","constructor","hsUtilsService","hsLayerUtilsService","hsQueryVectorService","sortReverse","lastSortValue","addLayer","layer","getBase","instOf","VectorLayer","undefined","getShowInLayerManager","wrapLayer","title","getTitle","lyr","type","fillFeatureList","source","isLayerClustered","getSource","getFeatures","map","f","describeFeature","attributes","length","updateFeatureDescription","newDescriptor","currentIx","findIndex","addFeatureDescription","push","removeFeatureDescription","splice","attribWrapper","getFeatureAttributes","pop","setFeatureName","attributesWithoutFeatureName","stats","attribute","value","attr","sortFeaturesBy","valueName","sort","a","b","sortFeatures","aFeature","bFeature","position","getValue","charAt","i0","i1","i2","jDH","factory","Éµfac","providedIn","attr_r5","sanitizedValue","operation_r7","_r6","$implicit","ctx_r2","executeOperation","translate","customActionName","action","HsLayerFeaturesComponent_table_7_tr_9_div_10_a_1_Template","operations","_r4","HsLayerFeaturesComponent_table_7_tr_9_span_7_Template","HsLayerFeaturesComponent_table_7_tr_9_span_9_Template","HsLayerFeaturesComponent_table_7_tr_9_div_10_Template","showFeatureStats","stat_r8","feature_r2","_r1","HsLayerFeaturesComponent_table_7_tr_9_Template","HsLayerFeaturesComponent_table_7_tr_10_Template","HsLayerFeaturesComponent","hsFeatureTableService","hsMapService","hsLanguageService","searchedFeatures","ngOnInit","olLayer","on","e","operation","extent","getGeometry","getExtent","fitExtent","customAction","text","getTranslationIgnoreNonExisting","i3","i4","VBU","selectors","inputs","decls","vars","consts","template","rf","ctx","$event","HsLayerFeaturesComponent_table_7_Template","_c0","layer_r1","HsFeatureTableComponent_div_0_div_3_Template","ctx_r1","layers","HsFeatureTableComponent","HsPanelBaseComponent","hsConfig","hsSidebarService","super","addButton","panel","module","order","fits","description","icon","loaded","then","layersInFeatureTable","addLayerToTable","layerDescriptor","HsFeatureTableComponent_div_0_Template","isVisible$","HsFeatureTableModule","$C","G2t","CommonModule","FormsModule","HsPanelHelpersModule","NgbDropdownModule","HsPanelHeaderComponent"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["webpack:///./projects/hslayers/components/feature-table/feature-filter.pipe.ts","webpack:///./projects/hslayers/components/feature-table/feature-table.service.ts","webpack:///./projects/hslayers/components/feature-table/layer-features.component.html","webpack:///./projects/hslayers/components/feature-table/layer-features.component.ts","webpack:///./projects/hslayers/components/feature-table/feature-table.component.html","webpack:///./projects/hslayers/components/feature-table/feature-table.component.ts","webpack:///./projects/hslayers/components/feature-table/feature-table.module.ts"],"sourcesContent":["import {Pipe, PipeTransform} from '@angular/core';\n\nconst featureLimit = 20 as const;\n\n@Pipe({name: 'featureFilter'})\nexport class HsFeatureFilterPipe implements PipeTransform {\n  /**\n   * Transform\n   *\n   * @param features -\n   * @param searchText -\n   * @returns Filtered features\n   */\n  transform(features: any[], searchText: string): any[] {\n    if (!features) {\n      return [];\n    }\n    if (!searchText) {\n      return features;\n    }\n    searchText = searchText.toLocaleLowerCase();\n\n    return features\n      .filter((feature) => {\n        return feature.name.toLocaleLowerCase().includes(searchText);\n      })\n      .slice(0, featureLimit);\n  }\n}\n","import {Injectable} from '@angular/core';\n\nimport {Cluster, Source, Vector as VectorSource} from 'ol/source';\nimport {Feature} from 'ol';\nimport {Geometry} from 'ol/geom';\nimport {Layer, Vector as VectorLayer} from 'ol/layer';\n\nimport {HsLayerUtilsService} from 'hslayers-ng/services/utils';\nimport {HsQueryVectorService} from 'hslayers-ng/services/query';\nimport {HsUtilsService} from 'hslayers-ng/services/utils';\nimport {\n  getBase,\n  getShowInLayerManager,\n  getTitle,\n} from 'hslayers-ng/common/extensions';\n\ntype FeatureDescriptor = {\n  name: string;\n  feature: Feature<Geometry>;\n  attributes: {\n    name;\n    value;\n    sanitizedValue?;\n  }[];\n  stats: any[];\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HsFeatureTableService {\n  /**\n   * Trigger for reverse sorting\n   */\n  sortReverse = false;\n  /**\n   * Last sorting value selected\n   */\n  lastSortValue = '';\n  /**\n   * all feature attributes for HTML table\n   */\n  features: FeatureDescriptor[] = [];\n  constructor(\n    private hsUtilsService: HsUtilsService,\n    private hsLayerUtilsService: HsLayerUtilsService,\n    private hsQueryVectorService: HsQueryVectorService,\n  ) {}\n\n  /**\n   * Checks if layer is vectorLayer and is visible in layer_manager, to exclude layers, such as, point Clicked\n   *\n   * @param layer - Layer from HsConfig.layersInFeatureTable\n   * @returns Returns layer\n   */\n  addLayer(layer: Layer<Source>): any {\n    if (\n      !getBase(layer) &&\n      this.hsUtilsService.instOf(layer, VectorLayer) &&\n      (getShowInLayerManager(layer) === undefined ||\n        getShowInLayerManager(layer) == true)\n    ) {\n      return this.wrapLayer(layer);\n    }\n    return;\n  }\n\n  /**\n   * Wrap layer object\n   *\n   * @param layer - Layer from HsConfig.layersInFeatureTable\n   * @returns Returns wrapped layer object\n   */\n  wrapLayer(layer: Layer<Source>): any {\n    return {\n      title: getTitle(layer),\n      lyr: layer,\n      type: 'vector',\n    };\n  }\n\n  /**\n   * Search all layers feature attributes and map them into new objects for html table\n   *\n   * @param layer - Layer from HsConfig.layersInFeatureTable\n   */\n  fillFeatureList(layer: Layer<Source>): void {\n    const source: VectorSource = this.hsLayerUtilsService.isLayerClustered(\n      layer,\n    )\n      ? (layer.getSource() as Cluster<Feature>).getSource()\n      : (layer.getSource() as VectorSource);\n    this.features = source\n      .getFeatures()\n      .map((f) => this.describeFeature(f))\n      .filter((f) => f?.attributes?.length > 0);\n  }\n\n  /**\n   * Update feature description\n   *\n   * @param feature - Feature selected\n   */\n  updateFeatureDescription(feature: Feature<Geometry>): void {\n    const newDescriptor = this.describeFeature(feature);\n    const currentIx = this.features.findIndex((f) => f.feature == feature);\n    if (newDescriptor && currentIx > -1) {\n      this.features[currentIx] = newDescriptor;\n    }\n  }\n\n  /**\n   * Add feature description\n   *\n   * @param feature - Feature selected\n   */\n  addFeatureDescription(feature: Feature<Geometry>): void {\n    const newDescriptor = this.describeFeature(feature);\n    if (newDescriptor) {\n      this.features.push(newDescriptor);\n    }\n  }\n\n  /**\n   * Remove feature description\n   *\n   * @param feature - Feature selected\n   */\n  removeFeatureDescription(feature: Feature<Geometry>): void {\n    const currentIx = this.features.findIndex((f) => f.feature == feature);\n    if (currentIx > -1) {\n      this.features.splice(currentIx, 1);\n    }\n  }\n\n  /**\n   * Describe feature\n   *\n   * @param feature - Feature selected\n   */\n  describeFeature(feature: Feature<Geometry>): FeatureDescriptor {\n    const attribWrapper = this.hsQueryVectorService\n      .getFeatureAttributes(feature)\n      .pop();\n    if (!attribWrapper) {\n      return null;\n    }\n    return {\n      name: this.setFeatureName(attribWrapper.attributes),\n      feature,\n      attributes: this.attributesWithoutFeatureName(attribWrapper.attributes),\n      stats: attribWrapper.stats,\n    };\n  }\n\n  /**\n   * Find feature name attribute and separate it from other attributes for html table purposes\n   *\n   * @param attributes - layers feature attributes\n   * @returns feature name\n   */\n  setFeatureName(attributes: any): string {\n    if (attributes.length > 0) {\n      let name = 'Feature';\n      for (const attribute of attributes) {\n        if (attribute.name === 'name') {\n          name = attribute.value;\n        }\n      }\n      return name;\n    } else {\n      return 'Feature';\n    }\n  }\n\n  /**\n   * Remove feature name attribute from feature attributes array\n   *\n   * @param attributes - layers feature attributes\n   * @returns feature attributes\n   */\n  attributesWithoutFeatureName(attributes: any): any {\n    return attributes.filter((attr) => attr.name !== 'name');\n  }\n\n  /**\n   * Sort features by requested value\n   *\n   * @param valueName - Requested value to sort the feature table list\n   */\n  sortFeaturesBy(valueName): void {\n    if (this.features !== undefined && this.features.length > 1) {\n      this.lastSortValue === valueName //if last sort by value is the same as current sort table list in reverse\n        ? (this.sortReverse = !this.sortReverse)\n        : (this.sortReverse = false);\n      this.features = this.features.sort((a, b) =>\n        this.sortFeatures(a, b, valueName),\n      );\n    }\n  }\n\n  /**\n   * Sorting algorithm\n   *\n   * @param a - First input feature\n   * @param b - second input feature\n   * @param valueName - Sorting value\n   * @returns Returns each features relative position in the table\n   */\n  sortFeatures(a, b, valueName): number {\n    let aFeature, bFeature: any;\n    let position: number;\n    if (valueName === 'name') {\n      //check if table is being sorted by name\n      aFeature = a[valueName];\n      bFeature = b[valueName];\n    } else {\n      aFeature = this.getValue(a.attributes, valueName); //get requested attribute value\n      bFeature = this.getValue(b.attributes, valueName);\n    }\n    if (aFeature === null) {\n      position = 1;\n    }\n    if (bFeature === null) {\n      position = -1;\n    }\n    if (typeof aFeature == 'string' && typeof bFeature == 'string') {\n      position =\n        aFeature.charAt(0) > bFeature.charAt(0)\n          ? 1\n          : aFeature.charAt(0) < bFeature.charAt(0)\n            ? -1\n            : 0;\n    }\n    if (typeof aFeature == 'number' && typeof bFeature == 'number') {\n      position = aFeature - bFeature;\n    }\n    this.sortReverse ? (position = position * -1) : position;\n    this.lastSortValue = valueName;\n    return position;\n  }\n\n  /**\n   * Get requested features attribute value, which will be used in the sorting algorithm\n   *\n   * @param attributes - features attributes\n   * @param valueName - Sorting value\n   * @returns Returns attributes value\n   */\n  getValue(attributes: any, valueName: string): string | number {\n    let value = attributes //get requested attribute value\n      .filter((attr) => attr.name == valueName)\n      .map((attr) => attr.value);\n    if (value.length == 0 || value === undefined) {\n      value = null;\n    } else {\n      value = value[0];\n    }\n    return value;\n  }\n}\n","<h3 class=\"mt-1\" style=\"text-align: center\">{{layer.title | translateHs : {module: 'LAYERS'} }}</h3>\n<div class=\"form-group mt-1 mb-1\">\n    <div class=\"input-group\" style=\"margin-bottom: 4px\">\n        <input type=\"text\" class=\"form-control hs-filter\" [placeholder]=\"'COMMON.filter' | translateHs  \"\n            [(ngModel)]=\"searchedFeatures\" name=\"FeatureName\">\n    </div>\n</div>\n<table style=\"width:100%;\" *ngFor=\"let feature of hsFeatureTableService.features | featureFilter: searchedFeatures\">\n    <thead>\n        <tr style=\"text-align: center; background-color: rgba(0,0,0,0.05);\">\n            <th colspan=\"2\">{{translate(feature.name)}}<!-- TODO: Remove function call from template -->\n                <a style=\"float: center;\" (click)=\"sortFeaturesBy(feature.name)\"\n                    [title]=\"'FEATURE_TABLE.sortFeaturesByValue' | translateHs  \">^</a>\n            </th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr *ngFor=\"let attr of feature.attributes\" rowspan=\"3\">\n            <th class=\"tdbreak\" style=\"background-color: rgba(0,0,0,0.03);\">\n                {{translate(attr.name)}}<a style=\"float: right;\" (click)=\"sortFeaturesBy(attr.name)\"\n                    [title]=\"'FEATURE_TABLE.sortFeaturesByValue' | translateHs  \">^</a><!-- TODO: Remove function call from template -->\n            </th>\n            <td class=\"tdbreak\" style=\"min-width: 200px; max-width: 200px;\">\n                <span *ngIf=\"!attr.sanitizedValue && !attr.value?.operations\">\n                    <i>{{attr.value}}</i>\n                </span>\n                <i><span *ngIf=\"!!attr.sanitizedValue\" [innerHTML]=\"attr.sanitizedValue\"></span></i>\n                <div *ngIf=\"attr.value?.operations\">\n                    <a *ngFor=\"let operation of attr.value.operations\" (click)=\"executeOperation(operation)\"><span>\n                            <i> {{translate(operation.customActionName) ||\n                                translate(operation.action)}};</i></span></a><!-- TODO: Remove function call from template -->\n                </div>\n            </td>\n        </tr>\n        <tr [hidden]=\"!showFeatureStats\" class=\"tdbreak\" *ngFor=\"let stat of feature.stats\">\n            <th class=\"tdbreak\" style=\"background-color: rgba(0,0,0,0.03);\">\n                {{translate(stat.name)}}</th><!-- TODO: Remove function call from template -->\n            <td class=\"tdbreak\" style=\"min-width: 200px; max-width: 200px;\"><span><i>{{stat.value}}</i></span></td>\n        </tr>\n    </tbody>\n</table>\n<p class=\"p-2\">\n    <small><a (click)=\"showFeatureStats = !showFeatureStats\">{{'FEATURE_TABLE.showFeatureStats' | translateHs\n            }}</a></small>\n</p>\n<hr />","import {Component, Input, OnInit} from '@angular/core';\n\nimport {Feature} from 'ol';\nimport {Geometry} from 'ol/geom';\n\nimport {HsFeatureTableService} from './feature-table.service';\nimport {HsLanguageService} from 'hslayers-ng/services/language';\nimport {HsLayerUtilsService} from 'hslayers-ng/services/utils';\nimport {HsMapService} from 'hslayers-ng/services/map';\nimport {HsUtilsService} from 'hslayers-ng/services/utils';\n\ntype Operation = {\n  action: 'zoom to' | 'delete' | 'custom action';\n  feature: Feature<Geometry>;\n  customActionName?: string;\n  customAction?: any;\n};\n\n@Component({\n  selector: 'hs-layer-features',\n  templateUrl: './layer-features.component.html',\n  styles: [\n    `\n      td,\n      th {\n        border: 1px solid #dddddd;\n        text-align: left;\n        padding: 6px;\n        font-size: 0.875rem;\n      }\n      .tdbreak {\n        overflow-wrap: break-word;\n        word-break: break-word;\n      }\n    `,\n  ],\n})\nexport class HsLayerFeaturesComponent implements OnInit {\n  /**\n   * Input layer from HsConfig.layersInFeatureTable property array\n   */\n  @Input() layer: any;\n  /**\n   * Toggle for showing feature statistics\n   */\n  showFeatureStats = false;\n  searchedFeatures = '';\n  constructor(\n    public hsFeatureTableService: HsFeatureTableService,\n    public hsUtilsService: HsUtilsService,\n    public hsMapService: HsMapService,\n    public hsLanguageService: HsLanguageService,\n    public hsLayerUtilsService: HsLayerUtilsService,\n  ) {}\n\n  /**\n   * Activate listeners for any layer source changes to update the html table\n   */\n  ngOnInit(): void {\n    const olLayer = this.layer.lyr;\n    const source = this.hsLayerUtilsService.isLayerClustered(olLayer)\n      ? olLayer.getSource().getSource()\n      : olLayer.getSource();\n    if (source) {\n      this.hsFeatureTableService.fillFeatureList(olLayer);\n      source.on('changefeature', (e) => {\n        this.hsFeatureTableService.updateFeatureDescription(e.feature);\n      });\n      source.on('addfeature', (e) => {\n        this.hsFeatureTableService.addFeatureDescription(e.feature);\n      });\n      source.on('removefeature', (e) => {\n        this.hsFeatureTableService.removeFeatureDescription(e.feature);\n      });\n    }\n  }\n\n  /**\n   * Zoom to feature from HTML table after triggering zoom action\n   * @param operation - Action for HTML table\n   * @public\n   */\n  executeOperation(operation: Operation): void {\n    switch (operation.action) {\n      case 'zoom to':\n        const extent = operation.feature.getGeometry().getExtent();\n        this.hsMapService.fitExtent(extent);\n        break;\n      case 'custom action':\n        operation.customAction(operation.feature);\n        break;\n      default:\n    }\n  }\n\n  /**\n   * Translate provided text to selected locale language\n   * @param text - Text to translate to locale\n   * @returns Returns translation\n   */\n  translate(text: string): string {\n    const translation: string =\n      this.hsLanguageService.getTranslationIgnoreNonExisting(\n        'FEATURE_TABLE',\n        text,\n        undefined,\n      );\n    return translation;\n  }\n\n  /**\n   * Sort features by value\n   * @param name - Sort value\n   */\n  sortFeaturesBy(name: string): void {\n    this.hsFeatureTableService.sortFeaturesBy(name);\n  }\n}\n","<div class=\"card hs-main-panel\" *ngIf=\"isVisible$ | async\">\n    <hs-panel-header name=\"feature-table\" [panelTabs]=\"'FEATURE_TABLE'\"></hs-panel-header>\n    <div class=\"card-body\">\n        <div *ngFor=\"let layer of layers\">\n            <hs-layer-features [layer]=\"layer\"></hs-layer-features>\n        </div>\n    </div>\n</div>","import {Component, OnInit} from '@angular/core';\n\nimport {Feature} from 'ol';\nimport {Vector as VectorLayer} from 'ol/layer';\n\nimport {HsConfig} from 'hslayers-ng/config';\nimport {HsFeatureTableService} from './feature-table.service';\nimport {HsMapService} from 'hslayers-ng/services/map';\nimport {HsPanelBaseComponent} from 'hslayers-ng/common/panels';\nimport {HsSidebarService} from 'hslayers-ng/services/sidebar';\n\n@Component({\n  selector: 'hs-feature-table',\n  templateUrl: './feature-table.component.html',\n})\nexport class HsFeatureTableComponent\n  extends HsPanelBaseComponent\n  implements OnInit {\n  layers: VectorLayer<Feature>[] = [];\n  name = 'feature-table';\n  constructor(\n    private hsFeatureTableService: HsFeatureTableService,\n    private hsConfig: HsConfig,\n    private hsMapService: HsMapService,\n    private hsSidebarService: HsSidebarService,\n  ) {\n    super();\n  }\n\n  ngOnInit(): void {\n    this.hsSidebarService.addButton({\n      panel: 'featureTable',\n      module: 'hs.feature-table',\n      order: 14,\n      fits: true,\n      title: 'PANEL_HEADER.FEATURE_TABLE',\n      description: 'SIDEBAR.descriptions.FEATURE_TABLE',\n      icon: 'icon-indexmanager',\n    });\n    this.hsMapService.loaded().then(() => {\n      for (const layer of this.hsConfig.layersInFeatureTable || []) {\n        this.addLayerToTable(layer);\n      }\n    });\n  }\n\n  /**\n   * Add layer to feature description table\n   * @param layer - Layer to add\n   */\n  addLayerToTable(layer: VectorLayer<Feature>): void {\n    const layerDescriptor = this.hsFeatureTableService.addLayer(layer);\n    if (layerDescriptor) {\n      this.layers.push(layerDescriptor);\n    }\n  }\n}\n","import {CUSTOM_ELEMENTS_SCHEMA, NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule} from '@angular/forms';\nimport {NgbDropdownModule} from '@ng-bootstrap/ng-bootstrap';\n\nimport {HsFeatureFilterPipe} from './feature-filter.pipe';\nimport {HsFeatureTableComponent} from './feature-table.component';\nimport {HsLayerFeaturesComponent} from './layer-features.component';\nimport {HsPanelHeaderComponent} from 'hslayers-ng/common/panels';\nimport {HsPanelHelpersModule} from 'hslayers-ng/common/panels';\nimport {TranslateCustomPipe} from 'hslayers-ng/services/language';\n\n@NgModule({\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  declarations: [\n    HsFeatureTableComponent,\n    HsLayerFeaturesComponent,\n    HsFeatureFilterPipe,\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    HsPanelHelpersModule,\n    TranslateCustomPipe,\n    NgbDropdownModule,\n    HsPanelHeaderComponent,\n  ],\n  exports: [\n    HsFeatureTableComponent,\n    HsLayerFeaturesComponent,\n    HsFeatureFilterPipe,\n  ],\n})\nexport class HsFeatureTableModule {}\n"],"x_google_ignoreList":[]}
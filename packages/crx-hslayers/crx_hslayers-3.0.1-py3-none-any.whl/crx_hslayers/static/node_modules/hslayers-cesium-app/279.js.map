{"version":3,"file":"279.js","mappings":"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","names":["profiles","WAYPOINT","setWaypoint","feature","wp","set","getWaypoint","get","HsTripPlannerService","constructor","HsMapService","HsUtilsService","$http","HsShareUrlService","HsEventBusService","HsToastService","HsLanguageService","HsLayerUtilsService","HsLayoutService","hsConfig","this","waypoints","trip","orsProfiles","movable_features","Collection","selectedLayerWrapper","selectedProfile","modify","Modify","features","mapClicked","subscribe","coordinates","mainpanel","waypointLayer","createWaypointLayer","routeLayer","createRouteLayer","getMap","getInteractions","getArray","find","i","getActive","instOf","Draw","addWaypoint","x","mapProjCoordinate","y","lon","epsg4326Coordinate","lat","loaded","then","map","addInteraction","fillVectorLayers","_this","_asyncToGenerator","vectorLayers","layer","title","getLayersArray","filter","isLayerDrawable","getTitle","fillDefaultLayerWrapper","usage","w","waypointSource","VectorSource","VectorLayer","source","style","waypointRouteStyle","setTitle","getTranslation","undefined","addLayer","routeSource","selectLayer","_this2","getSource","route","clear","length","getFeatures","new_cords","transform","getGeometry","getCoordinates","getCurrentProj","getCode","name","hash","hashCode","JSON","stringify","Math","random","routes","from","to","featureId","getId","loading","push","waypointAdded","calculateRoutes","selectProfile","profile","_this3","removeRoutesForWaypoint","getTextOnFeature","tmp","formatDistance","Feature","geometry","Point","id","generateUuid","setId","addFeature","getFeatureById","on","e","prev_index","indexOf","routeRemoved","timer","clearTimeout","setTimeout","removeFeature","ex","waypointRemoved","removeWaypoint","wpIndex","next_index","splice","clearAll","routeAdded","addFeatures","_this4","wpf","wpt","url","proxify","response","lastValueFrom","post","pipe","timeout","catchError","status","error","code","createToastPopupMessage","getTranslationIgnoreNonExisting","message","disableLocalization","serviceCalledFrom","of","GeoJSON","readFeatures","which","distance","toFixed","static","t","i0","i1","i2","i3","i4","i5","i6","i7","i8","i9","core","jDH","factory","ɵfac","providedIn","ctx_r0","selectedWrapper","_c1","layer_r3","_r2","$implicit","layersExpanded","HsTripPlannerLayerSelectorComponent","VBU","selectors","inputs","label","decls","vars","consts","template","rf","ctx","HsTripPlannerLayerSelectorComponent_div_5_Template","HsTripPlannerLayerSelectorComponent_a_8_Template","_c0","profile_r3","hsTripPlannerService","profilesExpanded","HsTripPlannerProfileSelectorComponent","HsTripPlannerProfileSelectorComponent_div_6_Template","HsTripPlannerProfileSelectorComponent_a_9_Template","waypoint_r2","_r1","ctx_r2","toggleEdit","$event","editMode","_r4","HsTripPlannerComponent_div_0_For_9_Template","_forTrack0","HsTripPlannerComponent_div_0_Conditional_10_Template","HsTripPlannerComponent_div_0_Conditional_11_Template","panelWidthClass","totalDistance","HsTripPlannerComponent","HsPanelBaseComponent","hsLanguageService","hsLayerUtilsService","hsMapService","hsUtilsService","super","ngOnInit","_superprop_getNgOnInit","call","default_layers","forEach","waypoint","src","setHighlighted","HsTripPlannerComponent_div_0_Template","isVisible$","HsTripPlannerModule","$C","G2t","FormsModule","CommonModule","HsPanelHelpersModule","HsPanelHeaderComponent","NgbDropdownModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["webpack:///./projects/hslayers/components/trip-planner/ors-profiles.const.ts","webpack:///./projects/hslayers/components/trip-planner/trip-planner.service.ts","webpack:///./projects/hslayers/components/trip-planner/layer-selector.component.html","webpack:///./projects/hslayers/components/trip-planner/layer-selector.component.ts","webpack:///./projects/hslayers/components/trip-planner/route-profile-selector.component.html","webpack:///./projects/hslayers/components/trip-planner/route-profile-selector.component.ts","webpack:///./projects/hslayers/components/trip-planner/trip-planner.component.html","webpack:///./projects/hslayers/components/trip-planner/trip-planner.component.ts","webpack:///./projects/hslayers/components/trip-planner/trip-planner.module.ts"],"sourcesContent":["export const profiles = [\n  'driving-car',\n  'driving-hgv',\n  'cycling-regular',\n  'cycling-road',\n  'cycling-mountain',\n  'cycling-electric',\n  'foot-walking',\n  'foot-hiking',\n  'wheelchair',\n] as const;\n\nexport type RouteProfile = (typeof profiles)[number];\n","import {HttpClient} from '@angular/common/http';\nimport {Injectable} from '@angular/core';\nimport {catchError, lastValueFrom, of, timeout} from 'rxjs';\n\nimport {Collection, Feature} from 'ol';\nimport {Draw, Modify} from 'ol/interaction';\nimport {Fill, Icon, Stroke, Style, Text} from 'ol/style';\nimport {GeoJSON} from 'ol/format';\nimport {Geometry, Point} from 'ol/geom';\nimport {Layer, Vector as VectorLayer} from 'ol/layer';\nimport {Source, Vector as VectorSource} from 'ol/source';\nimport {transform} from 'ol/proj';\n\nimport {HsConfig} from 'hslayers-ng/config';\nimport {HsEventBusService} from 'hslayers-ng/services/event-bus';\nimport {HsLanguageService} from 'hslayers-ng/services/language';\nimport {HsLayerUtilsService} from 'hslayers-ng/services/utils';\nimport {HsLayoutService} from 'hslayers-ng/services/layout';\nimport {HsMapService} from 'hslayers-ng/services/map';\nimport {HsShareUrlService} from 'hslayers-ng/services/share';\nimport {HsToastService} from 'hslayers-ng/common/toast';\nimport {HsUtilsService} from 'hslayers-ng/services/utils';\nimport {RouteProfile, profiles} from './ors-profiles.const';\nimport {getHighlighted} from 'hslayers-ng/common/extensions';\nimport {getTitle, setTitle} from 'hslayers-ng/common/extensions';\n\nexport type Waypoint = {\n  name: string;\n  lon: number;\n  lat: number;\n  hash: number;\n  routes: {from: Feature<Geometry>; to: Feature<Geometry>};\n  featureId;\n  editMode?: boolean;\n  loading: boolean;\n};\n\nconst WAYPOINT = 'wp' as const;\n\nexport function setWaypoint(feature: Feature<Geometry>, wp: Waypoint): void {\n  feature.set(WAYPOINT, wp);\n}\n\nexport function getWaypoint(feature: Feature<Geometry>): Waypoint {\n  return feature.get(WAYPOINT);\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HsTripPlannerService {\n  waypointRouteStyle;\n  waypoints: Waypoint[] = [];\n  trip: any = {};\n  orsProfiles = profiles;\n  movable_features = new Collection<Feature<Geometry>>();\n  modify: Modify;\n  waypointSource: VectorSource<Feature<Point>>;\n  waypointLayer: VectorLayer<Feature<Point>>;\n  routeSource: VectorSource;\n  routeLayer: VectorLayer<Feature>;\n  timer: any;\n  vectorLayers: {layer: VectorLayer<Feature>; title: string}[];\n  selectedLayerWrapper: {\n    route?: {layer: VectorLayer<Feature>; title: string};\n    waypoints?: {layer: VectorLayer<Feature>; title: string};\n  } = {};\n  selectedProfile: RouteProfile = profiles[0];\n\n  constructor(\n    public HsMapService: HsMapService,\n    public HsUtilsService: HsUtilsService,\n    private $http: HttpClient,\n    public HsShareUrlService: HsShareUrlService,\n    public HsEventBusService: HsEventBusService,\n    private HsToastService: HsToastService,\n    public HsLanguageService: HsLanguageService,\n    private HsLayerUtilsService: HsLayerUtilsService,\n    private HsLayoutService: HsLayoutService,\n    private hsConfig: HsConfig,\n  ) {\n    this.modify = new Modify({\n      features: this.movable_features,\n    });\n\n    this.HsEventBusService.mapClicked.subscribe(({coordinates}) => {\n      if (this.HsLayoutService.mainpanel != 'tripPlanner') {\n        return;\n      }\n      if (!this.waypointLayer) {\n        this.createWaypointLayer();\n      }\n      if (!this.routeLayer) {\n        this.createRouteLayer();\n      }\n      //Don't add waypoints when drawing and measuring\n      if (\n        this.HsMapService.getMap()\n          .getInteractions()\n          .getArray()\n          .find((i) => i.getActive() && this.HsUtilsService.instOf(i, Draw))\n      ) {\n        return;\n      }\n      this.addWaypoint({\n        x: coordinates.mapProjCoordinate[0],\n        y: coordinates.mapProjCoordinate[1],\n        lon: coordinates.epsg4326Coordinate[0],\n        lat: coordinates.epsg4326Coordinate[1],\n      });\n    });\n\n    this.HsMapService.loaded().then((map) => {\n      (feature, resolution) => {\n        return [\n          new Style({\n            fill: new Fill({\n              color: 'rgba(255, 255, 255, 0.6)',\n            }),\n            stroke: new Stroke({\n              color: '#337AB7',\n              width: 3,\n            }),\n            image: new Icon({\n              src:\n                this.hsConfig.assetsPath + getHighlighted(feature)\n                  ? 'img/pin_white_red32.png'\n                  : 'img/pin_white_blue32.png',\n              crossOrigin: 'anonymous',\n              anchor: [0.5, 1],\n            }),\n            text: new Text({\n              font: '12px Calibri,sans-serif',\n              overflow: true,\n              fill: new Fill({\n                color: '#000',\n              }),\n              stroke: new Stroke({\n                color: '#fff',\n                width: 3,\n              }),\n              offsetY: -40,\n              text: this.getTextOnFeature(feature),\n            }),\n          }),\n        ];\n      };\n      map.addInteraction(this.modify);\n      this.fillVectorLayers();\n    });\n  }\n\n  async fillVectorLayers(): Promise<void> {\n    this.HsMapService.loaded().then((map) => {\n      this.vectorLayers = [\n        {\n          layer: null,\n          title: 'newLayer',\n        },\n        ...this.HsMapService.getLayersArray()\n          .filter((layer: Layer<Source>) =>\n            this.HsLayerUtilsService.isLayerDrawable(layer),\n          )\n          .map((layer: VectorLayer<Feature>) => {\n            return {layer, title: getTitle(layer)};\n          }),\n      ];\n      this.fillDefaultLayerWrapper('route');\n      this.fillDefaultLayerWrapper('waypoints');\n    });\n  }\n\n  private fillDefaultLayerWrapper(usage: 'route' | 'waypoints') {\n    if (this.selectedLayerWrapper[usage]) {\n      this.selectedLayerWrapper[usage] = this.vectorLayers.find(\n        (w) => w.layer == this.selectedLayerWrapper[usage].layer,\n      );\n    } else {\n      this.selectedLayerWrapper[usage] = this.vectorLayers[0];\n    }\n  }\n\n  createWaypointLayer(): void {\n    this.waypointSource = new VectorSource();\n    this.waypointLayer = new VectorLayer({\n      source: this.waypointSource,\n      style: this.waypointRouteStyle,\n    });\n    setTitle(\n      this.waypointLayer,\n      this.HsLanguageService.getTranslation(\n        'TRIP_PLANNER.waypoints',\n        undefined,\n      ),\n    );\n    this.HsMapService.getMap().addLayer(this.waypointLayer);\n  }\n\n  createRouteLayer(): void {\n    this.routeSource = new VectorSource();\n    this.routeLayer = new VectorLayer({\n      source: this.routeSource,\n      style: this.waypointRouteStyle,\n    });\n    setTitle(\n      this.routeLayer,\n      this.HsLanguageService.getTranslation(\n        'TRIP_PLANNER.travelRoute',\n        undefined,\n      ),\n    );\n    this.HsMapService.getMap().addLayer(this.routeLayer);\n  }\n\n  /**\n   * Select layer for storing route or waypoint features\n   * @param layer - Wrapper object which contains OL layer and its title\n   * @param usage - route or waypoints\n   */\n  async selectLayer(\n    layer: {layer: VectorLayer<Feature>; title: string},\n    usage: 'route' | 'waypoints',\n  ): Promise<void> {\n    if (usage == 'route') {\n      this.routeLayer = layer.layer;\n      if (this.routeLayer) {\n        this.routeSource = this.routeLayer.getSource();\n      }\n      this.selectedLayerWrapper.route = layer;\n    }\n    if (usage == 'waypoints') {\n      this.waypointLayer = layer.layer as VectorLayer<Feature<Point>>;\n      if (this.waypointLayer) {\n        this.waypointSource = this.waypointLayer.getSource();\n      }\n      this.routeSource.clear();\n      this.waypoints.length = 0;\n      this.selectedLayerWrapper.waypoints = layer;\n      for (const feature of this.waypointSource.getFeatures()) {\n        const new_cords = transform(\n          feature.getGeometry().getCoordinates(),\n          this.HsMapService.getCurrentProj().getCode(),\n          'EPSG:4326',\n        );\n        const wp: Waypoint = {\n          lon: new_cords[0],\n          lat: new_cords[1],\n          name: 'Waypoint ' + (this.waypoints.length + 1),\n          hash: this.HsUtilsService.hashCode(\n            JSON.stringify('Waypoint ' + this.waypoints.length + Math.random()),\n          ),\n          routes: {from: null, to: null},\n          featureId: feature.getId(),\n          loading: false,\n        };\n        this.waypoints.push(wp);\n        if (this.waypointAdded !== undefined) {\n          this.waypointAdded(wp);\n        }\n        await this.calculateRoutes();\n      }\n    }\n  }\n\n  async selectProfile(profile: RouteProfile): Promise<void> {\n    this.selectedProfile = profile;\n    for (const wp of this.waypoints) {\n      this.removeRoutesForWaypoint(wp);\n    }\n    await this.calculateRoutes();\n  }\n\n  getTextOnFeature(feature: Feature<Geometry>): string {\n    let tmp = '';\n    const wp: Waypoint = getWaypoint(feature);\n    if (wp) {\n      tmp = wp.name;\n      if (wp?.routes?.to) {\n        tmp += ` (${this.formatDistance(wp, 'to')})`;\n      }\n    }\n    return tmp;\n  }\n\n  /**\n   * Add waypoint to waypoint list and recalculate route\n   * @param lon - Longitude number (part of Ol.coordinate Array)\n   * @param lat - Latitude number (part of Ol.coordinate Array)\n   */\n  addWaypoint({\n    x,\n    y,\n    lon,\n    lat,\n  }: {\n    x: number;\n    y: number;\n    lon: number;\n    lat: number;\n  }) {\n    const wp: Waypoint = {\n      lon,\n      lat,\n      name: 'Waypoint ' + (this.waypoints.length + 1),\n      hash: this.HsUtilsService.hashCode(\n        JSON.stringify('Waypoint ' + this.waypoints.length + Math.random()),\n      ),\n      routes: {from: null, to: null},\n      featureId: null,\n      loading: false,\n    };\n    const feature = new Feature({\n      'wp': wp,\n      geometry: new Point([x, y]),\n      id: this.HsUtilsService.generateUuid(),\n    }) as Feature<Point>;\n    feature.setId(feature.get('id'));\n    wp.featureId = feature.getId();\n    this.waypointSource.addFeature(feature);\n    this.waypoints.push(wp);\n    if (this.waypointAdded !== undefined) {\n      this.waypointAdded(wp);\n    }\n    this.calculateRoutes();\n  }\n\n  /**\n   * Handler of adding waypoint in connected service\n   * @param wp - Waypoint object, with lat, lon and routes array\n   */\n  waypointAdded(wp: Waypoint): void {\n    const feature = this.waypointSource.getFeatureById(wp.featureId);\n    this.movable_features.push(feature);\n    feature.getGeometry().on('change', (e) => {\n      this.removeRoutesForWaypoint(wp);\n      const new_cords = transform(\n        feature.getGeometry().getCoordinates(),\n        this.HsMapService.getCurrentProj().getCode(),\n        'EPSG:4326',\n      );\n      wp.lon = new_cords[0];\n      wp.lat = new_cords[1];\n      const prev_index = this.waypoints.indexOf(wp) - 1;\n      if (prev_index > -1) {\n        this.waypoints[prev_index].routes.from = null;\n        this.routeRemoved(this.waypoints[prev_index].routes.from);\n      }\n      if (this.timer !== null) {\n        clearTimeout(this.timer);\n      }\n      this.timer = setTimeout(() => {\n        this.calculateRoutes();\n      }, 500);\n    });\n  }\n\n  /**\n   * Remove selected route from source\n   * @param feature - Route feature to remove\n   */\n  routeRemoved(feature: Feature<Geometry>): void {\n    try {\n      if (feature) {\n        this.routeSource.removeFeature(feature);\n      }\n    } catch (ex) {\n      throw ex;\n    }\n  }\n\n  /**\n   * (PRIVATE) Remove routes from selected waypoint\n   * @param wp - Waypoint to remove routes\n   */\n  removeRoutesForWaypoint(wp: Waypoint): void {\n    this.routeRemoved(wp.routes.from);\n    this.routeRemoved(wp.routes.to);\n    wp.routes = {from: null, to: null};\n  }\n\n  /**\n   * Remove selected waypoint from source\n   * @param wp - Waypoint feature to remove\n   */\n  waypointRemoved(wp: Waypoint): void {\n    try {\n      this.waypointSource.removeFeature(\n        this.waypointSource.getFeatureById(wp.featureId),\n      );\n    } catch (ex) {\n      throw ex;\n    }\n  }\n\n  /**\n   * Remove selected waypoint from trip\n   * @param wp - Waypoint object to remove\n   */\n  removeWaypoint(wp) {\n    const wpIndex = this.waypoints.indexOf(wp);\n    const prev_index = wpIndex - 1;\n    if (prev_index > -1) {\n      this.waypoints[prev_index].routes.from = null;\n    }\n    this.routeRemoved(wp.routes.from);\n    this.routeRemoved(wp.routes.to);\n    const next_index = wpIndex + 1;\n    if (next_index < this.waypoints.length) {\n      this.waypoints[next_index].routes.to = null;\n    }\n    this.waypointRemoved(wp);\n    this.waypoints.splice(this.waypoints.indexOf(wp), 1);\n    this.calculateRoutes();\n  }\n\n  /**\n   * Clear all waypoints from service and layer\n   */\n  clearAll(): void {\n    this.waypoints = [];\n    this.waypointSource.clear();\n    this.routeSource.clear();\n  }\n\n  /**\n   * Handler of adding computed route to layer\n   * @param feature - Route to add\n   */\n  routeAdded(features: Feature<Geometry>[]): void {\n    this.routeSource.addFeatures(features);\n  }\n\n  /**\n   * Calculate routes between stored waypoints\n   */\n  async calculateRoutes(): Promise<void> {\n    for (let i = 0; i < this.waypoints.length - 1; i++) {\n      const wpf = this.waypoints[i];\n      if (wpf.routes.from === null) {\n        const wpt = this.waypoints[i + 1];\n        wpt.loading = true;\n        const url = this.HsUtilsService.proxify(\n          `https://api.openrouteservice.org/v2/directions/${this.selectedProfile}/geojson`,\n        );\n        const response = await lastValueFrom(\n          this.$http\n            .post(url, {\n              'coordinates': [\n                [wpf.lon, wpf.lat],\n                [wpt.lon, wpt.lat],\n              ],\n            })\n            .pipe(\n              timeout(10000),\n              catchError((e) => {\n                let title = this.HsLanguageService.getTranslation(\n                  'TRIP_PLANNER.serviceDown',\n                  undefined,\n                );\n                if (e.status == 404) {\n                  if (e.error?.error?.code == 2010) {\n                    title = this.HsLanguageService.getTranslation(\n                      'TRIP_PLANNER.noRoutablePoint',\n                      undefined,\n                    );\n                  } else {\n                    title = this.HsLanguageService.getTranslation(\n                      'TRIP_PLANNER.missingAuth',\n                      undefined,\n                    );\n                  }\n                }\n                this.HsToastService.createToastPopupMessage(\n                  title,\n                  this.HsLanguageService.getTranslationIgnoreNonExisting(\n                    'ERRORMESSAGES',\n                    e.error?.error?.message ?? e.message,\n                    {url},\n                  ),\n                  {\n                    disableLocalization: true,\n                    serviceCalledFrom: 'HsTripPlannerService',\n                  },\n                );\n                return of(null);\n              }),\n            ),\n        );\n        if (!response) {\n          return;\n        }\n        wpt.loading = false;\n        const format = new GeoJSON();\n        const features = format.readFeatures(response);\n        features[0]\n          .getGeometry()\n          .transform('EPSG:4326', this.HsMapService.getCurrentProj());\n        wpf.routes.from = features[0];\n        wpt.routes.to = features[0];\n        if (this.routeAdded !== undefined) {\n          this.routeAdded(features);\n        }\n      }\n    }\n  }\n\n  /**\n   * Format waypoint route distance in a human friendly way\n   * @returns Distance\n   */\n  formatDistance(wp: Waypoint, which?: string): string {\n    which = which !== undefined ? which : 'from';\n    if (wp.routes[which]) {\n      const route = wp.routes[which];\n      const distance = route?.get('summary').distance / 1000.0;\n      if (distance == undefined) {\n        return '';\n      } else {\n        return distance.toFixed(2) + 'km';\n      }\n    }\n  }\n}\n","<div class=\"flex-row w-100 m-auto justify-content-center align-items-center\" style=\"display: flex\">\n  <p class=\"m-0 p-0 flex-fill text-primary\">{{label}}:</p>\n  <div ngbDropdown placement=\"bottom\" style=\"max-width: 50%\">\n    <button type=\"button\" ngbDropdownToggle class=\"\n        btn btn-sm\n        rounded-0\n        hs-toolbar-button\n        d-flex\n        align-items-center\n        mw-100\n      \" aria-haspopup=\"true\" (click)=\"layersExpanded = !layersExpanded; HsTripPlannerService.fillVectorLayers() \"\n      [attr.aria-expanded]=\"layersExpanded\">\n      <div class=\"text-truncate\" *ngIf=\"selectedWrapper !== undefined\">\n        {{selectedWrapper.title | translateHs : {module: 'LAYERS'} }}\n      </div>\n    </button>\n    <div ngbDropdownMenu [ngClass]=\"{'show': layersExpanded}\" style=\"transform: translateX(25%); width: 15em\">\n      <div class=\"d-flex align-items-center w-100 flex-column\">\n        <a class=\"dropdown-item text-truncate\" *ngFor=\"let layer of HsTripPlannerService.vectorLayers\"\n          data-toggle=\"tooltip\" [title]=\"layer.title | translateHs : {module: 'LAYERS'}\"\n          (click)=\"HsTripPlannerService.selectLayer(layer, usage); layersExpanded = false\">{{layer.title |\n          translateHs : {module: 'LAYERS'} }}</a>\n      </div>\n    </div>\n  </div>\n</div>\n","import {Component, Input} from '@angular/core';\n\nimport {Feature} from 'ol';\nimport {Vector as VectorLayer} from 'ol/layer';\n\nimport {HsLayerUtilsService} from 'hslayers-ng/services/utils';\nimport {HsTripPlannerService} from './trip-planner.service';\n\n@Component({\n  selector: 'hs-trip-planner-layer-selector',\n  templateUrl: './layer-selector.component.html',\n})\nexport class HsTripPlannerLayerSelectorComponent {\n  @Input() label: string;\n  @Input() usage: 'route' | 'waypoints';\n  @Input() selectedWrapper: {\n    layer: VectorLayer<Feature>;\n    title: string;\n  };\n\n  layersExpanded: boolean;\n\n  constructor(\n    public HsTripPlannerService: HsTripPlannerService,\n    public HsLayerUtilsService: HsLayerUtilsService,\n  ) {}\n}\n","<div class=\"flex-row w-100 m-auto justify-content-center align-items-center\" style=\"display: flex\">\n  <p class=\"m-0 p-0 flex-fill text-primary\">{{'TRIP_PLANNER.selectProfile' | translateHs}}:</p>\n  <div ngbDropdown placement=\"bottom\" style=\"max-width: 50%\">\n    <button type=\"button\" ngbDropdownToggle\n      class=\"btn btn-sm rounded-0 hs-toolbar-button d-flex align-items-center mw-100\" aria-haspopup=\"true\"\n      (click)=\"profilesExpanded = !profilesExpanded\"\n      [attr.aria-expanded]=\"profilesExpanded\">\n      <div class=\"text-truncate\" *ngIf=\"selectedProfile !== undefined\">\n        {{selectedProfile | translateHs : {module: 'TRIP_PLANNER.profiles'} }}\n      </div>\n    </button>\n    <div ngbDropdownMenu [ngClass]=\"{'show': profilesExpanded}\" style=\"transform: translateX(25%); width: 15em\">\n      <div class=\"d-flex align-items-center w-100 flex-column\">\n        <a class=\"dropdown-item text-truncate\" *ngFor=\"let profile of hsTripPlannerService.orsProfiles\"\n          data-toggle=\"tooltip\" [title]=\"profile | translateHs : {module: 'TRIP_PLANNER.profiles'}\"\n          (click)=\"hsTripPlannerService.selectProfile(profile); profilesExpanded = false\">{{profile |\n          translateHs : {module: 'TRIP_PLANNER.profiles'} }}</a>\n      </div>\n    </div>\n  </div>\n</div>\n","import {Component, Input} from '@angular/core';\n\nimport {HsTripPlannerService} from './trip-planner.service';\nimport {RouteProfile} from './ors-profiles.const';\n\n@Component({\n  selector: 'hs-trip-planner-profile-selector',\n  templateUrl: './route-profile-selector.component.html',\n})\nexport class HsTripPlannerProfileSelectorComponent {\n  @Input() selectedProfile: RouteProfile;\n  profilesExpanded: boolean;\n\n  constructor(public hsTripPlannerService: HsTripPlannerService) {}\n}\n","<div\n  class=\"card hs-main-panel\"\n  *ngIf=\"isVisible$ | async\"\n  [ngClass]=\"panelWidthClass\"\n>\n  <hs-panel-header name=\"tripPlanner\" [panelTabs]=\"'TRIP_PLANNER'\">\n  </hs-panel-header>\n  <div class=\"card-body d-flex flex-column px-3\">\n    <hs-trip-planner-layer-selector\n      usage=\"route\"\n      [label]=\"'TRIP_PLANNER.routerLayer' | translateHs\"\n      [selectedWrapper]=\"hsTripPlannerService.selectedLayerWrapper.route\"\n    >\n    </hs-trip-planner-layer-selector>\n    <hs-trip-planner-layer-selector\n      usage=\"waypoints\"\n      [label]=\"'TRIP_PLANNER.waypointLayer' | translateHs\"\n      [selectedWrapper]=\"hsTripPlannerService.selectedLayerWrapper.waypoints\"\n    >\n    </hs-trip-planner-layer-selector>\n    <hs-trip-planner-profile-selector\n      [selectedProfile]=\"hsTripPlannerService.selectedProfile\"\n    ></hs-trip-planner-profile-selector>\n    @for (waypoint of hsTripPlannerService.waypoints; track waypoint.hash) {\n      <div class=\"d-flex flex-row align-items-center px-2\">\n        <div class=\"p-1 flex-grow-1\">\n          <a (click)=\"toggleEdit(waypoint)\" [hidden]=\"!!waypoint.editMode\">{{\n            waypoint.name\n          }}</a>\n          <input\n            [(ngModel)]=\"waypoint.name\"\n            class=\"form-control hs-waypoint-name\"\n            [ngModelOptions]=\"{ standalone: true }\"\n            [hidden]=\"!waypoint.editMode\"\n            (blur)=\"toggleEdit(waypoint)\"\n          />\n        </div>\n        <div class=\"p-1\">\n          <span\n            [hidden]=\"!waypoint.loading\"\n            class=\"hs-loader hs-loader-dark\"\n          ></span>\n        </div>\n        <div class=\"p-1\" style=\"margin-top: 1em\">\n          {{ formatDistance(waypoint) }}\n        </div>\n        <div class=\"p-1\">\n          <a\n            class=\"p-1\"\n            (click)=\"hsTripPlannerService.removeWaypoint(waypoint)\"\n            data-toggle=\"tooltip\"\n            [title]=\"'TRIP_PLANNER.removeWaypoint' | translateHs\"\n          >\n            <i class=\"icon-remove-circle\" style=\"color: rgb(228, 99, 99)\"></i>\n          </a>\n        </div>\n      </div>\n    }\n    @if (hsTripPlannerService.waypoints.length === 0) {\n      <div class=\"alert alert-primary\" role=\"alert\">\n        {{ \"TRIP_PLANNER.waypointDrawingHint\" | translateHs }}\n      </div>\n    } @else {\n      <a class=\"accordion align-self-end btn btn-danger btn-sm m-2\" (click)=\"hsTripPlannerService.clearAll()\">{{\n        \"TRIP_PLANNER.clearWaypoints\" | translateHs\n      }}</a>\n    }\n    <br />\n    <div class=\"d-flex flex-row\">\n      <div class=\"p-1 flex-grow-1\">\n        <strong>{{ \"TRIP_PLANNER.totalDistance\" | translateHs }}:</strong>\n      </div>\n      <div class=\"p-1\">\n        {{ totalDistance()\n        }}<!-- TODO: Remove function call from template -->\n      </div>\n    </div>\n  </div>\n</div>\n","import {Component, OnInit} from '@angular/core';\n\nimport {HsConfig} from 'hslayers-ng/config';\nimport {HsLanguageService} from 'hslayers-ng/services/language';\nimport {HsLayerUtilsService} from 'hslayers-ng/services/utils';\nimport {HsMapService} from 'hslayers-ng/services/map';\nimport {HsPanelBaseComponent} from 'hslayers-ng/common/panels';\nimport {HsTripPlannerService, Waypoint} from './trip-planner.service';\nimport {HsUtilsService} from 'hslayers-ng/services/utils';\nimport {setHighlighted} from 'hslayers-ng/common/extensions';\n\n@Component({\n  selector: 'hs-trip-planner',\n  templateUrl: './trip-planner.component.html',\n})\nexport class HsTripPlannerComponent\n  extends HsPanelBaseComponent\n  implements OnInit\n{\n  name = 'tripPlanner';\n\n  constructor(\n    public hsConfig: HsConfig,\n    public hsLanguageService: HsLanguageService,\n    public hsLayerUtilsService: HsLayerUtilsService,\n    public hsMapService: HsMapService,\n    public hsTripPlannerService: HsTripPlannerService,\n    public hsUtilsService: HsUtilsService,\n  ) {\n    super();\n  }\n  async ngOnInit(): Promise<void> {\n    super.ngOnInit();\n    if (this.hsConfig.default_layers === undefined) {\n      this.hsConfig.default_layers = [];\n    } else {\n      this.hsConfig.default_layers.push(this.hsTripPlannerService.routeLayer);\n    }\n  }\n\n  /**\n   * Format waypoint route distance in a human friendly way\n   * @param wp - Waypoint\n   * @returns Distance\n   */\n  formatDistance(wp: Waypoint): string {\n    return this.hsTripPlannerService.formatDistance(wp);\n  }\n\n  /**\n   * Get the total distance for all waypoint routes\n   * @returns Distance\n   */\n  totalDistance(): string {\n    let tmp = 0;\n    this.hsTripPlannerService.waypoints.forEach((wp: Waypoint) => {\n      if (wp.routes.from) {\n        tmp += wp.routes.from.get('summary').distance / 1000.0;\n      }\n    });\n    return tmp.toFixed(2) + 'km';\n  }\n\n  /**\n   * Remove selected waypoint from source\n   */\n  toggleEdit(waypoint: Waypoint): void {\n    waypoint.editMode = !waypoint.editMode;\n    const src = this.hsTripPlannerService.waypointLayer.getSource();\n    setHighlighted(src.getFeatureById(waypoint.featureId), waypoint.editMode);\n  }\n}\n","import {CUSTOM_ELEMENTS_SCHEMA, NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule} from '@angular/forms';\nimport {NgbDropdownModule} from '@ng-bootstrap/ng-bootstrap';\n\nimport {\n  HsPanelHeaderComponent,\n  HsPanelHelpersModule,\n} from 'hslayers-ng/common/panels';\nimport {HsTripPlannerComponent} from './trip-planner.component';\nimport {HsTripPlannerLayerSelectorComponent} from './layer-selector.component';\nimport {HsTripPlannerProfileSelectorComponent} from './route-profile-selector.component';\nimport {TranslateCustomPipe} from 'hslayers-ng/services/language';\n\n@NgModule({\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  declarations: [\n    HsTripPlannerComponent,\n    HsTripPlannerLayerSelectorComponent,\n    HsTripPlannerProfileSelectorComponent,\n  ],\n  imports: [\n    FormsModule,\n    CommonModule,\n    TranslateCustomPipe,\n    HsPanelHelpersModule,\n    HsPanelHeaderComponent,\n    NgbDropdownModule,\n  ],\n  exports: [\n    HsTripPlannerComponent,\n    HsTripPlannerLayerSelectorComponent,\n    HsTripPlannerProfileSelectorComponent,\n  ],\n})\nexport class HsTripPlannerModule {}\n"],"x_google_ignoreList":[]}
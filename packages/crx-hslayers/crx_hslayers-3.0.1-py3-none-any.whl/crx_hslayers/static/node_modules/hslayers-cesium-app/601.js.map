{"version":3,"file":"601.js","mappings":"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","names":["HsRemoveLayerDialogService","constructor","hsMapService","hsToastService","hsLanguageService","hsLaymanService","hsCommonLaymanService","hsDialogContainerService","this","wrapLayer","layer","toRemove","displayTitle","undefined","removeLayer","deleteFromOptions","_this","_asyncToGenerator","confirmed","create","HsRmLayerDialogComponent","multiple","message","note","getDeleteNote","title","items","waitResult","value","mapLayers","type","includes","getLayersArray","completeLayerRemoval","removeMultipleLayers","layersToRemove","_this2","map","l","createToastPopupMessage","toastStyleClasses","serviceCalledFrom","customDelay","drawablesToRemove","filter","removeByText","getTranslation","layerToRemove","deleteFrom","_this3","removeFromCatalogue","getMap","tryRemovingFromMap","layers","lyr","find","getName","_this4","Layer","definition","getDefinition","format","toLowerCase","url","plural","isAuthenticated","static","t","i0","i1","i2","i3","i4","i5","i6","core","jDH","factory","Éµfac","providedIn","ctx_r0","data","option_r3","_r2","$implicit","selectDeleteOption","_c1","_c2","$event","item_r6","_r5","checkToRemove","stopPropagation","_r4","toggleAll","HsRmLayerDialogComponent_Conditional_11_div_7_div_4_div_5_Template","HsRmLayerDialogComponent_Conditional_11_div_7_div_4_Template","length","HsRmLayerDialogComponent_Conditional_11_button_5_Template","HsRmLayerDialogComponent_Conditional_11_p_6_Template","HsRmLayerDialogComponent_Conditional_11_div_7_Template","HsDialogContainerService","service","commonLaymanService","_selectAll","deleteAllowed","ngOnInit","item","getTitle","yes","destroy","dialogItem","resolve","no","option","i","VBU","selectors","decls","vars","consts","template","rf","ctx","HsRmLayerDialogComponent_span_7_Template","HsRmLayerDialogComponent_Conditional_11_Template","HsRmLayerDialogComponent_Conditional_12_Template","_c0","HsRmLayerDialogModule","$C","G2t","CommonModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["webpack:///./projects/hslayers/common/remove-multiple/remove-layer-dialog.service.ts","webpack:///./projects/hslayers/common/remove-multiple/remove-layer-dialog.component.html","webpack:///./projects/hslayers/common/remove-multiple/remove-layer-dialog.component.ts","webpack:///./projects/hslayers/common/remove-multiple/remove-layer-dialog.module.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\n\nimport {Layer} from 'ol/layer';\nimport {Source} from 'ol/source';\n\nimport {HsCommonLaymanService} from 'hslayers-ng/common/layman';\nimport {HsDialogContainerService} from 'hslayers-ng/common/dialogs';\nimport {HsLanguageService} from 'hslayers-ng/services/language';\nimport {HsLaymanService} from 'hslayers-ng/services/save-map';\nimport {HsMapService} from 'hslayers-ng/services/map';\nimport {\n  HsRmLayerDialogComponent,\n  HsRmLayerDialogDeleteOptions,\n  HsRmLayerDialogResponse,\n} from './remove-layer-dialog.component';\nimport {HsToastService} from 'hslayers-ng/common/toast';\nimport {getDefinition, getName} from 'hslayers-ng/common/extensions';\n\nexport type RemoveLayerWrapper = {\n  layer: Layer<Source> | string;\n  toRemove: boolean;\n  displayTitle: string;\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HsRemoveLayerDialogService {\n  constructor(\n    private hsMapService: HsMapService,\n    private hsToastService: HsToastService,\n    private hsLanguageService: HsLanguageService,\n    private hsLaymanService: HsLaymanService,\n    private hsCommonLaymanService: HsCommonLaymanService,\n    private hsDialogContainerService: HsDialogContainerService,\n  ) {}\n\n  /**\n   * Create a remove layer wrapper\n   */\n  wrapLayer(layer: Layer<Source> | string): RemoveLayerWrapper {\n    return {\n      layer,\n      toRemove: false,\n      displayTitle: undefined,\n    };\n  }\n\n  /**\n   * Removes selected drawing layer from both Layermanager and Layman\n   * @param layer - Layer to be deleted - use when trying to delete layer other than hsDrawService.selectedLayer\n   * @param deleteFromOptions - From where the layer should be deleted, defaults to map, map&catalogue\n   */\n  async removeLayer(\n    layer: Layer<Source> | string,\n    deleteFromOptions?: HsRmLayerDialogDeleteOptions[],\n  ): Promise<boolean> {\n    const dialog = this.hsDialogContainerService.create(\n      HsRmLayerDialogComponent,\n      {\n        multiple: false,\n        message: 'DRAW.reallyDeleteThisLayer',\n        note: this.getDeleteNote(),\n        title: 'COMMON.confirmDelete',\n        items: [this.wrapLayer(layer)],\n        deleteFromOptions,\n      },\n    );\n    const confirmed: HsRmLayerDialogResponse = await dialog.waitResult();\n    if (confirmed.value == 'yes') {\n      const mapLayers = confirmed.type.includes('catalogue')\n        ? this.hsMapService.getLayersArray()\n        : undefined;\n      await this.completeLayerRemoval(layer, confirmed.type, mapLayers);\n    }\n    return confirmed.value == 'yes';\n  }\n\n  /**\n   * Overload for when delete options is 'catalogue'\n   * ['catalogue'] delete option is expected\n   */\n  async removeMultipleLayers(\n    layers: string[],\n    deleteFromOptions: ['catalogue'],\n  ): Promise<boolean>;\n\n  // Overload for other delete options with Layer<Source>[] type\n  async removeMultipleLayers(\n    layers: Layer<Source>[],\n    deleteFromOptions:\n      | Exclude<HsRmLayerDialogDeleteOptions, 'catalogue'>[]\n      | ['map'],\n  ): Promise<boolean>;\n\n  /**\n   * Removes multiple selected layers from both Layermanager and Layman\n   * @param layer - Layers to be deleted - use when trying to remove other than drawableLayers\n   * @param deleteFromOptions - From where the layer should be deleted defaults to map, map&catalogue\n   */\n  async removeMultipleLayers(\n    layersToRemove: Layer<Source>[] | string[],\n    deleteFromOptions?: HsRmLayerDialogDeleteOptions[],\n  ): Promise<boolean> {\n    const items = layersToRemove.map((l) => this.wrapLayer(l));\n\n    const dialog = this.hsDialogContainerService.create(\n      HsRmLayerDialogComponent,\n      {\n        multiple: true,\n        message: 'DRAW.pleaseCheckTheLayers',\n        note: this.getDeleteNote(true),\n        title: 'COMMON.selectAndConfirmToDeleteMultiple',\n        items: items,\n        deleteFromOptions,\n      },\n    );\n    const confirmed: HsRmLayerDialogResponse = await dialog.waitResult();\n    if (confirmed.value == 'yes') {\n      this.hsToastService.createToastPopupMessage(\n        'LAYMAN.deleteLayersRequest',\n        'LAYMAN.deletionInProgress',\n        {\n          toastStyleClasses: 'bg-info text-white',\n          serviceCalledFrom: 'HsDrawService',\n          customDelay: 600000,\n        },\n      );\n\n      const drawablesToRemove = items.filter((l) => l.toRemove);\n      /**\n       * Remove checked layers, may be either - from layman and/or map\n       */\n      const mapLayers = confirmed.type.includes('catalogue')\n        ? this.hsMapService.getLayersArray()\n        : undefined;\n      for (const l of drawablesToRemove) {\n        await this.completeLayerRemoval(l.layer, confirmed.type, mapLayers);\n      }\n      this.hsToastService.removeByText(\n        this.hsLanguageService.getTranslation(\n          'LAYMAN.deletionInProgress',\n          undefined,\n        ),\n      );\n    }\n    return confirmed.value == 'yes';\n  }\n\n  /**\n   * Remove layer from map and Layman if desirable and possible\n   */\n  private async completeLayerRemoval(\n    layerToRemove: Layer<Source> | string,\n    deleteFrom: HsRmLayerDialogDeleteOptions,\n    mapLayers?: Layer<Source>[],\n  ): Promise<void> {\n    if (deleteFrom !== 'map') {\n      await this.removeFromCatalogue(layerToRemove);\n    }\n    if (deleteFrom.includes('map')) {\n      this.hsMapService.getMap().removeLayer(layerToRemove as Layer<Source>);\n    } else {\n      this.tryRemovingFromMap(layerToRemove as string, mapLayers);\n    }\n  }\n\n  /**\n   * Once layer is removed from catalogue try to find it in the map by name and remove it as well\n   */\n  private tryRemovingFromMap(layer: string, layers: Layer<Source>[]): void {\n    const lyr = layers.find((l) => getName(l) === layer);\n    if (lyr) {\n      this.hsMapService.getMap().removeLayer(lyr);\n    }\n  }\n\n  private async removeFromCatalogue(layerToRemove: Layer<Source> | string) {\n    const isLayer = layerToRemove instanceof Layer;\n    if (isLayer) {\n      const definition = getDefinition(layerToRemove);\n      if (\n        definition?.format?.toLowerCase().includes('wfs') &&\n        definition?.url\n      ) {\n        await this.hsLaymanService.removeLayer(layerToRemove);\n      }\n    } else {\n      //Remove layer which is not in map from catalogue based on name\n      await this.hsLaymanService.removeLayer(layerToRemove);\n    }\n  }\n\n  getDeleteNote(plural?: boolean): string {\n    return this.hsCommonLaymanService.isAuthenticated()\n      ? plural\n        ? 'DRAW.deleteNotePlural'\n        : 'DRAW.deleteNote'\n      : '';\n  }\n}\n","<div class=\"modal in\" tabindex=\"-1\" role=\"dialog\" aria-hidden=\"true\">\n    <div class=\"modal-dialog\">\n        <div class=\"modal-content\">\n            <div class=\"modal-header\">\n                <h4 class=\"modal-title d-flex\">\n                    {{data.title | translateHs}} <span class=\"text-truncate d-inline-block\" *ngIf=\"!data.multiple\">:\n                        {{data.items[0].displayTitle}}</span>\n                </h4>\n                <button type=\"button\" (click)=\"no()\" class=\"btn-close\" data-dismiss=\"modal\"\n                    [attr.aria-label]=\"'COMMON.close' | translateHs \"></button>\n            </div>\n            <div class=\"modal-body\" style=\"overflow-y:auto\">\n                @if(data.items.length > 0){\n                <div class=\"d-flex flex-column mb-3\"> <!-- pb-3 border-bottom -->\n                    <p class=\"fw-bold h6\">{{'LAYERS.removeLayer.deleteFrom' | translateHs }}: </p>\n                    <div class=\"d-flex gap-3 justify-content-center px-5\">\n                        <button *ngFor=\"let option of data.deleteFromOptions\" type=\"button\" [attr.data-cy]=\"option\"\n                            [hidden]=\"option === 'catalogue' && !this.isAuthenticated\"\n                            [ngClass]=\"{'active' : deleteFrom === option, 'w-auto' : option === 'catalogue' }\"\n                            (click)=\"selectDeleteOption(option)\" class=\"btn btn-sm btn-outline-primary w-50\">{{option |\n                            translateHs: {module: 'LAYERS.removeLayer'} }}</button>\n                    </div>\n                </div>\n                <p *ngIf=\"deleteFrom && deleteFrom !== 'map'\" class=\"h6 small\">{{data.note | translateHs}}</p>\n                <div *ngIf=\"deleteFrom && data.multiple\">\n                    <p class=\"fw-bold h6\">{{data.message | translateHs}}</p>\n\n                    <div style=\"max-height: 65vh;\" *ngIf=\"data.items?.length > 0\">\n                        <div class=\"d-flex w-100 justify-content-center\">\n                            <button type=\"button\" class=\"mt-1 btn btn-primary\"\n                                (click)=\"toggleAll()\">{{'SAVECOMPOSITION.form.toggleAll' |\n                                translateHs }}</button>\n                        </div>\n                        <div class=\"d-flex align-items-center\" style=\"word-break:break-all\"\n                            *ngFor=\"let item of data.items\">\n                            <button type=\"button\" class=\"btn btn-sm m-0 p-0\"\n                                (click)=\"checkToRemove(item);$event.stopPropagation()\"\n                                [ngClass]=\"item.toRemove ? 'hs-checkmark' : 'hs-uncheckmark'\"></button>\n                            <p class=\"m-0 ps-1\">{{item.displayTitle}}</p>\n                        </div>\n                    </div>\n                </div>\n                }\n                @else {\n                <p class=\"fw-bold h6 text-center\">{{'LAYERS.removeLayer.noLayersToDelete' | translateHs }} </p>\n                }\n\n            </div>\n            <div class=\"modal-footer\">\n                <button type=\"button\" [disabled]=\"!deleteAllowed\" class=\"btn\"\n                    [ngClass]=\"{'btn-primary': deleteFrom === 'map', 'btn-danger': deleteFrom !== 'map'}\"\n                    (click)=\"yes()\" [title]=\"'COMMON.remove' | translateHs\" data-dismiss=\"modal\">{{'COMMON.remove' |\n                    translateHs}}</button>\n                <button type=\"button\" class=\"btn btn-secondary compositions-btn-cancel\"\n                    [title]=\"'COMMON.back' | translateHs\" (click)=\"no()\" data-dismiss=\"modal\">{{'COMMON.back' |\n                    translateHs\n                    }}</button>\n            </div>\n        </div>\n    </div>\n</div>","import {Component, OnInit, ViewRef} from '@angular/core';\n\nimport {Layer} from 'ol/layer';\n\nimport {HsCommonLaymanService} from 'hslayers-ng/common/layman';\nimport {HsDialogComponent} from 'hslayers-ng/common/dialogs';\nimport {HsDialogContainerService} from 'hslayers-ng/common/dialogs';\nimport {HsDialogItem} from 'hslayers-ng/common/dialogs';\nimport {HsLanguageService} from 'hslayers-ng/services/language';\nimport {\n  HsRemoveLayerDialogService,\n  RemoveLayerWrapper,\n} from './remove-layer-dialog.service';\nimport {getName, getTitle} from 'hslayers-ng/common/extensions';\n\n/**\n * Both catalogue and mapcatalogue will remove layer from  map as well.\n * Difference is with layer 'form' - string vs Layer<Source> (see service removeMultipleLayers overloads)\n * string - Name param from Layman layer descriptor. Not all layers are guaranteed to be in map\n * Layer<Source> - OL layer. Layers already in map\n */\nexport type HsRmLayerDialogDeleteOptions = 'map' | 'catalogue' | 'mapcatalogue';\n\nexport type HsRmLayerDialogResponse = {\n  value: 'yes' | 'no';\n  type?: HsRmLayerDialogDeleteOptions;\n};\n\n@Component({\n  selector: 'hs-rm-layer-dialog',\n  templateUrl: './remove-layer-dialog.component.html',\n  styles: `\n    .modal-title {\n      white-space: nowrap;\n      width: 100%;\n    }\n    .modal-title span {\n      max-width: 18ch;\n    }\n  `,\n})\nexport class HsRmLayerDialogComponent implements HsDialogComponent, OnInit {\n  dialogItem: HsDialogItem;\n  _selectAll = false;\n  isAuthenticated: boolean;\n\n  deleteFrom: (typeof this.data)['deleteFromOptions'][number];\n\n  deleteAllowed = false;\n\n  constructor(\n    public HsDialogContainerService: HsDialogContainerService,\n    public service: HsRemoveLayerDialogService,\n    private hsLanguageService: HsLanguageService,\n    private commonLaymanService: HsCommonLaymanService,\n  ) {}\n  viewRef: ViewRef;\n  /**\n   * @param deleteFromOptions - From where the layer should be deleted eg. map, catalogue map&catalogue\n   */\n  data: {\n    multiple: boolean;\n    title: string;\n    deleteFromOptions?: HsRmLayerDialogDeleteOptions[];\n    message: string;\n    note?: string;\n    items?: RemoveLayerWrapper[];\n  };\n\n  ngOnInit(): void {\n    this.isAuthenticated = this.commonLaymanService.isAuthenticated();\n    this.data.deleteFromOptions ??= ['map', 'mapcatalogue'];\n    if (!this.isAuthenticated || this.data.deleteFromOptions.length === 1) {\n      this.deleteFrom = this.data.deleteFromOptions[0];\n      this.deleteAllowed = !this.data.multiple;\n    }\n    if (this.data.items) {\n      for (const item of this.data.items) {\n        item.displayTitle = this.getTitle(item);\n      }\n    }\n  }\n  yes(): void {\n    this.HsDialogContainerService.destroy(this);\n    this.dialogItem.resolve({value: 'yes', type: this.deleteFrom});\n  }\n\n  no(): void {\n    this.HsDialogContainerService.destroy(this);\n    this.dialogItem.resolve({value: 'no'});\n  }\n\n  selectDeleteOption(option) {\n    this.deleteFrom = option;\n    /**\n     * If removing only one layer checkboxes are not available thus we need\n     * to disable delete button\n     */\n    this.deleteAllowed = !this.data.multiple ? true : this.deleteAllowed;\n  }\n\n  checkToRemove(item): void {\n    if (item.toRemove !== undefined) {\n      item.toRemove = !item.toRemove;\n    } else {\n      item.toRemove = true;\n    }\n    this.deleteAllowed = !!this.data.items.find((i) => i.toRemove);\n  }\n\n  toggleAll(): void {\n    this._selectAll = !this._selectAll;\n    for (const item of this.data.items) {\n      item.toRemove = this._selectAll;\n    }\n    this.deleteAllowed = !!this.data.items.find((i) => i.toRemove);\n  }\n\n  getTitle(item: RemoveLayerWrapper): string {\n    let title =\n      item.layer instanceof Layer\n        ? getTitle(item.layer) ?? getName(item.layer)\n        : item.layer;\n    if (!title) {\n      title = this.hsLanguageService.getTranslation(\n        'COMMON.unknown',\n        undefined,\n      );\n    }\n    return title;\n  }\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\n\nimport {HsRmLayerDialogComponent} from './remove-layer-dialog.component';\nimport {TranslateCustomPipe} from 'hslayers-ng/services/language';\n\n@NgModule({\n  declarations: [HsRmLayerDialogComponent],\n  imports: [CommonModule, TranslateCustomPipe],\n  exports: [HsRmLayerDialogComponent],\n})\nexport class HsRmLayerDialogModule {}\n"],"x_google_ignoreList":[]}
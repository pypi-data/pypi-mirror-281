{"version":3,"file":"158.js","mappings":"oKAYO,IAAMA,EAAmB,MAA1B,MAAOA,EAMXC,YAAoBC,GAAAC,KAAAD,eALXC,KAAAC,WAAa,GACbD,KAAAE,SAAW,GACVF,KAAAG,iBAAmB,IAAIC,KAGgB,CAEjDC,YAAYC,GACV,MAAMC,EAAO,IAAIC,KAAK,CAACR,KAAKC,YAAa,CAACQ,KAAMT,KAAKE,WAC/CQ,EAAMC,IAAIC,gBAAgBL,GAC5BP,KAAKa,cACPF,IAAIG,gBAAgBd,KAAKa,cAE3Bb,KAAKa,aAAeb,KAAKD,aAAagB,+BAA+BL,GAErEM,WAAW,KACThB,KAAKG,iBAAiBc,KAAKjB,KAAKa,aAAY,EAC3C,EACL,CAACK,SAAAlB,KAAA,mBAAAmB,iBAnBUtB,GAAmBuB,MAAAC,MAAA,EAAAH,SAAAlB,KAAA,UAAAsB,EAAAC,IAAA,MAAnB1B,EAAmB2B,UAAA,uBAAAC,OAAA,CAAAxB,WAAA,aAAAC,SAAA,YAAAwB,QAAA,CAAAvB,iBAAA,oBAAAwB,SAAA,CAAAP,gBAAnBvB,CAAmB","names":["HsDownloadDirective","constructor","DomSanitizer","this","hsDownload","mimeType","downloadPrepared","EventEmitter","ngOnChanges","changes","data","Blob","type","url","URL","createObjectURL","exportedHref","revokeObjectURL","bypassSecurityTrustResourceUrl","setTimeout","emit","static","t","i0","i1","_angular_core__WEBPACK_IMPORTED_MODULE_0__","FsC","selectors","inputs","outputs","features"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["webpack:///./projects/hslayers/common/download/download.directive.ts"],"sourcesContent":["import {\n  Directive,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n} from '@angular/core';\nimport {DomSanitizer} from '@angular/platform-browser';\n@Directive({\n  selector: '[hsDownload]',\n})\nexport class HsDownloadDirective implements OnChanges {\n  @Input() hsDownload = '';\n  @Input() mimeType = '';\n  @Output() downloadPrepared = new EventEmitter<string>();\n\n  exportedHref: any;\n  constructor(private DomSanitizer: DomSanitizer) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    const data = new Blob([this.hsDownload], {type: this.mimeType});\n    const url = URL.createObjectURL(data);\n    if (this.exportedHref) {\n      URL.revokeObjectURL(this.exportedHref);\n    }\n    this.exportedHref = this.DomSanitizer.bypassSecurityTrustResourceUrl(url);\n    //Timeout is needed, otherwise the hsDownload will be from previous digest i.e undefined\n    setTimeout(() => {\n      this.downloadPrepared.emit(this.exportedHref);\n    }, 0);\n  }\n}\n"],"x_google_ignoreList":[]}
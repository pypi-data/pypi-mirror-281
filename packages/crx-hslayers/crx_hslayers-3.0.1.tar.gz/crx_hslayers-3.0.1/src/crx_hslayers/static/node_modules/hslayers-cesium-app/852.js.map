{"version":3,"file":"852.js","mappings":"iQA0CA,MAAMA,EAAiB,CACrB,KACA,oCACA,qCAeIC,EAAiB,CACrBC,IAAOC,EACPC,IAAOC,EACPC,IAAOC,GAQHC,KAAcC,MAAgBT,EAAgB,CAClDE,KAAA,EAAOQ,MAAgBP,GACvBC,KAAA,EAAOM,MAAgBL,GACvBC,KAAA,EAAOI,MAAgBH,KAcnBI,KAAeF,MAAgBT,EAAgB,CACnDY,MAAA,EAAQC,MAAyBC,KAAY,YAC7CC,MAAA,EAAQF,MAAyBC,KAAY,cAezCE,KAAiBP,MAAgBT,EAAgB,CACrDiB,MAAA,EAAQJ,MAAyBC,MACjCI,MAkqBF,SAASC,GAAWC,EAAMC,GACxB,MAAMC,EAAgCD,EAAYA,EAAYE,OAAS,GACjEC,EAAKJ,EAAKK,aAAa,MACvBC,EAASN,EAAKK,aAAa,UACtB,OAAPD,GAA0B,OAAXE,IACjBJ,EAAOJ,MAAY,GAAEM,KAAME,IAE/B,EAxqBEC,KAAQC,IAqBJC,KAAmBpB,MAAgBT,EAAgB,CACvDiB,MAAA,EAAQJ,MAAyBC,MACjCgB,MAAA,EAAQjB,MAAyBC,MACjCiB,QAAA,EAAUlB,MAqlBZ,SAASmB,GAAWZ,EAAMC,GACxB,MAAMC,KAASW,MAAgB,CAAC,EAAGjB,EAAgBI,EAAMC,GACzD,GAAIC,EACF,OAAOA,CAGX,GA1lBEY,WAAA,EAAarB,MAimBf,SAASsB,GAAcf,EAAMC,GAC3B,MAAMC,KAASW,MAAgB,CAAC,EAAGG,EAAmBhB,EAAMC,GAC5D,GAAIC,EAAQ,CACV,MAAMS,EAASX,EAAKK,aAAa,UACjC,OAAe,OAAXM,IACFT,EAAOS,OAAYA,GAEdT,CACT,CAEF,GA1mBEK,KAAQC,EACRS,MAAA,EAAQxB,MAAyByB,MACjCC,UAAA,EAAY1B,MAAyBC,MACrC0B,OA6mBF,SAASC,GAAYrB,EAAMC,GACzB,MAAMC,EAAgCD,EAAYA,EAAYE,OAAS,GACjEmB,EAAStB,EAAKK,aAAa,UAC3BkB,EAASvB,EAAKK,aAAa,UAC3BmB,EAASxB,EAAKK,aAAa,UAC3BoB,EAASzB,EAAKK,aAAa,UAEpB,OAAXkB,GACW,OAAXD,GACW,OAAXG,GACW,OAAXD,IAEAtB,EAAOkB,OAAY,CACjB,CAACM,WAAWH,GAASG,WAAWJ,IAChC,CAACI,WAAWD,GAASC,WAAWF,KAGtC,EA7nBEG,WAAcC,IAeVZ,KAAoB3B,MAAgBT,EAAgB,CACxDiD,MAAA,EAAQpC,MAAyBqC,MACjCC,SAAA,EAAWtC,MAAyBC,QAQhCsC,KAAkB3C,MAAgBT,EAAgB,CACtDE,KAAA,EAAOmD,MAw2BT,SAASC,GAASlC,EAAMmC,EAASlC,GAC/B,MAAMmC,EACJnC,EAAY,GAERoC,EAAaF,EAAQG,gBACrBC,EAAU,CAACvC,KAAMA,GACvBuC,EAAQF,WAAgBA,EACxB,MAAMG,EAAWL,EAAQM,cACzB,GAA0B,cAAtBD,EAASE,UAA2B,CACtC,MAAMC,KACJC,MAA6BJ,GAAU,EAAMJ,GAE/CG,EAAQM,eAAoBF,EAAWG,YACvCT,EAAWU,MAAWJ,EAAWK,gBACnC,CACA,MACMC,EAAcC,EADDjD,EAAYA,EAAYE,OAAS,GAAGH,KACXmD,cACtCjD,KAASkD,MAAaf,EAAYY,IACxCI,QACEd,EACAe,EACAC,KACArD,EACAD,EACAgD,EAEJ,GAj4BEjE,KAAA,EAAOiD,MAw4BT,SAASuB,GAASxD,EAAMmC,EAASlC,GAC/B,MAAMmC,EACJnC,EAAY,GAERoC,EAAaF,EAAQG,gBAErBC,EAAU,CAACvC,KAAMA,GACvBuC,EAAQF,WAAgBA,EACxB,MAAMG,EAAWL,EAAQM,cACzB,GAA0B,mBAAtBD,EAASE,UAAgC,CAC3C,MAAMe,KACJb,MAA6BJ,GAAU,EAAMJ,GAE/CC,EAAWqB,OAAYD,EAAgBE,gBACzC,CACA,MACMV,EAAcW,EADD3D,EAAYA,EAAYE,OAAS,GAAGH,KACXmD,cACtCjD,KAASkD,MAAaf,EAAYY,IACxCI,QACEd,EACAsB,EACAN,KACArD,EACAD,EACAgD,EAEJ,GAj6BE/D,KAAA,EAAO+C,MA27BT,SAAS6B,GAAS9D,EAAMmC,EAASlC,GAC/B,MAAMmC,EACJnC,EAAY,GAERsC,EAAUtC,EAAYA,EAAYE,OAAS,GACjDoC,EAAQF,WAAgBF,EAAQG,gBAChC,MAAME,EAAWL,EAAQM,cACzB,GAA0B,SAAtBD,EAASE,UAAsB,CACjC,MAAMqB,KACJnB,MAA6BJ,GAAU,EAAMJ,GAE/CG,EAAQM,eAAoBkB,EAAMjB,YAClCkB,EAAahE,EAAM+D,EAAMf,iBAAkB/C,EAC7C,CACF,KA9uBMgE,KAAc5E,MAAgBT,EAAgB,CAClDiB,MAAA,EAAQJ,MAAyBC,MACjCwE,KAAA,EAAOzE,MAAyBC,MAChCgB,MAAA,EAAQjB,MAAyBC,MACjCyE,KAAA,EAAO1E,MAAyBC,MAChCa,KAAQC,EACR4D,QAAA,EAAU3E,MAAyBqC,MACnCH,WAAcC,EACdjC,MAAA,EAAQF,MAAyBC,MACjCqD,MAsaF,SAASsB,GAAWrE,EAAMC,GACxB,MAAMC,KAASW,MAAgB,CAAC,EAAGyD,EAAetE,EAAMC,GACxD,GAAIC,EAAQ,CACV,MAAMqE,EACJtE,EAAYA,EAAYE,OAAS,GAQnCqE,EALED,EAAU,gBAGVA,EAAU,cAEqCvE,EAAME,EACzD,CACF,IA5aMoE,KAAgBjF,MAAgBT,EAAgB,CACpD6F,KAAA,EAAOhF,MAAyBiF,MAChCzD,MAAA,EAAQxB,MAAyByB,QAQ7ByD,KAActF,MAAgBT,EAAgB,CAClDiB,MAAA,EAAQJ,MAAyBC,MACjCwE,KAAA,EAAOzE,MAAyBC,MAChCgB,MAAA,EAAQjB,MAAyBC,MACjCyE,KAAA,EAAO1E,MAAyBC,MAChCa,KAAQC,EACR4D,QAAA,EAAU3E,MAAyBqC,MACnCnC,MAAA,EAAQF,MAAyBC,MACjCiC,WAAcC,EACd8B,OAmbF,SAASkB,GAAY5E,EAAMC,GACzB,MAAMC,EAAgCD,EAAYA,EAAYE,OAAS,IACvE0E,QAAUC,EAAgB9E,EAAMC,GAIWC,EAAO6E,KAC7CC,KAFF9E,EAAO,gBAEgBC,OAC5B,IAnbM2E,KAAiBzF,MAAgBT,EAAgB,CACrDqG,MAsZF,SAASC,GAAWlF,EAAMC,GACxB,MAAMC,KAASW,MAAgB,CAAC,EAAGsE,EAAenF,EAAMC,GACxD,GAAIC,EAAQ,CACV,MAAMkF,EACJnF,EAAYA,EAAYE,OAAS,GAQnCqE,EALEY,EAAU,gBAGVA,EAAU,cAEqCpF,EAAME,EACzD,CACF,IA5ZMiF,KAAgB9F,MAAgBT,EAAgB,CACpD6F,KAAA,EAAOhF,MAAyBiF,MAChCzD,MAAA,EAAQxB,MAAyByB,QAQ7BmE,KAAchG,MAAgBT,EAAgB,CAClD6F,KAAA,EAAOhF,MAAyBiF,MAChCzD,MAAA,EAAQxB,MAAyByB,MACjCoE,QAAA,EAAU7F,MAAyBiF,MACnCa,aAAA,EAAe9F,MAAyBiF,MACxC7E,MAAA,EAAQJ,MAAyBC,MACjCwE,KAAA,EAAOzE,MAAyBC,MAChCgB,MAAA,EAAQjB,MAAyBC,MACjCyE,KAAA,EAAO1E,MAAyBC,MAChCa,KAAQC,EACRgF,KAAA,EAAO/F,MAAyBC,MAChCC,MAAA,EAAQF,MAAyBC,MACjC+F,KAAA,EAAOhG,MAAyBC,MAChCgG,KAAA,EAAOjG,MAAyBqC,MAChC6D,MAAA,EAAQlG,MAAyBiF,MACjCkB,MAAA,EAAQnG,MAAyBiF,MACjCmB,MAAA,EAAQpG,MAAyBiF,MACjCoB,eAAA,EAAiBrG,MAAyBiF,MAC1CqB,QAAA,EAAUtG,MAAyBqC,MACnCH,WAAcC,IAOVoE,EAAgB,CAAC,OAAQ,QAOzBC,KAAmB5G,MAAgBT,EAAgB,CACvDY,MAAA,EAAQyC,MAAkBiE,MAC1BvG,MAAA,EAAQsC,MAAkBiE,QAQtBhD,KAAe7D,MAAgBT,EAAgB,CACnD,OACA,MACA,OACA,MACA,OACA,SACA,OACA,UAQI0E,KAAkBjE,MAAgBT,EAAgB,CACtDiB,MAAA,EAAQoC,MAAkBiE,MAC1BhC,KAAA,EAAOjC,MAAkBiE,MACzBxF,MAAA,EAAQuB,MAAkBiE,MAC1B/B,KAAA,EAAOlC,MAAkBiE,MACzB3F,MAAA,EAAQ0B,MAAkBkE,GAC1B/B,QAAA,EAAUnC,MAAkBmE,MAC5BzG,MAAA,EAAQsC,MAAkBiE,MAC1BnD,OAAA,EAASsD,SAAoBpE,MAAkB+B,MAQ3CsC,KAAsBjH,MAAgBT,EAAgB,CAAC,MAAO,SAO9DgF,KAAevE,MAAgBT,EAAgB,CACnD,OACA,MACA,OACA,MACA,OACA,SACA,OACA,WAQIiF,KAAkBxE,MAAgBT,EAAgB,CACtDiB,MAAA,EAAQoC,MAAkBiE,MAC1BhC,KAAA,EAAOjC,MAAkBiE,MACzBxF,MAAA,EAAQuB,MAAkBiE,MAC1B/B,KAAA,EAAOlC,MAAkBiE,MACzB3F,MAAA,EAAQ0B,MAAkBkE,GAC1B/B,QAAA,EAAUnC,MAAkBmE,MAC5BzG,MAAA,EAAQsC,MAAkBiE,MAC1BxC,QAAA,EAAU2C,SAAoBpE,MAoiBhC,SAASsE,GAAYvG,EAAM2C,EAAY1C,GAErC,MAAMsC,EAAU,CAACvC,KAAMA,GACvBuC,EAAQM,eAAoBF,EAAWG,YACvCP,EAAQF,WAAgB,CAAC,KACzBgB,MACEd,EACAiE,GACAC,GACA9D,EAAWK,iBACX/C,EAEJ,MAziBMwG,MAAsBC,MAAsB,SAO5CF,MAAqBnH,MAAgBT,EAAgB,CACzDqG,OAAA,EAAShD,MAAkB+B,KAQvB2C,MAAoBtH,MAAgBT,EAAgB,CACxD,MACA,OACA,SACA,cACA,OACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,MACA,OACA,OACA,OACA,gBACA,WAQIgI,MAAuBvH,MAAgBT,EAAgB,CAC3D6F,KAAA,EAAOxC,MAAkB4E,MACzB5F,MAAA,EAAQgB,MAAkB6E,MAC1BxB,QAAA,EAAUrD,MAAkB4E,MAC5BtB,aAAA,EAAetD,MAAkB4E,MACjChH,MAAA,EAAQoC,MAAkBiE,MAC1BhC,KAAA,EAAOjC,MAAkBiE,MACzBxF,MAAA,EAAQuB,MAAkBiE,MAC1B/B,KAAA,EAAOlC,MAAkBiE,MACzB3F,MAAA,EAAQ0B,MAAkBkE,GAC1BX,KAAA,EAAOvD,MAAkBiE,MACzBvG,MAAA,EAAQsC,MAAkBiE,MAC1BT,KAAA,EAAOxD,MAAkBiE,MACzBR,KAAA,EAAOzD,MAAkBmE,MACzBT,MAAA,EAAQ1D,MAAkB4E,MAC1BjB,MAAA,EAAQ3D,MAAkB4E,MAC1BhB,MAAA,EAAQ5D,MAAkB4E,MAC1Bf,eAAA,EAAiB7D,MAAkB4E,MACnCd,QAAA,EAAU9D,MAAkBmE,QAOxBW,GAA4B,CAChCC,MAAS,MACTC,WAAc,MACdC,gBAAmB,OASrB,SAASC,GAAiBC,EAAOnH,EAAaoH,GAC5C,MAAM7E,EAAmC4E,EAAO3E,cAChD,GAAID,EAAU,CACZ,MAAM6E,EAAWN,GAA0BvE,EAASE,WACpD,GAAI2E,EAEF,SAAOC,MADYrH,EAAYA,EAAYE,OAAS,GAAGH,KACrBmD,aAAckE,EAEpD,CACF,CASA,SAAS7C,EAAiB+C,EAAiBC,EAAexH,EAAME,GAC9DqH,SAAgBvC,KACdtD,WAAW1B,EAAKK,aAAa,QAC7BqB,WAAW1B,EAAKK,aAAa,SAE3B,QAASH,GACXqH,EAAgBvC,KAA4B9E,EAAOuE,YAC5CvE,EAAOuE,IACd+C,EAAcC,MAAO,GAErBF,EAAgBvC,KAAK,GAEnB,SAAU9E,GACZqH,EAAgBvC,KAA4B9E,EAAOe,aAC5Cf,EAAOe,KACduG,EAAcE,MAAO,GAErBH,EAAgBvC,KAAK,GAEhBuC,CACT,CAWA,SAASI,EAAmBH,EAAeD,EAAiBxC,GAE1D,IAAI6C,EAAS,KACTC,EAAS,EAWb,GAVIL,EAAcC,MAAQD,EAAcE,MACtCE,EAAS,OACTC,EAAS,GACAL,EAAcC,MACvBG,EAAS,MACTC,EAAS,GACAL,EAAcE,OACvBE,EAAS,MACTC,EAAS,GAEI,IAAXA,EAAc,CAChB,QAASC,EAAI,EAAGC,EAAKR,EAAgBpH,OAAS,EAAG2H,EAAIC,EAAID,IACvDP,EAAgBO,EAAID,GAAUN,EAAoB,EAAJO,GAC9CP,EAAgBO,EAAID,EAAS,GAAKN,EAAoB,EAAJO,EAAQ,GACtDN,EAAcC,OAChBF,EAAgBO,EAAID,EAAS,GAAKN,EAAoB,EAAJO,EAAQ,IAExDN,EAAcE,OAChBH,EAAgBO,EAAID,EAAS,GAAKN,EAAoB,EAAJO,EAAQ,IAI9D,GADAP,EAAgBpH,OAAUoH,EAAgBpH,OAAS,EAAK0H,EACpD9C,EACF,QAAS+C,EAAI,EAAGC,EAAKhD,EAAK5E,OAAQ2H,EAAIC,EAAID,IACxC/C,EAAK+C,GAAM/C,EAAK+C,GAAK,EAAKD,CAGhC,CACA,OAAOD,CACT,CAwEA,SAASpH,EAAUR,EAAMC,GACvB,MAAMC,EAAgCD,EAAYA,EAAYE,OAAS,GACjE6H,EAAOhI,EAAKK,aAAa,QAClB,OAAT2H,IACF9H,EAAOK,KAAUyH,MAEnBnD,MAAUtF,EAAcS,EAAMC,EAChC,CAMA,SAAS2B,EAAgB5B,EAAMC,GACSA,EAAYA,EAAYE,OAAS,GAChE8H,gBAAqBjI,CAC9B,CA6DA,SAASjB,EAAQiB,EAAMC,GACrB,MAAMmC,EACJnC,EAAY,GAERC,KAASW,MACb,CACE0G,gBAAmB,GACnBC,cAAiB,CAAC,GAEpBvD,EACAjE,EACAC,GAEF,IAAKC,EACH,OAEF,MAAMqH,EAEHrH,EAAO,uBACHA,EAAOqH,gBACd,MAAMC,EAA8CtH,EAAO,qBACpDA,EAAOsH,cACd,MAAMI,EAASD,EAAmBH,EAAeD,GAC3C/E,EAAW,IAAIyE,UAAWM,EAAiBK,IACjDhF,QAA6BJ,GAAU,EAAOJ,GAC9C,MAAMD,EAAU,IAAI+F,UAAQ1F,GAC5BL,SAAQgG,cAAcjI,GAAQ,GACvBiC,CACT,CAOA,SAASlD,EAAQe,EAAMC,GACrB,MAAMmC,EACJnC,EAAY,GAERC,KAASW,MACb,CACE0G,gBAAmB,GACnBxC,KAAQ,GACRyC,cAAiB,CAAC,GAEpB7C,EACA3E,EACAC,GAEF,IAAKC,EACH,OAEF,MAAMqH,EAEHrH,EAAO,uBACHA,EAAOqH,gBACd,MAAMxC,EAAqC7E,EAAO,YAC3CA,EAAO6E,KACd,MAAMyC,EAA8CtH,EAAO,qBACpDA,EAAOsH,cACd,MAAMI,EAASD,EAAmBH,EAAeD,EAAiBxC,GAC5DvC,EAAW,IAAI0E,IAAgBK,EAAiBK,EAAQ7C,IAC9DnC,QAA6BJ,GAAU,EAAOJ,GAC9C,MAAMD,EAAU,IAAI+F,UAAQ1F,GAC5BL,SAAQgG,cAAcjI,GAAQ,GACvBiC,CACT,CAOA,SAAShD,EAAQa,EAAMC,GACrB,MAAMmC,EACJnC,EAAY,GAERC,KAASW,MAAgB,CAAC,EAAGwE,EAAarF,EAAMC,GACtD,IAAKC,EACH,OAEF,MAAMsH,GAA+C,EAC/CY,EAAc5D,EAAiB,GAAIgD,EAAexH,EAAME,GACxD0H,EAASD,EAAmBH,EAAeY,GAC3C5F,EAAW,IAAIwE,UAAMoB,EAAaR,IACxChF,QAA6BJ,GAAU,EAAOJ,GAC9C,MAAMD,EAAU,IAAI+F,UAAQ1F,GAC5BL,SAAQgG,cAAcjI,GAAQ,GACvBiC,CACT,CAOA,SAASgE,EAAUnG,EAAMoH,EAAOnH,GAC9BD,EAAKqI,aAAa,OAAQjB,GAE1B,MAAM/E,EADUpC,EAAYA,EAAYE,OAAS,GACtBkC,YAE3BgB,QACoD,CAACrD,KAAMA,GACzDiG,EACA1C,KAJW,CAAClB,EAAWiG,SAAajG,EAAWkG,UAM/CtI,EACA+F,EAEJ,CAOA,SAAShC,EAAahE,EAAMwI,EAAYvI,GACtC,MAAMsC,EAAUtC,EAAYA,EAAYE,OAAS,GAE3CgD,EADaZ,EAAQvC,KACKmD,aAC1Bd,EAAaE,EAAQF,WAK3B,OAHArC,EAAKyI,eAAe,KAAM,MAAOC,OAAOF,EAAW,KACnDxI,EAAKyI,eAAe,KAAM,MAAOC,OAAOF,EAAW,KAC5BjG,EAAQM,gBAE7B,IAAK,OACmB,IAAlB2F,EAAW,KACbnG,EAAWpB,KAAUuH,EAAW,IAGpC,IAAK,MACmB,IAAlBA,EAAW,KACbnG,EAAWoC,IAAS+D,EAAW,IAEjC,MACF,IAAK,MACmB,IAAlBA,EAAW,KACbnG,EAAWpB,KAAUuH,EAAW,IAMtC,MAAMvF,EACa,SAAjBjD,EAAKqH,SACDf,EAAoBnD,GACpBwD,GAAkBxD,GAClBjD,KAASkD,MAAaf,EAAYY,IACxCI,QAEG,CAACrD,KAAMA,EAAMqC,WAAcA,GAC5BuE,GACArD,KACArD,EACAD,EACAgD,EAEJ,CA4GA,MAAA0F,GAx6BA,MAAMC,UAAYC,IAIhBC,YAAY1G,GACV2G,QAEA3G,EAAUA,GAAoB,CAAC,EAK/B4G,KAAKC,kBAAiBC,OAAc,aAMpCF,KAAKG,gBAAkB/G,EAAQgH,cACjC,CAMAC,sBAAsBC,GACfA,IACHA,EAAW,IAEb,QAASxB,EAAI,EAAGC,EAAKuB,EAASnJ,OAAQ2H,EAAIC,IAAMD,EAAG,CACjD,MAAM3F,EAAUmH,EAASxB,GACzB,GAAIkB,KAAKG,gBAAiB,CACxB,MAAMI,EAAiBpH,EAAQqH,IAAI,oBAAsB,KACzDR,KAAKG,gBAAgBhH,EAASoH,EAChC,CACApH,EAAQsH,IAAI,uBAAmBC,EACjC,CACF,CAcAC,aAAaC,GACX,OAAKA,EAGiB,iBAAXA,EACFZ,KAAKa,4BAAyBC,MAAMF,KAAO,EAEhDG,MAAWH,GACNZ,KAAKa,yBAAkDD,GAEzDZ,KAAKgB,qBAAqBJ,GARxB,IASX,CAMAC,yBAAyBI,GACvB,QAASC,EAAyBD,EAAIE,WAAaD,EAAGA,EAAIA,EAAEE,YAC1D,GAAIF,EAAEG,WAAaC,KAAKC,aAAc,CACpC,MAAMC,EAAWxB,KAAKgB,qBAA6CE,GACnE,GAAIM,EACF,OAAOA,CAEX,CAEF,OAAO,IACT,CAMAR,qBAAqBhK,GACnB,IAAKpB,EAAe6L,SAASzK,EAAKmD,cAChC,OAAO,KAET,QAAS+G,EAAIlK,EAAK0K,kBAAmBR,EAAGA,EAAIA,EAAES,mBAC5C,GACE/L,EAAe6L,SAASP,EAAE/G,eACV,aAAhB+G,EAAEU,UAEF,SAAO/J,MAAgB,CAAC,EAAGJ,EAAkByJ,EAAG,IAGpD,OAAO,IACT,CAOAW,oBAAoB7K,EAAMoC,GACxB,IAAKxD,EAAe6L,SAASzK,EAAKmD,cAChC,OAAO,KAET,MAAM2H,EAAgBjM,EAAemB,EAAK4K,WAC1C,IAAKE,EACH,OAAO,KAET,MAAM3I,EAAU2I,EAAc9K,EAAM,CAACgJ,KAAK+B,eAAe/K,EAAMoC,KAC/D,OAAKD,GAGL6G,KAAKK,sBAAsB,CAAClH,IACrBA,GAHE,IAIX,CAOA6I,qBAAqBhL,EAAMoC,GACzB,IAAKxD,EAAe6L,SAASzK,EAAKmD,cAChC,MAAO,GAET,GAAsB,OAAlBnD,EAAK4K,UAAoB,CAE3B,MAAMtB,KAAWzI,MAAgB,GAAIzB,EAAaY,EAAM,CACtDgJ,KAAK+B,eAAe/K,EAAMoC,KAE5B,OAAIkH,GACFN,KAAKK,sBAAsBC,GACpBA,GAEF,EACT,CACA,MAAO,EACT,CAYA2B,kBAAkB3B,EAAUlH,GAC1BA,EAAU4G,KAAKkC,aAAa9I,GAE5B,MAAM+I,KAAM7D,MAAgB,oCAAqC,OAEjE6D,SAAI1C,eADa,gCACY,YAAa2C,MAC1CD,EAAI1C,eACF2C,KACA,qBArTJ,+EAwTED,EAAI9C,aAAa,UAAW,OAC5B8C,EAAI9C,aAAa,UAAW,eAAY,EAExChF,MAEG,CAACrD,KAAMmL,GACRnJ,EACAmF,GACAmC,EACA,CAAClH,IAEI+I,CACT","names":["NAMESPACE_URIS","FEATURE_READER","rte","readRte","trk","readTrk","wpt","readWpt","GPX_PARSERS","makeStructureNS","makeArrayPusher","LINK_PARSERS","text","makeObjectPropertySetter","readString","type","AUTHOR_PARSERS","name","email","parseEmail","node","objectStack","values","length","id","getAttribute","domain","link","parseLink","METADATA_PARSERS","desc","author","readAuthor","pushParseAndPop","copyright","readCopyright","COPYRIGHT_PARSERS","time","readDateTime","keywords","bounds","parseBounds","minlat","minlon","maxlat","maxlon","parseFloat","extensions","parseExtensions","year","readPositiveInteger","license","GPX_SERIALIZERS","makeChildAppender","writeRte","feature","options","properties","getProperties","context","geometry","getGeometry","getType","lineString","transformGeometryWithOptions","geometryLayout","getLayout","rtept","getCoordinates","orderedKeys","RTE_SEQUENCE","namespaceURI","makeSequence","pushSerializeAndPop","RTE_SERIALIZERS","OBJECT_PROPERTY_NODE_FACTORY","writeTrk","multiLineString","trkseg","getLineStrings","TRK_SEQUENCE","TRK_SERIALIZERS","writeWpt","point","writeWptType","RTE_PARSERS","cmt","src","number","parseRtePt","RTEPT_PARSERS","rteValues","appendCoordinate","ele","readDecimal","TRK_PARSERS","parseTrkSeg","parseNode","TRKSEG_PARSERS","ends","push","trkpt","parseTrkPt","TRKPT_PARSERS","trkValues","WPT_PARSERS","magvar","geoidheight","sym","fix","sat","hdop","vdop","pdop","ageofdgpsdata","dgpsid","LINK_SEQUENCE","LINK_SERIALIZERS","writeStringTextNode","writeLink","writeNonNegativeIntegerTextNode","makeArraySerializer","RTEPT_TYPE_SEQUENCE","writeTrkSeg","TRKSEG_SERIALIZERS","TRKSEG_NODE_FACTORY","makeSimpleNodeFactory","WPT_TYPE_SEQUENCE","WPT_TYPE_SERIALIZERS","writeDecimalTextNode","writeDateTimeTextNode","GEOMETRY_TYPE_TO_NODENAME","Point","LineString","MultiLineString","GPX_NODE_FACTORY","value","nodeName","createElementNS","flatCoordinates","layoutOptions","hasZ","hasM","applyLayoutOptions","layout","stride","i","ii","href","extensionsNode_","Feature","setProperties","coordinates","setAttribute","linkText","linkType","coordinate","setAttributeNS","String","__WEBPACK_DEFAULT_EXPORT__","GPX","XMLFeature","constructor","super","this","dataProjection","getProjection","readExtensions_","readExtensions","handleReadExtensions_","features","extensionsNode","get","set","undefined","readMetadata","source","readMetadataFromDocument","parse","isDocument","readMetadataFromNode","doc","n","firstChild","nextSibling","nodeType","Node","ELEMENT_NODE","metadata","includes","firstElementChild","nextElementSibling","localName","readFeatureFromNode","featureReader","getReadOptions","readFeaturesFromNode","writeFeaturesNode","adaptOptions","gpx","XML_SCHEMA_INSTANCE_URI"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["webpack:///./node_modules/ol/format/GPX.js"],"sourcesContent":["/**\n * @module ol/format/GPX\n */\nimport Feature from '../Feature.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport Point from '../geom/Point.js';\nimport XMLFeature from './XMLFeature.js';\nimport {\n  OBJECT_PROPERTY_NODE_FACTORY,\n  XML_SCHEMA_INSTANCE_URI,\n  createElementNS,\n  isDocument,\n  makeArrayPusher,\n  makeArraySerializer,\n  makeChildAppender,\n  makeObjectPropertySetter,\n  makeSequence,\n  makeSimpleNodeFactory,\n  makeStructureNS,\n  parse,\n  parseNode,\n  pushParseAndPop,\n  pushSerializeAndPop,\n} from '../xml.js';\nimport {get as getProjection} from '../proj.js';\nimport {\n  readDateTime,\n  readDecimal,\n  readPositiveInteger,\n  readString,\n  writeDateTimeTextNode,\n  writeDecimalTextNode,\n  writeNonNegativeIntegerTextNode,\n  writeStringTextNode,\n} from './xsd.js';\nimport {transformGeometryWithOptions} from './Feature.js';\n\n/**\n * @const\n * @type {Array<null|string>}\n */\nconst NAMESPACE_URIS = [\n  null,\n  'http://www.topografix.com/GPX/1/0',\n  'http://www.topografix.com/GPX/1/1',\n];\n\n/**\n * @const\n * @type {string}\n */\nconst SCHEMA_LOCATION =\n  'http://www.topografix.com/GPX/1/1 ' +\n  'http://www.topografix.com/GPX/1/1/gpx.xsd';\n\n/**\n * @const\n * @type {Object<string, function(Node, Array<*>): (Feature|undefined)>}\n */\nconst FEATURE_READER = {\n  'rte': readRte,\n  'trk': readTrk,\n  'wpt': readWpt,\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst GPX_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'rte': makeArrayPusher(readRte),\n  'trk': makeArrayPusher(readTrk),\n  'wpt': makeArrayPusher(readWpt),\n});\n\n/**\n * @typedef {Object} GPXLink\n * @property {string} [text] text\n * @property {string} [type] type\n */\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst LINK_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'text': makeObjectPropertySetter(readString, 'linkText'),\n  'type': makeObjectPropertySetter(readString, 'linkType'),\n});\n\n/**\n * @typedef {Object} GPXAuthor\n * @property {string} [name] name\n * @property {string} [email] email\n * @property {GPXLink} [link] link\n */\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst AUTHOR_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'name': makeObjectPropertySetter(readString),\n  'email': parseEmail,\n  'link': parseLink,\n});\n\n/**\n * @typedef {Object} GPXMetadata\n * @property {string} [name] name\n * @property {string} [desc] desc\n * @property {GPXAuthor} [author] author\n * @property {GPXLink} [link] link\n * @property {number} [time] time\n * @property {string} [keywords] keywords\n * @property {Array<number>} [bounds] bounds\n * @property {Object} [extensions] extensions\n *\n */\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst METADATA_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'name': makeObjectPropertySetter(readString),\n  'desc': makeObjectPropertySetter(readString),\n  'author': makeObjectPropertySetter(readAuthor),\n  'copyright': makeObjectPropertySetter(readCopyright),\n  'link': parseLink,\n  'time': makeObjectPropertySetter(readDateTime),\n  'keywords': makeObjectPropertySetter(readString),\n  'bounds': parseBounds,\n  'extensions': parseExtensions,\n});\n\n/**\n * @typedef {Object} GPXCopyright\n * @property {string} [author] author\n * @property {number} [year] year\n * @property {string} [license] license\n */\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst COPYRIGHT_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'year': makeObjectPropertySetter(readPositiveInteger),\n  'license': makeObjectPropertySetter(readString),\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst GPX_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\n  'rte': makeChildAppender(writeRte),\n  'trk': makeChildAppender(writeTrk),\n  'wpt': makeChildAppender(writeWpt),\n});\n\n/**\n * @typedef {Object} Options\n * @property {function(Feature, Node):void} [readExtensions] Callback function\n * to process `extensions` nodes. To prevent memory leaks, this callback function must\n * not store any references to the node. Note that the `extensions`\n * node is not allowed in GPX 1.0. Moreover, only `extensions`\n * nodes from `wpt`, `rte` and `trk` can be processed, as those are\n * directly mapped to a feature.\n */\n\n/**\n * @typedef {Object} LayoutOptions\n * @property {boolean} [hasZ] HasZ.\n * @property {boolean} [hasM] HasM.\n */\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the GPX format.\n *\n * Note that {@link module:ol/format/GPX~GPX#readFeature} only reads the first\n * feature of the source.\n *\n * When reading, routes (`<rte>`) are converted into LineString geometries, and\n * tracks (`<trk>`) into MultiLineString. Any properties on route and track\n * waypoints are ignored.\n *\n * When writing, LineString geometries are output as routes (`<rte>`), and\n * MultiLineString as tracks (`<trk>`).\n *\n * @api\n */\nclass GPX extends XMLFeature {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    super();\n\n    options = options ? options : {};\n\n    /**\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.dataProjection = getProjection('EPSG:4326');\n\n    /**\n     * @type {function(Feature, Node): void|undefined}\n     * @private\n     */\n    this.readExtensions_ = options.readExtensions;\n  }\n\n  /**\n   * @param {Array<Feature>} features List of features.\n   * @private\n   */\n  handleReadExtensions_(features) {\n    if (!features) {\n      features = [];\n    }\n    for (let i = 0, ii = features.length; i < ii; ++i) {\n      const feature = features[i];\n      if (this.readExtensions_) {\n        const extensionsNode = feature.get('extensionsNode_') || null;\n        this.readExtensions_(feature, extensionsNode);\n      }\n      feature.set('extensionsNode_', undefined);\n    }\n  }\n\n  /**\n   * Reads a GPX file's metadata tag, reading among other things:\n   *   - the name and description of this GPX\n   *   - its author\n   *   - the copyright associated with this GPX file\n   *\n   * Will return null if no metadata tag is present (or no valid source is given).\n   *\n   * @param {Document|Element|Object|string} source Source.\n   * @return {GPXMetadata | null} Metadata\n   * @api\n   */\n  readMetadata(source) {\n    if (!source) {\n      return null;\n    }\n    if (typeof source === 'string') {\n      return this.readMetadataFromDocument(parse(source));\n    }\n    if (isDocument(source)) {\n      return this.readMetadataFromDocument(/** @type {Document} */ (source));\n    }\n    return this.readMetadataFromNode(source);\n  }\n\n  /**\n   * @param {Document} doc Document.\n   * @return {GPXMetadata | null} Metadata\n   */\n  readMetadataFromDocument(doc) {\n    for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {\n      if (n.nodeType === Node.ELEMENT_NODE) {\n        const metadata = this.readMetadataFromNode(/** @type {Element} */ (n));\n        if (metadata) {\n          return metadata;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @return {Object} Metadata\n   */\n  readMetadataFromNode(node) {\n    if (!NAMESPACE_URIS.includes(node.namespaceURI)) {\n      return null;\n    }\n    for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\n      if (\n        NAMESPACE_URIS.includes(n.namespaceURI) &&\n        n.localName === 'metadata'\n      ) {\n        return pushParseAndPop({}, METADATA_PARSERS, n, []);\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\n   * @return {import(\"../Feature.js\").default} Feature.\n   */\n  readFeatureFromNode(node, options) {\n    if (!NAMESPACE_URIS.includes(node.namespaceURI)) {\n      return null;\n    }\n    const featureReader = FEATURE_READER[node.localName];\n    if (!featureReader) {\n      return null;\n    }\n    const feature = featureReader(node, [this.getReadOptions(node, options)]);\n    if (!feature) {\n      return null;\n    }\n    this.handleReadExtensions_([feature]);\n    return feature;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   */\n  readFeaturesFromNode(node, options) {\n    if (!NAMESPACE_URIS.includes(node.namespaceURI)) {\n      return [];\n    }\n    if (node.localName == 'gpx') {\n      /** @type {Array<Feature>} */\n      const features = pushParseAndPop([], GPX_PARSERS, node, [\n        this.getReadOptions(node, options),\n      ]);\n      if (features) {\n        this.handleReadExtensions_(features);\n        return features;\n      }\n      return [];\n    }\n    return [];\n  }\n\n  /**\n   * Encode an array of features in the GPX format as an XML node.\n   * LineString geometries are output as routes (`<rte>`), and MultiLineString\n   * as tracks (`<trk>`).\n   *\n   * @param {Array<Feature>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Options.\n   * @return {Node} Node.\n   * @api\n   */\n  writeFeaturesNode(features, options) {\n    options = this.adaptOptions(options);\n    //FIXME Serialize metadata\n    const gpx = createElementNS('http://www.topografix.com/GPX/1/1', 'gpx');\n    const xmlnsUri = 'http://www.w3.org/2000/xmlns/';\n    gpx.setAttributeNS(xmlnsUri, 'xmlns:xsi', XML_SCHEMA_INSTANCE_URI);\n    gpx.setAttributeNS(\n      XML_SCHEMA_INSTANCE_URI,\n      'xsi:schemaLocation',\n      SCHEMA_LOCATION,\n    );\n    gpx.setAttribute('version', '1.1');\n    gpx.setAttribute('creator', 'OpenLayers');\n\n    pushSerializeAndPop(\n      /** @type {import(\"../xml.js\").NodeStackItem} */\n      ({node: gpx}),\n      GPX_SERIALIZERS,\n      GPX_NODE_FACTORY,\n      features,\n      [options],\n    );\n    return gpx;\n  }\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst RTE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'name': makeObjectPropertySetter(readString),\n  'cmt': makeObjectPropertySetter(readString),\n  'desc': makeObjectPropertySetter(readString),\n  'src': makeObjectPropertySetter(readString),\n  'link': parseLink,\n  'number': makeObjectPropertySetter(readPositiveInteger),\n  'extensions': parseExtensions,\n  'type': makeObjectPropertySetter(readString),\n  'rtept': parseRtePt,\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst RTEPT_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'ele': makeObjectPropertySetter(readDecimal),\n  'time': makeObjectPropertySetter(readDateTime),\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst TRK_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'name': makeObjectPropertySetter(readString),\n  'cmt': makeObjectPropertySetter(readString),\n  'desc': makeObjectPropertySetter(readString),\n  'src': makeObjectPropertySetter(readString),\n  'link': parseLink,\n  'number': makeObjectPropertySetter(readPositiveInteger),\n  'type': makeObjectPropertySetter(readString),\n  'extensions': parseExtensions,\n  'trkseg': parseTrkSeg,\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst TRKSEG_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'trkpt': parseTrkPt,\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst TRKPT_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'ele': makeObjectPropertySetter(readDecimal),\n  'time': makeObjectPropertySetter(readDateTime),\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst WPT_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'ele': makeObjectPropertySetter(readDecimal),\n  'time': makeObjectPropertySetter(readDateTime),\n  'magvar': makeObjectPropertySetter(readDecimal),\n  'geoidheight': makeObjectPropertySetter(readDecimal),\n  'name': makeObjectPropertySetter(readString),\n  'cmt': makeObjectPropertySetter(readString),\n  'desc': makeObjectPropertySetter(readString),\n  'src': makeObjectPropertySetter(readString),\n  'link': parseLink,\n  'sym': makeObjectPropertySetter(readString),\n  'type': makeObjectPropertySetter(readString),\n  'fix': makeObjectPropertySetter(readString),\n  'sat': makeObjectPropertySetter(readPositiveInteger),\n  'hdop': makeObjectPropertySetter(readDecimal),\n  'vdop': makeObjectPropertySetter(readDecimal),\n  'pdop': makeObjectPropertySetter(readDecimal),\n  'ageofdgpsdata': makeObjectPropertySetter(readDecimal),\n  'dgpsid': makeObjectPropertySetter(readPositiveInteger),\n  'extensions': parseExtensions,\n});\n\n/**\n * @const\n * @type {Array<string>}\n */\nconst LINK_SEQUENCE = ['text', 'type'];\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst LINK_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\n  'text': makeChildAppender(writeStringTextNode),\n  'type': makeChildAppender(writeStringTextNode),\n});\n\n/**\n * @const\n * @type {Object<string, Array<string>>}\n */\n// @ts-ignore\nconst RTE_SEQUENCE = makeStructureNS(NAMESPACE_URIS, [\n  'name',\n  'cmt',\n  'desc',\n  'src',\n  'link',\n  'number',\n  'type',\n  'rtept',\n]);\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst RTE_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\n  'name': makeChildAppender(writeStringTextNode),\n  'cmt': makeChildAppender(writeStringTextNode),\n  'desc': makeChildAppender(writeStringTextNode),\n  'src': makeChildAppender(writeStringTextNode),\n  'link': makeChildAppender(writeLink),\n  'number': makeChildAppender(writeNonNegativeIntegerTextNode),\n  'type': makeChildAppender(writeStringTextNode),\n  'rtept': makeArraySerializer(makeChildAppender(writeWptType)),\n});\n\n/**\n * @const\n * @type {Object<string, Array<string>>}\n */\n// @ts-ignore\nconst RTEPT_TYPE_SEQUENCE = makeStructureNS(NAMESPACE_URIS, ['ele', 'time']);\n\n/**\n * @const\n * @type {Object<string, Array<string>>}\n */\n// @ts-ignore\nconst TRK_SEQUENCE = makeStructureNS(NAMESPACE_URIS, [\n  'name',\n  'cmt',\n  'desc',\n  'src',\n  'link',\n  'number',\n  'type',\n  'trkseg',\n]);\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst TRK_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\n  'name': makeChildAppender(writeStringTextNode),\n  'cmt': makeChildAppender(writeStringTextNode),\n  'desc': makeChildAppender(writeStringTextNode),\n  'src': makeChildAppender(writeStringTextNode),\n  'link': makeChildAppender(writeLink),\n  'number': makeChildAppender(writeNonNegativeIntegerTextNode),\n  'type': makeChildAppender(writeStringTextNode),\n  'trkseg': makeArraySerializer(makeChildAppender(writeTrkSeg)),\n});\n\n/**\n * @const\n * @type {function(*, Array<*>, string=): (Node|undefined)}\n */\nconst TRKSEG_NODE_FACTORY = makeSimpleNodeFactory('trkpt');\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst TRKSEG_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\n  'trkpt': makeChildAppender(writeWptType),\n});\n\n/**\n * @const\n * @type {Object<string, Array<string>>}\n */\n// @ts-ignore\nconst WPT_TYPE_SEQUENCE = makeStructureNS(NAMESPACE_URIS, [\n  'ele',\n  'time',\n  'magvar',\n  'geoidheight',\n  'name',\n  'cmt',\n  'desc',\n  'src',\n  'link',\n  'sym',\n  'type',\n  'fix',\n  'sat',\n  'hdop',\n  'vdop',\n  'pdop',\n  'ageofdgpsdata',\n  'dgpsid',\n]);\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst WPT_TYPE_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\n  'ele': makeChildAppender(writeDecimalTextNode),\n  'time': makeChildAppender(writeDateTimeTextNode),\n  'magvar': makeChildAppender(writeDecimalTextNode),\n  'geoidheight': makeChildAppender(writeDecimalTextNode),\n  'name': makeChildAppender(writeStringTextNode),\n  'cmt': makeChildAppender(writeStringTextNode),\n  'desc': makeChildAppender(writeStringTextNode),\n  'src': makeChildAppender(writeStringTextNode),\n  'link': makeChildAppender(writeLink),\n  'sym': makeChildAppender(writeStringTextNode),\n  'type': makeChildAppender(writeStringTextNode),\n  'fix': makeChildAppender(writeStringTextNode),\n  'sat': makeChildAppender(writeNonNegativeIntegerTextNode),\n  'hdop': makeChildAppender(writeDecimalTextNode),\n  'vdop': makeChildAppender(writeDecimalTextNode),\n  'pdop': makeChildAppender(writeDecimalTextNode),\n  'ageofdgpsdata': makeChildAppender(writeDecimalTextNode),\n  'dgpsid': makeChildAppender(writeNonNegativeIntegerTextNode),\n});\n\n/**\n * @const\n * @type {Object<string, string>}\n */\nconst GEOMETRY_TYPE_TO_NODENAME = {\n  'Point': 'wpt',\n  'LineString': 'rte',\n  'MultiLineString': 'trk',\n};\n\n/**\n * @param {*} value Value.\n * @param {Array<*>} objectStack Object stack.\n * @param {string} [nodeName] Node name.\n * @return {Node|undefined} Node.\n */\nfunction GPX_NODE_FACTORY(value, objectStack, nodeName) {\n  const geometry = /** @type {Feature} */ (value).getGeometry();\n  if (geometry) {\n    const nodeName = GEOMETRY_TYPE_TO_NODENAME[geometry.getType()];\n    if (nodeName) {\n      const parentNode = objectStack[objectStack.length - 1].node;\n      return createElementNS(parentNode.namespaceURI, nodeName);\n    }\n  }\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {LayoutOptions} layoutOptions Layout options.\n * @param {Element} node Node.\n * @param {!Object} values Values.\n * @return {Array<number>} Flat coordinates.\n */\nfunction appendCoordinate(flatCoordinates, layoutOptions, node, values) {\n  flatCoordinates.push(\n    parseFloat(node.getAttribute('lon')),\n    parseFloat(node.getAttribute('lat')),\n  );\n  if ('ele' in values) {\n    flatCoordinates.push(/** @type {number} */ (values['ele']));\n    delete values['ele'];\n    layoutOptions.hasZ = true;\n  } else {\n    flatCoordinates.push(0);\n  }\n  if ('time' in values) {\n    flatCoordinates.push(/** @type {number} */ (values['time']));\n    delete values['time'];\n    layoutOptions.hasM = true;\n  } else {\n    flatCoordinates.push(0);\n  }\n  return flatCoordinates;\n}\n\n/**\n * Choose GeometryLayout based on flags in layoutOptions and adjust flatCoordinates\n * and ends arrays by shrinking them accordingly (removing unused zero entries).\n *\n * @param {LayoutOptions} layoutOptions Layout options.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {Array<number>} [ends] Ends.\n * @return {import(\"../geom/Geometry.js\").GeometryLayout} Layout.\n */\nfunction applyLayoutOptions(layoutOptions, flatCoordinates, ends) {\n  /** @type {import(\"../geom/Geometry.js\").GeometryLayout} */\n  let layout = 'XY';\n  let stride = 2;\n  if (layoutOptions.hasZ && layoutOptions.hasM) {\n    layout = 'XYZM';\n    stride = 4;\n  } else if (layoutOptions.hasZ) {\n    layout = 'XYZ';\n    stride = 3;\n  } else if (layoutOptions.hasM) {\n    layout = 'XYM';\n    stride = 3;\n  }\n  if (stride !== 4) {\n    for (let i = 0, ii = flatCoordinates.length / 4; i < ii; i++) {\n      flatCoordinates[i * stride] = flatCoordinates[i * 4];\n      flatCoordinates[i * stride + 1] = flatCoordinates[i * 4 + 1];\n      if (layoutOptions.hasZ) {\n        flatCoordinates[i * stride + 2] = flatCoordinates[i * 4 + 2];\n      }\n      if (layoutOptions.hasM) {\n        flatCoordinates[i * stride + 2] = flatCoordinates[i * 4 + 3];\n      }\n    }\n    flatCoordinates.length = (flatCoordinates.length / 4) * stride;\n    if (ends) {\n      for (let i = 0, ii = ends.length; i < ii; i++) {\n        ends[i] = (ends[i] / 4) * stride;\n      }\n    }\n  }\n  return layout;\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<any>} objectStack Object stack.\n * @return {GPXAuthor | undefined} Person object.\n */\nfunction readAuthor(node, objectStack) {\n  const values = pushParseAndPop({}, AUTHOR_PARSERS, node, objectStack);\n  if (values) {\n    return values;\n  }\n  return undefined;\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<any>} objectStack Object stack.\n * @return {GPXCopyright | undefined} Person object.\n */\nfunction readCopyright(node, objectStack) {\n  const values = pushParseAndPop({}, COPYRIGHT_PARSERS, node, objectStack);\n  if (values) {\n    const author = node.getAttribute('author');\n    if (author !== null) {\n      values['author'] = author;\n    }\n    return values;\n  }\n  return undefined;\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction parseBounds(node, objectStack) {\n  const values = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const minlat = node.getAttribute('minlat');\n  const minlon = node.getAttribute('minlon');\n  const maxlat = node.getAttribute('maxlat');\n  const maxlon = node.getAttribute('maxlon');\n  if (\n    minlon !== null &&\n    minlat !== null &&\n    maxlon !== null &&\n    maxlat !== null\n  ) {\n    values['bounds'] = [\n      [parseFloat(minlon), parseFloat(minlat)],\n      [parseFloat(maxlon), parseFloat(maxlat)],\n    ];\n  }\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction parseEmail(node, objectStack) {\n  const values = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const id = node.getAttribute('id');\n  const domain = node.getAttribute('domain');\n  if (id !== null && domain !== null) {\n    values['email'] = `${id}@${domain}`;\n  }\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction parseLink(node, objectStack) {\n  const values = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const href = node.getAttribute('href');\n  if (href !== null) {\n    values['link'] = href;\n  }\n  parseNode(LINK_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Node} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction parseExtensions(node, objectStack) {\n  const values = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  values['extensionsNode_'] = node;\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction parseRtePt(node, objectStack) {\n  const values = pushParseAndPop({}, RTEPT_PARSERS, node, objectStack);\n  if (values) {\n    const rteValues = /** @type {!Object} */ (\n      objectStack[objectStack.length - 1]\n    );\n    const flatCoordinates = /** @type {Array<number>} */ (\n      rteValues['flatCoordinates']\n    );\n    const layoutOptions = /** @type {LayoutOptions} */ (\n      rteValues['layoutOptions']\n    );\n    appendCoordinate(flatCoordinates, layoutOptions, node, values);\n  }\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction parseTrkPt(node, objectStack) {\n  const values = pushParseAndPop({}, TRKPT_PARSERS, node, objectStack);\n  if (values) {\n    const trkValues = /** @type {!Object} */ (\n      objectStack[objectStack.length - 1]\n    );\n    const flatCoordinates = /** @type {Array<number>} */ (\n      trkValues['flatCoordinates']\n    );\n    const layoutOptions = /** @type {LayoutOptions} */ (\n      trkValues['layoutOptions']\n    );\n    appendCoordinate(flatCoordinates, layoutOptions, node, values);\n  }\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction parseTrkSeg(node, objectStack) {\n  const values = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  parseNode(TRKSEG_PARSERS, node, objectStack);\n  const flatCoordinates =\n    /** @type {Array<number>} */\n    (values['flatCoordinates']);\n  const ends = /** @type {Array<number>} */ (values['ends']);\n  ends.push(flatCoordinates.length);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Feature|undefined} Track.\n */\nfunction readRte(node, objectStack) {\n  const options = /** @type {import(\"./Feature.js\").ReadOptions} */ (\n    objectStack[0]\n  );\n  const values = pushParseAndPop(\n    {\n      'flatCoordinates': [],\n      'layoutOptions': {},\n    },\n    RTE_PARSERS,\n    node,\n    objectStack,\n  );\n  if (!values) {\n    return undefined;\n  }\n  const flatCoordinates =\n    /** @type {Array<number>} */\n    (values['flatCoordinates']);\n  delete values['flatCoordinates'];\n  const layoutOptions = /** @type {LayoutOptions} */ (values['layoutOptions']);\n  delete values['layoutOptions'];\n  const layout = applyLayoutOptions(layoutOptions, flatCoordinates);\n  const geometry = new LineString(flatCoordinates, layout);\n  transformGeometryWithOptions(geometry, false, options);\n  const feature = new Feature(geometry);\n  feature.setProperties(values, true);\n  return feature;\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Feature|undefined} Track.\n */\nfunction readTrk(node, objectStack) {\n  const options = /** @type {import(\"./Feature.js\").ReadOptions} */ (\n    objectStack[0]\n  );\n  const values = pushParseAndPop(\n    {\n      'flatCoordinates': [],\n      'ends': [],\n      'layoutOptions': {},\n    },\n    TRK_PARSERS,\n    node,\n    objectStack,\n  );\n  if (!values) {\n    return undefined;\n  }\n  const flatCoordinates =\n    /** @type {Array<number>} */\n    (values['flatCoordinates']);\n  delete values['flatCoordinates'];\n  const ends = /** @type {Array<number>} */ (values['ends']);\n  delete values['ends'];\n  const layoutOptions = /** @type {LayoutOptions} */ (values['layoutOptions']);\n  delete values['layoutOptions'];\n  const layout = applyLayoutOptions(layoutOptions, flatCoordinates, ends);\n  const geometry = new MultiLineString(flatCoordinates, layout, ends);\n  transformGeometryWithOptions(geometry, false, options);\n  const feature = new Feature(geometry);\n  feature.setProperties(values, true);\n  return feature;\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Feature|undefined} Waypoint.\n */\nfunction readWpt(node, objectStack) {\n  const options = /** @type {import(\"./Feature.js\").ReadOptions} */ (\n    objectStack[0]\n  );\n  const values = pushParseAndPop({}, WPT_PARSERS, node, objectStack);\n  if (!values) {\n    return undefined;\n  }\n  const layoutOptions = /** @type {LayoutOptions} */ ({});\n  const coordinates = appendCoordinate([], layoutOptions, node, values);\n  const layout = applyLayoutOptions(layoutOptions, coordinates);\n  const geometry = new Point(coordinates, layout);\n  transformGeometryWithOptions(geometry, false, options);\n  const feature = new Feature(geometry);\n  feature.setProperties(values, true);\n  return feature;\n}\n\n/**\n * @param {Element} node Node.\n * @param {string} value Value for the link's `href` attribute.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeLink(node, value, objectStack) {\n  node.setAttribute('href', value);\n  const context = objectStack[objectStack.length - 1];\n  const properties = context['properties'];\n  const link = [properties['linkText'], properties['linkType']];\n  pushSerializeAndPop(\n    /** @type {import(\"../xml.js\").NodeStackItem} */ ({node: node}),\n    LINK_SERIALIZERS,\n    OBJECT_PROPERTY_NODE_FACTORY,\n    link,\n    objectStack,\n    LINK_SEQUENCE,\n  );\n}\n\n/**\n * @param {Element} node Node.\n * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction writeWptType(node, coordinate, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const parentNode = context.node;\n  const namespaceURI = parentNode.namespaceURI;\n  const properties = context['properties'];\n  //FIXME Projection handling\n  node.setAttributeNS(null, 'lat', String(coordinate[1]));\n  node.setAttributeNS(null, 'lon', String(coordinate[0]));\n  const geometryLayout = context['geometryLayout'];\n  switch (geometryLayout) {\n    case 'XYZM':\n      if (coordinate[3] !== 0) {\n        properties['time'] = coordinate[3];\n      }\n    // fall through\n    case 'XYZ':\n      if (coordinate[2] !== 0) {\n        properties['ele'] = coordinate[2];\n      }\n      break;\n    case 'XYM':\n      if (coordinate[2] !== 0) {\n        properties['time'] = coordinate[2];\n      }\n      break;\n    default:\n    // pass\n  }\n  const orderedKeys =\n    node.nodeName == 'rtept'\n      ? RTEPT_TYPE_SEQUENCE[namespaceURI]\n      : WPT_TYPE_SEQUENCE[namespaceURI];\n  const values = makeSequence(properties, orderedKeys);\n  pushSerializeAndPop(\n    /** @type {import(\"../xml.js\").NodeStackItem} */\n    ({node: node, 'properties': properties}),\n    WPT_TYPE_SERIALIZERS,\n    OBJECT_PROPERTY_NODE_FACTORY,\n    values,\n    objectStack,\n    orderedKeys,\n  );\n}\n\n/**\n * @param {Node} node Node.\n * @param {Feature} feature Feature.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction writeRte(node, feature, objectStack) {\n  const options = /** @type {import(\"./Feature.js\").WriteOptions} */ (\n    objectStack[0]\n  );\n  const properties = feature.getProperties();\n  const context = {node: node};\n  context['properties'] = properties;\n  const geometry = feature.getGeometry();\n  if (geometry.getType() == 'LineString') {\n    const lineString = /** @type {LineString} */ (\n      transformGeometryWithOptions(geometry, true, options)\n    );\n    context['geometryLayout'] = lineString.getLayout();\n    properties['rtept'] = lineString.getCoordinates();\n  }\n  const parentNode = objectStack[objectStack.length - 1].node;\n  const orderedKeys = RTE_SEQUENCE[parentNode.namespaceURI];\n  const values = makeSequence(properties, orderedKeys);\n  pushSerializeAndPop(\n    context,\n    RTE_SERIALIZERS,\n    OBJECT_PROPERTY_NODE_FACTORY,\n    values,\n    objectStack,\n    orderedKeys,\n  );\n}\n\n/**\n * @param {Element} node Node.\n * @param {Feature} feature Feature.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction writeTrk(node, feature, objectStack) {\n  const options = /** @type {import(\"./Feature.js\").WriteOptions} */ (\n    objectStack[0]\n  );\n  const properties = feature.getProperties();\n  /** @type {import(\"../xml.js\").NodeStackItem} */\n  const context = {node: node};\n  context['properties'] = properties;\n  const geometry = feature.getGeometry();\n  if (geometry.getType() == 'MultiLineString') {\n    const multiLineString = /** @type {MultiLineString} */ (\n      transformGeometryWithOptions(geometry, true, options)\n    );\n    properties['trkseg'] = multiLineString.getLineStrings();\n  }\n  const parentNode = objectStack[objectStack.length - 1].node;\n  const orderedKeys = TRK_SEQUENCE[parentNode.namespaceURI];\n  const values = makeSequence(properties, orderedKeys);\n  pushSerializeAndPop(\n    context,\n    TRK_SERIALIZERS,\n    OBJECT_PROPERTY_NODE_FACTORY,\n    values,\n    objectStack,\n    orderedKeys,\n  );\n}\n\n/**\n * @param {Element} node Node.\n * @param {LineString} lineString LineString.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction writeTrkSeg(node, lineString, objectStack) {\n  /** @type {import(\"../xml.js\").NodeStackItem} */\n  const context = {node: node};\n  context['geometryLayout'] = lineString.getLayout();\n  context['properties'] = {};\n  pushSerializeAndPop(\n    context,\n    TRKSEG_SERIALIZERS,\n    TRKSEG_NODE_FACTORY,\n    lineString.getCoordinates(),\n    objectStack,\n  );\n}\n\n/**\n * @param {Element} node Node.\n * @param {Feature} feature Feature.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction writeWpt(node, feature, objectStack) {\n  const options = /** @type {import(\"./Feature.js\").WriteOptions} */ (\n    objectStack[0]\n  );\n  const context = objectStack[objectStack.length - 1];\n  context['properties'] = feature.getProperties();\n  const geometry = feature.getGeometry();\n  if (geometry.getType() == 'Point') {\n    const point = /** @type {Point} */ (\n      transformGeometryWithOptions(geometry, true, options)\n    );\n    context['geometryLayout'] = point.getLayout();\n    writeWptType(node, point.getCoordinates(), objectStack);\n  }\n}\n\nexport default GPX;\n"],"x_google_ignoreList":[0]}
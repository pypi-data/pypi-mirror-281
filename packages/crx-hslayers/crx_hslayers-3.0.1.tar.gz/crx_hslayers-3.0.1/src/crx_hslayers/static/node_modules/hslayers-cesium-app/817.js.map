{"version":3,"file":"817.js","mappings":"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","names":["HsMeasureService","constructor","hsMapService","HsUtilsService","HsEventBusService","this","data","measurements","multipleShapeMode","sketches","measuringActivated","setMeasureLayer","setTitle","measureVector","switchMultipleMode","mode","undefined","VectorLayer","source","VectorSource","style","Style","fill","Fill","color","stroke","Stroke","width","changeMeasureParams","type","getMap","removeInteraction","draw","addInteraction","clearMeasurement","setActive","getSource","clear","activateMeasuring","map","addLayer","getViewport","addEventListener","evt","mouseMoveHandler","setTimeout","deactivateMeasuring","loaded","then","removeEventListener","removeLayer","measurementEnds","next","length","output","sketch","geom","getGeometry","instOf","Polygon","addMultiple","formatArea","getCurrentProj","LineString","formatLength","lastMeasurementId","val1","val2","unit","value","Math","round","size","arr","i","drawType","Draw","dragVertexDelay","on","measurementStarts","Array","isArray","push","feature","static","t","i0","i1","i2","i3","core","jDH","factory","Éµfac","providedIn","HsMeasureComponent_div_0_li_30_span_2_Template","measurement_r3","$event","_r1","ctx_r1","hsMeasureService","clearAll","HsMeasureComponent_div_0_li_30_Template","_c0","HsMeasureComponent","HsPanelBaseComponent","hsEventBusService","hsUtilsService","super","name","end","Subject","ngOnDestroy","complete","ngOnInit","runningInBrowser","document","e","key","pipe","takeUntil","subscribe","hsLayoutService","panelEnabled","mainpanel$","which","mainpanel","VBU","selectors","features","decls","vars","consts","template","rf","ctx","HsMeasureComponent_div_0_Template","isVisible$","HsMeasureModule","$C","G2t","CommonModule","FormsModule","HsPanelHelpersModule","NgbDropdownModule","HsPanelHeaderComponent","HsMeasureToolbarComponent","HsGuiOverlayBaseComponent","measureButtonClicked","setMainPanel","componentEnabled","of"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["webpack:///./projects/hslayers/components/measure/measure.service.ts","webpack:///./projects/hslayers/components/measure/measure.component.html","webpack:///./projects/hslayers/components/measure/measure.component.ts","webpack:///./projects/hslayers/components/measure/measure.module.ts","webpack:///./projects/hslayers/components/measure/measure-toolbar.component.ts","webpack:///./projects/hslayers/components/measure/measure-toolbar.component.html"],"sourcesContent":["import {Draw} from 'ol/interaction';\nimport {Feature} from 'ol';\nimport {Fill, Stroke, Style} from 'ol/style';\nimport {Geometry, LineString, Polygon} from 'ol/geom';\nimport {Injectable} from '@angular/core';\nimport {Vector as VectorLayer} from 'ol/layer';\nimport {Vector as VectorSource} from 'ol/source';\n\nimport {HsEventBusService} from 'hslayers-ng/services/event-bus';\nimport {HsMapService} from 'hslayers-ng/services/map';\nimport {HsUtilsService, Measurement} from 'hslayers-ng/services/utils';\nimport {setTitle} from 'hslayers-ng/common/extensions';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HsMeasureService {\n  draw: Draw;\n  data = {\n    measurements: [],\n    multipleShapeMode: false,\n  };\n  /**\n   * sketches Array of measure sketches\n   */\n  sketches: Feature<Geometry>[] = [];\n  lastMeasurementId: number;\n  measureVector: VectorLayer<Feature>;\n  measuringActivated = false;\n  constructor(\n    public hsMapService: HsMapService,\n    public HsUtilsService: HsUtilsService,\n    public HsEventBusService: HsEventBusService,\n  ) {\n    this.setMeasureLayer();\n    setTitle(this.measureVector, 'Measurement sketches');\n  }\n\n  /**\n   * Enable/disable multiple shape mode for measuring (switch without parameter)\n   * @public\n   * @param mode - Optional parameter if multiple shape mode should be enabled\n   */\n  switchMultipleMode(mode?: boolean): void {\n    if (mode !== undefined) {\n      this.data.multipleShapeMode = mode;\n    } else {\n      this.data.multipleShapeMode = !this.data.multipleShapeMode;\n    }\n  }\n\n  /**\n   * Set new measure vector layer\n   */\n  setMeasureLayer(): void {\n    this.measureVector = new VectorLayer({\n      source: new VectorSource(),\n      style: new Style({\n        fill: new Fill({\n          color: 'rgba(255, 255, 255, 0.2)',\n        }),\n        stroke: new Stroke({\n          color: '#ffcc33',\n          width: 2,\n        }),\n      }),\n    });\n  }\n\n  /**\n   * Change geometry type of measurement without deleting of old ones\n   * @public\n   * @param type - Geometry type of measurement ('area' for polygon, 'line' for linestring)\n   */\n  changeMeasureParams(type: string): void {\n    this.hsMapService.getMap().removeInteraction(this.draw);\n    this.sketches = [];\n    this.addInteraction(type);\n  }\n\n  /**\n   * Clear all measurements and restart measuring\n   * @public\n   */\n  clearMeasurement(): void {\n    this.draw.setActive(false);\n    this.data.measurements = [];\n    this.measureVector.getSource().clear();\n    this.sketches = [];\n    this.draw.setActive(true);\n  }\n\n  /**\n   * Start measuring interaction in app\n   * @public\n   */\n  activateMeasuring(type: string): void {\n    if (this.measuringActivated) {\n      return;\n    }\n    const map = this.hsMapService.getMap();\n    if (!map) {\n      setTimeout(() => {\n        this.activateMeasuring(type);\n      }, 500);\n      return;\n    }\n    map.addLayer(this.measureVector);\n    map.getViewport().addEventListener('mousemove', (evt) => {\n      this.mouseMoveHandler(evt);\n    });\n    map.getViewport().addEventListener('touchmove', (evt) => {\n      this.mouseMoveHandler(evt);\n    });\n    map.getViewport().addEventListener('touchend', (evt) => {\n      this.mouseMoveHandler(evt);\n    });\n\n    this.addInteraction(type);\n    this.measuringActivated = true;\n  }\n\n  /**\n   * Stop measuring interaction in app\n   * @public\n   */\n  deactivateMeasuring(): void {\n    this.hsMapService.loaded().then((map) => {\n      map.getViewport().removeEventListener('mousemove', (evt) => {\n        this.mouseMoveHandler(evt);\n      });\n      map.getViewport().removeEventListener('touchmove', (evt) => {\n        this.mouseMoveHandler(evt);\n      });\n      map.getViewport().removeEventListener('touchend', (evt) => {\n        this.mouseMoveHandler(evt);\n      });\n\n      map.removeInteraction(this.draw);\n      map.removeLayer(this.measureVector);\n    });\n    this.measuringActivated = false;\n    this.HsEventBusService.measurementEnds.next(); //better emit drawingEnds here\n  }\n\n  /**\n   * Callback for mouse and touch move event, compute live measurement results\n   * @param evt - Callback param for mouse move event\n   */\n  mouseMoveHandler(evt): void {\n    if (this.sketches.length > 0) {\n      let output: Measurement;\n\n      for (const sketch of this.sketches) {\n        const geom = sketch.getGeometry();\n        if (this.HsUtilsService.instOf(geom, Polygon)) {\n          output = this.addMultiple(\n            this.HsUtilsService.formatArea(\n              geom as Polygon,\n              this.hsMapService.getCurrentProj(),\n            ),\n            output,\n          );\n        } else if (this.HsUtilsService.instOf(geom, LineString)) {\n          output = this.addMultiple(\n            this.HsUtilsService.formatLength(\n              geom as LineString,\n              this.hsMapService.getCurrentProj(),\n            ),\n            output,\n          );\n        }\n      }\n      //output.geom = this.sketch;\n      setTimeout(() => {\n        this.data.measurements[this.lastMeasurementId] = output;\n      }, 0);\n    }\n  }\n\n  /**\n   * Adds two measure results for multiple shape mode to display joined result\n   * @param val1 - Output of new object\n   * @param val2 - Old value\n   */\n  addMultiple(val1: Measurement, val2: Measurement): Measurement {\n    if (val2 == undefined) {\n      return val1;\n    }\n    let unit = val1.unit;\n    const type = val1.type;\n    let value: number;\n    if (val1.unit == val2.unit) {\n      value = Math.round((val1.size + val2.size) * 100) / 100;\n      if (unit == 'm' && type == 'length' && value > 1000) {\n        value = Math.round((value / 1000) * 100) / 100;\n        unit = 'km';\n      } else if (unit == 'm' && type == 'area' && value > 10000) {\n        value = Math.round((value / 1000000) * 100) / 100;\n        unit = 'km';\n      }\n    } else {\n      const arr = [val1, val2];\n      for (let i = 0; i < arr.length; i++) {\n        if (arr[i].unit == 'm') {\n          type == 'length' ? (arr[i].size /= 1000) : (arr[i].size /= 1000000);\n        }\n      }\n      value = Math.round((arr[0].size + arr[1].size) * 100) / 100;\n      unit = 'km';\n    }\n    return {\n      size: value,\n      type: type,\n      unit: unit,\n    };\n  }\n\n  /**\n   * Initialize draw interaction on Ol.map and event handlers for handling start and end of drawing\n   * @param type - Geometry type\n   */\n  addInteraction(type: string): void {\n    const drawType = type == 'area' ? 'Polygon' : 'LineString';\n    this.draw = new Draw({\n      source: this.measureVector.getSource(),\n      type: drawType,\n      dragVertexDelay: 150,\n    });\n    this.hsMapService.getMap().addInteraction(this.draw);\n\n    this.draw.on('drawstart', (evt) => {\n      this.HsEventBusService.measurementStarts.next();\n      if (this.data.multipleShapeMode) {\n        if (!Array.isArray(this.sketches)) {\n          this.sketches = [];\n          this.data.measurements.push({\n            size: 0,\n            unit: '',\n          });\n        }\n        this.sketches.push(evt.feature);\n      } else {\n        this.sketches = [evt.feature];\n        this.data.measurements.push({\n          size: 0,\n          unit: '',\n        });\n      }\n      this.lastMeasurementId = this.data.measurements.length - 1;\n    });\n\n    this.draw.on('drawend', (evt) => {\n      this.HsEventBusService.measurementEnds.next();\n    });\n  }\n}\n","<div class=\"card hs-main-panel\" *ngIf=\"isVisible$ | async\">\n  <hs-panel-header name=\"measure\" [panelTabs]=\"'MEASURE'\">\n  </hs-panel-header>\n  <div class=\"card-body p-2\">\n    <div class=\"mb-2\">\n      {{'MEASURE.multipleShapes' | translateHs }}\n      <div class=\"btn-group btn-group-toggle\">\n        <label class=\"btn btn-sm btn-secondary\" [ngClass]=\"{'active': hsMeasureService.data.multipleShapeMode === true}\"\n          for=\"hs-measure-multiple-true\">\n          {{'COMMON.on' | translateHs | uppercase}}\n          <input type=\"radio\" name=\"multiple\" id=\"hs-measure-multiple-true\" [value]=\"true\"\n            [(ngModel)]=\"hsMeasureService.data.multipleShapeMode\">\n        </label>\n        <label class=\"btn btn-sm btn-secondary\"\n          [ngClass]=\"{'active': hsMeasureService.data.multipleShapeMode === false}\" for=\"hs-measure-multiple-false\">\n          {{'COMMON.off' | translateHs | uppercase}}\n          <input type=\"radio\" name=\"multiple\" id=\"hs-measure-multiple-false\" [value]=\"false\"\n            [(ngModel)]=\"hsMeasureService.data.multipleShapeMode\">\n        </label>\n      </div>\n    </div>\n    <div class=\"btn-group btn-group-toggle mb-2\">\n      <label class=\"btn btn-secondary\" [ngClass]=\"{'active': type === 'distance'}\" for=\"hs-measure-distance\">\n        {{'COMMON.distance' | translateHs }}\n        <input type=\"radio\" name=\"type\" id=\"hs-measure-distance\" value=\"distance\" [(ngModel)]=\"type\"\n          (ngModelChange)=\"changeMeasureParams()\">\n      </label>\n      <label class=\"btn btn-secondary\" [ngClass]=\"{'active': type === 'area'}\" for=\"hs-measure-area\">\n        {{'COMMON.area' | translateHs }}\n        <input type=\"radio\" name=\"type\" id=\"hs-measure-area\" value=\"area\" [(ngModel)]=\"type\"\n          (ngModelChange)=\"changeMeasureParams()\">\n      </label>\n    </div>\n    <button class=\"btn btn-secondary float-end\" (click)=\"clearAll()\">{{'COMMON.clear' | translateHs\n      }}</button>\n    <ul class=\"list-group\">\n      <li *ngFor=\"let measurement of hsMeasureService.data.measurements\" class=\"list-group-item\">\n        {{measurement?.size}}&nbsp;{{measurement?.unit}}<span *ngIf=\"measurement?.type === 'Area'\"><sup>2</sup></span>\n      </li>\n    </ul>\n  </div>\n</div>","import {Component, OnDestroy, OnInit} from '@angular/core';\n\nimport {Subject, takeUntil} from 'rxjs';\n\nimport {HsEventBusService} from 'hslayers-ng/services/event-bus';\nimport {HsMeasureService} from './measure.service';\nimport {HsPanelBaseComponent} from 'hslayers-ng/common/panels';\nimport {HsUtilsService} from 'hslayers-ng/services/utils';\n\n@Component({\n  selector: 'hs-measure',\n  templateUrl: './measure.component.html',\n})\nexport class HsMeasureComponent\n  extends HsPanelBaseComponent\n  implements OnDestroy, OnInit\n{\n  type: string;\n  name = 'measure';\n  private end = new Subject<void>();\n  constructor(\n    private hsEventBusService: HsEventBusService,\n    public hsMeasureService: HsMeasureService,\n    private hsUtilsService: HsUtilsService,\n  ) {\n    super();\n  }\n  ngOnDestroy(): void {\n    this.end.next();\n    this.end.complete();\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    this.type = 'distance';\n\n    if (this.hsUtilsService.runningInBrowser()) {\n      document.addEventListener('keyup', (e) => {\n        if (e.key == 'Control') {\n          //ControlLeft\n          setTimeout(() => {\n            this.hsMeasureService.switchMultipleMode();\n          }, 0);\n        }\n      });\n    }\n    this.hsEventBusService.measurementStarts\n      .pipe(takeUntil(this.end))\n      .subscribe(() => {\n        this.hsLayoutService.panelEnabled('toolbar', false);\n      });\n\n    this.hsEventBusService.measurementEnds\n      .pipe(takeUntil(this.end))\n      .subscribe(() => {\n        this.hsLayoutService.panelEnabled('toolbar', true);\n      });\n\n    this.hsLayoutService.mainpanel$\n      .pipe(takeUntil(this.end))\n      .subscribe((which) => {\n        if (this.hsLayoutService.mainpanel == 'measure') {\n          this.hsMeasureService.activateMeasuring(this.type);\n        } else {\n          this.hsMeasureService.deactivateMeasuring();\n        }\n      });\n\n    //Temporary fix when measure panel is loaded as default (e.g. reloading page with parameters in link)\n    if (this.hsLayoutService.mainpanel == 'measure') {\n      this.hsMeasureService.activateMeasuring(this.type);\n    }\n  }\n\n  /**\n   * Change geometry type of measurement without deleting of old ones\n   */\n  changeMeasureParams(): void {\n    if (this.hsLayoutService.mainpanel != 'measure') {\n      return;\n    }\n    this.hsMeasureService.changeMeasureParams(this.type);\n  }\n\n  /**\n   * Reset sketch and all measurements to start new drawing\n   */\n  clearAll(): void {\n    this.hsMeasureService.clearMeasurement();\n  }\n}\n","import {CUSTOM_ELEMENTS_SCHEMA, NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule} from '@angular/forms';\nimport {NgbDropdownModule} from '@ng-bootstrap/ng-bootstrap';\n\nimport {HsMeasureComponent} from './measure.component';\nimport {HsMeasureToolbarComponent} from './measure-toolbar.component';\nimport {HsPanelHeaderComponent} from 'hslayers-ng/common/panels';\nimport {HsPanelHelpersModule} from 'hslayers-ng/common/panels';\nimport {TranslateCustomPipe} from 'hslayers-ng/services/language';\n\n@NgModule({\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  declarations: [HsMeasureComponent, HsMeasureToolbarComponent],\n  imports: [\n    CommonModule,\n    FormsModule,\n    HsPanelHelpersModule,\n    NgbDropdownModule,\n    TranslateCustomPipe,\n    HsPanelHeaderComponent,\n  ],\n  exports: [HsMeasureComponent, HsMeasureToolbarComponent],\n})\nexport class HsMeasureModule {}\n","import {Component} from '@angular/core';\nimport {of} from 'rxjs';\n\nimport {HsGuiOverlayBaseComponent} from 'hslayers-ng/common/panels';\n\n@Component({\n  selector: 'hs-measure-toolbar',\n  templateUrl: './measure-toolbar.component.html',\n})\nexport class HsMeasureToolbarComponent extends HsGuiOverlayBaseComponent {\n  constructor() {\n    super();\n  }\n  name = 'measureToolbar';\n\n  measureButtonClicked(): void {\n    this.hsLayoutService.setMainPanel('measure', true);\n  }\n\n  /**\n   * Override parent class componentEnabled. Used to determine isVisible$ value\n   */\n  componentEnabled() {\n    return of(\n      this.hsLayoutService.panelEnabled('measure') &&\n        this.hsLayoutService.componentEnabled(this.name) &&\n        this.hsLayoutService.componentEnabled('guiOverlay'),\n    );\n  }\n}\n","<div class=\"nav-item\" [hidden]=\"(isVisible$ | async) === false\">\n    <div class=\"btn-group\">\n        <button class=\"btn rounded-0 hs-toolbar-button btn-light btn-outline-secondary\"\n            [title]=\"'TOOLBAR.measureLinesAndPolygon' | translateHs\" (click)=\"measureButtonClicked()\">\n            <i class=\"icon-design\"></i>\n        </button>\n    </div>\n</div>"],"x_google_ignoreList":[]}
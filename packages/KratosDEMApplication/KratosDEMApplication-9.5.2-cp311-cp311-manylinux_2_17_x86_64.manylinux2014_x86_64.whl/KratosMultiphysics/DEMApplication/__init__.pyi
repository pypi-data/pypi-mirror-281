import Kratos
from typing import overload

DEM_BEAM_CONSTITUTIVE_LAW_POINTER: DEMBeamConstitutiveLawPointerVariable
DEM_CONTINUUM_CONSTITUTIVE_LAW_POINTER: DEMContinuumConstitutiveLawPointerVariable
DEM_DISCONTINUUM_CONSTITUTIVE_LAW_POINTER: DEMDiscontinuumConstitutiveLawPointerVariable
DEM_ROLLING_FRICTION_MODEL_POINTER: DEMRollingFrictionModelPointerVariable
DEM_ROTATIONAL_INTEGRATION_SCHEME_POINTER: DEMIntegrationSchemePointerVariable
DEM_TRANSLATIONAL_INTEGRATION_SCHEME_POINTER: DEMIntegrationSchemePointerVariable

class AnalyticFaceWatcher:
    def __init__(self, arg0: Kratos.ModelPart) -> None: ...
    def ClearData(self) -> None: ...
    def GetTotalFlux(self, arg0: list, arg1: list, arg2: list, arg3: list, arg4: list) -> None: ...
    def MakeMeasurements(self) -> None: ...

class AnalyticModelPartFiller:
    def __init__(self) -> None: ...
    def FillAnalyticModelPartGivenFractionOfParticlesToTransform(self, fraction_of_particles_to_convert: float, spheres_model_part: Kratos.ModelPart, particle_creator_destructor: ParticleCreatorDestructor, analytic_sub_model_part_name: str = ...) -> None: ...

class AnalyticParticleWatcher:
    def __init__(self) -> None: ...
    def MakeMeasurements(self, arg0: Kratos.ModelPart) -> None: ...
    def SetNodalMaxFaceImpactVelocities(self, arg0: Kratos.ModelPart) -> None: ...
    def SetNodalMaxImpactVelocities(self, arg0: Kratos.ModelPart) -> None: ...

class AnalyticWatcher:
    def __init__(self) -> None: ...

class ApplyForcesAndMomentsProcess(Kratos.Process):
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Parameters) -> None: ...

class ApplyKinematicConstraintsProcess(Kratos.Process):
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Parameters) -> None: ...

class AutomaticDTProcess(Kratos.Process):
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Parameters) -> None: ...

class AuxiliaryUtilities:
    def __init__(self) -> None: ...
    def ComputeAverageZStressFor2D(self, arg0: Kratos.ModelPart) -> float: ...
    def UpdateTimeInOneModelPart(self, arg0: Kratos.ModelPart, arg1: float, arg2: float, arg3: bool) -> None: ...

class ContinuumExplicitSolverStrategy(ExplicitSolverStrategy):
    def __init__(self, arg0: ExplicitSolverSettings, arg1: float, arg2: int, arg3: float, arg4: int, arg5, arg6, arg7: Kratos.SpatialSearch, arg8: Kratos.Parameters) -> None: ...
    def BreakAllBonds(self) -> None: ...
    def ComputeCoordinationNumber(self, arg0: float) -> float: ...
    def ComputeSkin(self, arg0: Kratos.ModelPart, arg1: float) -> None: ...
    def HealAllBonds(self) -> None: ...
    def RebuildListOfContinuumSphericParticles(self) -> None: ...

class ContinuumVelocityVerletSolverStrategy(ContinuumExplicitSolverStrategy):
    def __init__(self, arg0: ExplicitSolverSettings, arg1: float, arg2: float, arg3: float, arg4: int, arg5, arg6, arg7: Kratos.SpatialSearch, arg8: Kratos.Parameters) -> None: ...

class ControlModule2DProcess(Kratos.Process):
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Parameters) -> None: ...

class DEMBeamConstitutiveLaw:
    def __init__(self) -> None: ...
    def CheckRequirementsOfStressTensor(self) -> bool: ...
    def Clone(self) -> DEMBeamConstitutiveLaw: ...
    def GetTypeOfLaw(self) -> str: ...
    def SetConstitutiveLawInProperties(self, arg0: Kratos.Properties, arg1: bool) -> None: ...

class DEMBeamConstitutiveLawPointerVariable:
    def __init__(self, *args, **kwargs) -> None: ...

class DEMContinuumConstitutiveLaw:
    def __init__(self) -> None: ...
    def CheckRequirementsOfStressTensor(self) -> bool: ...
    def Clone(self) -> DEMContinuumConstitutiveLaw: ...
    def GetTypeOfLaw(self) -> str: ...
    def SetConstitutiveLawInProperties(self, arg0: Kratos.Properties, arg1: bool) -> None: ...
    def SetConstitutiveLawInPropertiesWithParameters(self, arg0: Kratos.Properties, arg1: Kratos.Parameters, arg2: bool) -> None: ...

class DEMContinuumConstitutiveLawPointerVariable:
    def __init__(self, *args, **kwargs) -> None: ...

class DEMDiscontinuumConstitutiveLaw:
    def __init__(self) -> None: ...
    def Clone(self) -> DEMDiscontinuumConstitutiveLaw: ...
    def GetTypeOfLaw(self) -> str: ...
    def SetConstitutiveLawInProperties(self, arg0: Kratos.Properties, arg1: bool) -> None: ...

class DEMDiscontinuumConstitutiveLawPointerVariable:
    def __init__(self, *args, **kwargs) -> None: ...

class DEMFEMUtilities:
    def __init__(self) -> None: ...
    def CreateRigidFacesFromAllElements(self, arg0: Kratos.ModelPart, arg1: Kratos.Properties) -> None: ...
    def MoveAllMeshes(self, arg0: Kratos.ModelPart, arg1: float, arg2: float) -> None: ...

class DEMIntegrationScheme:
    def __init__(self) -> None: ...
    def SetRotationalIntegrationSchemeInProperties(self, arg0: Kratos.Properties, arg1: bool) -> None: ...
    def SetTranslationalIntegrationSchemeInProperties(self, arg0: Kratos.Properties, arg1: bool) -> None: ...

class DEMIntegrationSchemePointerVariable:
    def __init__(self, *args, **kwargs) -> None: ...

class DEMIntegrationSchemeRawPointerVariable:
    def __init__(self, *args, **kwargs) -> None: ...

class DEMRollingFrictionModel:
    def __init__(self) -> None: ...
    def Clone(self) -> DEMRollingFrictionModel: ...
    def SetAPrototypeOfThisInProperties(self, arg0: Kratos.Properties, arg1: bool) -> None: ...

class DEMRollingFrictionModelBounded(DEMRollingFrictionModel):
    def __init__(self) -> None: ...

class DEMRollingFrictionModelConstantTorque(DEMRollingFrictionModel):
    def __init__(self) -> None: ...

class DEMRollingFrictionModelPointerVariable:
    def __init__(self, *args, **kwargs) -> None: ...

class DEMRollingFrictionModelViscousTorque(DEMRollingFrictionModel):
    def __init__(self) -> None: ...

class DEM_D_Bentonite_Colloid(DEMDiscontinuumConstitutiveLaw):
    def __init__(self) -> None: ...

class DEM_D_Conical_damage(DEMDiscontinuumConstitutiveLaw):
    def __init__(self) -> None: ...

class DEM_D_Hertz_confined(DEM_D_Hertz_viscous_Coulomb):
    def __init__(self) -> None: ...

class DEM_D_Hertz_viscous_Coulomb(DEMDiscontinuumConstitutiveLaw):
    def __init__(self) -> None: ...

class DEM_D_Hertz_viscous_Coulomb2D(DEM_D_Hertz_viscous_Coulomb):
    def __init__(self) -> None: ...

class DEM_D_Hertz_viscous_Coulomb_DMT(DEM_D_Hertz_viscous_Coulomb):
    def __init__(self) -> None: ...

class DEM_D_Hertz_viscous_Coulomb_JKR(DEM_D_Hertz_viscous_Coulomb):
    def __init__(self) -> None: ...

class DEM_D_Hertz_viscous_Coulomb_Nestle(DEM_D_Hertz_viscous_Coulomb):
    def __init__(self) -> None: ...

class DEM_D_Linear_Custom_Constants(DEM_D_Linear_viscous_Coulomb):
    def __init__(self) -> None: ...

class DEM_D_Linear_HighStiffness(DEMDiscontinuumConstitutiveLaw):
    def __init__(self) -> None: ...

class DEM_D_Linear_HighStiffness_2D(DEMDiscontinuumConstitutiveLaw):
    def __init__(self) -> None: ...

class DEM_D_Linear_classic(DEMDiscontinuumConstitutiveLaw):
    def __init__(self) -> None: ...

class DEM_D_Linear_confined(DEM_D_Linear_viscous_Coulomb):
    def __init__(self) -> None: ...

class DEM_D_Linear_viscous_Coulomb(DEMDiscontinuumConstitutiveLaw):
    def __init__(self) -> None: ...

class DEM_D_Linear_viscous_Coulomb2D(DEM_D_Linear_viscous_Coulomb):
    def __init__(self) -> None: ...

class DEM_D_Linear_viscous_Coulomb_DMT(DEM_D_Linear_viscous_Coulomb):
    def __init__(self) -> None: ...

class DEM_D_Linear_viscous_Coulomb_JKR(DEM_D_Linear_viscous_Coulomb):
    def __init__(self) -> None: ...

class DEM_D_Quadratic(DEMDiscontinuumConstitutiveLaw):
    def __init__(self) -> None: ...

class DEM_D_Stress_Dependent_Cohesive(DEMDiscontinuumConstitutiveLaw):
    def __init__(self) -> None: ...

class DEM_D_void(DEMDiscontinuumConstitutiveLaw):
    def __init__(self) -> None: ...

class DEM_Dempack(DEMContinuumConstitutiveLaw):
    def __init__(self) -> None: ...

class DEM_Dempack2D(DEM_Dempack):
    def __init__(self) -> None: ...

class DEM_Dempack2D_dev(DEM_Dempack_dev):
    def __init__(self) -> None: ...

class DEM_Dempack_dev(DEM_Dempack):
    def __init__(self) -> None: ...

class DEM_Dempack_torque(DEM_Dempack):
    def __init__(self) -> None: ...

class DEM_ExponentialHC(DEMContinuumConstitutiveLaw):
    def __init__(self) -> None: ...

class DEM_FEM_Search:
    def __init__(self) -> None: ...
    def GetBBHighPoint(self) -> Kratos.Array3: ...
    def GetBBLowPoint(self) -> Kratos.Array3: ...

class DEM_Force_Based_Inlet(DEM_Inlet):
    @overload
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Array3, arg2: int) -> None: ...
    @overload
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Array3) -> None: ...

class DEM_Inlet:
    @overload
    def __init__(self, arg0: Kratos.ModelPart) -> None: ...
    @overload
    def __init__(self, arg0: Kratos.ModelPart, arg1: int) -> None: ...
    @overload
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.Parameters, arg2: int) -> None: ...
    def CreateElementsFromInletMesh(self, arg0: Kratos.ModelPart, arg1: Kratos.ModelPart, arg2: ParticleCreatorDestructor) -> None: ...
    def GetMaxRadius(self, arg0: Kratos.ModelPart) -> float: ...
    def GetTotalMassInjectedSoFar(self) -> float: ...
    def GetTotalNumberOfParticlesInjectedSoFar(self) -> int: ...
    def InitializeDEM_Inlet(self, model_part: Kratos.ModelPart, creator_destructor: ParticleCreatorDestructor, using_strategy_for_continuum: bool = ...) -> None: ...

class DEM_KDEM(DEMContinuumConstitutiveLaw):
    def __init__(self) -> None: ...

class DEM_KDEM2D(DEM_KDEM):
    def __init__(self) -> None: ...

class DEM_KDEMFabric(DEM_KDEM):
    def __init__(self) -> None: ...

class DEM_KDEMFabric2D(DEM_KDEM2D):
    def __init__(self) -> None: ...

class DEM_KDEM_CamClay(DEM_KDEM_Rankine):
    def __init__(self) -> None: ...

class DEM_KDEM_Fissured_Rock(DEM_KDEM_Rankine):
    def __init__(self) -> None: ...

class DEM_KDEM_Mohr_Coulomb(DEM_KDEM_Rankine):
    def __init__(self) -> None: ...

class DEM_KDEM_Rankine(DEM_KDEM):
    def __init__(self) -> None: ...

class DEM_KDEM_soft_torque(DEM_KDEM):
    def __init__(self) -> None: ...

class DEM_KDEM_soft_torque_with_noise(DEM_KDEM_soft_torque):
    def __init__(self) -> None: ...

class DEM_KDEM_with_damage(DEM_KDEM_soft_torque):
    def __init__(self) -> None: ...

class DEM_KDEM_with_damage_parallel_bond(DEM_KDEM_with_damage):
    def __init__(self) -> None: ...

class DEM_KDEM_with_damage_parallel_bond_2D(DEM_KDEM_with_damage_parallel_bond):
    def __init__(self) -> None: ...

class DEM_KDEM_with_damage_parallel_bond_Hertz(DEM_KDEM_with_damage_parallel_bond):
    def __init__(self) -> None: ...

class DEM_KDEM_with_damage_parallel_bond_Hertz_2D(DEM_KDEM_with_damage_parallel_bond_Hertz):
    def __init__(self) -> None: ...

class DEM_KDEM_with_damage_parallel_bond_capped(DEM_KDEM_with_damage_parallel_bond):
    def __init__(self) -> None: ...

class DEM_parallel_bond(DEMContinuumConstitutiveLaw):
    def __init__(self) -> None: ...

class DEM_parallel_bond_Hertz(DEM_parallel_bond):
    def __init__(self) -> None: ...

class DEM_parallel_bond_Linear(DEM_parallel_bond):
    def __init__(self) -> None: ...

class DEM_parallel_bond_Quadratic(DEM_parallel_bond):
    def __init__(self) -> None: ...

class DEM_parallel_bond_for_membrane(DEMContinuumConstitutiveLaw):
    def __init__(self) -> None: ...

class DEM_smooth_joint(DEMContinuumConstitutiveLaw):
    def __init__(self) -> None: ...

class DemSearchUtilities:
    def __init__(self, arg0: Kratos.SpatialSearch) -> None: ...
    @overload
    def SearchNodeNeighboursDistances(self, arg0: Kratos.ModelPart, arg1: Kratos.ModelPart, arg2: float, arg3: Kratos.DoubleVariable) -> None: ...
    @overload
    def SearchNodeNeighboursDistances(self, arg0: Kratos.NodesArray, arg1: Kratos.ModelPart, arg2: float, arg3: Kratos.DoubleVariable) -> None: ...
    @overload
    def SearchNodeNeighboursDistances(self, arg0: Kratos.ModelPart, arg1: Kratos.NodesArray, arg2: float, arg3: Kratos.DoubleVariable) -> None: ...
    @overload
    def SearchNodeNeighboursDistances(self, arg0: Kratos.NodesArray, arg1: Kratos.NodesArray, arg2: float, arg3: Kratos.DoubleVariable) -> None: ...

class DiscreteRandomVariable(RandomVariable):
    @overload
    def __init__(self, arg0: Kratos.Parameters) -> None: ...
    @overload
    def __init__(self, arg0: Kratos.Parameters, arg1: int) -> None: ...
    def GetMean(self) -> float: ...
    def ProbabilityDensity(self, arg0: float) -> float: ...
    def Sample(self) -> float: ...

class DoubleList:
    def __init__(self) -> None: ...

class ExcavatorUtility:
    def __init__(self, arg0: Kratos.ModelPart, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float, arg10: float, arg11: float, arg12: float, arg13: float) -> None: ...
    def ExecuteInitializeSolutionStep(self) -> None: ...

class ExplicitSolverSettings:
    cluster_model_part: Kratos.ModelPart
    contact_model_part: Kratos.ModelPart
    fem_model_part: Kratos.ModelPart
    inlet_model_part: Kratos.ModelPart
    r_model_part: Kratos.ModelPart
    def __init__(self) -> None: ...

class ExplicitSolverStrategy:
    def __init__(self, arg0: ExplicitSolverSettings, arg1: float, arg2: int, arg3: float, arg4: int, arg5, arg6, arg7: Kratos.SpatialSearch, arg8: Kratos.Parameters) -> None: ...
    def AttachSpheresToStickyWalls(self) -> None: ...
    def ComputeCoordinationNumber(self, arg0: float) -> float: ...
    def FinalizeSolutionStep(self) -> None: ...
    def Initialize(self) -> None: ...
    def InitializeSolutionStep(self) -> None: ...
    def PrepareContactElementsForPrinting(self) -> None: ...
    def PrepareElementsForPrinting(self) -> None: ...
    def RebuildListOfDiscontinuumSphericParticles(self) -> None: ...
    def ResetPrescribedMotionFlagsRespectingImposedDofs(self) -> None: ...
    def SearchDemNeighbours(self, arg0: Kratos.ModelPart, arg1: bool) -> None: ...
    def SearchFemNeighbours(self, arg0: Kratos.ModelPart, arg1: bool) -> None: ...
    def SetNormalRadiiOnAllParticles(self, arg0: Kratos.ModelPart) -> None: ...
    def SetSearchRadiiOnAllParticles(self, arg0: Kratos.ModelPart, arg1: float, arg2: float) -> None: ...
    def SetSearchRadiiWithFemOnAllParticles(self, arg0: Kratos.ModelPart, arg1: float, arg2: float) -> None: ...
    def SolveSolutionStep(self) -> float: ...

class ForwardEulerScheme(DEMIntegrationScheme):
    def __init__(self) -> None: ...

class IntList:
    def __init__(self) -> None: ...

class IterativeSolverStrategy(ExplicitSolverStrategy):
    def __init__(self, arg0: ExplicitSolverSettings, arg1: float, arg2: float, arg3: float, arg4: int, arg5, arg6, arg7: Kratos.SpatialSearch, arg8: Kratos.Parameters) -> None: ...

class KratosDEMApplication(Kratos.KratosApplication):
    def __init__(self) -> None: ...

class MoveMeshUtility:
    def __init__(self) -> None: ...
    def MoveDemMesh(self, arg0: Kratos.NodesArray, arg1: bool) -> None: ...

class MultiaxialControlModuleGeneralized2DUtilities:
    def __init__(self, arg0: Kratos.ModelPart, arg1: Kratos.ModelPart, arg2: Kratos.Parameters) -> None: ...
    def ExecuteFinalizeSolutionStep(self) -> None: ...
    def ExecuteInitialize(self) -> None: ...
    def ExecuteInitializeSolutionStep(self) -> None: ...

class OMP_DEMSearch(Kratos.SpatialSearch):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, min_x: float, min_y: float, min_z: float, max_x: float, max_y: float, max_z: float) -> None: ...
    def SearchNodesInRadiusExclusive(self, arg0: Kratos.NodesArray, arg1: Kratos.NodesArray, arg2: list, arg3: VectorResultNodesContainer, arg4: VectorDistances, arg5: list, arg6: list) -> None: ...

class ParallelBondUtilities:
    def __init__(self) -> None: ...
    def SetCurrentIndentationAsAReferenceInParallelBonds(self, arg0: Kratos.ModelPart) -> None: ...
    def SetCurrentIndentationAsAReferenceInParallelBondsForPBM(self, arg0: Kratos.ModelPart) -> None: ...

class ParticleCreatorDestructor:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Kratos.Parameters) -> None: ...
    @overload
    def __init__(self, arg0) -> None: ...
    @overload
    def __init__(self, arg0, arg1: Kratos.Parameters) -> None: ...
    def CalculateSurroundingBoundingBox(self, arg0: Kratos.ModelPart, arg1: Kratos.ModelPart, arg2: Kratos.ModelPart, arg3: Kratos.ModelPart, arg4: float, arg5: bool) -> None: ...
    @overload
    def CreateSphericParticle(self, arg0: Kratos.ModelPart, arg1: int, arg2: Kratos.Array3, arg3: Kratos.Properties, arg4: float, arg5: Kratos.Element) -> Kratos.Element: ...
    @overload
    def CreateSphericParticle(self, arg0: Kratos.ModelPart, arg1: int, arg2: Kratos.Node, arg3: Kratos.Properties, arg4: float, arg5: Kratos.Element) -> Kratos.Element: ...
    @overload
    def CreateSphericParticle(self, arg0: Kratos.ModelPart, arg1: int, arg2: Kratos.Node, arg3: Kratos.Properties, arg4: float, arg5: str) -> Kratos.Element: ...
    @overload
    def CreateSphericParticle(self, arg0: Kratos.ModelPart, arg1: Kratos.Node, arg2: Kratos.Properties, arg3: float, arg4: str) -> Kratos.Element: ...
    @overload
    def CreateSphericParticle(self, arg0: Kratos.ModelPart, arg1: int, arg2: Kratos.Array3, arg3: Kratos.Properties, arg4: float, arg5: str) -> Kratos.Element: ...
    @overload
    def CreateSphericParticle(self, arg0: Kratos.ModelPart, arg1: Kratos.Array3, arg2: Kratos.Properties, arg3: float, arg4: str) -> Kratos.Element: ...
    def DestroyContactElements(self, arg0: Kratos.ModelPart) -> None: ...
    def DestroyContactElementsOutsideBoundingBox(self, arg0: Kratos.ModelPart, arg1: Kratos.ModelPart) -> None: ...
    def DestroyMarkedParticles(self, arg0: Kratos.ModelPart) -> None: ...
    @overload
    def DestroyParticlesOutsideBoundingBox(self, arg0: Kratos.ModelPart) -> None: ...
    @overload
    def DestroyParticlesOutsideBoundingBox(self, arg0: Kratos.ModelPart) -> None: ...
    def FindMaxConditionIdInModelPart(self, arg0: Kratos.ModelPart) -> int: ...
    def FindMaxElementIdInModelPart(self, arg0: Kratos.ModelPart) -> int: ...
    def FindMaxNodeIdInModelPart(self, arg0: Kratos.ModelPart) -> int: ...
    def GetDiameter(self) -> float: ...
    def GetHighNode(self) -> Kratos.Array3: ...
    def GetLowNode(self) -> Kratos.Array3: ...
    def MarkContactElementsForErasing(self, arg0: Kratos.ModelPart, arg1: Kratos.ModelPart) -> None: ...
    def MarkIsolatedParticlesForErasing(self, arg0: Kratos.ModelPart) -> None: ...
    @overload
    def MarkParticlesForErasingGivenBoundingBox(self, arg0: Kratos.ModelPart, arg1: Kratos.Array3, arg2: Kratos.Array3) -> None: ...
    @overload
    def MarkParticlesForErasingGivenBoundingBox(self, arg0: Kratos.ModelPart, arg1: Kratos.Array3, arg2: Kratos.Array3) -> None: ...
    def MarkParticlesForErasingGivenCylinder(self, arg0: Kratos.ModelPart, arg1: Kratos.Array3, arg2: Kratos.Array3, arg3: float) -> None: ...
    def MarkParticlesForErasingGivenScalarVariableValue(self, arg0: Kratos.ModelPart, arg1: Kratos.DoubleVariable, arg2: float, arg3: float) -> None: ...
    def MarkParticlesForErasingGivenVectorVariableModulus(self, arg0: Kratos.ModelPart, arg1: Kratos.Array1DVariable3, arg2: float, arg3: float) -> None: ...
    def RenumberElementIdsFromGivenValue(self, arg0: Kratos.ModelPart, arg1: int) -> None: ...
    def SetHighNode(self, arg0: Kratos.Array3) -> None: ...
    def SetLowNode(self, arg0: Kratos.Array3) -> None: ...
    def SetMaxNodeId(self, arg0: int) -> None: ...
    def UpdateSurroundingBoundingBox(self, arg0: Kratos.ModelPart) -> None: ...

class ParticlesHistoryWatcher(AnalyticWatcher):
    def __init__(self) -> None: ...
    def GetNewParticlesData(self, arg0: list[int], arg1: list[float], arg2: list[float], arg3: list[float], arg4: list[float], arg5: list[float]) -> None: ...

class PiecewiseLinearRandomVariable(RandomVariable):
    @overload
    def __init__(self, arg0: Kratos.Parameters) -> None: ...
    @overload
    def __init__(self, arg0: Kratos.Parameters, arg1: int) -> None: ...
    def GetMean(self) -> float: ...
    def ProbabilityDensity(self, arg0: float) -> float: ...
    def Sample(self) -> float: ...

class PostUtilities:
    def __init__(self) -> None: ...
    def AddModelPartToModelPart(self, arg0: Kratos.ModelPart, arg1: Kratos.ModelPart) -> None: ...
    def AddSpheresNotBelongingToClustersToMixModelPart(self, arg0: Kratos.ModelPart, arg1: Kratos.ModelPart) -> None: ...
    def ComputeEulerAngles(self, arg0: Kratos.ModelPart, arg1: Kratos.ModelPart) -> None: ...
    def ComputePoisson(self, arg0: Kratos.ModelPart) -> Kratos.Array3: ...
    def ComputePoisson2D(self, arg0: Kratos.ModelPart) -> Kratos.Array3: ...
    def IntegrationOfElasticForces(self, arg0: Kratos.NodesArray, arg1: Kratos.Array3) -> None: ...
    def IntegrationOfForces(self, arg0: Kratos.NodesArray, arg1: Kratos.Array3, arg2: Kratos.Array3, arg3: Kratos.Array3) -> None: ...
    def QuasiStaticAdimensionalNumber(self, arg0: Kratos.ModelPart, arg1: Kratos.ModelPart, arg2: Kratos.ProcessInfo) -> float: ...
    def VelocityTrap(self, arg0: Kratos.ModelPart, arg1: Kratos.Array3, arg2: Kratos.Array3) -> Kratos.Array3: ...

class PreUtilities:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Kratos.ModelPart) -> None: ...
    def ApplyConcentricForceOnParticles(self, arg0: Kratos.ModelPart, arg1: Kratos.Array3, arg2: float) -> None: ...
    def BreakBondUtility(self, arg0: Kratos.ModelPart) -> None: ...
    def CreateCartesianSpecimenMdpa(self, arg0: str) -> None: ...
    def FillAnalyticSubModelPartUtility(self, arg0: Kratos.ModelPart, arg1: Kratos.ModelPart) -> None: ...
    def MarkToEraseParticlesOutsideBoundary(self, arg0: Kratos.ModelPart, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float) -> None: ...
    def MarkToEraseParticlesOutsideRadius(self, arg0: Kratos.ModelPart, arg1: float, arg2: Kratos.Array3, arg3: float) -> None: ...
    def MarkToEraseParticlesOutsideRadiusForGettingCylinder(self, arg0: Kratos.ModelPart, arg1: float, arg2: Kratos.Array3, arg3: float) -> None: ...
    def MeasureBotHeigh(self, arg0: Kratos.ModelPart) -> list: ...
    def MeasureTopHeigh(self, arg0: Kratos.ModelPart) -> list: ...
    def PrintNumberOfNeighboursHistogram(self, arg0: Kratos.ModelPart, arg1: str) -> None: ...
    def ResetSkinParticles(self, arg0: Kratos.ModelPart) -> None: ...
    def SetClusterInformationInProperties(self, arg0: str, arg1: list, arg2: list, arg3: float, arg4: float, arg5: list, arg6: Kratos.Properties) -> None: ...
    def SetSkinParticlesInnerCircularBoundary(self, arg0: Kratos.ModelPart, arg1: float, arg2: float) -> None: ...
    def SetSkinParticlesOuterCircularBoundary(self, arg0: Kratos.ModelPart, arg1: float, arg2: float) -> None: ...
    def SetSkinParticlesOuterSquaredBoundary(self, arg0: Kratos.ModelPart, arg1: float, arg2: Kratos.Array3, arg3: float) -> None: ...

class PropertiesProxiesManager:
    def __init__(self) -> None: ...
    @overload
    def CreatePropertiesProxies(self, arg0: Kratos.ModelPart) -> None: ...
    @overload
    def CreatePropertiesProxies(self, arg0: Kratos.ModelPart, arg1: Kratos.ModelPart, arg2: Kratos.ModelPart) -> None: ...

class QuaternionIntegrationScheme(DEMIntegrationScheme):
    def __init__(self) -> None: ...

class RandomVariable:
    def __init__(self, arg0: Kratos.Parameters) -> None: ...
    def GetSupport(self, *args, **kwargs): ...

class ReorderConsecutiveFromGivenIdsModelPartIO(Kratos.ReorderConsecutiveModelPartIO):
    @overload
    def __init__(self, arg0: str) -> None: ...
    @overload
    def __init__(self, arg0: str, arg1: int, arg2: int, arg3: int) -> None: ...
    @overload
    def __init__(self, arg0: str, arg1: int, arg2: int, arg3: int, arg4: Kratos.Flags) -> None: ...

class RungeKuttaScheme(DEMIntegrationScheme):
    def __init__(self) -> None: ...

class SphericElementGlobalPhysicsCalculator:
    def __init__(self, arg0: Kratos.ModelPart) -> None: ...
    def CalculateCenterOfMass(self, arg0: Kratos.ModelPart) -> Kratos.Array3: ...
    def CalculateD50(self, arg0: Kratos.ModelPart) -> float: ...
    def CalculateElasticEnergy(self, arg0: Kratos.ModelPart) -> float: ...
    def CalculateGravitationalPotentialEnergy(self, arg0: Kratos.ModelPart, arg1: Kratos.Array3) -> float: ...
    def CalculateInelasticFrictionalEnergy(self, arg0: Kratos.ModelPart) -> float: ...
    def CalculateInelasticRollingResistanceEnergy(self, arg0: Kratos.ModelPart) -> float: ...
    def CalculateInelasticViscodampingEnergy(self, arg0: Kratos.ModelPart) -> float: ...
    def CalculateMaxNodalVariable(self, arg0: Kratos.ModelPart, arg1: Kratos.DoubleVariable) -> float: ...
    def CalculateMinNodalVariable(self, arg0: Kratos.ModelPart, arg1: Kratos.DoubleVariable) -> float: ...
    def CalculateRotationalKinematicEnergy(self, arg0: Kratos.ModelPart) -> float: ...
    def CalculateSumOfInternalForces(self, arg0: Kratos.ModelPart) -> Kratos.Array3: ...
    def CalculateTotalMass(self, arg0: Kratos.ModelPart) -> float: ...
    def CalculateTotalMomentum(self, arg0: Kratos.ModelPart) -> Kratos.Array3: ...
    def CalculateTotalVolume(self, arg0: Kratos.ModelPart) -> float: ...
    def CalculateTranslationalKinematicEnergy(self, arg0: Kratos.ModelPart) -> float: ...
    def CalulateTotalAngularMomentum(self, arg0: Kratos.ModelPart) -> Kratos.Array3: ...
    def GetInitialCenterOfMass(self) -> Kratos.Array3: ...

class StationarityChecker:
    def __init__(self) -> None: ...
    def CheckIfItsTimeToChangeGravity(self, arg0: Kratos.ModelPart, arg1: float, arg2: float, arg3: float) -> bool: ...
    def CheckIfVariableIsNullInModelPart(self, arg0: Kratos.ModelPart, arg1: Kratos.DoubleVariable, arg2: float, arg3: bool) -> bool: ...

class SymplecticEulerScheme(DEMIntegrationScheme):
    def __init__(self) -> None: ...

class TaylorScheme(DEMIntegrationScheme):
    def __init__(self) -> None: ...

class VectorDistances:
    def __init__(self) -> None: ...

class VectorResultNodesContainer:
    def __init__(self) -> None: ...

class VelocityVerletScheme(DEMIntegrationScheme):
    def __init__(self) -> None: ...

class VelocityVerletSolverStrategy(ExplicitSolverStrategy):
    def __init__(self, arg0: ExplicitSolverSettings, arg1: float, arg2: float, arg3: float, arg4: int, arg5, arg6, arg7: Kratos.SpatialSearch, arg8: Kratos.Parameters) -> None: ...

# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _TwoProjectionRegistrationPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkSiddonJacobsRayCastInterpolateImageFunctionPython
else:
    import _itkSiddonJacobsRayCastInterpolateImageFunctionPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkInterpolateImageFunctionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkPointPython
import itk.itkRGBPixelPython
import itk.itkContinuousIndexPython
import itk.itkRGBAPixelPython
import itk.itkImageFunctionBasePython
import itk.itkFunctionBasePython
import itk.itkArrayPython
import itk.itkImagePython
import itk.itkImageRegionPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkEuler3DTransformPython
import itk.itkOptimizerParametersPython
import itk.itkRigid3DTransformPython
import itk.itkMatrixOffsetTransformBasePython
import itk.itkDiffusionTensor3DPython
import itk.itkArray2DPython
import itk.itkVariableLengthVectorPython
import itk.itkTransformBasePython

def itkSiddonJacobsRayCastInterpolateImageFunctionID3D_New():
    return itkSiddonJacobsRayCastInterpolateImageFunctionID3D.New()

class itkSiddonJacobsRayCastInterpolateImageFunctionID3D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID3D):
    r"""Proxy of C++ itkSiddonJacobsRayCastInterpolateImageFunctionID3D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSiddonJacobsRayCastInterpolateImageFunctionID3D_Pointer"""
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionID3D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSiddonJacobsRayCastInterpolateImageFunctionID3D_Pointer"""
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionID3D_Clone(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionID3D_Initialize(self)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkEuler3DTransformD *

        """
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionID3D_SetTransform(self, _arg)

    def GetTransform(self):
        r"""GetTransform(self) -> itkEuler3DTransformD"""
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionID3D_GetTransform(self)

    def SetFocalPointToIsocenterDistance(self, _arg):
        r"""
        SetFocalPointToIsocenterDistance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionID3D_SetFocalPointToIsocenterDistance(self, _arg)

    def GetFocalPointToIsocenterDistance(self):
        r"""GetFocalPointToIsocenterDistance(self) -> double"""
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionID3D_GetFocalPointToIsocenterDistance(self)

    def SetProjectionAngle(self, _arg):
        r"""
        SetProjectionAngle(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionID3D_SetProjectionAngle(self, _arg)

    def GetProjectionAngle(self):
        r"""GetProjectionAngle(self) -> double"""
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionID3D_GetProjectionAngle(self)

    def SetThreshold(self, _arg):
        r"""
        SetThreshold(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionID3D_SetThreshold(self, _arg)

    def GetThreshold(self):
        r"""GetThreshold(self) -> double"""
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionID3D_GetThreshold(self)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkPointD3 const &

        IsInsideBuffer(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkContinuousIndexD3 const &

        IsInsideBuffer(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkIndex3 const &

        """
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionID3D_IsInsideBuffer(self, *args)
    __swig_destroy__ = _itkSiddonJacobsRayCastInterpolateImageFunctionPython.delete_itkSiddonJacobsRayCastInterpolateImageFunctionID3D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSiddonJacobsRayCastInterpolateImageFunctionID3D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionID3D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSiddonJacobsRayCastInterpolateImageFunctionID3D

        Create a new object of the class itkSiddonJacobsRayCastInterpolateImageFunctionID3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSiddonJacobsRayCastInterpolateImageFunctionID3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSiddonJacobsRayCastInterpolateImageFunctionID3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSiddonJacobsRayCastInterpolateImageFunctionID3D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSiddonJacobsRayCastInterpolateImageFunctionID3D in _itkSiddonJacobsRayCastInterpolateImageFunctionPython:
_itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionID3D_swigregister(itkSiddonJacobsRayCastInterpolateImageFunctionID3D)

def itkSiddonJacobsRayCastInterpolateImageFunctionIF3D_New():
    return itkSiddonJacobsRayCastInterpolateImageFunctionIF3D.New()

class itkSiddonJacobsRayCastInterpolateImageFunctionIF3D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF3D):
    r"""Proxy of C++ itkSiddonJacobsRayCastInterpolateImageFunctionIF3D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSiddonJacobsRayCastInterpolateImageFunctionIF3D_Pointer"""
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionIF3D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSiddonJacobsRayCastInterpolateImageFunctionIF3D_Pointer"""
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionIF3D_Clone(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionIF3D_Initialize(self)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkEuler3DTransformD *

        """
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionIF3D_SetTransform(self, _arg)

    def GetTransform(self):
        r"""GetTransform(self) -> itkEuler3DTransformD"""
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionIF3D_GetTransform(self)

    def SetFocalPointToIsocenterDistance(self, _arg):
        r"""
        SetFocalPointToIsocenterDistance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionIF3D_SetFocalPointToIsocenterDistance(self, _arg)

    def GetFocalPointToIsocenterDistance(self):
        r"""GetFocalPointToIsocenterDistance(self) -> double"""
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionIF3D_GetFocalPointToIsocenterDistance(self)

    def SetProjectionAngle(self, _arg):
        r"""
        SetProjectionAngle(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionIF3D_SetProjectionAngle(self, _arg)

    def GetProjectionAngle(self):
        r"""GetProjectionAngle(self) -> double"""
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionIF3D_GetProjectionAngle(self)

    def SetThreshold(self, _arg):
        r"""
        SetThreshold(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionIF3D_SetThreshold(self, _arg)

    def GetThreshold(self):
        r"""GetThreshold(self) -> double"""
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionIF3D_GetThreshold(self)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkPointD3 const &

        IsInsideBuffer(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkContinuousIndexD3 const &

        IsInsideBuffer(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkIndex3 const &

        """
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionIF3D_IsInsideBuffer(self, *args)
    __swig_destroy__ = _itkSiddonJacobsRayCastInterpolateImageFunctionPython.delete_itkSiddonJacobsRayCastInterpolateImageFunctionIF3D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSiddonJacobsRayCastInterpolateImageFunctionIF3D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionIF3D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSiddonJacobsRayCastInterpolateImageFunctionIF3D

        Create a new object of the class itkSiddonJacobsRayCastInterpolateImageFunctionIF3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSiddonJacobsRayCastInterpolateImageFunctionIF3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSiddonJacobsRayCastInterpolateImageFunctionIF3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSiddonJacobsRayCastInterpolateImageFunctionIF3D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSiddonJacobsRayCastInterpolateImageFunctionIF3D in _itkSiddonJacobsRayCastInterpolateImageFunctionPython:
_itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionIF3D_swigregister(itkSiddonJacobsRayCastInterpolateImageFunctionIF3D)

def itkSiddonJacobsRayCastInterpolateImageFunctionISS3D_New():
    return itkSiddonJacobsRayCastInterpolateImageFunctionISS3D.New()

class itkSiddonJacobsRayCastInterpolateImageFunctionISS3D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS3D):
    r"""Proxy of C++ itkSiddonJacobsRayCastInterpolateImageFunctionISS3D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSiddonJacobsRayCastInterpolateImageFunctionISS3D_Pointer"""
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionISS3D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSiddonJacobsRayCastInterpolateImageFunctionISS3D_Pointer"""
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionISS3D_Clone(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionISS3D_Initialize(self)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkEuler3DTransformD *

        """
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionISS3D_SetTransform(self, _arg)

    def GetTransform(self):
        r"""GetTransform(self) -> itkEuler3DTransformD"""
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionISS3D_GetTransform(self)

    def SetFocalPointToIsocenterDistance(self, _arg):
        r"""
        SetFocalPointToIsocenterDistance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionISS3D_SetFocalPointToIsocenterDistance(self, _arg)

    def GetFocalPointToIsocenterDistance(self):
        r"""GetFocalPointToIsocenterDistance(self) -> double"""
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionISS3D_GetFocalPointToIsocenterDistance(self)

    def SetProjectionAngle(self, _arg):
        r"""
        SetProjectionAngle(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionISS3D_SetProjectionAngle(self, _arg)

    def GetProjectionAngle(self):
        r"""GetProjectionAngle(self) -> double"""
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionISS3D_GetProjectionAngle(self)

    def SetThreshold(self, _arg):
        r"""
        SetThreshold(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionISS3D_SetThreshold(self, _arg)

    def GetThreshold(self):
        r"""GetThreshold(self) -> double"""
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionISS3D_GetThreshold(self)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkPointD3 const &

        IsInsideBuffer(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkContinuousIndexD3 const &

        IsInsideBuffer(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkIndex3 const &

        """
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionISS3D_IsInsideBuffer(self, *args)
    __swig_destroy__ = _itkSiddonJacobsRayCastInterpolateImageFunctionPython.delete_itkSiddonJacobsRayCastInterpolateImageFunctionISS3D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSiddonJacobsRayCastInterpolateImageFunctionISS3D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionISS3D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSiddonJacobsRayCastInterpolateImageFunctionISS3D

        Create a new object of the class itkSiddonJacobsRayCastInterpolateImageFunctionISS3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSiddonJacobsRayCastInterpolateImageFunctionISS3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSiddonJacobsRayCastInterpolateImageFunctionISS3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSiddonJacobsRayCastInterpolateImageFunctionISS3D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSiddonJacobsRayCastInterpolateImageFunctionISS3D in _itkSiddonJacobsRayCastInterpolateImageFunctionPython:
_itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionISS3D_swigregister(itkSiddonJacobsRayCastInterpolateImageFunctionISS3D)

def itkSiddonJacobsRayCastInterpolateImageFunctionIUC3D_New():
    return itkSiddonJacobsRayCastInterpolateImageFunctionIUC3D.New()

class itkSiddonJacobsRayCastInterpolateImageFunctionIUC3D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC3D):
    r"""Proxy of C++ itkSiddonJacobsRayCastInterpolateImageFunctionIUC3D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSiddonJacobsRayCastInterpolateImageFunctionIUC3D_Pointer"""
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionIUC3D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSiddonJacobsRayCastInterpolateImageFunctionIUC3D_Pointer"""
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionIUC3D_Clone(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionIUC3D_Initialize(self)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkEuler3DTransformD *

        """
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionIUC3D_SetTransform(self, _arg)

    def GetTransform(self):
        r"""GetTransform(self) -> itkEuler3DTransformD"""
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionIUC3D_GetTransform(self)

    def SetFocalPointToIsocenterDistance(self, _arg):
        r"""
        SetFocalPointToIsocenterDistance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionIUC3D_SetFocalPointToIsocenterDistance(self, _arg)

    def GetFocalPointToIsocenterDistance(self):
        r"""GetFocalPointToIsocenterDistance(self) -> double"""
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionIUC3D_GetFocalPointToIsocenterDistance(self)

    def SetProjectionAngle(self, _arg):
        r"""
        SetProjectionAngle(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionIUC3D_SetProjectionAngle(self, _arg)

    def GetProjectionAngle(self):
        r"""GetProjectionAngle(self) -> double"""
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionIUC3D_GetProjectionAngle(self)

    def SetThreshold(self, _arg):
        r"""
        SetThreshold(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionIUC3D_SetThreshold(self, _arg)

    def GetThreshold(self):
        r"""GetThreshold(self) -> double"""
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionIUC3D_GetThreshold(self)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkPointD3 const &

        IsInsideBuffer(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkContinuousIndexD3 const &

        IsInsideBuffer(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkIndex3 const &

        """
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionIUC3D_IsInsideBuffer(self, *args)
    __swig_destroy__ = _itkSiddonJacobsRayCastInterpolateImageFunctionPython.delete_itkSiddonJacobsRayCastInterpolateImageFunctionIUC3D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSiddonJacobsRayCastInterpolateImageFunctionIUC3D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionIUC3D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSiddonJacobsRayCastInterpolateImageFunctionIUC3D

        Create a new object of the class itkSiddonJacobsRayCastInterpolateImageFunctionIUC3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSiddonJacobsRayCastInterpolateImageFunctionIUC3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSiddonJacobsRayCastInterpolateImageFunctionIUC3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSiddonJacobsRayCastInterpolateImageFunctionIUC3D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSiddonJacobsRayCastInterpolateImageFunctionIUC3D in _itkSiddonJacobsRayCastInterpolateImageFunctionPython:
_itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionIUC3D_swigregister(itkSiddonJacobsRayCastInterpolateImageFunctionIUC3D)

def itkSiddonJacobsRayCastInterpolateImageFunctionIUS3D_New():
    return itkSiddonJacobsRayCastInterpolateImageFunctionIUS3D.New()

class itkSiddonJacobsRayCastInterpolateImageFunctionIUS3D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS3D):
    r"""Proxy of C++ itkSiddonJacobsRayCastInterpolateImageFunctionIUS3D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSiddonJacobsRayCastInterpolateImageFunctionIUS3D_Pointer"""
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionIUS3D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSiddonJacobsRayCastInterpolateImageFunctionIUS3D_Pointer"""
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionIUS3D_Clone(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionIUS3D_Initialize(self)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkEuler3DTransformD *

        """
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionIUS3D_SetTransform(self, _arg)

    def GetTransform(self):
        r"""GetTransform(self) -> itkEuler3DTransformD"""
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionIUS3D_GetTransform(self)

    def SetFocalPointToIsocenterDistance(self, _arg):
        r"""
        SetFocalPointToIsocenterDistance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionIUS3D_SetFocalPointToIsocenterDistance(self, _arg)

    def GetFocalPointToIsocenterDistance(self):
        r"""GetFocalPointToIsocenterDistance(self) -> double"""
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionIUS3D_GetFocalPointToIsocenterDistance(self)

    def SetProjectionAngle(self, _arg):
        r"""
        SetProjectionAngle(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionIUS3D_SetProjectionAngle(self, _arg)

    def GetProjectionAngle(self):
        r"""GetProjectionAngle(self) -> double"""
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionIUS3D_GetProjectionAngle(self)

    def SetThreshold(self, _arg):
        r"""
        SetThreshold(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionIUS3D_SetThreshold(self, _arg)

    def GetThreshold(self):
        r"""GetThreshold(self) -> double"""
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionIUS3D_GetThreshold(self)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkPointD3 const &

        IsInsideBuffer(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkContinuousIndexD3 const &

        IsInsideBuffer(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkIndex3 const &

        """
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionIUS3D_IsInsideBuffer(self, *args)
    __swig_destroy__ = _itkSiddonJacobsRayCastInterpolateImageFunctionPython.delete_itkSiddonJacobsRayCastInterpolateImageFunctionIUS3D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSiddonJacobsRayCastInterpolateImageFunctionIUS3D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionIUS3D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSiddonJacobsRayCastInterpolateImageFunctionIUS3D

        Create a new object of the class itkSiddonJacobsRayCastInterpolateImageFunctionIUS3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSiddonJacobsRayCastInterpolateImageFunctionIUS3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSiddonJacobsRayCastInterpolateImageFunctionIUS3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSiddonJacobsRayCastInterpolateImageFunctionIUS3D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSiddonJacobsRayCastInterpolateImageFunctionIUS3D in _itkSiddonJacobsRayCastInterpolateImageFunctionPython:
_itkSiddonJacobsRayCastInterpolateImageFunctionPython.itkSiddonJacobsRayCastInterpolateImageFunctionIUS3D_swigregister(itkSiddonJacobsRayCastInterpolateImageFunctionIUS3D)


# coding: utf-8

"""
    Glean Client API

    # Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

    The version of the OpenAPI document: 0.9.0
    Contact: support@glean.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from glean_client_api.models.announcement import Announcement

class TestAnnouncement(unittest.TestCase):
    """Announcement unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Announcement:
        """Test Announcement
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Announcement`
        """
        model = Announcement()
        if include_optional:
            return Announcement(
                start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                title = '',
                body = None,
                emoji = '',
                thumbnail = glean_client_api.models.thumbnail.Thumbnail(
                    photo_id = '', 
                    url = '', ),
                banner = glean_client_api.models.thumbnail.Thumbnail(
                    photo_id = '', 
                    url = '', ),
                audience_filters = [
                    {"fieldName":"type","values":[{"value":"Spreadsheet","relationType":"EQUALS"},{"value":"Presentation","relationType":"EQUALS"}]}
                    ],
                source_document_id = '',
                hide_attribution = True,
                channel = 'MAIN',
                post_type = 'TEXT',
                is_prioritized = True,
                view_url = '',
                draft_id = 56,
                permissions = glean_client_api.models.object_permissions.ObjectPermissions(
                    write = glean_client_api.models.write_permission.WritePermission(
                        scope_type = 'GLOBAL', 
                        create = True, 
                        update = True, 
                        delete = True, ), ),
                id = 56,
                author = {"name":"George Clooney","obfuscatedId":"abc123"},
                create_timestamp = 56,
                last_update_timestamp = 56,
                updated_by = {"name":"George Clooney","obfuscatedId":"abc123"},
                viewer_info = glean_client_api.models.announcement_all_of_viewer_info.Announcement_allOf_viewerInfo(
                    is_dismissed = True, 
                    is_read = True, ),
                source_document = glean_client_api.models.document.Document(
                    id = '', 
                    datasource = '', 
                    connector_type = 'API_CRAWL', 
                    doc_type = '', 
                    content = glean_client_api.models.document_content.DocumentContent(
                        full_text_list = [
                            ''
                            ], ), 
                    container_document = glean_client_api.models.document.Document(
                        id = '', 
                        datasource = '', 
                        doc_type = '', 
                        parent_document = , 
                        title = '', 
                        url = '', 
                        metadata = {"container":"container","parentId":"JIRA_EN-1337","createTime":"2000-01-23T04:56:07.000Z","datasource":"datasource","author":{"name":"name"},"documentId":"documentId","updateTime":"2000-01-23T04:56:07.000Z","mimeType":"mimeType","objectType":"Feature Request","components":["Backend","Networking"],"status":["Done"],"customData":{"someCustomField":"someCustomValue"}}, 
                        sections = [
                            glean_client_api.models.document_section.DocumentSection(
                                title = '', 
                                url = '', )
                            ], ), 
                    parent_document = , 
                    title = '', 
                    url = '', 
                    metadata = {"container":"container","parentId":"JIRA_EN-1337","createTime":"2000-01-23T04:56:07.000Z","datasource":"datasource","author":{"name":"name"},"documentId":"documentId","updateTime":"2000-01-23T04:56:07.000Z","mimeType":"mimeType","objectType":"Feature Request","components":["Backend","Networking"],"status":["Done"],"customData":{"someCustomField":"someCustomValue"}}, 
                    sections = [
                        glean_client_api.models.document_section.DocumentSection(
                            title = '', 
                            url = '', )
                        ], ),
                is_published = True
            )
        else:
            return Announcement(
        )
        """

    def testAnnouncement(self):
        """Test Announcement"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

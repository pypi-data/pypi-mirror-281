# coding: utf-8

"""
    Glean Client API

    # Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

    The version of the OpenAPI document: 0.9.0
    Contact: support@glean.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from glean_client_api.models.document_metadata import DocumentMetadata

class TestDocumentMetadata(unittest.TestCase):
    """DocumentMetadata unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DocumentMetadata:
        """Test DocumentMetadata
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DocumentMetadata`
        """
        model = DocumentMetadata()
        if include_optional:
            return DocumentMetadata(
                datasource = '',
                datasource_instance = '',
                object_type = '',
                container = '',
                container_id = '',
                super_container_id = '',
                parent_id = '',
                mime_type = '',
                document_id = '',
                document_id_hash = '',
                create_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                update_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                author = {"name":"George Clooney","obfuscatedId":"abc123"},
                owner = {"name":"George Clooney","obfuscatedId":"abc123"},
                visibility = 'PRIVATE',
                components = [
                    ''
                    ],
                status = '',
                status_category = '',
                pins = [
                    null
                    ],
                priority = '',
                assigned_to = {"name":"George Clooney","obfuscatedId":"abc123"},
                updated_by = {"name":"George Clooney","obfuscatedId":"abc123"},
                labels = [
                    ''
                    ],
                collections = [
                    null
                    ],
                datasource_id = '',
                interactions = glean_client_api.models.document_interactions.DocumentInteractions(
                    num_comments = 56, 
                    num_reactions = 56, 
                    reactions = [
                        ''
                        ], 
                    reacts = [
                        glean_client_api.models.reaction.Reaction(
                            type = '', 
                            count = 56, 
                            reactors = [
                                {"name":"George Clooney","obfuscatedId":"abc123"}
                                ], 
                            reacted_by_viewer = True, )
                        ], 
                    shares = [
                        glean_client_api.models.share.Share(
                            num_days_ago = 56, 
                            sharer = {"name":"George Clooney","obfuscatedId":"abc123"}, 
                            sharing_document = glean_client_api.models.document.Document(
                                id = '', 
                                datasource = '', 
                                connector_type = 'API_CRAWL', 
                                doc_type = '', 
                                content = glean_client_api.models.document_content.DocumentContent(
                                    full_text_list = [
                                        ''
                                        ], ), 
                                container_document = glean_client_api.models.document.Document(
                                    id = '', 
                                    datasource = '', 
                                    doc_type = '', 
                                    parent_document = , 
                                    title = '', 
                                    url = '', 
                                    metadata = {"container":"container","parentId":"JIRA_EN-1337","createTime":"2000-01-23T04:56:07.000Z","datasource":"datasource","author":{"name":"name"},"documentId":"documentId","updateTime":"2000-01-23T04:56:07.000Z","mimeType":"mimeType","objectType":"Feature Request","components":["Backend","Networking"],"status":["Done"],"customData":{"someCustomField":"someCustomValue"}}, 
                                    sections = [
                                        glean_client_api.models.document_section.DocumentSection(
                                            title = '', 
                                            url = '', )
                                        ], ), 
                                parent_document = , 
                                title = '', 
                                url = '', 
                                metadata = {"container":"container","parentId":"JIRA_EN-1337","createTime":"2000-01-23T04:56:07.000Z","datasource":"datasource","author":{"name":"name"},"documentId":"documentId","updateTime":"2000-01-23T04:56:07.000Z","mimeType":"mimeType","objectType":"Feature Request","components":["Backend","Networking"],"status":["Done"],"customData":{"someCustomField":"someCustomValue"}}, 
                                sections = [
                                    glean_client_api.models.document_section.DocumentSection(
                                        title = '', 
                                        url = '', )
                                    ], ), )
                        ], 
                    visitor_count = glean_client_api.models.count_info.CountInfo(
                        count = 56, 
                        period = glean_client_api.models.period.Period(
                            min_days_from_now = 56, 
                            max_days_from_now = 56, 
                            start = glean_client_api.models.time_point.TimePoint(
                                epoch_seconds = 56, 
                                days_from_now = 56, ), 
                            end = glean_client_api.models.time_point.TimePoint(
                                epoch_seconds = 56, 
                                days_from_now = 56, ), ), 
                        org = '', ), ),
                verification = glean_client_api.models.verification.Verification(
                    state = 'UNVERIFIED', 
                    metadata = glean_client_api.models.verification_metadata.VerificationMetadata(
                        last_verifier = {"name":"George Clooney","obfuscatedId":"abc123"}, 
                        last_verification_ts = 56, 
                        expiration_ts = 56, 
                        document = glean_client_api.models.document.Document(
                            id = '', 
                            datasource = '', 
                            connector_type = 'API_CRAWL', 
                            doc_type = '', 
                            content = glean_client_api.models.document_content.DocumentContent(
                                full_text_list = [
                                    ''
                                    ], ), 
                            container_document = glean_client_api.models.document.Document(
                                id = '', 
                                datasource = '', 
                                doc_type = '', 
                                parent_document = , 
                                title = '', 
                                url = '', 
                                sections = [
                                    glean_client_api.models.document_section.DocumentSection(
                                        title = '', 
                                        url = '', )
                                    ], ), 
                            parent_document = , 
                            title = '', 
                            url = '', 
                            sections = [
                                glean_client_api.models.document_section.DocumentSection(
                                    title = '', 
                                    url = '', )
                                ], ), 
                        reminders = [
                            glean_client_api.models.reminder.Reminder(
                                assignee = {"name":"George Clooney","obfuscatedId":"abc123"}, 
                                requestor = {"name":"George Clooney","obfuscatedId":"abc123"}, 
                                remind_at = 56, 
                                created_at = 56, 
                                reason = '', )
                            ], 
                        last_reminder = glean_client_api.models.reminder.Reminder(
                            assignee = {"name":"George Clooney","obfuscatedId":"abc123"}, 
                            remind_at = 56, 
                            created_at = 56, 
                            reason = '', ), 
                        visitor_count = [
                            glean_client_api.models.count_info.CountInfo(
                                count = 56, 
                                period = glean_client_api.models.period.Period(
                                    min_days_from_now = 56, 
                                    max_days_from_now = 56, 
                                    start = glean_client_api.models.time_point.TimePoint(
                                        epoch_seconds = 56, 
                                        days_from_now = 56, ), 
                                    end = glean_client_api.models.time_point.TimePoint(
                                        epoch_seconds = 56, 
                                        days_from_now = 56, ), ), 
                                org = '', )
                            ], 
                        candidate_verifiers = [
                            {"name":"George Clooney","obfuscatedId":"abc123"}
                            ], ), ),
                viewer_info = glean_client_api.models.viewer_info.ViewerInfo(
                    role = 'ANSWER_MODERATOR', 
                    last_viewed_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                permissions = glean_client_api.models.object_permissions.ObjectPermissions(
                    write = glean_client_api.models.write_permission.WritePermission(
                        scope_type = 'GLOBAL', 
                        create = True, 
                        update = True, 
                        delete = True, ), ),
                visit_count = glean_client_api.models.count_info.CountInfo(
                    count = 56, 
                    period = glean_client_api.models.period.Period(
                        min_days_from_now = 56, 
                        max_days_from_now = 56, 
                        start = glean_client_api.models.time_point.TimePoint(
                            epoch_seconds = 56, 
                            days_from_now = 56, ), 
                        end = glean_client_api.models.time_point.TimePoint(
                            epoch_seconds = 56, 
                            days_from_now = 56, ), ), 
                    org = '', ),
                shortcuts = [
                    null
                    ],
                path = '',
                custom_data = {
                    'key' : glean_client_api.models.custom_data_value.CustomDataValue(
                        display_label = '', 
                        string_value = '', 
                        string_list_value = [
                            ''
                            ], 
                        number_value = 1.337, )
                    },
                document_category = '',
                contact_person = {"name":"George Clooney","obfuscatedId":"abc123"},
                thumbnail = glean_client_api.models.thumbnail.Thumbnail(
                    photo_id = '', 
                    url = '', ),
                index_status = glean_client_api.models.index_status.IndexStatus(
                    last_crawled_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    last_indexed_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                ancestors = [
                    glean_client_api.models.document.Document(
                        id = '', 
                        datasource = '', 
                        connector_type = 'API_CRAWL', 
                        doc_type = '', 
                        content = glean_client_api.models.document_content.DocumentContent(
                            full_text_list = [
                                ''
                                ], ), 
                        container_document = glean_client_api.models.document.Document(
                            id = '', 
                            datasource = '', 
                            doc_type = '', 
                            parent_document = , 
                            title = '', 
                            url = '', 
                            metadata = {"container":"container","parentId":"JIRA_EN-1337","createTime":"2000-01-23T04:56:07.000Z","datasource":"datasource","author":{"name":"name"},"documentId":"documentId","updateTime":"2000-01-23T04:56:07.000Z","mimeType":"mimeType","objectType":"Feature Request","components":["Backend","Networking"],"status":["Done"],"customData":{"someCustomField":"someCustomValue"}}, 
                            sections = [
                                glean_client_api.models.document_section.DocumentSection(
                                    title = '', 
                                    url = '', )
                                ], ), 
                        parent_document = , 
                        title = '', 
                        url = '', 
                        metadata = {"container":"container","parentId":"JIRA_EN-1337","createTime":"2000-01-23T04:56:07.000Z","datasource":"datasource","author":{"name":"name"},"documentId":"documentId","updateTime":"2000-01-23T04:56:07.000Z","mimeType":"mimeType","objectType":"Feature Request","components":["Backend","Networking"],"status":["Done"],"customData":{"someCustomField":"someCustomValue"}}, 
                        sections = [
                            glean_client_api.models.document_section.DocumentSection(
                                title = '', 
                                url = '', )
                            ], )
                    ]
            )
        else:
            return DocumentMetadata(
        )
        """

    def testDocumentMetadata(self):
        """Test DocumentMetadata"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Glean Client API

    # Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

    The version of the OpenAPI document: 0.9.0
    Contact: support@glean.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from glean_client_api.models.assistant_config import AssistantConfig

class TestAssistantConfig(unittest.TestCase):
    """AssistantConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AssistantConfig:
        """Test AssistantConfig
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AssistantConfig`
        """
        model = AssistantConfig()
        if include_optional:
            return AssistantConfig(
                chat_banner_text = '',
                chat_box_disclaimer = '',
                chat_link_url_template = '',
                chat_starter_header = '',
                chat_starter_subheader = '',
                agent_client_configs = [
                    glean_client_api.models.agent_client_config.AgentClientConfig(
                        agent_config = glean_client_api.models.agent_config.AgentConfig(
                            agent = 'DEFAULT', 
                            mode = 'DEFAULT', ), 
                        input_char_limit = 56, )
                    ],
                redlisted_datasources = [
                    ''
                    ],
                greenlisted_datasource_instances = [
                    ''
                    ],
                gpt_agent_enabled = True,
                chat_history_enabled = True,
                chat_guide_url = ''
            )
        else:
            return AssistantConfig(
        )
        """

    def testAssistantConfig(self):
        """Test AssistantConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

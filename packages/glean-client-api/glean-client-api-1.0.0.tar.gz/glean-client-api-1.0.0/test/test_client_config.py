# coding: utf-8

"""
    Glean Client API

    # Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

    The version of the OpenAPI document: 0.9.0
    Contact: support@glean.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from glean_client_api.models.client_config import ClientConfig

class TestClientConfig(unittest.TestCase):
    """ClientConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ClientConfig:
        """Test ClientConfig
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ClientConfig`
        """
        model = ClientConfig()
        if include_optional:
            return ClientConfig(
                assistant = glean_client_api.models.assistant_config.AssistantConfig(
                    chat_banner_text = '', 
                    chat_box_disclaimer = '', 
                    chat_link_url_template = '', 
                    chat_starter_header = '', 
                    chat_starter_subheader = '', 
                    agent_client_configs = [
                        glean_client_api.models.agent_client_config.AgentClientConfig(
                            agent_config = glean_client_api.models.agent_config.AgentConfig(
                                agent = 'DEFAULT', 
                                mode = 'DEFAULT', ), 
                            input_char_limit = 56, )
                        ], 
                    redlisted_datasources = [
                        ''
                        ], 
                    greenlisted_datasource_instances = [
                        ''
                        ], 
                    gpt_agent_enabled = True, 
                    chat_history_enabled = True, 
                    chat_guide_url = '', ),
                tools = glean_client_api.models.tools_config.ToolsConfig(
                    available_tools = [
                        glean_client_api.models.tool_metadata.ToolMetadata(
                            type = 'RETRIEVAL', 
                            name = '', 
                            display_name = '', 
                            tool_id = '', 
                            display_description = '', 
                            logo_url = '', 
                            object_name = '["HR ticket","Email","Chat message"]', 
                            created_by = glean_client_api.models.person_object.PersonObject(
                                name = '', 
                                obfuscated_id = '', ), 
                            last_updated_by = glean_client_api.models.person_object.PersonObject(
                                name = '', 
                                obfuscated_id = '', ), 
                            created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            last_updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            auth = glean_client_api.models.auth_config.AuthConfig(
                                is_on_prem = True, 
                                type = 'NONE', 
                                status = 'AWAITING_AUTH', 
                                client_url = '', 
                                scopes = [
                                    ''
                                    ], 
                                authorization_url = '', ), )
                        ], ),
                shortcuts = glean_client_api.models.shortcuts_config.ShortcutsConfig(
                    shortcuts_prefix = '', 
                    use_external_shortcuts = True, ),
                bad_versions = [
                    ''
                    ],
                feed_people_celebrations_enabled = True,
                feed_suggested_enabled = True,
                feed_trending_enabled = True,
                feed_recents_enabled = True,
                feed_mentions_enabled = True,
                gpt_agent_enabled = True,
                chat_history_enabled = True,
                bool_values = {
                    'key' : True
                    },
                integer_values = {"autocompleteDebounceMs":300,"retries":3},
                company_display_name = '',
                custom_serp_markdown = '',
                onboarding_query = '',
                is_org_chart_link_visible = True,
                is_org_chart_accessible = True,
                is_people_setup = True,
                is_pilot_mode = True,
                web_app_url = '',
                user_outreach = glean_client_api.models.user_outreach_config.UserOutreachConfig(
                    weekly_feed_email_enabled = True, 
                    onboarding_campaign_enabled = True, ),
                search_link_url_template = '',
                chat_link_url_template = '',
                themes = {"light":{"background":"#fafafa","textPrimary":"#1e1e1e"},"dark":{"background":"#1e1e1e","textPrimary":"#fafafa"}},
                brandings = glean_client_api.models.client_config_brandings.ClientConfig_brandings(
                    light = glean_client_api.models.branding.Branding(
                        company_background_image_name = '', 
                        company_logo_url = '', 
                        company_wide_logo_url = '', 
                        company_logo_background_color = '', ), 
                    dark = glean_client_api.models.branding.Branding(
                        company_background_image_name = '', 
                        company_logo_url = '', 
                        company_wide_logo_url = '', 
                        company_logo_background_color = '', ), 
                    product_terms = glean_client_api.models.product_terms.ProductTerms(
                        assistant = glean_client_api.models.product_term.ProductTerm(
                            display_name = '', ), 
                        glean_assistant = glean_client_api.models.product_term.ProductTerm(
                            display_name = '', ), ), ),
                greeting_format = '\%t, \%n (This would be the current default Glean greeting)',
                task_see_all_label = '',
                task_see_all_link = '',
                shortcuts_prefix = '',
                sso_company_provider = 'gsuite',
                feedback_customizations = glean_client_api.models.feedback_customizations.FeedbackCustomizations(
                    default_channels = [
                        'GLEAN_CHANNEL'
                        ], 
                    feature_channels = {
                        'key' : [
                            'GLEAN_CHANNEL'
                            ]
                        }, 
                    disclaimer = '', 
                    company_privacy_policy_link = '', 
                    support_message = '', 
                    support_link_text = '', 
                    support_link = '', )
            )
        else:
            return ClientConfig(
        )
        """

    def testClientConfig(self):
        """Test ClientConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

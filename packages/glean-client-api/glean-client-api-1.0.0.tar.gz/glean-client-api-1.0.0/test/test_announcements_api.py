# coding: utf-8

"""
    Glean Client API

    # Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

    The version of the OpenAPI document: 0.9.0
    Contact: support@glean.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from glean_client_api.api.announcements_api import AnnouncementsApi


class TestAnnouncementsApi(unittest.TestCase):
    """AnnouncementsApi unit test stubs"""

    def setUp(self) -> None:
        self.api = AnnouncementsApi()

    def tearDown(self) -> None:
        pass

    def test_createannouncement(self) -> None:
        """Test case for createannouncement

        Create Announcement
        """
        pass

    def test_createdraftannouncement(self) -> None:
        """Test case for createdraftannouncement

        Create draft Announcement
        """
        pass

    def test_deleteannouncement(self) -> None:
        """Test case for deleteannouncement

        Delete Announcement
        """
        pass

    def test_deletedraftannouncement(self) -> None:
        """Test case for deletedraftannouncement

        Delete draft Announcement
        """
        pass

    def test_getannouncement(self) -> None:
        """Test case for getannouncement

        Read Announcement
        """
        pass

    def test_getdraftannouncement(self) -> None:
        """Test case for getdraftannouncement

        Read draft Announcement
        """
        pass

    def test_listannouncements(self) -> None:
        """Test case for listannouncements

        List Announcements
        """
        pass

    def test_previewannouncement(self) -> None:
        """Test case for previewannouncement

        Preview Announcement
        """
        pass

    def test_previewannouncementdraft(self) -> None:
        """Test case for previewannouncementdraft

        Preview draft Announcement
        """
        pass

    def test_publishdraftannouncement(self) -> None:
        """Test case for publishdraftannouncement

        Publish draft Announcement
        """
        pass

    def test_unpublishannouncement(self) -> None:
        """Test case for unpublishannouncement

        Unpublish Announcement
        """
        pass

    def test_updateannouncement(self) -> None:
        """Test case for updateannouncement

        Update Announcement
        """
        pass

    def test_updatedraftannouncement(self) -> None:
        """Test case for updatedraftannouncement

        Update draft Announcement
        """
        pass


if __name__ == '__main__':
    unittest.main()

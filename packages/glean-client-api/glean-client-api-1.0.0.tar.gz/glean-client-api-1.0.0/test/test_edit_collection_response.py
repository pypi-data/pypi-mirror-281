# coding: utf-8

"""
    Glean Client API

    # Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

    The version of the OpenAPI document: 0.9.0
    Contact: support@glean.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from glean_client_api.models.edit_collection_response import EditCollectionResponse

class TestEditCollectionResponse(unittest.TestCase):
    """EditCollectionResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> EditCollectionResponse:
        """Test EditCollectionResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `EditCollectionResponse`
        """
        model = EditCollectionResponse()
        if include_optional:
            return EditCollectionResponse(
                name = '',
                description = '',
                added_roles = [
                    glean_client_api.models.user_role_specification.UserRoleSpecification(
                        source_document_spec = null, 
                        person = {"name":"George Clooney","obfuscatedId":"abc123"}, 
                        group = glean_client_api.models.group.Group(
                            type = 'DEPARTMENT', 
                            id = '', 
                            name = '', ), 
                        role = 'OWNER', )
                    ],
                removed_roles = [
                    glean_client_api.models.user_role_specification.UserRoleSpecification(
                        source_document_spec = null, 
                        person = {"name":"George Clooney","obfuscatedId":"abc123"}, 
                        group = glean_client_api.models.group.Group(
                            type = 'DEPARTMENT', 
                            id = '', 
                            name = '', ), 
                        role = 'OWNER', )
                    ],
                audience_filters = [
                    {"fieldName":"type","values":[{"value":"Spreadsheet","relationType":"EQUALS"},{"value":"Presentation","relationType":"EQUALS"}]}
                    ],
                icon = '',
                admin_locked = True,
                parent_id = 56,
                thumbnail = glean_client_api.models.thumbnail.Thumbnail(
                    photo_id = '', 
                    url = '', ),
                allowed_datasource = '',
                permissions = glean_client_api.models.object_permissions.ObjectPermissions(
                    write = glean_client_api.models.write_permission.WritePermission(
                        scope_type = 'GLOBAL', 
                        create = True, 
                        update = True, 
                        delete = True, ), ),
                id = 56,
                create_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                update_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                creator = {"name":"George Clooney","obfuscatedId":"abc123"},
                updated_by = {"name":"George Clooney","obfuscatedId":"abc123"},
                item_count = 56,
                child_count = 56,
                items = [
                    null
                    ],
                pin_metadata = glean_client_api.models.collection_pinned_metadata.CollectionPinnedMetadata(
                    existing_pins = [
                        glean_client_api.models.collection_pin_target.CollectionPinTarget(
                            category = 'COMPANY_RESOURCE', 
                            value = '', 
                            target = 'RESOURCE_CARD', )
                        ], 
                    eligible_pins = [
                        glean_client_api.models.collection_pin_metadata.CollectionPinMetadata(
                            id = 56, 
                            target = glean_client_api.models.collection_pin_target.CollectionPinTarget(
                                category = 'COMPANY_RESOURCE', 
                                value = '', ), )
                        ], ),
                shortcuts = [
                    ''
                    ],
                children = [
                    null
                    ],
                roles = [
                    glean_client_api.models.user_role_specification.UserRoleSpecification(
                        source_document_spec = null, 
                        person = {"name":"George Clooney","obfuscatedId":"abc123"}, 
                        group = glean_client_api.models.group.Group(
                            type = 'DEPARTMENT', 
                            id = '', 
                            name = '', ), 
                        role = 'OWNER', )
                    ],
                error_code = 'NAME_EXISTS',
                collection = None,
                error = glean_client_api.models.collection_error.CollectionError(
                    error_code = 'NAME_EXISTS', )
            )
        else:
            return EditCollectionResponse(
                name = '',
                description = '',
                id = 56,
                error_code = 'NAME_EXISTS',
        )
        """

    def testEditCollectionResponse(self):
        """Test EditCollectionResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

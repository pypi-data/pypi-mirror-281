# coding: utf-8

"""
    Glean Client API

    # Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

    The version of the OpenAPI document: 0.9.0
    Contact: support@glean.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from glean_client_api.models.document_spec_one_of import DocumentSpecOneOf
from glean_client_api.models.document_spec_one_of1 import DocumentSpecOneOf1
from glean_client_api.models.document_spec_one_of2 import DocumentSpecOneOf2
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

DOCUMENTSPEC_ONE_OF_SCHEMAS = ["DocumentSpecOneOf", "DocumentSpecOneOf1", "DocumentSpecOneOf2"]

class DocumentSpec(BaseModel):
    """
    DocumentSpec
    """
    # data type: DocumentSpecOneOf
    oneof_schema_1_validator: Optional[DocumentSpecOneOf] = None
    # data type: DocumentSpecOneOf1
    oneof_schema_2_validator: Optional[DocumentSpecOneOf1] = None
    # data type: DocumentSpecOneOf2
    oneof_schema_3_validator: Optional[DocumentSpecOneOf2] = None
    actual_instance: Optional[Union[DocumentSpecOneOf, DocumentSpecOneOf1, DocumentSpecOneOf2]] = None
    one_of_schemas: Set[str] = { "DocumentSpecOneOf", "DocumentSpecOneOf1", "DocumentSpecOneOf2" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = DocumentSpec.model_construct()
        error_messages = []
        match = 0
        # validate data type: DocumentSpecOneOf
        if not isinstance(v, DocumentSpecOneOf):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DocumentSpecOneOf`")
        else:
            match += 1
        # validate data type: DocumentSpecOneOf1
        if not isinstance(v, DocumentSpecOneOf1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DocumentSpecOneOf1`")
        else:
            match += 1
        # validate data type: DocumentSpecOneOf2
        if not isinstance(v, DocumentSpecOneOf2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DocumentSpecOneOf2`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in DocumentSpec with oneOf schemas: DocumentSpecOneOf, DocumentSpecOneOf1, DocumentSpecOneOf2. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in DocumentSpec with oneOf schemas: DocumentSpecOneOf, DocumentSpecOneOf1, DocumentSpecOneOf2. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into DocumentSpecOneOf
        try:
            instance.actual_instance = DocumentSpecOneOf.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DocumentSpecOneOf1
        try:
            instance.actual_instance = DocumentSpecOneOf1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DocumentSpecOneOf2
        try:
            instance.actual_instance = DocumentSpecOneOf2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into DocumentSpec with oneOf schemas: DocumentSpecOneOf, DocumentSpecOneOf1, DocumentSpecOneOf2. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into DocumentSpec with oneOf schemas: DocumentSpecOneOf, DocumentSpecOneOf1, DocumentSpecOneOf2. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], DocumentSpecOneOf, DocumentSpecOneOf1, DocumentSpecOneOf2]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())



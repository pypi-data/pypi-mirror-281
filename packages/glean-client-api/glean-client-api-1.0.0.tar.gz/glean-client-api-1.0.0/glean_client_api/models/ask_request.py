# coding: utf-8

"""
    Glean Client API

    # Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

    The version of the OpenAPI document: 0.9.0
    Contact: support@glean.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from glean_client_api.models.ask_experimental_metadata import AskExperimentalMetadata
from glean_client_api.models.document_spec import DocumentSpec
from glean_client_api.models.search_request import SearchRequest
from typing import Optional, Set
from typing_extensions import Self

class AskRequest(BaseModel):
    """
    AskRequest
    """ # noqa: E501
    detect_only: Optional[StrictBool] = Field(default=None, description="Whether to apply only question detection and not answering.", alias="detectOnly")
    ask_experimental_metadata: Optional[AskExperimentalMetadata] = Field(default=None, alias="AskExperimentalMetadata")
    search_request: SearchRequest = Field(alias="searchRequest")
    excluded_document_specs: Optional[List[DocumentSpec]] = Field(default=None, description="A list of Glean Document IDs to be excluded when retrieving documents. Note that, currently, it only supports exclusion of one Glean Documnet ID based spec. If multiple specifications are provided only the first Glean Document ID based spec is excluded and the remaining specs are ignored.", alias="excludedDocumentSpecs")
    operators: Optional[StrictStr] = Field(default=None, description="Search operators to append to the query")
    backend: Optional[StrictStr] = Field(default=None, description="Which backend to use to fulfill the requests.")
    chat_application_id: Optional[StrictStr] = Field(default=None, description="The ID of the application this request originates from, used to determine the configuration of underlying chat processes when invoking the CHAT backend. This should correspond to the ID set during admin setup. If not specified, the default chat experience will be used.", alias="chatApplicationId")
    __properties: ClassVar[List[str]] = ["detectOnly", "AskExperimentalMetadata", "searchRequest", "excludedDocumentSpecs", "operators", "backend", "chatApplicationId"]

    @field_validator('backend')
    def backend_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SEARCH', 'CHAT']):
            raise ValueError("must be one of enum values ('SEARCH', 'CHAT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AskRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ask_experimental_metadata
        if self.ask_experimental_metadata:
            _dict['AskExperimentalMetadata'] = self.ask_experimental_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of search_request
        if self.search_request:
            _dict['searchRequest'] = self.search_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in excluded_document_specs (list)
        _items = []
        if self.excluded_document_specs:
            for _item in self.excluded_document_specs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['excludedDocumentSpecs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AskRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "detectOnly": obj.get("detectOnly"),
            "AskExperimentalMetadata": AskExperimentalMetadata.from_dict(obj["AskExperimentalMetadata"]) if obj.get("AskExperimentalMetadata") is not None else None,
            "searchRequest": SearchRequest.from_dict(obj["searchRequest"]) if obj.get("searchRequest") is not None else None,
            "excludedDocumentSpecs": [DocumentSpec.from_dict(_item) for _item in obj["excludedDocumentSpecs"]] if obj.get("excludedDocumentSpecs") is not None else None,
            "operators": obj.get("operators"),
            "backend": obj.get("backend"),
            "chatApplicationId": obj.get("chatApplicationId")
        })
        return _obj



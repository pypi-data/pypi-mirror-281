# coding: utf-8

"""
    Glean Client API

    # Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

    The version of the OpenAPI document: 0.9.0
    Contact: support@glean.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from glean_client_api.models.calendar_attendees import CalendarAttendees
from glean_client_api.models.conference_data import ConferenceData
from glean_client_api.models.event_classification import EventClassification
from glean_client_api.models.generated_attachment import GeneratedAttachment
from glean_client_api.models.time_interval import TimeInterval
from typing import Optional, Set
from typing_extensions import Self

class CalendarEvent(BaseModel):
    """
    CalendarEvent
    """ # noqa: E501
    time: Optional[TimeInterval] = None
    event_type: Optional[StrictStr] = Field(default=None, description="The nature of the event, for example \"out of office\".", alias="eventType")
    id: StrictStr = Field(description="The calendar event id")
    url: StrictStr = Field(description="A permalink for this calendar event")
    attendees: Optional[CalendarAttendees] = None
    location: Optional[StrictStr] = Field(default=None, description="The location that this event is taking place at.")
    conference_data: Optional[ConferenceData] = Field(default=None, alias="conferenceData")
    description: Optional[StrictStr] = Field(default=None, description="The HTML description of the event.")
    datasource: Optional[StrictStr] = Field(default=None, description="The app or other repository type from which the event was extracted")
    classifications: Optional[List[EventClassification]] = None
    generated_attachments: Optional[List[GeneratedAttachment]] = Field(default=None, alias="generatedAttachments")
    __properties: ClassVar[List[str]] = ["time", "eventType", "id", "url", "attendees", "location", "conferenceData", "description", "datasource", "classifications", "generatedAttachments"]

    @field_validator('event_type')
    def event_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DEFAULT', 'OUT_OF_OFFICE']):
            raise ValueError("must be one of enum values ('DEFAULT', 'OUT_OF_OFFICE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CalendarEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of time
        if self.time:
            _dict['time'] = self.time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of attendees
        if self.attendees:
            _dict['attendees'] = self.attendees.to_dict()
        # override the default output from pydantic by calling `to_dict()` of conference_data
        if self.conference_data:
            _dict['conferenceData'] = self.conference_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in classifications (list)
        _items = []
        if self.classifications:
            for _item in self.classifications:
                if _item:
                    _items.append(_item.to_dict())
            _dict['classifications'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in generated_attachments (list)
        _items = []
        if self.generated_attachments:
            for _item in self.generated_attachments:
                if _item:
                    _items.append(_item.to_dict())
            _dict['generatedAttachments'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CalendarEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "time": TimeInterval.from_dict(obj["time"]) if obj.get("time") is not None else None,
            "eventType": obj.get("eventType"),
            "id": obj.get("id"),
            "url": obj.get("url"),
            "attendees": CalendarAttendees.from_dict(obj["attendees"]) if obj.get("attendees") is not None else None,
            "location": obj.get("location"),
            "conferenceData": ConferenceData.from_dict(obj["conferenceData"]) if obj.get("conferenceData") is not None else None,
            "description": obj.get("description"),
            "datasource": obj.get("datasource"),
            "classifications": [EventClassification.from_dict(_item) for _item in obj["classifications"]] if obj.get("classifications") is not None else None,
            "generatedAttachments": [GeneratedAttachment.from_dict(_item) for _item in obj["generatedAttachments"]] if obj.get("generatedAttachments") is not None else None
        })
        return _obj



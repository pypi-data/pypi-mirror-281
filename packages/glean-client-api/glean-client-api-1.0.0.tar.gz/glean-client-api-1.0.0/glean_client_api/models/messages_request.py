# coding: utf-8

"""
    Glean Client API

    # Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

    The version of the OpenAPI document: 0.9.0
    Contact: support@glean.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class MessagesRequest(BaseModel):
    """
    MessagesRequest
    """ # noqa: E501
    id_type: StrictStr = Field(description="Type of the id in the incoming request.", alias="idType")
    id: StrictStr = Field(description="ID corresponding to the requested idType. Note that channel and threads are represented by the underlying datasource's ID and conversations are represented by their document's ID.")
    workspace_id: Optional[StrictStr] = Field(default=None, description="Id for the for the workspace in case of multiple workspaces.", alias="workspaceId")
    direction: Optional[StrictStr] = Field(default=None, description="The direction of the results asked with respect to the reference timestamp. Missing field defaults to OLDER.")
    timestamp_millis: StrictInt = Field(description="Timestamp in millis of the reference message.", alias="timestampMillis")
    include_root_message: Optional[StrictBool] = Field(default=None, description="Whether to include root message in response.", alias="includeRootMessage")
    datasource: Optional[StrictStr] = Field(default=None, description="The type of the data source. Missing field defaults to SLACK.")
    datasource_instance_display_name: Optional[StrictStr] = Field(default=None, description="The datasource instance display name from which the document was extracted. This is used for appinstance facet filter for datasources that support multiple instances.", alias="datasourceInstanceDisplayName")
    __properties: ClassVar[List[str]] = ["idType", "id", "workspaceId", "direction", "timestampMillis", "includeRootMessage", "datasource", "datasourceInstanceDisplayName"]

    @field_validator('id_type')
    def id_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['CHANNEL_NAME', 'THREAD_ID', 'CONVERSATION_ID']):
            raise ValueError("must be one of enum values ('CHANNEL_NAME', 'THREAD_ID', 'CONVERSATION_ID')")
        return value

    @field_validator('direction')
    def direction_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['OLDER', 'NEWER']):
            raise ValueError("must be one of enum values ('OLDER', 'NEWER')")
        return value

    @field_validator('datasource')
    def datasource_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SLACK', 'MICROSOFTTEAMS', 'FACEBOOKWORKPLACE']):
            raise ValueError("must be one of enum values ('SLACK', 'MICROSOFTTEAMS', 'FACEBOOKWORKPLACE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MessagesRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MessagesRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "idType": obj.get("idType"),
            "id": obj.get("id"),
            "workspaceId": obj.get("workspaceId"),
            "direction": obj.get("direction"),
            "timestampMillis": obj.get("timestampMillis"),
            "includeRootMessage": obj.get("includeRootMessage"),
            "datasource": obj.get("datasource"),
            "datasourceInstanceDisplayName": obj.get("datasourceInstanceDisplayName")
        })
        return _obj



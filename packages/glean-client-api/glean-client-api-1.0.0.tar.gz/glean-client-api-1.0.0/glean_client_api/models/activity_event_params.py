# coding: utf-8

"""
    Glean Client API

    # Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

    The version of the OpenAPI document: 0.9.0
    Contact: support@glean.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ActivityEventParams(BaseModel):
    """
    ActivityEventParams
    """ # noqa: E501
    body_content: Optional[StrictStr] = Field(default=None, description="The HTML content of the page body.", alias="bodyContent")
    datasource_instance: Optional[StrictStr] = Field(default=None, description="The full datasource instance name inferred from the URL of the event", alias="datasourceInstance")
    datasource: Optional[StrictStr] = Field(default=None, description="The datasource without the instance inferred from the URL of the event")
    instance_only_name: Optional[StrictStr] = Field(default=None, description="The instance only name of the datasource instance, e.g. 1 for jira_1, inferred from the URL of the event", alias="instanceOnlyName")
    duration: Optional[StrictInt] = Field(default=None, description="Length in seconds of the activity. For VIEWS, this represents the amount the page was visible in the foreground.")
    query: Optional[StrictStr] = Field(default=None, description="The user's search query associated with a SEARCH.")
    referrer: Optional[StrictStr] = Field(default=None, description="The referring URL of the VIEW or SEARCH.")
    title: Optional[StrictStr] = Field(default=None, description="The page title associated with the URL of the event")
    truncated: Optional[StrictBool] = Field(default=None, description="Indicates that the parameters are incomplete and more parameters may be sent with the same action+timestamp+URL in the future. This is used for sending the duration when a `VIEW` is finished.")
    __properties: ClassVar[List[str]] = ["bodyContent", "datasourceInstance", "datasource", "instanceOnlyName", "duration", "query", "referrer", "title", "truncated"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ActivityEventParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ActivityEventParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bodyContent": obj.get("bodyContent"),
            "datasourceInstance": obj.get("datasourceInstance"),
            "datasource": obj.get("datasource"),
            "instanceOnlyName": obj.get("instanceOnlyName"),
            "duration": obj.get("duration"),
            "query": obj.get("query"),
            "referrer": obj.get("referrer"),
            "title": obj.get("title"),
            "truncated": obj.get("truncated")
        })
        return _obj



# coding: utf-8

"""
    Glean Client API

    # Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

    The version of the OpenAPI document: 0.9.0
    Contact: support@glean.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CollectionItem(BaseModel):
    """
    CollectionItem
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="The optional name of the Collection item.")
    description: Optional[StrictStr] = Field(default=None, description="A helpful description of why this CollectionItem is in the Collection that it's in.")
    icon: Optional[StrictStr] = Field(default=None, description="The emoji icon for this CollectionItem. Only used for Text type items.")
    collection_id: StrictInt = Field(description="The Collection ID of the Collection that this CollectionItem belongs in.", alias="collectionId")
    document_id: Optional[StrictStr] = Field(default=None, description="If this CollectionItem is indexed, the Glean Document ID of that document.", alias="documentId")
    url: Optional[StrictStr] = Field(default=None, description="The URL of this CollectionItem.")
    item_id: Optional[StrictStr] = Field(default=None, description="Unique identifier for the item within the Collection it belongs to.", alias="itemId")
    created_by: Optional[Person] = Field(default=None, alias="createdBy")
    created_at: Optional[datetime] = Field(default=None, description="Unix timestamp for when the item was first added (in seconds since epoch UTC).", alias="createdAt")
    document: Optional[Document] = None
    shortcut: Optional[Shortcut] = None
    collection: Optional[Collection] = None
    item_type: StrictStr = Field(alias="itemType")
    __properties: ClassVar[List[str]] = ["name", "description", "icon", "collectionId", "documentId", "url", "itemId", "createdBy", "createdAt", "document", "shortcut", "collection", "itemType"]

    @field_validator('item_type')
    def item_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['DOCUMENT', 'TEXT', 'URL', 'COLLECTION']):
            raise ValueError("must be one of enum values ('DOCUMENT', 'TEXT', 'URL', 'COLLECTION')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CollectionItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['createdBy'] = self.created_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of document
        if self.document:
            _dict['document'] = self.document.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shortcut
        if self.shortcut:
            _dict['shortcut'] = self.shortcut.to_dict()
        # override the default output from pydantic by calling `to_dict()` of collection
        if self.collection:
            _dict['collection'] = self.collection.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CollectionItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "description": obj.get("description"),
            "icon": obj.get("icon"),
            "collectionId": obj.get("collectionId"),
            "documentId": obj.get("documentId"),
            "url": obj.get("url"),
            "itemId": obj.get("itemId"),
            "createdBy": Person.from_dict(obj["createdBy"]) if obj.get("createdBy") is not None else None,
            "createdAt": obj.get("createdAt"),
            "document": Document.from_dict(obj["document"]) if obj.get("document") is not None else None,
            "shortcut": Shortcut.from_dict(obj["shortcut"]) if obj.get("shortcut") is not None else None,
            "collection": Collection.from_dict(obj["collection"]) if obj.get("collection") is not None else None,
            "itemType": obj.get("itemType")
        })
        return _obj

from glean_client_api.models.collection import Collection
from glean_client_api.models.document import Document
from glean_client_api.models.person import Person
from glean_client_api.models.shortcut import Shortcut
# TODO: Rewrite to not use raise_errors
CollectionItem.model_rebuild(raise_errors=False)


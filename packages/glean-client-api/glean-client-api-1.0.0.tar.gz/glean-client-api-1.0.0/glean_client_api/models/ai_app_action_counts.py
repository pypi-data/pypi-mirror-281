# coding: utf-8

"""
    Glean Client API

    # Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

    The version of the OpenAPI document: 0.9.0
    Contact: support@glean.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AiAppActionCounts(BaseModel):
    """
    Map from action to frequency.
    """ # noqa: E501
    total_slackbot_responses: Optional[StrictInt] = Field(default=None, description="Total number of Slackbot responses, both proactive and reactive.", alias="totalSlackbotResponses")
    total_slackbot_responses_shared: Optional[StrictInt] = Field(default=None, description="Total number of Slackbot responses shared publicly (upvoted).", alias="totalSlackbotResponsesShared")
    total_slackbot_responses_not_helpful: Optional[StrictInt] = Field(default=None, description="Total number of Slackbot responses rejected as not helpful (downvoted).", alias="totalSlackbotResponsesNotHelpful")
    total_chat_messages: Optional[StrictInt] = Field(default=None, description="Total number of Chat messages sent in requested period.", alias="totalChatMessages")
    total_upvotes: Optional[StrictInt] = Field(default=None, description="Total number of Chat messages which received upvotes by the user.", alias="totalUpvotes")
    total_downvotes: Optional[StrictInt] = Field(default=None, description="Total number of Chat messages which received downvotes by the user.", alias="totalDownvotes")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["totalSlackbotResponses", "totalSlackbotResponsesShared", "totalSlackbotResponsesNotHelpful", "totalChatMessages", "totalUpvotes", "totalDownvotes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AiAppActionCounts from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AiAppActionCounts from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "totalSlackbotResponses": obj.get("totalSlackbotResponses"),
            "totalSlackbotResponsesShared": obj.get("totalSlackbotResponsesShared"),
            "totalSlackbotResponsesNotHelpful": obj.get("totalSlackbotResponsesNotHelpful"),
            "totalChatMessages": obj.get("totalChatMessages"),
            "totalUpvotes": obj.get("totalUpvotes"),
            "totalDownvotes": obj.get("totalDownvotes")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj



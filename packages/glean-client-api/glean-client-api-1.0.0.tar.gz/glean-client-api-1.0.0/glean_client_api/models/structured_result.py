# coding: utf-8

"""
    Glean Client API

    # Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

    The version of the OpenAPI document: 0.9.0
    Contact: support@glean.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from glean_client_api.models.app_result import AppResult
from typing import Optional, Set
from typing_extensions import Self

class StructuredResult(BaseModel):
    """
    A single object that can support any object in the work graph. Only a single object will be populated.
    """ # noqa: E501
    document: Optional[Document] = None
    person: Optional[Person] = None
    customer: Optional[Customer] = None
    team: Optional[Team] = None
    custom_entity: Optional[CustomEntity] = Field(default=None, alias="customEntity")
    answer: Optional[Answer] = None
    extracted_qn_a: Optional[ExtractedQnA] = Field(default=None, alias="extractedQnA")
    app: Optional[AppResult] = None
    collection: Optional[Collection] = None
    answer_board: Optional[AnswerBoard] = Field(default=None, alias="answerBoard")
    code: Optional[Code] = None
    shortcut: Optional[Shortcut] = None
    query_suggestions: Optional[QuerySuggestionList] = Field(default=None, alias="querySuggestions")
    related_documents: Optional[List[RelatedDocuments]] = Field(default=None, description="A list of documents related to this structured result.", alias="relatedDocuments")
    related_question: Optional[RelatedQuestion] = Field(default=None, alias="relatedQuestion")
    snippets: Optional[List[SearchResultSnippet]] = Field(default=None, description="Any snippets associated to the populated object.")
    tracking_token: Optional[StrictStr] = Field(default=None, description="An opaque token that represents this particular result in this particular query. To be used for /feedback reporting.", alias="trackingToken")
    prominence: Optional[StrictStr] = Field(default=None, description="The level of visual distinction that should be given to a result.")
    source: Optional[StrictStr] = Field(default=None, description="Source context for this result. Possible values depend on the result type.")
    __properties: ClassVar[List[str]] = ["document", "person", "customer", "team", "customEntity", "answer", "extractedQnA", "app", "collection", "answerBoard", "code", "shortcut", "querySuggestions", "relatedDocuments", "relatedQuestion", "snippets", "trackingToken", "prominence", "source"]

    @field_validator('prominence')
    def prominence_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HERO', 'PROMOTED', 'STANDARD']):
            raise ValueError("must be one of enum values ('HERO', 'PROMOTED', 'STANDARD')")
        return value

    @field_validator('source')
    def source_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXPERT_DETECTION', 'ENTITY_NLQ']):
            raise ValueError("must be one of enum values ('EXPERT_DETECTION', 'ENTITY_NLQ')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StructuredResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of document
        if self.document:
            _dict['document'] = self.document.to_dict()
        # override the default output from pydantic by calling `to_dict()` of person
        if self.person:
            _dict['person'] = self.person.to_dict()
        # override the default output from pydantic by calling `to_dict()` of customer
        if self.customer:
            _dict['customer'] = self.customer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of team
        if self.team:
            _dict['team'] = self.team.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custom_entity
        if self.custom_entity:
            _dict['customEntity'] = self.custom_entity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of answer
        if self.answer:
            _dict['answer'] = self.answer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of extracted_qn_a
        if self.extracted_qn_a:
            _dict['extractedQnA'] = self.extracted_qn_a.to_dict()
        # override the default output from pydantic by calling `to_dict()` of app
        if self.app:
            _dict['app'] = self.app.to_dict()
        # override the default output from pydantic by calling `to_dict()` of collection
        if self.collection:
            _dict['collection'] = self.collection.to_dict()
        # override the default output from pydantic by calling `to_dict()` of answer_board
        if self.answer_board:
            _dict['answerBoard'] = self.answer_board.to_dict()
        # override the default output from pydantic by calling `to_dict()` of code
        if self.code:
            _dict['code'] = self.code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shortcut
        if self.shortcut:
            _dict['shortcut'] = self.shortcut.to_dict()
        # override the default output from pydantic by calling `to_dict()` of query_suggestions
        if self.query_suggestions:
            _dict['querySuggestions'] = self.query_suggestions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in related_documents (list)
        _items = []
        if self.related_documents:
            for _item in self.related_documents:
                if _item:
                    _items.append(_item.to_dict())
            _dict['relatedDocuments'] = _items
        # override the default output from pydantic by calling `to_dict()` of related_question
        if self.related_question:
            _dict['relatedQuestion'] = self.related_question.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in snippets (list)
        _items = []
        if self.snippets:
            for _item in self.snippets:
                if _item:
                    _items.append(_item.to_dict())
            _dict['snippets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StructuredResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "document": Document.from_dict(obj["document"]) if obj.get("document") is not None else None,
            "person": Person.from_dict(obj["person"]) if obj.get("person") is not None else None,
            "customer": Customer.from_dict(obj["customer"]) if obj.get("customer") is not None else None,
            "team": Team.from_dict(obj["team"]) if obj.get("team") is not None else None,
            "customEntity": CustomEntity.from_dict(obj["customEntity"]) if obj.get("customEntity") is not None else None,
            "answer": Answer.from_dict(obj["answer"]) if obj.get("answer") is not None else None,
            "extractedQnA": ExtractedQnA.from_dict(obj["extractedQnA"]) if obj.get("extractedQnA") is not None else None,
            "app": AppResult.from_dict(obj["app"]) if obj.get("app") is not None else None,
            "collection": Collection.from_dict(obj["collection"]) if obj.get("collection") is not None else None,
            "answerBoard": AnswerBoard.from_dict(obj["answerBoard"]) if obj.get("answerBoard") is not None else None,
            "code": Code.from_dict(obj["code"]) if obj.get("code") is not None else None,
            "shortcut": Shortcut.from_dict(obj["shortcut"]) if obj.get("shortcut") is not None else None,
            "querySuggestions": QuerySuggestionList.from_dict(obj["querySuggestions"]) if obj.get("querySuggestions") is not None else None,
            "relatedDocuments": [RelatedDocuments.from_dict(_item) for _item in obj["relatedDocuments"]] if obj.get("relatedDocuments") is not None else None,
            "relatedQuestion": RelatedQuestion.from_dict(obj["relatedQuestion"]) if obj.get("relatedQuestion") is not None else None,
            "snippets": [SearchResultSnippet.from_dict(_item) for _item in obj["snippets"]] if obj.get("snippets") is not None else None,
            "trackingToken": obj.get("trackingToken"),
            "prominence": obj.get("prominence"),
            "source": obj.get("source")
        })
        return _obj

from glean_client_api.models.answer import Answer
from glean_client_api.models.answer_board import AnswerBoard
from glean_client_api.models.code import Code
from glean_client_api.models.collection import Collection
from glean_client_api.models.custom_entity import CustomEntity
from glean_client_api.models.customer import Customer
from glean_client_api.models.document import Document
from glean_client_api.models.extracted_qn_a import ExtractedQnA
from glean_client_api.models.person import Person
from glean_client_api.models.query_suggestion_list import QuerySuggestionList
from glean_client_api.models.related_documents import RelatedDocuments
from glean_client_api.models.related_question import RelatedQuestion
from glean_client_api.models.search_result_snippet import SearchResultSnippet
from glean_client_api.models.shortcut import Shortcut
from glean_client_api.models.team import Team
# TODO: Rewrite to not use raise_errors
StructuredResult.model_rebuild(raise_errors=False)


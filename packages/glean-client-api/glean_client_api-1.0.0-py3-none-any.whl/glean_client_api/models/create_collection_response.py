# coding: utf-8

"""
    Glean Client API

    # Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

    The version of the OpenAPI document: 0.9.0
    Contact: support@glean.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from glean_client_api.models.collection import Collection
from glean_client_api.models.collection_error import CollectionError
from glean_client_api.models.collection_item import CollectionItem
from glean_client_api.models.collection_pinned_metadata import CollectionPinnedMetadata
from glean_client_api.models.facet_filter import FacetFilter
from glean_client_api.models.object_permissions import ObjectPermissions
from glean_client_api.models.person import Person
from glean_client_api.models.thumbnail import Thumbnail
from glean_client_api.models.user_role_specification import UserRoleSpecification
from typing import Optional, Set
from typing_extensions import Self

class CreateCollectionResponse(BaseModel):
    """
    CreateCollectionResponse
    """ # noqa: E501
    name: StrictStr = Field(description="The unique name of the Collection.")
    description: StrictStr = Field(description="A brief summary of the Collection's contents.")
    added_roles: Optional[List[UserRoleSpecification]] = Field(default=None, description="A list of added user roles for the Collection.", alias="addedRoles")
    removed_roles: Optional[List[UserRoleSpecification]] = Field(default=None, description="A list of removed user roles for the Collection.", alias="removedRoles")
    audience_filters: Optional[List[FacetFilter]] = Field(default=None, description="Filters which restrict who should see this Collection. Values are taken from the corresponding filters in people search.", alias="audienceFilters")
    icon: Optional[StrictStr] = Field(default=None, description="The emoji icon of this Collection.")
    admin_locked: Optional[StrictBool] = Field(default=None, description="Indicates whether edits are allowed for everyone or only admins.", alias="adminLocked")
    parent_id: Optional[StrictInt] = Field(default=None, description="The parent of this Collection, or 0 if it's a top-level Collection.", alias="parentId")
    thumbnail: Optional[Thumbnail] = None
    allowed_datasource: Optional[StrictStr] = Field(default=None, description="The datasource type this Collection can hold.", alias="allowedDatasource")
    permissions: Optional[ObjectPermissions] = None
    id: StrictInt = Field(description="The unique ID of the Collection.")
    create_time: Optional[datetime] = Field(default=None, alias="createTime")
    update_time: Optional[datetime] = Field(default=None, alias="updateTime")
    creator: Optional[Person] = None
    updated_by: Optional[Person] = Field(default=None, alias="updatedBy")
    item_count: Optional[StrictInt] = Field(default=None, description="The number of items currently in the Collection. Separated from the actual items so we can grab the count without items.", alias="itemCount")
    child_count: Optional[StrictInt] = Field(default=None, description="The number of children Collections. Separated from the actual children so we can grab the count without children.", alias="childCount")
    items: Optional[List[CollectionItem]] = Field(default=None, description="The items in this Collection.")
    pin_metadata: Optional[CollectionPinnedMetadata] = Field(default=None, alias="pinMetadata")
    shortcuts: Optional[List[StrictStr]] = Field(default=None, description="The names of the shortcuts (Go Links) that point to this Collection.")
    children: Optional[List[Collection]] = Field(default=None, description="The children Collections of this Collection.")
    roles: Optional[List[UserRoleSpecification]] = Field(default=None, description="A list of user roles for the Collection.")
    error_code: StrictStr = Field(alias="errorCode")
    collection: Optional[Collection] = None
    error: Optional[CollectionError] = None
    __properties: ClassVar[List[str]] = ["name", "description", "addedRoles", "removedRoles", "audienceFilters", "icon", "adminLocked", "parentId", "thumbnail", "allowedDatasource", "permissions", "id", "createTime", "updateTime", "creator", "updatedBy", "itemCount", "childCount", "items", "pinMetadata", "shortcuts", "children", "roles", "errorCode", "collection", "error"]

    @field_validator('error_code')
    def error_code_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['NAME_EXISTS', 'NOT_FOUND', 'COLLECTION_PINNED', 'CONCURRENT_HIERARCHY_EDIT', 'HEIGHT_VIOLATION', 'WIDTH_VIOLATION', 'NO_PERMISSIONS']):
            raise ValueError("must be one of enum values ('NAME_EXISTS', 'NOT_FOUND', 'COLLECTION_PINNED', 'CONCURRENT_HIERARCHY_EDIT', 'HEIGHT_VIOLATION', 'WIDTH_VIOLATION', 'NO_PERMISSIONS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateCollectionResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in added_roles (list)
        _items = []
        if self.added_roles:
            for _item in self.added_roles:
                if _item:
                    _items.append(_item.to_dict())
            _dict['addedRoles'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in removed_roles (list)
        _items = []
        if self.removed_roles:
            for _item in self.removed_roles:
                if _item:
                    _items.append(_item.to_dict())
            _dict['removedRoles'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in audience_filters (list)
        _items = []
        if self.audience_filters:
            for _item in self.audience_filters:
                if _item:
                    _items.append(_item.to_dict())
            _dict['audienceFilters'] = _items
        # override the default output from pydantic by calling `to_dict()` of thumbnail
        if self.thumbnail:
            _dict['thumbnail'] = self.thumbnail.to_dict()
        # override the default output from pydantic by calling `to_dict()` of permissions
        if self.permissions:
            _dict['permissions'] = self.permissions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of creator
        if self.creator:
            _dict['creator'] = self.creator.to_dict()
        # override the default output from pydantic by calling `to_dict()` of updated_by
        if self.updated_by:
            _dict['updatedBy'] = self.updated_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item in self.items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['items'] = _items
        # override the default output from pydantic by calling `to_dict()` of pin_metadata
        if self.pin_metadata:
            _dict['pinMetadata'] = self.pin_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in children (list)
        _items = []
        if self.children:
            for _item in self.children:
                if _item:
                    _items.append(_item.to_dict())
            _dict['children'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in roles (list)
        _items = []
        if self.roles:
            for _item in self.roles:
                if _item:
                    _items.append(_item.to_dict())
            _dict['roles'] = _items
        # override the default output from pydantic by calling `to_dict()` of collection
        if self.collection:
            _dict['collection'] = self.collection.to_dict()
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateCollectionResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "description": obj.get("description"),
            "addedRoles": [UserRoleSpecification.from_dict(_item) for _item in obj["addedRoles"]] if obj.get("addedRoles") is not None else None,
            "removedRoles": [UserRoleSpecification.from_dict(_item) for _item in obj["removedRoles"]] if obj.get("removedRoles") is not None else None,
            "audienceFilters": [FacetFilter.from_dict(_item) for _item in obj["audienceFilters"]] if obj.get("audienceFilters") is not None else None,
            "icon": obj.get("icon"),
            "adminLocked": obj.get("adminLocked"),
            "parentId": obj.get("parentId"),
            "thumbnail": Thumbnail.from_dict(obj["thumbnail"]) if obj.get("thumbnail") is not None else None,
            "allowedDatasource": obj.get("allowedDatasource"),
            "permissions": ObjectPermissions.from_dict(obj["permissions"]) if obj.get("permissions") is not None else None,
            "id": obj.get("id"),
            "createTime": obj.get("createTime"),
            "updateTime": obj.get("updateTime"),
            "creator": Person.from_dict(obj["creator"]) if obj.get("creator") is not None else None,
            "updatedBy": Person.from_dict(obj["updatedBy"]) if obj.get("updatedBy") is not None else None,
            "itemCount": obj.get("itemCount"),
            "childCount": obj.get("childCount"),
            "items": [CollectionItem.from_dict(_item) for _item in obj["items"]] if obj.get("items") is not None else None,
            "pinMetadata": CollectionPinnedMetadata.from_dict(obj["pinMetadata"]) if obj.get("pinMetadata") is not None else None,
            "shortcuts": obj.get("shortcuts"),
            "children": [Collection.from_dict(_item) for _item in obj["children"]] if obj.get("children") is not None else None,
            "roles": [UserRoleSpecification.from_dict(_item) for _item in obj["roles"]] if obj.get("roles") is not None else None,
            "errorCode": obj.get("errorCode"),
            "collection": Collection.from_dict(obj["collection"]) if obj.get("collection") is not None else None,
            "error": CollectionError.from_dict(obj["error"]) if obj.get("error") is not None else None
        })
        return _obj



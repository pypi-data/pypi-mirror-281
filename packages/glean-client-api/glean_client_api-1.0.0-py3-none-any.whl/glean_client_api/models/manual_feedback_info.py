# coding: utf-8

"""
    Glean Client API

    # Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

    The version of the OpenAPI document: 0.9.0
    Contact: support@glean.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ManualFeedbackInfo(BaseModel):
    """
    ManualFeedbackInfo
    """ # noqa: E501
    email: Optional[StrictStr] = Field(default=None, description="The email address of the user who submitted the Feedback.event.MANUAL_FEEDBACK event.")
    source: Optional[StrictStr] = Field(default=None, description="The source associated with the Feedback.event.MANUAL_FEEDBACK event.")
    issue: Optional[StrictStr] = Field(default=None, description="The issue the user indicated in the feedback.")
    query: Optional[StrictStr] = Field(default=None, description="The query associated with the Feedback.event.MANUAL_FEEDBACK event.")
    obscured_query: Optional[StrictStr] = Field(default=None, description="The query associated with the Feedback.event.MANUAL_FEEDBACK event, but obscured such that the vowels are replaced with special characters. For search feedback events only.", alias="obscuredQuery")
    active_tab: Optional[StrictStr] = Field(default=None, description="Which tabs the user had chosen at the time of the Feedback.event.MANUAL_FEEDBACK event. For search feedback events only.", alias="activeTab")
    comments: Optional[StrictStr] = Field(default=None, description="The comments users can optionally add to the Feedback.event.MANUAL_FEEDBACK events.")
    search_results: Optional[List[StrictStr]] = Field(default=None, description="The array of search result Glean Document IDs, ordered by top to bottom result.", alias="searchResults")
    previous_messages: Optional[List[StrictStr]] = Field(default=None, description="The array of previous messages in a chat session, ordered by oldest to newest.", alias="previousMessages")
    num_queries_from_first_run: Optional[StrictInt] = Field(default=None, description="How many times this query has been run in the past.", alias="numQueriesFromFirstRun")
    vote: Optional[StrictStr] = Field(default=None, description="The vote associated with the Feedback.event.MANUAL_FEEDBACK event.")
    rating: Optional[StrictInt] = Field(default=None, description="A rating associated with the user feedback. The value will be between one and the maximum given by ratingScale, inclusive.")
    rating_key: Optional[StrictStr] = Field(default=None, description="A description of the rating that contextualizes how it appeared to the user, e.g. \"satisfied\".", alias="ratingKey")
    rating_scale: Optional[StrictInt] = Field(default=None, description="The scale of comparison for a rating associated with the feedback. Rating values start from one and go up to the maximum specified by ratingScale. For example, a five-option satisfaction rating will have a ratingScale of 5 and a thumbs-up/thumbs-down rating will have a ratingScale of 2.", alias="ratingScale")
    __properties: ClassVar[List[str]] = ["email", "source", "issue", "query", "obscuredQuery", "activeTab", "comments", "searchResults", "previousMessages", "numQueriesFromFirstRun", "vote", "rating", "ratingKey", "ratingScale"]

    @field_validator('source')
    def source_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AUTOCOMPLETE', 'CALENDAR', 'CHAT', 'CHAT_GENERAL', 'CONCEPT_CARD', 'DESKTOP_APP', 'EXPERT_DETECTION', 'FEED', 'GENERATED_Q_AND_A', 'NATIVE_RESULT', 'Q_AND_A', 'RELATED_QUESTIONS', 'REPORT_ISSUE', 'SCIOBOT', 'SEARCH', 'SUMMARY']):
            raise ValueError("must be one of enum values ('AUTOCOMPLETE', 'CALENDAR', 'CHAT', 'CHAT_GENERAL', 'CONCEPT_CARD', 'DESKTOP_APP', 'EXPERT_DETECTION', 'FEED', 'GENERATED_Q_AND_A', 'NATIVE_RESULT', 'Q_AND_A', 'RELATED_QUESTIONS', 'REPORT_ISSUE', 'SCIOBOT', 'SEARCH', 'SUMMARY')")
        return value

    @field_validator('vote')
    def vote_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UPVOTE', 'DOWNVOTE']):
            raise ValueError("must be one of enum values ('UPVOTE', 'DOWNVOTE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ManualFeedbackInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ManualFeedbackInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "email": obj.get("email"),
            "source": obj.get("source"),
            "issue": obj.get("issue"),
            "query": obj.get("query"),
            "obscuredQuery": obj.get("obscuredQuery"),
            "activeTab": obj.get("activeTab"),
            "comments": obj.get("comments"),
            "searchResults": obj.get("searchResults"),
            "previousMessages": obj.get("previousMessages"),
            "numQueriesFromFirstRun": obj.get("numQueriesFromFirstRun"),
            "vote": obj.get("vote"),
            "rating": obj.get("rating"),
            "ratingKey": obj.get("ratingKey"),
            "ratingScale": obj.get("ratingScale")
        })
        return _obj



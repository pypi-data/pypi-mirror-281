# coding: utf-8

"""
    Glean Client API

    # Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

    The version of the OpenAPI document: 0.9.0
    Contact: support@glean.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from glean_client_api.models.datasource_profile import DatasourceProfile
from glean_client_api.models.object_permissions import ObjectPermissions
from glean_client_api.models.related_object_edge import RelatedObjectEdge
from glean_client_api.models.team_email import TeamEmail
from typing import Optional, Set
from typing_extensions import Self

class Team(BaseModel):
    """
    Team
    """ # noqa: E501
    related_objects: Optional[Dict[str, RelatedObjectEdge]] = Field(default=None, description="A list of objects related to a source object.", alias="relatedObjects")
    permissions: Optional[ObjectPermissions] = None
    id: StrictStr = Field(description="Unique identifier")
    name: StrictStr = Field(description="Team name")
    description: Optional[StrictStr] = Field(default=None, description="A description of the team")
    business_unit: Optional[StrictStr] = Field(default=None, description="Typically the highest level organizational unit; generally applies to bigger companies with multiple distinct businesses.", alias="businessUnit")
    department: Optional[StrictStr] = Field(default=None, description="An organizational unit where everyone has a similar task, e.g. `Engineering`.")
    photo_url: Optional[StrictStr] = Field(default=None, description="A link to the team's photo.", alias="photoUrl")
    banner_url: Optional[StrictStr] = Field(default=None, description="A link to the team's banner photo.", alias="bannerUrl")
    external_link: Optional[StrictStr] = Field(default=None, description="Link to a team page on the internet or your company's intranet", alias="externalLink")
    members: Optional[List[PersonToTeamRelationship]] = Field(default=None, description="The members on this team")
    member_count: Optional[StrictInt] = Field(default=None, description="Number of members on this team (recursive; includes all individuals that belong to this team, and all individuals that belong to a subteam within this team)", alias="memberCount")
    emails: Optional[List[TeamEmail]] = Field(default=None, description="The emails for this team")
    datasource_profiles: Optional[List[DatasourceProfile]] = Field(default=None, description="The datasource profiles of the team", alias="datasourceProfiles")
    datasource: Optional[StrictStr] = Field(default=None, description="the data source of the team, e.g. GDRIVE")
    created_from: Optional[StrictStr] = Field(default=None, description="For teams created from docs, the doc title. Otherwise empty.", alias="createdFrom")
    last_updated_at: Optional[datetime] = Field(default=None, description="when this team was last updated.", alias="lastUpdatedAt")
    status: Optional[StrictStr] = Field(default='PROCESSED', description="whether this team is fully processed or there are still unprocessed operations that'll affect it")
    can_be_deleted: Optional[StrictBool] = Field(default=True, description="can this team be deleted. Some manually ingested teams like GCS_CSV or PUSH_API cannot", alias="canBeDeleted")
    logging_id: Optional[StrictStr] = Field(default=None, description="The logging id of the team used in scrubbed logs, client analytics, and metrics.", alias="loggingId")
    __properties: ClassVar[List[str]] = ["relatedObjects", "permissions", "id", "name", "description", "businessUnit", "department", "photoUrl", "bannerUrl", "externalLink", "members", "memberCount", "emails", "datasourceProfiles", "datasource", "createdFrom", "lastUpdatedAt", "status", "canBeDeleted", "loggingId"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PROCESSED', 'QUEUED_FOR_CREATION', 'QUEUED_FOR_DELETION']):
            raise ValueError("must be one of enum values ('PROCESSED', 'QUEUED_FOR_CREATION', 'QUEUED_FOR_DELETION')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Team from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in related_objects (dict)
        _field_dict = {}
        if self.related_objects:
            for _key in self.related_objects:
                if self.related_objects[_key]:
                    _field_dict[_key] = self.related_objects[_key].to_dict()
            _dict['relatedObjects'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of permissions
        if self.permissions:
            _dict['permissions'] = self.permissions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in members (list)
        _items = []
        if self.members:
            for _item in self.members:
                if _item:
                    _items.append(_item.to_dict())
            _dict['members'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in emails (list)
        _items = []
        if self.emails:
            for _item in self.emails:
                if _item:
                    _items.append(_item.to_dict())
            _dict['emails'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in datasource_profiles (list)
        _items = []
        if self.datasource_profiles:
            for _item in self.datasource_profiles:
                if _item:
                    _items.append(_item.to_dict())
            _dict['datasourceProfiles'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Team from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "relatedObjects": dict(
                (_k, RelatedObjectEdge.from_dict(_v))
                for _k, _v in obj["relatedObjects"].items()
            )
            if obj.get("relatedObjects") is not None
            else None,
            "permissions": ObjectPermissions.from_dict(obj["permissions"]) if obj.get("permissions") is not None else None,
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "businessUnit": obj.get("businessUnit"),
            "department": obj.get("department"),
            "photoUrl": obj.get("photoUrl"),
            "bannerUrl": obj.get("bannerUrl"),
            "externalLink": obj.get("externalLink"),
            "members": [PersonToTeamRelationship.from_dict(_item) for _item in obj["members"]] if obj.get("members") is not None else None,
            "memberCount": obj.get("memberCount"),
            "emails": [TeamEmail.from_dict(_item) for _item in obj["emails"]] if obj.get("emails") is not None else None,
            "datasourceProfiles": [DatasourceProfile.from_dict(_item) for _item in obj["datasourceProfiles"]] if obj.get("datasourceProfiles") is not None else None,
            "datasource": obj.get("datasource"),
            "createdFrom": obj.get("createdFrom"),
            "lastUpdatedAt": obj.get("lastUpdatedAt"),
            "status": obj.get("status") if obj.get("status") is not None else 'PROCESSED',
            "canBeDeleted": obj.get("canBeDeleted") if obj.get("canBeDeleted") is not None else True,
            "loggingId": obj.get("loggingId")
        })
        return _obj

from glean_client_api.models.person_to_team_relationship import PersonToTeamRelationship
# TODO: Rewrite to not use raise_errors
Team.model_rebuild(raise_errors=False)


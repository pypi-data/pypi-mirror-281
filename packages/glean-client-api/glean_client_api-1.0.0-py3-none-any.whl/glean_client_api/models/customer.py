# coding: utf-8

"""
    Glean Client API

    # Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

    The version of the OpenAPI document: 0.9.0
    Contact: support@glean.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from glean_client_api.models.company import Company
from glean_client_api.models.customer_metadata import CustomerMetadata
from typing import Optional, Set
from typing_extensions import Self

class Customer(BaseModel):
    """
    Customer
    """ # noqa: E501
    id: StrictStr = Field(description="Unique identifier.")
    domains: Optional[List[StrictStr]] = Field(default=None, description="Link to company's associated website domains.")
    company: Company
    document_counts: Optional[Dict[str, StrictInt]] = Field(default=None, description="A map of {string, int} pairs representing counts of each document type associated with this customer.", alias="documentCounts")
    poc: Optional[List[Person]] = Field(default=None, description="A list of POC for company.")
    metadata: Optional[CustomerMetadata] = None
    merged_customers: Optional[List[Customer]] = Field(default=None, description="A list of Customers.", alias="mergedCustomers")
    start_date: Optional[date] = Field(default=None, description="The date when the interaction with customer started.", alias="startDate")
    contract_annual_revenue: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Average contract annual revenue with that customer.", alias="contractAnnualRevenue")
    notes: Optional[StrictStr] = Field(default=None, description="User facing (potentially generated) notes about company.")
    __properties: ClassVar[List[str]] = ["id", "domains", "company", "documentCounts", "poc", "metadata", "mergedCustomers", "startDate", "contractAnnualRevenue", "notes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Customer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of company
        if self.company:
            _dict['company'] = self.company.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in poc (list)
        _items = []
        if self.poc:
            for _item in self.poc:
                if _item:
                    _items.append(_item.to_dict())
            _dict['poc'] = _items
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in merged_customers (list)
        _items = []
        if self.merged_customers:
            for _item in self.merged_customers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['mergedCustomers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Customer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "domains": obj.get("domains"),
            "company": Company.from_dict(obj["company"]) if obj.get("company") is not None else None,
            "documentCounts": obj.get("documentCounts"),
            "poc": [Person.from_dict(_item) for _item in obj["poc"]] if obj.get("poc") is not None else None,
            "metadata": CustomerMetadata.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "mergedCustomers": [Customer.from_dict(_item) for _item in obj["mergedCustomers"]] if obj.get("mergedCustomers") is not None else None,
            "startDate": obj.get("startDate"),
            "contractAnnualRevenue": obj.get("contractAnnualRevenue"),
            "notes": obj.get("notes")
        })
        return _obj

from glean_client_api.models.person import Person
# TODO: Rewrite to not use raise_errors
Customer.model_rebuild(raise_errors=False)


# coding: utf-8

"""
    Glean Client API

    # Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

    The version of the OpenAPI document: 0.9.0
    Contact: support@glean.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from glean_client_api.models.count_info import CountInfo
from typing import Optional, Set
from typing_extensions import Self

class VerificationMetadata(BaseModel):
    """
    VerificationMetadata
    """ # noqa: E501
    last_verifier: Optional[Person] = Field(default=None, alias="lastVerifier")
    last_verification_ts: Optional[StrictInt] = Field(default=None, description="The unix timestamp of the verification (in seconds since epoch UTC).", alias="lastVerificationTs")
    expiration_ts: Optional[StrictInt] = Field(default=None, description="The unix timestamp of the verification expiration if applicable (in seconds since epoch UTC).", alias="expirationTs")
    document: Optional[Document] = None
    reminders: Optional[List[Reminder]] = Field(default=None, description="Info about all outstanding verification reminders for the document if exists.")
    last_reminder: Optional[Reminder] = Field(default=None, alias="lastReminder")
    visitor_count: Optional[List[CountInfo]] = Field(default=None, description="Number of visitors to the document during included time periods.", alias="visitorCount")
    candidate_verifiers: Optional[List[Person]] = Field(default=None, description="List of potential verifiers for the document e.g. old verifiers and/or users with view/edit permissions.", alias="candidateVerifiers")
    __properties: ClassVar[List[str]] = ["lastVerifier", "lastVerificationTs", "expirationTs", "document", "reminders", "lastReminder", "visitorCount", "candidateVerifiers"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VerificationMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of last_verifier
        if self.last_verifier:
            _dict['lastVerifier'] = self.last_verifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of document
        if self.document:
            _dict['document'] = self.document.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in reminders (list)
        _items = []
        if self.reminders:
            for _item in self.reminders:
                if _item:
                    _items.append(_item.to_dict())
            _dict['reminders'] = _items
        # override the default output from pydantic by calling `to_dict()` of last_reminder
        if self.last_reminder:
            _dict['lastReminder'] = self.last_reminder.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in visitor_count (list)
        _items = []
        if self.visitor_count:
            for _item in self.visitor_count:
                if _item:
                    _items.append(_item.to_dict())
            _dict['visitorCount'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in candidate_verifiers (list)
        _items = []
        if self.candidate_verifiers:
            for _item in self.candidate_verifiers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['candidateVerifiers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VerificationMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "lastVerifier": Person.from_dict(obj["lastVerifier"]) if obj.get("lastVerifier") is not None else None,
            "lastVerificationTs": obj.get("lastVerificationTs"),
            "expirationTs": obj.get("expirationTs"),
            "document": Document.from_dict(obj["document"]) if obj.get("document") is not None else None,
            "reminders": [Reminder.from_dict(_item) for _item in obj["reminders"]] if obj.get("reminders") is not None else None,
            "lastReminder": Reminder.from_dict(obj["lastReminder"]) if obj.get("lastReminder") is not None else None,
            "visitorCount": [CountInfo.from_dict(_item) for _item in obj["visitorCount"]] if obj.get("visitorCount") is not None else None,
            "candidateVerifiers": [Person.from_dict(_item) for _item in obj["candidateVerifiers"]] if obj.get("candidateVerifiers") is not None else None
        })
        return _obj

from glean_client_api.models.document import Document
from glean_client_api.models.person import Person
from glean_client_api.models.reminder import Reminder
# TODO: Rewrite to not use raise_errors
VerificationMetadata.model_rebuild(raise_errors=False)


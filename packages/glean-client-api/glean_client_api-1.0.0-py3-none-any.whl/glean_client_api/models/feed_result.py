# coding: utf-8

"""
    Glean Client API

    # Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

    The version of the OpenAPI document: 0.9.0
    Contact: support@glean.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from glean_client_api.models.facet_result import FacetResult
from glean_client_api.models.feed_entry import FeedEntry
from typing import Optional, Set
from typing_extensions import Self

class FeedResult(BaseModel):
    """
    FeedResult
    """ # noqa: E501
    category: StrictStr = Field(description="Category of the result, one of the requested categories in incoming request.")
    primary_entry: FeedEntry = Field(alias="primaryEntry")
    secondary_entries: Optional[List[FeedEntry]] = Field(default=None, description="Secondary entries for the result e.g. suggested docs for the calendar, carousel.", alias="secondaryEntries")
    rank: Optional[StrictInt] = Field(default=None, description="Rank of the result. Rank is suggested by server. Client side rank may differ.")
    facet_results: Optional[List[FacetResult]] = Field(default=None, description="DEPRECATED - List of facets that can be used to filter the entry's content.", alias="facetResults")
    __properties: ClassVar[List[str]] = ["category", "primaryEntry", "secondaryEntries", "rank", "facetResults"]

    @field_validator('category')
    def category_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['DOCUMENT_SUGGESTION', 'DOCUMENT_SUGGESTION_SCENARIO', 'TRENDING_DOCUMENT', 'USE_CASE', 'VERIFICATION_REMINDER', 'EVENT', 'ANNOUNCEMENT', 'MENTION', 'DATASOURCE_AFFINITY', 'RECENT', 'COMPANY_RESOURCE', 'EXPERIMENTAL', 'PEOPLE_CELEBRATIONS', 'SOCIAL_LINK', 'EXTERNAL_TASKS', 'DISPLAYABLE_LIST', 'ZERO_STATE_CHAT_SUGGESTION', 'ZERO_STATE_CHAT_TOOL_SUGGESTION']):
            raise ValueError("must be one of enum values ('DOCUMENT_SUGGESTION', 'DOCUMENT_SUGGESTION_SCENARIO', 'TRENDING_DOCUMENT', 'USE_CASE', 'VERIFICATION_REMINDER', 'EVENT', 'ANNOUNCEMENT', 'MENTION', 'DATASOURCE_AFFINITY', 'RECENT', 'COMPANY_RESOURCE', 'EXPERIMENTAL', 'PEOPLE_CELEBRATIONS', 'SOCIAL_LINK', 'EXTERNAL_TASKS', 'DISPLAYABLE_LIST', 'ZERO_STATE_CHAT_SUGGESTION', 'ZERO_STATE_CHAT_TOOL_SUGGESTION')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FeedResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of primary_entry
        if self.primary_entry:
            _dict['primaryEntry'] = self.primary_entry.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in secondary_entries (list)
        _items = []
        if self.secondary_entries:
            for _item in self.secondary_entries:
                if _item:
                    _items.append(_item.to_dict())
            _dict['secondaryEntries'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in facet_results (list)
        _items = []
        if self.facet_results:
            for _item in self.facet_results:
                if _item:
                    _items.append(_item.to_dict())
            _dict['facetResults'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FeedResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "category": obj.get("category"),
            "primaryEntry": FeedEntry.from_dict(obj["primaryEntry"]) if obj.get("primaryEntry") is not None else None,
            "secondaryEntries": [FeedEntry.from_dict(_item) for _item in obj["secondaryEntries"]] if obj.get("secondaryEntries") is not None else None,
            "rank": obj.get("rank"),
            "facetResults": [FacetResult.from_dict(_item) for _item in obj["facetResults"]] if obj.get("facetResults") is not None else None
        })
        return _obj



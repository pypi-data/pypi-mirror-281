# coding: utf-8

"""
    Glean Client API

    # Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

    The version of the OpenAPI document: 0.9.0
    Contact: support@glean.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from glean_client_api.models.feedback_channel import FeedbackChannel
from typing import Optional, Set
from typing_extensions import Self

class FeedbackCustomizations(BaseModel):
    """
    FeedbackCustomizations
    """ # noqa: E501
    default_channels: Optional[List[FeedbackChannel]] = Field(default=None, description="The channels to which feedback will be sent for any feature that does not have specific configuration.", alias="defaultChannels")
    feature_channels: Optional[Dict[str, List[FeedbackChannel]]] = Field(default=None, description="The channels to which feedback will be sent for individual features. The keys of the map will match the values in FeedbackFeature. Features not present in the map should use defaultChannels.", alias="featureChannels")
    disclaimer: Optional[StrictStr] = Field(default=None, description="A custom message shown to users during the in-product feedback flow, e.g. to warn users against sending sensitive or personally-identifying information.")
    company_privacy_policy_link: Optional[StrictStr] = Field(default=None, description="An optional link to a privacy policy provided by the users' company that will be shown to them during the in-product feedback flow if their company will receive their feedback. Glean's policy will also be shown if Glean is receiving the feedback.", alias="companyPrivacyPolicyLink")
    support_message: Optional[StrictStr] = Field(default=None, description="User visible text shown when seeking support to guide them to their company's internal support page when appropriate", alias="supportMessage")
    support_link_text: Optional[StrictStr] = Field(default=None, description="User visible text that will link to the user's company's internal support page", alias="supportLinkText")
    support_link: Optional[StrictStr] = Field(default=None, description="URL to the user's company's internal suport page", alias="supportLink")
    __properties: ClassVar[List[str]] = ["defaultChannels", "featureChannels", "disclaimer", "companyPrivacyPolicyLink", "supportMessage", "supportLinkText", "supportLink"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FeedbackCustomizations from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in feature_channels (dict of array)
        _field_dict_of_array = {}
        if self.feature_channels:
            for _key in self.feature_channels:
                if self.feature_channels[_key] is not None:
                    _field_dict_of_array[_key] = [
                        _item.to_dict() for _item in self.feature_channels[_key]
                    ]
            _dict['featureChannels'] = _field_dict_of_array
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FeedbackCustomizations from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "defaultChannels": obj.get("defaultChannels"),
            "featureChannels": dict(
                (_k,
                        [FeedbackChannel.from_dict(_item) for _item in _v]
                        if _v is not None
                        else None
                )
                for _k, _v in obj.get("featureChannels", {}).items()
            ),
            "disclaimer": obj.get("disclaimer"),
            "companyPrivacyPolicyLink": obj.get("companyPrivacyPolicyLink"),
            "supportMessage": obj.get("supportMessage"),
            "supportLinkText": obj.get("supportLinkText"),
            "supportLink": obj.get("supportLink")
        })
        return _obj



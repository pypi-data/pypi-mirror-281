# coding: utf-8

"""
    Glean Client API

    # Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

    The version of the OpenAPI document: 0.9.0
    Contact: support@glean.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from glean_client_api.models.count_info import CountInfo
from typing import Optional, Set
from typing_extensions import Self

class DocumentInteractions(BaseModel):
    """
    DocumentInteractions
    """ # noqa: E501
    num_comments: Optional[StrictInt] = Field(default=None, description="The count of comments (thread replies in the case of slack).", alias="numComments")
    num_reactions: Optional[StrictInt] = Field(default=None, description="The count of reactions on the document.", alias="numReactions")
    reactions: Optional[List[StrictStr]] = Field(default=None, description="To be deprecated in favor of reacts. A (potentially non-exhaustive) list of reactions for the document.")
    reacts: Optional[List[Reaction]] = None
    shares: Optional[List[Share]] = Field(default=None, description="Describes instances of someone posting a link to this document in one of our indexed datasources.")
    visitor_count: Optional[CountInfo] = Field(default=None, alias="visitorCount")
    __properties: ClassVar[List[str]] = ["numComments", "numReactions", "reactions", "reacts", "shares", "visitorCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DocumentInteractions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in reacts (list)
        _items = []
        if self.reacts:
            for _item in self.reacts:
                if _item:
                    _items.append(_item.to_dict())
            _dict['reacts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in shares (list)
        _items = []
        if self.shares:
            for _item in self.shares:
                if _item:
                    _items.append(_item.to_dict())
            _dict['shares'] = _items
        # override the default output from pydantic by calling `to_dict()` of visitor_count
        if self.visitor_count:
            _dict['visitorCount'] = self.visitor_count.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DocumentInteractions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "numComments": obj.get("numComments"),
            "numReactions": obj.get("numReactions"),
            "reactions": obj.get("reactions"),
            "reacts": [Reaction.from_dict(_item) for _item in obj["reacts"]] if obj.get("reacts") is not None else None,
            "shares": [Share.from_dict(_item) for _item in obj["shares"]] if obj.get("shares") is not None else None,
            "visitorCount": CountInfo.from_dict(obj["visitorCount"]) if obj.get("visitorCount") is not None else None
        })
        return _obj

from glean_client_api.models.reaction import Reaction
from glean_client_api.models.share import Share
# TODO: Rewrite to not use raise_errors
DocumentInteractions.model_rebuild(raise_errors=False)


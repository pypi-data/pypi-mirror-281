# coding: utf-8

"""
    Glean Client API

    # Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

    The version of the OpenAPI document: 0.9.0
    Contact: support@glean.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class RelatedDocuments(BaseModel):
    """
    RelatedDocuments
    """ # noqa: E501
    relation: Optional[StrictStr] = Field(default=None, description="How this document relates to the including entity.")
    associated_entity_id: Optional[StrictStr] = Field(default=None, description="Which entity in the response that this entity relates to. Relevant when there are multiple entities associated with the response (such as merged customers)", alias="associatedEntityId")
    query_suggestion: Optional[QuerySuggestion] = Field(default=None, alias="querySuggestion")
    documents: Optional[List[Document]] = Field(default=None, description="A truncated list of documents with this relation. TO BE DEPRECATED.")
    results: Optional[List[SearchResult]] = Field(default=None, description="A truncated list of documents associated with this relation. To be used in favor of `documents` because it contains a trackingToken.")
    __properties: ClassVar[List[str]] = ["relation", "associatedEntityId", "querySuggestion", "documents", "results"]

    @field_validator('relation')
    def relation_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CASE', 'CONTACT', 'CONVERSATION_MESSAGES', 'FROM', 'OPPORTUNITY', 'RECENT', 'SOURCE', 'TICKET', 'WITH', 'EXPERT', 'CANONICAL']):
            raise ValueError("must be one of enum values ('CASE', 'CONTACT', 'CONVERSATION_MESSAGES', 'FROM', 'OPPORTUNITY', 'RECENT', 'SOURCE', 'TICKET', 'WITH', 'EXPERT', 'CANONICAL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RelatedDocuments from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of query_suggestion
        if self.query_suggestion:
            _dict['querySuggestion'] = self.query_suggestion.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in documents (list)
        _items = []
        if self.documents:
            for _item in self.documents:
                if _item:
                    _items.append(_item.to_dict())
            _dict['documents'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in results (list)
        _items = []
        if self.results:
            for _item in self.results:
                if _item:
                    _items.append(_item.to_dict())
            _dict['results'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RelatedDocuments from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "relation": obj.get("relation"),
            "associatedEntityId": obj.get("associatedEntityId"),
            "querySuggestion": QuerySuggestion.from_dict(obj["querySuggestion"]) if obj.get("querySuggestion") is not None else None,
            "documents": [Document.from_dict(_item) for _item in obj["documents"]] if obj.get("documents") is not None else None,
            "results": [SearchResult.from_dict(_item) for _item in obj["results"]] if obj.get("results") is not None else None
        })
        return _obj

from glean_client_api.models.document import Document
from glean_client_api.models.query_suggestion import QuerySuggestion
from glean_client_api.models.search_result import SearchResult
# TODO: Rewrite to not use raise_errors
RelatedDocuments.model_rebuild(raise_errors=False)


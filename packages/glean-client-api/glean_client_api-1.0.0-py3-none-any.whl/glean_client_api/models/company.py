# coding: utf-8

"""
    Glean Client API

    # Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

    The version of the OpenAPI document: 0.9.0
    Contact: support@glean.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class Company(BaseModel):
    """
    Company
    """ # noqa: E501
    name: StrictStr = Field(description="User-friendly display name.")
    profile_url: Optional[StrictStr] = Field(default=None, description="Link to internal company company profile.", alias="profileUrl")
    website_urls: Optional[List[StrictStr]] = Field(default=None, description="Link to company's associated websites.", alias="websiteUrls")
    logo_url: Optional[StrictStr] = Field(default=None, description="The URL of the company's logo. Public, Glean-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs).", alias="logoUrl")
    location: Optional[StrictStr] = Field(default=None, description="User facing string representing the company's location.")
    phone: Optional[StrictStr] = Field(default=None, description="Phone number as a number string.")
    fax: Optional[StrictStr] = Field(default=None, description="Fax number as a number string.")
    industry: Optional[StrictStr] = Field(default=None, description="User facing string representing the company's industry.")
    annual_revenue: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Average company's annual revenue for reference.", alias="annualRevenue")
    number_of_employees: Optional[StrictInt] = Field(default=None, description="Average company's number of employees for reference.", alias="numberOfEmployees")
    stock_symbol: Optional[StrictStr] = Field(default=None, description="Company's stock symbol if company is public.", alias="stockSymbol")
    founded_date: Optional[date] = Field(default=None, description="The date when the company was founded.", alias="foundedDate")
    about: Optional[StrictStr] = Field(default=None, description="User facing description of company.")
    __properties: ClassVar[List[str]] = ["name", "profileUrl", "websiteUrls", "logoUrl", "location", "phone", "fax", "industry", "annualRevenue", "numberOfEmployees", "stockSymbol", "foundedDate", "about"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Company from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Company from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "profileUrl": obj.get("profileUrl"),
            "websiteUrls": obj.get("websiteUrls"),
            "logoUrl": obj.get("logoUrl"),
            "location": obj.get("location"),
            "phone": obj.get("phone"),
            "fax": obj.get("fax"),
            "industry": obj.get("industry"),
            "annualRevenue": obj.get("annualRevenue"),
            "numberOfEmployees": obj.get("numberOfEmployees"),
            "stockSymbol": obj.get("stockSymbol"),
            "foundedDate": obj.get("foundedDate"),
            "about": obj.get("about")
        })
        return _obj



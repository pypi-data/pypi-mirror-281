# coding: utf-8

"""
    Glean Client API

    # Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

    The version of the OpenAPI document: 0.9.0
    Contact: support@glean.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from glean_client_api.models.connector_type import ConnectorType
from glean_client_api.models.document_content import DocumentContent
from glean_client_api.models.document_section import DocumentSection
from typing import Optional, Set
from typing_extensions import Self

class Document(BaseModel):
    """
    Document
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The Glean Document ID.")
    datasource: Optional[StrictStr] = Field(default=None, description="The app or other repository type from which the document was extracted")
    connector_type: Optional[ConnectorType] = Field(default=None, alias="connectorType")
    doc_type: Optional[StrictStr] = Field(default=None, description="The datasource-specific type of the document (e.g. for Jira issues, this is the issue type such as Bug or Feature Request).", alias="docType")
    content: Optional[DocumentContent] = None
    container_document: Optional[Document] = Field(default=None, alias="containerDocument")
    parent_document: Optional[Document] = Field(default=None, alias="parentDocument")
    title: Optional[StrictStr] = Field(default=None, description="The title of the document.")
    url: Optional[StrictStr] = Field(default=None, description="A permalink for the document.")
    metadata: Optional[DocumentMetadata] = None
    sections: Optional[List[DocumentSection]] = Field(default=None, description="A list of content sub-sections in the document, e.g. text blocks with different headings in a Drive doc or Confluence page.")
    __properties: ClassVar[List[str]] = ["id", "datasource", "connectorType", "docType", "content", "containerDocument", "parentDocument", "title", "url", "metadata", "sections"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Document from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of content
        if self.content:
            _dict['content'] = self.content.to_dict()
        # override the default output from pydantic by calling `to_dict()` of container_document
        if self.container_document:
            _dict['containerDocument'] = self.container_document.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parent_document
        if self.parent_document:
            _dict['parentDocument'] = self.parent_document.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in sections (list)
        _items = []
        if self.sections:
            for _item in self.sections:
                if _item:
                    _items.append(_item.to_dict())
            _dict['sections'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Document from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "datasource": obj.get("datasource"),
            "connectorType": obj.get("connectorType"),
            "docType": obj.get("docType"),
            "content": DocumentContent.from_dict(obj["content"]) if obj.get("content") is not None else None,
            "containerDocument": Document.from_dict(obj["containerDocument"]) if obj.get("containerDocument") is not None else None,
            "parentDocument": Document.from_dict(obj["parentDocument"]) if obj.get("parentDocument") is not None else None,
            "title": obj.get("title"),
            "url": obj.get("url"),
            "metadata": DocumentMetadata.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "sections": [DocumentSection.from_dict(_item) for _item in obj["sections"]] if obj.get("sections") is not None else None
        })
        return _obj

from glean_client_api.models.document_metadata import DocumentMetadata
# TODO: Rewrite to not use raise_errors
Document.model_rebuild(raise_errors=False)


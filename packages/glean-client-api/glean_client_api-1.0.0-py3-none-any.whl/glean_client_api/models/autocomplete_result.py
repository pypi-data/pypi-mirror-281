# coding: utf-8

"""
    Glean Client API

    # Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

    The version of the OpenAPI document: 0.9.0
    Contact: support@glean.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from glean_client_api.models.document import Document
from glean_client_api.models.operator_metadata import OperatorMetadata
from glean_client_api.models.quicklink import Quicklink
from glean_client_api.models.structured_result import StructuredResult
from glean_client_api.models.text_range import TextRange
from typing import Optional, Set
from typing_extensions import Self

class AutocompleteResult(BaseModel):
    """
    AutocompleteResult
    """ # noqa: E501
    result: StrictStr
    keywords: Optional[List[StrictStr]] = Field(default=None, description="A list of all possible keywords for given result.")
    result_type: Optional[StrictStr] = Field(default=None, alias="resultType")
    score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Higher indicates a more confident match.")
    operator_metadata: Optional[OperatorMetadata] = Field(default=None, alias="operatorMetadata")
    quicklink: Optional[Quicklink] = None
    document: Optional[Document] = None
    url: Optional[StrictStr] = None
    structured_result: Optional[StructuredResult] = Field(default=None, alias="structuredResult")
    tracking_token: Optional[StrictStr] = Field(default=None, description="A token to be passed in /feedback events associated with this autocomplete result.", alias="trackingToken")
    ranges: Optional[List[TextRange]] = Field(default=None, description="Subsections of the result string to which some special formatting should be applied (eg. bold)")
    __properties: ClassVar[List[str]] = ["result", "keywords", "resultType", "score", "operatorMetadata", "quicklink", "document", "url", "structuredResult", "trackingToken", "ranges"]

    @field_validator('result_type')
    def result_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ADDITIONAL_DOCUMENT', 'APP', 'BROWSER_HISTORY', 'DATASOURCE', 'DOCUMENT', 'ENTITY', 'GOLINK', 'HISTORY', 'NEW_CHAT', 'OPERATOR', 'OPERATOR_VALUE', 'QUICKLINK', 'SUGGESTION']):
            raise ValueError("must be one of enum values ('ADDITIONAL_DOCUMENT', 'APP', 'BROWSER_HISTORY', 'DATASOURCE', 'DOCUMENT', 'ENTITY', 'GOLINK', 'HISTORY', 'NEW_CHAT', 'OPERATOR', 'OPERATOR_VALUE', 'QUICKLINK', 'SUGGESTION')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AutocompleteResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of operator_metadata
        if self.operator_metadata:
            _dict['operatorMetadata'] = self.operator_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of quicklink
        if self.quicklink:
            _dict['quicklink'] = self.quicklink.to_dict()
        # override the default output from pydantic by calling `to_dict()` of document
        if self.document:
            _dict['document'] = self.document.to_dict()
        # override the default output from pydantic by calling `to_dict()` of structured_result
        if self.structured_result:
            _dict['structuredResult'] = self.structured_result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in ranges (list)
        _items = []
        if self.ranges:
            for _item in self.ranges:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ranges'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AutocompleteResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "result": obj.get("result"),
            "keywords": obj.get("keywords"),
            "resultType": obj.get("resultType"),
            "score": obj.get("score"),
            "operatorMetadata": OperatorMetadata.from_dict(obj["operatorMetadata"]) if obj.get("operatorMetadata") is not None else None,
            "quicklink": Quicklink.from_dict(obj["quicklink"]) if obj.get("quicklink") is not None else None,
            "document": Document.from_dict(obj["document"]) if obj.get("document") is not None else None,
            "url": obj.get("url"),
            "structuredResult": StructuredResult.from_dict(obj["structuredResult"]) if obj.get("structuredResult") is not None else None,
            "trackingToken": obj.get("trackingToken"),
            "ranges": [TextRange.from_dict(_item) for _item in obj["ranges"]] if obj.get("ranges") is not None else None
        })
        return _obj



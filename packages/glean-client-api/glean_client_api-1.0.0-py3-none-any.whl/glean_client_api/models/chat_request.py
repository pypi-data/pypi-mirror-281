# coding: utf-8

"""
    Glean Client API

    # Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

    The version of the OpenAPI document: 0.9.0
    Contact: support@glean.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from glean_client_api.models.agent_config import AgentConfig
from glean_client_api.models.chat_message import ChatMessage
from glean_client_api.models.restriction_filters import RestrictionFilters
from typing import Optional, Set
from typing_extensions import Self

class ChatRequest(BaseModel):
    """
    ChatRequest
    """ # noqa: E501
    save_chat: Optional[StrictBool] = Field(default=None, description="Save the current interaction as a Chat for the user to access later.", alias="saveChat")
    chat_id: Optional[StrictStr] = Field(default=None, description="The id of the Chat that this message should be added to. An empty id signifies creating a new Chat if saveChat is true.", alias="chatId")
    messages: List[ChatMessage] = Field(description="A list of chat messages, from most recent to least recent. It can be assumed that the first chat message in the list is the user's most recent query.")
    agent_config: Optional[AgentConfig] = Field(default=None, alias="agentConfig")
    inclusions: Optional[RestrictionFilters] = None
    exclusions: Optional[RestrictionFilters] = None
    timeout_millis: Optional[StrictInt] = Field(default=None, description="Timeout in milliseconds for the request. A `408` error will be returned if handling the request takes longer.", alias="timeoutMillis")
    application_id: Optional[StrictStr] = Field(default=None, description="The ID of the application this request originates from, used to determine the configuration of underlying chat processes. This should correspond to the ID set during admin setup. If not specified, the default chat experience will be used.", alias="applicationId")
    stream: Optional[StrictBool] = Field(default=None, description="Whether to stream responses as they become available. If false, the entire response will be returned at once. Note if true and the model being used does not support streaming, the model's response will not be streamed but other messages from the endpoint still will.")
    __properties: ClassVar[List[str]] = ["saveChat", "chatId", "messages", "agentConfig", "inclusions", "exclusions", "timeoutMillis", "applicationId", "stream"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChatRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in messages (list)
        _items = []
        if self.messages:
            for _item in self.messages:
                if _item:
                    _items.append(_item.to_dict())
            _dict['messages'] = _items
        # override the default output from pydantic by calling `to_dict()` of agent_config
        if self.agent_config:
            _dict['agentConfig'] = self.agent_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of inclusions
        if self.inclusions:
            _dict['inclusions'] = self.inclusions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of exclusions
        if self.exclusions:
            _dict['exclusions'] = self.exclusions.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChatRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "saveChat": obj.get("saveChat"),
            "chatId": obj.get("chatId"),
            "messages": [ChatMessage.from_dict(_item) for _item in obj["messages"]] if obj.get("messages") is not None else None,
            "agentConfig": AgentConfig.from_dict(obj["agentConfig"]) if obj.get("agentConfig") is not None else None,
            "inclusions": RestrictionFilters.from_dict(obj["inclusions"]) if obj.get("inclusions") is not None else None,
            "exclusions": RestrictionFilters.from_dict(obj["exclusions"]) if obj.get("exclusions") is not None else None,
            "timeoutMillis": obj.get("timeoutMillis"),
            "applicationId": obj.get("applicationId"),
            "stream": obj.get("stream")
        })
        return _obj



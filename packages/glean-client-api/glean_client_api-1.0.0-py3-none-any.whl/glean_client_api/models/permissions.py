# coding: utf-8

"""
    Glean Client API

    # Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

    The version of the OpenAPI document: 0.9.0
    Contact: support@glean.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from glean_client_api.models.grant_permission import GrantPermission
from glean_client_api.models.read_permission import ReadPermission
from glean_client_api.models.write_permission import WritePermission
from typing import Optional, Set
from typing_extensions import Self

class Permissions(BaseModel):
    """
    Describes the permissions levels that a user has for permissioned features. When the client sends this, Permissions.read and Permissions.write are the additional permissions granted to a user on top of what they have via their roles. When the server sends this, Permissions.read and Permissions.write are the complete (merged) set of permissions the user has, and Permissions.roles is just for display purposes.
    """ # noqa: E501
    can_admin_search: Optional[StrictBool] = Field(default=None, description="TODO--deprecate in favor of the read and write properties. True if the user has access to /adminsearch", alias="canAdminSearch")
    can_admin_client_api_global_tokens: Optional[StrictBool] = Field(default=None, description="TODO--deprecate in favor of the read and write properties. True if the user can administrate client API tokens with global scope", alias="canAdminClientApiGlobalTokens")
    can_dlp: Optional[StrictBool] = Field(default=None, description="TODO--deprecate in favor of the read and write properties. True if the user has access to data loss prevention (DLP) features", alias="canDlp")
    read: Optional[Dict[str, List[ReadPermission]]] = Field(default=None, description="Describes the read permission levels that a user has for permissioned features. Key must be PermissionedFeatureOrObject")
    write: Optional[Dict[str, List[WritePermission]]] = Field(default=None, description="Describes the write permissions levels that a user has for permissioned features. Key must be PermissionedFeatureOrObject")
    grant: Optional[Dict[str, List[GrantPermission]]] = Field(default=None, description="Describes the grant permission levels that a user has for permissioned features. Key must be PermissionedFeatureOrObject")
    role: Optional[StrictStr] = Field(default=None, description="The roleId of the canonical role a user has. The displayName is equal to the roleId.")
    roles: Optional[List[StrictStr]] = Field(default=None, description="The roleIds of the roles a user has.")
    __properties: ClassVar[List[str]] = ["canAdminSearch", "canAdminClientApiGlobalTokens", "canDlp", "read", "write", "grant", "role", "roles"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Permissions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in read (dict of array)
        _field_dict_of_array = {}
        if self.read:
            for _key in self.read:
                if self.read[_key] is not None:
                    _field_dict_of_array[_key] = [
                        _item.to_dict() for _item in self.read[_key]
                    ]
            _dict['read'] = _field_dict_of_array
        # override the default output from pydantic by calling `to_dict()` of each value in write (dict of array)
        _field_dict_of_array = {}
        if self.write:
            for _key in self.write:
                if self.write[_key] is not None:
                    _field_dict_of_array[_key] = [
                        _item.to_dict() for _item in self.write[_key]
                    ]
            _dict['write'] = _field_dict_of_array
        # override the default output from pydantic by calling `to_dict()` of each value in grant (dict of array)
        _field_dict_of_array = {}
        if self.grant:
            for _key in self.grant:
                if self.grant[_key] is not None:
                    _field_dict_of_array[_key] = [
                        _item.to_dict() for _item in self.grant[_key]
                    ]
            _dict['grant'] = _field_dict_of_array
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Permissions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "canAdminSearch": obj.get("canAdminSearch"),
            "canAdminClientApiGlobalTokens": obj.get("canAdminClientApiGlobalTokens"),
            "canDlp": obj.get("canDlp"),
            "read": dict(
                (_k,
                        [ReadPermission.from_dict(_item) for _item in _v]
                        if _v is not None
                        else None
                )
                for _k, _v in obj.get("read", {}).items()
            ),
            "write": dict(
                (_k,
                        [WritePermission.from_dict(_item) for _item in _v]
                        if _v is not None
                        else None
                )
                for _k, _v in obj.get("write", {}).items()
            ),
            "grant": dict(
                (_k,
                        [GrantPermission.from_dict(_item) for _item in _v]
                        if _v is not None
                        else None
                )
                for _k, _v in obj.get("grant", {}).items()
            ),
            "role": obj.get("role"),
            "roles": obj.get("roles")
        })
        return _obj



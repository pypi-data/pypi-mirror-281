# coding: utf-8

"""
    Catalog Sampling API

    <p>The Catalog Sampling API offers functionality related to the Collibra Data Catalog application.<br/> It is mainly focused on facilitating the ingestion of information into Data Catalog.<br/> The API enables you to more easily connect Data Catalog to sources that are not necessarily natively supported in the product.</p>  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ColumnPagedResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'column_offset': 'int',
        'column_limit': 'int',
        'column_total': 'int',
        'columns': 'list[SampleColumn]'
    }

    attribute_map = {
        'column_offset': 'columnOffset',
        'column_limit': 'columnLimit',
        'column_total': 'columnTotal',
        'columns': 'columns'
    }

    def __init__(self, column_offset=None, column_limit=None, column_total=None, columns=None):  # noqa: E501
        """ColumnPagedResponse - a model defined in Swagger"""  # noqa: E501
        self._column_offset = None
        self._column_limit = None
        self._column_total = None
        self._columns = None
        self.discriminator = None
        if column_offset is not None:
            self.column_offset = column_offset
        if column_limit is not None:
            self.column_limit = column_limit
        if column_total is not None:
            self.column_total = column_total
        if columns is not None:
            self.columns = columns

    @property
    def column_offset(self):
        """Gets the column_offset of this ColumnPagedResponse.  # noqa: E501

        The number of results to skip in the response.  # noqa: E501

        :return: The column_offset of this ColumnPagedResponse.  # noqa: E501
        :rtype: int
        """
        return self._column_offset

    @column_offset.setter
    def column_offset(self, column_offset):
        """Sets the column_offset of this ColumnPagedResponse.

        The number of results to skip in the response.  # noqa: E501

        :param column_offset: The column_offset of this ColumnPagedResponse.  # noqa: E501
        :type: int
        """

        self._column_offset = column_offset

    @property
    def column_limit(self):
        """Gets the column_limit of this ColumnPagedResponse.  # noqa: E501

        The maximum number of results in the response.  # noqa: E501

        :return: The column_limit of this ColumnPagedResponse.  # noqa: E501
        :rtype: int
        """
        return self._column_limit

    @column_limit.setter
    def column_limit(self, column_limit):
        """Sets the column_limit of this ColumnPagedResponse.

        The maximum number of results in the response.  # noqa: E501

        :param column_limit: The column_limit of this ColumnPagedResponse.  # noqa: E501
        :type: int
        """

        self._column_limit = column_limit

    @property
    def column_total(self):
        """Gets the column_total of this ColumnPagedResponse.  # noqa: E501

        The total number of results in the response.  # noqa: E501

        :return: The column_total of this ColumnPagedResponse.  # noqa: E501
        :rtype: int
        """
        return self._column_total

    @column_total.setter
    def column_total(self, column_total):
        """Sets the column_total of this ColumnPagedResponse.

        The total number of results in the response.  # noqa: E501

        :param column_total: The column_total of this ColumnPagedResponse.  # noqa: E501
        :type: int
        """

        self._column_total = column_total

    @property
    def columns(self):
        """Gets the columns of this ColumnPagedResponse.  # noqa: E501

        The column array containing the sample data.  # noqa: E501

        :return: The columns of this ColumnPagedResponse.  # noqa: E501
        :rtype: list[SampleColumn]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this ColumnPagedResponse.

        The column array containing the sample data.  # noqa: E501

        :param columns: The columns of this ColumnPagedResponse.  # noqa: E501
        :type: list[SampleColumn]
        """

        self._columns = columns

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ColumnPagedResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ColumnPagedResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

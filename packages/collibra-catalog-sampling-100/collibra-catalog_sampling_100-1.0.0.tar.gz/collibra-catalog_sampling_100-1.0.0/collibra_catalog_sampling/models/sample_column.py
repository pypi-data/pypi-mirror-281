# coding: utf-8

"""
    Catalog Sampling API

    <p>The Catalog Sampling API offers functionality related to the Collibra Data Catalog application.<br/> It is mainly focused on facilitating the ingestion of information into Data Catalog.<br/> The API enables you to more easily connect Data Catalog to sources that are not necessarily natively supported in the product.</p>  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SampleColumn(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'display_name': 'str',
        'table_name': 'str',
        'samples': 'list[str]',
        'sampling_status': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'display_name': 'displayName',
        'table_name': 'tableName',
        'samples': 'samples',
        'sampling_status': 'samplingStatus'
    }

    def __init__(self, id=None, name=None, display_name=None, table_name=None, samples=None, sampling_status=None):  # noqa: E501
        """SampleColumn - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._display_name = None
        self._table_name = None
        self._samples = None
        self._sampling_status = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if display_name is not None:
            self.display_name = display_name
        if table_name is not None:
            self.table_name = table_name
        if samples is not None:
            self.samples = samples
        if sampling_status is not None:
            self.sampling_status = sampling_status

    @property
    def id(self):
        """Gets the id of this SampleColumn.  # noqa: E501

        The ID of the column asset.  # noqa: E501

        :return: The id of this SampleColumn.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SampleColumn.

        The ID of the column asset.  # noqa: E501

        :param id: The id of this SampleColumn.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this SampleColumn.  # noqa: E501

        The name of the column asset.  # noqa: E501

        :return: The name of this SampleColumn.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SampleColumn.

        The name of the column asset.  # noqa: E501

        :param name: The name of this SampleColumn.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def display_name(self):
        """Gets the display_name of this SampleColumn.  # noqa: E501

        The display name of the column asset.  # noqa: E501

        :return: The display_name of this SampleColumn.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this SampleColumn.

        The display name of the column asset.  # noqa: E501

        :param display_name: The display_name of this SampleColumn.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def table_name(self):
        """Gets the table_name of this SampleColumn.  # noqa: E501

        The table asset name the column asset belongs to.  # noqa: E501

        :return: The table_name of this SampleColumn.  # noqa: E501
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this SampleColumn.

        The table asset name the column asset belongs to.  # noqa: E501

        :param table_name: The table_name of this SampleColumn.  # noqa: E501
        :type: str
        """

        self._table_name = table_name

    @property
    def samples(self):
        """Gets the samples of this SampleColumn.  # noqa: E501

        Sample data for a given column asset.  # noqa: E501

        :return: The samples of this SampleColumn.  # noqa: E501
        :rtype: list[str]
        """
        return self._samples

    @samples.setter
    def samples(self, samples):
        """Sets the samples of this SampleColumn.

        Sample data for a given column asset.  # noqa: E501

        :param samples: The samples of this SampleColumn.  # noqa: E501
        :type: list[str]
        """

        self._samples = samples

    @property
    def sampling_status(self):
        """Gets the sampling_status of this SampleColumn.  # noqa: E501

        The processing status for column assets. The column can be missing (not found in the cache) or forbidden if the user lacks permissions.   # noqa: E501

        :return: The sampling_status of this SampleColumn.  # noqa: E501
        :rtype: str
        """
        return self._sampling_status

    @sampling_status.setter
    def sampling_status(self, sampling_status):
        """Sets the sampling_status of this SampleColumn.

        The processing status for column assets. The column can be missing (not found in the cache) or forbidden if the user lacks permissions.   # noqa: E501

        :param sampling_status: The sampling_status of this SampleColumn.  # noqa: E501
        :type: str
        """
        allowed_values = ["OK", "MISSING", "FORBIDDEN"]  # noqa: E501
        if sampling_status not in allowed_values:
            raise ValueError(
                "Invalid value for `sampling_status` ({0}), must be one of {1}"  # noqa: E501
                .format(sampling_status, allowed_values)
            )

        self._sampling_status = sampling_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SampleColumn, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SampleColumn):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

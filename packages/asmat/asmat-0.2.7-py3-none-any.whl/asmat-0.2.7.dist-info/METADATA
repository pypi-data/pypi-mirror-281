Metadata-Version: 2.1
Name: asmat
Version: 0.2.7
Summary: Assembly Testing Program
Home-page: https://github.com/erwanlem/atp
Download-URL: https://github.com/erwanlem/atp/archive/refs/tags/v1.0.tar.gz
Author: Erwan LEMATTRE
Author-email: erwanlem4@gmail.com
License: MIT
Keywords: ASSEMBLER,TEST,ANALYSIS
Classifier: Programming Language :: Python :: 3
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Build Tools
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.6
Description-Content-Type: text/markdown
License-File: LICENSE.md
Requires-Dist: bs4
Requires-Dist: matplotlib
Requires-Dist: pillow

# ATP manual

## Name

atp - Assembly Testing Program

## Description

**ATP** is a testing tool made for checking assembly code efficency. This tool offers two main actions: **generation** and **validation**.
The generation phase will generate assembly code for every compilers and simd extensions. Then this code is stored in a reference folder.
The validation phase will compare assembly code generated by the current library version with assembly code previouly saved (in the reference folder). 


## Options

**--build**
 Build default files and directories `settings.json`, `ref/`. 

**-c** *compiler*, **--compiler** *compiler*
 The code is only generated and tested for the given compiler.

**-d**  Deep generation. When generating assembly this option will replace existing files even though they already contain assembly code. Enable this option when you want to update reference files outdated (otherwise reference files are not changed if they already exist).

**-D** *tool*, **--disassembler** *tool*
 Defines the disassembling tool. Available disassembling tools are `standard` (*-S* option of compilers) or `objdump`. Assembly code generated by one of this tool can't be validated by the other. Default value is `objdump`. The *standard* option is only available for *gcc* and *clang* compilers.

**-f** , **--fatal**
 Raises exception. This option interrupts the testing process if there is an assembly mismatch error. Useless for generation.

**--flags** *flags*
 Flags used for compilation. Flags musn't contain dashes. It has the highest priority for the compilation process. It means that if flags are given, *-m* options is ignored even though it's also given. If there are no flags, default flags are used.

**-g**  Generation mode. Generates assembly code and stores it in `ref`. Without this option, the default mode is validation.

**-H** *headers*, **--header** *headers*
 Defines headers for compilation. *`headers`* are paths that will be add in C++ file as follows *#include <**header**>*. If this option is not given, headers are extracted from `settings.json`.

**-i**  Instruction comparison. Compares only instructions and ignores their parameters.

**--input** *files* | *group*
 Defines your own input file or group. Without this option all config files are used. The given file must exist in folder `config`. If a group is given it mist exist in `settings.json`. The priority is *config file*, *group*, *all*. When generating, it only generates those files. When validating, it only compares those files.

**-j** *nbprocess*
 Defines the number of parallel compilations. The default number of parallel processes is equal to the number of processors cores.

**-l**  Log. Generates a log file giving details about errors that occured during the validation. Two types of errors are described: *comparison errors* that occured when assembly code doesn't correspond and *missing reference* that occured when a function doesn't have a reference file.

**--output** *path*
 The path of the output. If this option is not defined, it takes the default path which is the directory *ref*.

**--ref** *reference_path*
 Defines a custom path for the reference folder. When generating it changes the location of the stored files. When validating it changes the place we get the reference files.

**--reset**
 Clears the `ref` directory.

**-s** *setup*, **--setup** *setup*
 The code is only generated and validated for the given simd extension. The given extension name **must** exist in `settings.json`.

**-S** *limit*, **--functionsperfile** *limit*
 Limit the number of functions in *cpp* files. If the number of functions is greater than the limit it creates several *cpp* files that are compiled seperately.

**--settings** *path*
 Defines the path to access the settings file. If not given it takes `settings.json` in the *src* directory. If given, it first searches the path in the *src* directory. If not found it searches *path*.

**-t**  Keeps temporary files after the process. Temporary files are files used to produce assembly code:
- tmp.cpp : Contains generated cpp functions
- tmp.o : Compiled file
- tmp.txt : Contains assembly code extracts from tmp.o.

**-v**  Verbose. Displays information in the command line. At the end of the process it gives the time elapsed since the beginning of the process.


## Examples

### Generation
Generating reference files for all config files in the *config* directory:

    > python3 atp.py -g -v
    Generating assembly : 100% done
    Operation finished : functions saved
    Process duration: 39.84s

Generating reference files for a group and a given compiler:

    > python3 atp.py -g -v -c gcc --input abs
    Generating assembly : 100% done
    Operation finished : functions saved
    Process duration: 12.56s

Generating reference file for given config file and setup **stored in `settings.json`**:

    > python3 atp.py -g -v -s sse --input abs.json
    Generating assembly : 100% done
    Operation finished : functions saved
    Process duration: 2.45s

Generating reference file using *standard* disassembler option and custom flags:

    > python3 atp.py -g -v --disassembler standard --flags Iinclude/ O3 msse std=c++20
    Generating assembly : 100% done
    Operation finished : functions saved
    Process duration: 14.47s

### Validation

Validating assembly code for all config files in the *config* directory. (no error):

    > python3 atp.py -v
    Process finished : 0 mismatching function(s) found
    Process duration: 93.94s


Validating assembly code for all config files in the *config* directory with *standard* disassembling (errors):

    > python3 atp.py -v --disassembler standard
    Process finished : 885 mismatching function(s) found
    Process duration: 95.97s

Validating assembly code for all config files in the *config* directory with *standard* disassembling using *fatal* option (errors):

    > python3 atp.py -v --disassembler standard --fatal
    Traceback (most recent call last):
    File "/home/erwan/eve/test/asm/atp.py", line 149, in <module>
        main()
    File "/home/erwan/eve/test/asm/atp.py", line 140, in main
        return validation.validate(OPTIONS['flags'], OPTIONS['input'], OPTIONS['exception'], OPTIONS['log'], OPTIONS['keep_tmp'], OPTIONS['instruction_comparison'], \
    File "/home/erwan/eve/test/asm/validation.py", line 183, in validate
        validate_bis(input, flags, conf, raise_exception, log_file, keep_tmp, instruction_compare, verbose, references_path, method)
    File "/home/erwan/eve/test/asm/validation.py", line 154, in validate_bis
        raise AssemblyMismatch(f, c, a, validation_set[c][a][f][i]['type'], validation_set[c][a][f][i]['instr'], functions_assembly[c][a][f][i]['instr'])
    validation.AssemblyMismatch: 
    -------------------------------------------------
    Assembly mismatch with function : ceil

    Compiler : gcc
    Architecture : sse



## Explanations

### How does it work ?

<center>
    <img src="doc/diag4.svg">
</center>

### Settings files

Default files can be generated using options `--build`.

#### settings.json
This file contains user settings. It is divided into 3 sections:
- compilers : associate a compiler's name (user dependent) with the compiler's flag.
- setup : associate *simd* extensions name (user dependent) with the corresponding flags.
- groups : a list of groups containing a list of configuration files.

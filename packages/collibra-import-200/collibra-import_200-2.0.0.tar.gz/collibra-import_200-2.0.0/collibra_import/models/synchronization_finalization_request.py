# coding: utf-8

"""
    Collibra Import API

    <p>The Import API is an efficient way to load large volumes of data into the Collibra Data Governance Center. The API can automatically differentiate between creating and updating data.</p>  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SynchronizationFinalizationRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'send_notification': 'bool',
        'batch_size': 'int',
        'simulation': 'bool',
        'save_result': 'bool',
        'synchronization_id': 'str',
        'finalization_strategy': 'str',
        'missing_asset_status_id': 'str',
        'finalization_parameters': 'dict(str, str)'
    }

    attribute_map = {
        'send_notification': 'sendNotification',
        'batch_size': 'batchSize',
        'simulation': 'simulation',
        'save_result': 'saveResult',
        'synchronization_id': 'synchronizationId',
        'finalization_strategy': 'finalizationStrategy',
        'missing_asset_status_id': 'missingAssetStatusId',
        'finalization_parameters': 'finalizationParameters'
    }

    def __init__(self, send_notification=None, batch_size=1000, simulation=None, save_result=None, synchronization_id=None, finalization_strategy=None, missing_asset_status_id=None, finalization_parameters=None):  # noqa: E501
        """SynchronizationFinalizationRequest - a model defined in Swagger"""  # noqa: E501
        self._send_notification = None
        self._batch_size = None
        self._simulation = None
        self._save_result = None
        self._synchronization_id = None
        self._finalization_strategy = None
        self._missing_asset_status_id = None
        self._finalization_parameters = None
        self.discriminator = None
        if send_notification is not None:
            self.send_notification = send_notification
        if batch_size is not None:
            self.batch_size = batch_size
        if simulation is not None:
            self.simulation = simulation
        if save_result is not None:
            self.save_result = save_result
        self.synchronization_id = synchronization_id
        if finalization_strategy is not None:
            self.finalization_strategy = finalization_strategy
        if missing_asset_status_id is not None:
            self.missing_asset_status_id = missing_asset_status_id
        if finalization_parameters is not None:
            self.finalization_parameters = finalization_parameters

    @property
    def send_notification(self):
        """Gets the send_notification of this SynchronizationFinalizationRequest.  # noqa: E501

        Whether job status notification should be sent. <b>The default value</b> is <code>false</code>.  # noqa: E501

        :return: The send_notification of this SynchronizationFinalizationRequest.  # noqa: E501
        :rtype: bool
        """
        return self._send_notification

    @send_notification.setter
    def send_notification(self, send_notification):
        """Sets the send_notification of this SynchronizationFinalizationRequest.

        Whether job status notification should be sent. <b>The default value</b> is <code>false</code>.  # noqa: E501

        :param send_notification: The send_notification of this SynchronizationFinalizationRequest.  # noqa: E501
        :type: bool
        """

        self._send_notification = send_notification

    @property
    def batch_size(self):
        """Gets the batch_size of this SynchronizationFinalizationRequest.  # noqa: E501

        <i>The batchSize parameter is now deprecated and is ignored during command execution.</i>  # noqa: E501

        :return: The batch_size of this SynchronizationFinalizationRequest.  # noqa: E501
        :rtype: int
        """
        return self._batch_size

    @batch_size.setter
    def batch_size(self, batch_size):
        """Sets the batch_size of this SynchronizationFinalizationRequest.

        <i>The batchSize parameter is now deprecated and is ignored during command execution.</i>  # noqa: E501

        :param batch_size: The batch_size of this SynchronizationFinalizationRequest.  # noqa: E501
        :type: int
        """

        self._batch_size = batch_size

    @property
    def simulation(self):
        """Gets the simulation of this SynchronizationFinalizationRequest.  # noqa: E501

        Whether the import should be triggered as a simulation. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the result of the import simulation will be available at the end of the job but no change will be applied to the DGC.  # noqa: E501

        :return: The simulation of this SynchronizationFinalizationRequest.  # noqa: E501
        :rtype: bool
        """
        return self._simulation

    @simulation.setter
    def simulation(self, simulation):
        """Sets the simulation of this SynchronizationFinalizationRequest.

        Whether the import should be triggered as a simulation. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the result of the import simulation will be available at the end of the job but no change will be applied to the DGC.  # noqa: E501

        :param simulation: The simulation of this SynchronizationFinalizationRequest.  # noqa: E501
        :type: bool
        """

        self._simulation = simulation

    @property
    def save_result(self):
        """Gets the save_result of this SynchronizationFinalizationRequest.  # noqa: E501

        Whether the import Result should be persisted or forgotten. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the result of the import simulation will be available at the end of the job but no change will be applied to the DGC.<p><b>DEPRECATED:</b>This parameter is deprecated and will be removed in the future.</b>.  # noqa: E501

        :return: The save_result of this SynchronizationFinalizationRequest.  # noqa: E501
        :rtype: bool
        """
        return self._save_result

    @save_result.setter
    def save_result(self, save_result):
        """Sets the save_result of this SynchronizationFinalizationRequest.

        Whether the import Result should be persisted or forgotten. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the result of the import simulation will be available at the end of the job but no change will be applied to the DGC.<p><b>DEPRECATED:</b>This parameter is deprecated and will be removed in the future.</b>.  # noqa: E501

        :param save_result: The save_result of this SynchronizationFinalizationRequest.  # noqa: E501
        :type: bool
        """

        self._save_result = save_result

    @property
    def synchronization_id(self):
        """Gets the synchronization_id of this SynchronizationFinalizationRequest.  # noqa: E501


        :return: The synchronization_id of this SynchronizationFinalizationRequest.  # noqa: E501
        :rtype: str
        """
        return self._synchronization_id

    @synchronization_id.setter
    def synchronization_id(self, synchronization_id):
        """Sets the synchronization_id of this SynchronizationFinalizationRequest.


        :param synchronization_id: The synchronization_id of this SynchronizationFinalizationRequest.  # noqa: E501
        :type: str
        """
        if synchronization_id is None:
            raise ValueError("Invalid value for `synchronization_id`, must not be `None`")  # noqa: E501

        self._synchronization_id = synchronization_id

    @property
    def finalization_strategy(self):
        """Gets the finalization_strategy of this SynchronizationFinalizationRequest.  # noqa: E501

        The synchronization finalization strategy used in the clean up action. This determines whether to remove, ignore or change the status of assets that no longer exist in the external system.<br />Possible values are `REMOVE_RESOURCES`, `CHANGE_STATUS` and `IGNORE`.<br />When you select `CHANGE_STATUS`, you must also provide a value for `missingAssetStatusId`.  # noqa: E501

        :return: The finalization_strategy of this SynchronizationFinalizationRequest.  # noqa: E501
        :rtype: str
        """
        return self._finalization_strategy

    @finalization_strategy.setter
    def finalization_strategy(self, finalization_strategy):
        """Sets the finalization_strategy of this SynchronizationFinalizationRequest.

        The synchronization finalization strategy used in the clean up action. This determines whether to remove, ignore or change the status of assets that no longer exist in the external system.<br />Possible values are `REMOVE_RESOURCES`, `CHANGE_STATUS` and `IGNORE`.<br />When you select `CHANGE_STATUS`, you must also provide a value for `missingAssetStatusId`.  # noqa: E501

        :param finalization_strategy: The finalization_strategy of this SynchronizationFinalizationRequest.  # noqa: E501
        :type: str
        """

        self._finalization_strategy = finalization_strategy

    @property
    def missing_asset_status_id(self):
        """Gets the missing_asset_status_id of this SynchronizationFinalizationRequest.  # noqa: E501

        If <b>finalizationStrategy</b> is set to `CHANGE_STATUS` then this parameter determines the new status ID for assets that no longer exist in the external system.  # noqa: E501

        :return: The missing_asset_status_id of this SynchronizationFinalizationRequest.  # noqa: E501
        :rtype: str
        """
        return self._missing_asset_status_id

    @missing_asset_status_id.setter
    def missing_asset_status_id(self, missing_asset_status_id):
        """Sets the missing_asset_status_id of this SynchronizationFinalizationRequest.

        If <b>finalizationStrategy</b> is set to `CHANGE_STATUS` then this parameter determines the new status ID for assets that no longer exist in the external system.  # noqa: E501

        :param missing_asset_status_id: The missing_asset_status_id of this SynchronizationFinalizationRequest.  # noqa: E501
        :type: str
        """

        self._missing_asset_status_id = missing_asset_status_id

    @property
    def finalization_parameters(self):
        """Gets the finalization_parameters of this SynchronizationFinalizationRequest.  # noqa: E501

        If you have set `finalizationStrategy` to `CHANGE_STATUS`, the status ID for the assets that no longer exist in the external system.<p><b>NOTE:</b> This parameter must be declared with an 'application/json' content type.<p><b>DEPRECATED:</b> This parameter is deprecated and will be removed in the future. Please, use </b>missingAssetStatusId</b>.  # noqa: E501

        :return: The finalization_parameters of this SynchronizationFinalizationRequest.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._finalization_parameters

    @finalization_parameters.setter
    def finalization_parameters(self, finalization_parameters):
        """Sets the finalization_parameters of this SynchronizationFinalizationRequest.

        If you have set `finalizationStrategy` to `CHANGE_STATUS`, the status ID for the assets that no longer exist in the external system.<p><b>NOTE:</b> This parameter must be declared with an 'application/json' content type.<p><b>DEPRECATED:</b> This parameter is deprecated and will be removed in the future. Please, use </b>missingAssetStatusId</b>.  # noqa: E501

        :param finalization_parameters: The finalization_parameters of this SynchronizationFinalizationRequest.  # noqa: E501
        :type: dict(str, str)
        """

        self._finalization_parameters = finalization_parameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SynchronizationFinalizationRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SynchronizationFinalizationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

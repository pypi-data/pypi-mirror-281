# coding: utf-8

"""
    Collibra Import API

    <p>The Import API is an efficient way to load large volumes of data into the Collibra Data Governance Center. The API can automatically differentiate between creating and updating data.</p>  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ComplexRelationImportCommand(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'identifier': 'ComplexRelationIdentifier',
        'indexes': 'list[int]',
        'complex_relation_type': 'ComplexRelationTypeIdentifier',
        'attributes': 'dict(str, list[AttributeValue])',
        'relations': 'dict(str, list[AssetIdentifier])',
        'resource_type': 'str'
    }

    attribute_map = {
        'identifier': 'identifier',
        'indexes': 'indexes',
        'complex_relation_type': 'complexRelationType',
        'attributes': 'attributes',
        'relations': 'relations',
        'resource_type': 'resourceType'
    }

    def __init__(self, identifier=None, indexes=None, complex_relation_type=None, attributes=None, relations=None, resource_type=None):  # noqa: E501
        """ComplexRelationImportCommand - a model defined in Swagger"""  # noqa: E501
        self._identifier = None
        self._indexes = None
        self._complex_relation_type = None
        self._attributes = None
        self._relations = None
        self._resource_type = None
        self.discriminator = None
        if identifier is not None:
            self.identifier = identifier
        if indexes is not None:
            self.indexes = indexes
        if complex_relation_type is not None:
            self.complex_relation_type = complex_relation_type
        if attributes is not None:
            self.attributes = attributes
        if relations is not None:
            self.relations = relations
        if resource_type is not None:
            self.resource_type = resource_type

    @property
    def identifier(self):
        """Gets the identifier of this ComplexRelationImportCommand.  # noqa: E501


        :return: The identifier of this ComplexRelationImportCommand.  # noqa: E501
        :rtype: ComplexRelationIdentifier
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this ComplexRelationImportCommand.


        :param identifier: The identifier of this ComplexRelationImportCommand.  # noqa: E501
        :type: ComplexRelationIdentifier
        """

        self._identifier = identifier

    @property
    def indexes(self):
        """Gets the indexes of this ComplexRelationImportCommand.  # noqa: E501


        :return: The indexes of this ComplexRelationImportCommand.  # noqa: E501
        :rtype: list[int]
        """
        return self._indexes

    @indexes.setter
    def indexes(self, indexes):
        """Sets the indexes of this ComplexRelationImportCommand.


        :param indexes: The indexes of this ComplexRelationImportCommand.  # noqa: E501
        :type: list[int]
        """

        self._indexes = indexes

    @property
    def complex_relation_type(self):
        """Gets the complex_relation_type of this ComplexRelationImportCommand.  # noqa: E501


        :return: The complex_relation_type of this ComplexRelationImportCommand.  # noqa: E501
        :rtype: ComplexRelationTypeIdentifier
        """
        return self._complex_relation_type

    @complex_relation_type.setter
    def complex_relation_type(self, complex_relation_type):
        """Sets the complex_relation_type of this ComplexRelationImportCommand.


        :param complex_relation_type: The complex_relation_type of this ComplexRelationImportCommand.  # noqa: E501
        :type: ComplexRelationTypeIdentifier
        """

        self._complex_relation_type = complex_relation_type

    @property
    def attributes(self):
        """Gets the attributes of this ComplexRelationImportCommand.  # noqa: E501


        :return: The attributes of this ComplexRelationImportCommand.  # noqa: E501
        :rtype: dict(str, list[AttributeValue])
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this ComplexRelationImportCommand.


        :param attributes: The attributes of this ComplexRelationImportCommand.  # noqa: E501
        :type: dict(str, list[AttributeValue])
        """

        self._attributes = attributes

    @property
    def relations(self):
        """Gets the relations of this ComplexRelationImportCommand.  # noqa: E501


        :return: The relations of this ComplexRelationImportCommand.  # noqa: E501
        :rtype: dict(str, list[AssetIdentifier])
        """
        return self._relations

    @relations.setter
    def relations(self, relations):
        """Sets the relations of this ComplexRelationImportCommand.


        :param relations: The relations of this ComplexRelationImportCommand.  # noqa: E501
        :type: dict(str, list[AssetIdentifier])
        """

        self._relations = relations

    @property
    def resource_type(self):
        """Gets the resource_type of this ComplexRelationImportCommand.  # noqa: E501


        :return: The resource_type of this ComplexRelationImportCommand.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this ComplexRelationImportCommand.


        :param resource_type: The resource_type of this ComplexRelationImportCommand.  # noqa: E501
        :type: str
        """

        self._resource_type = resource_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ComplexRelationImportCommand, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComplexRelationImportCommand):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

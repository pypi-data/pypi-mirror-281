# coding: utf-8

"""
    Collibra Import API

    <p>The Import API is an efficient way to load large volumes of data into the Collibra Data Governance Center. The API can automatically differentiate between creating and updating data.</p>  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ImportSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resource_types': 'list[ResourceTypeSummary]',
        'errors_count': 'int',
        'import_job_state': 'str'
    }

    attribute_map = {
        'resource_types': 'resourceTypes',
        'errors_count': 'errorsCount',
        'import_job_state': 'importJobState'
    }

    def __init__(self, resource_types=None, errors_count=None, import_job_state=None):  # noqa: E501
        """ImportSummary - a model defined in Swagger"""  # noqa: E501
        self._resource_types = None
        self._errors_count = None
        self._import_job_state = None
        self.discriminator = None
        if resource_types is not None:
            self.resource_types = resource_types
        if errors_count is not None:
            self.errors_count = errors_count
        if import_job_state is not None:
            self.import_job_state = import_job_state

    @property
    def resource_types(self):
        """Gets the resource_types of this ImportSummary.  # noqa: E501

        A list of the resource type import summary.  # noqa: E501

        :return: The resource_types of this ImportSummary.  # noqa: E501
        :rtype: list[ResourceTypeSummary]
        """
        return self._resource_types

    @resource_types.setter
    def resource_types(self, resource_types):
        """Sets the resource_types of this ImportSummary.

        A list of the resource type import summary.  # noqa: E501

        :param resource_types: The resource_types of this ImportSummary.  # noqa: E501
        :type: list[ResourceTypeSummary]
        """

        self._resource_types = resource_types

    @property
    def errors_count(self):
        """Gets the errors_count of this ImportSummary.  # noqa: E501

        The total number of errors the occurred during the import.  # noqa: E501

        :return: The errors_count of this ImportSummary.  # noqa: E501
        :rtype: int
        """
        return self._errors_count

    @errors_count.setter
    def errors_count(self, errors_count):
        """Sets the errors_count of this ImportSummary.

        The total number of errors the occurred during the import.  # noqa: E501

        :param errors_count: The errors_count of this ImportSummary.  # noqa: E501
        :type: int
        """

        self._errors_count = errors_count

    @property
    def import_job_state(self):
        """Gets the import_job_state of this ImportSummary.  # noqa: E501

        Import job state.  # noqa: E501

        :return: The import_job_state of this ImportSummary.  # noqa: E501
        :rtype: str
        """
        return self._import_job_state

    @import_job_state.setter
    def import_job_state(self, import_job_state):
        """Sets the import_job_state of this ImportSummary.

        Import job state.  # noqa: E501

        :param import_job_state: The import_job_state of this ImportSummary.  # noqa: E501
        :type: str
        """
        allowed_values = ["COMPLETED", "FAILED", "COMPLETED_WITH_ERRORS", "ABORTED"]  # noqa: E501
        if import_job_state not in allowed_values:
            raise ValueError(
                "Invalid value for `import_job_state` ({0}), must be one of {1}"  # noqa: E501
                .format(import_job_state, allowed_values)
            )

        self._import_job_state = import_job_state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImportSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImportSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

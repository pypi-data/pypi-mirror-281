# coding: utf-8

"""
    Collibra Import API

    <p>The Import API is an efficient way to load large volumes of data into the Collibra Data Governance Center. The API can automatically differentiate between creating and updating data.</p>  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ImportError(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'error_type': 'str',
        'resource_type': 'str',
        'error_message': 'str',
        'command': 'ImportCommandReference'
    }

    attribute_map = {
        'error_type': 'errorType',
        'resource_type': 'resourceType',
        'error_message': 'errorMessage',
        'command': 'command'
    }

    def __init__(self, error_type=None, resource_type=None, error_message=None, command=None):  # noqa: E501
        """ImportError - a model defined in Swagger"""  # noqa: E501
        self._error_type = None
        self._resource_type = None
        self._error_message = None
        self._command = None
        self.discriminator = None
        if error_type is not None:
            self.error_type = error_type
        if resource_type is not None:
            self.resource_type = resource_type
        if error_message is not None:
            self.error_message = error_message
        if command is not None:
            self.command = command

    @property
    def error_type(self):
        """Gets the error_type of this ImportError.  # noqa: E501

        Import error type.  # noqa: E501

        :return: The error_type of this ImportError.  # noqa: E501
        :rtype: str
        """
        return self._error_type

    @error_type.setter
    def error_type(self, error_type):
        """Sets the error_type of this ImportError.

        Import error type.  # noqa: E501

        :param error_type: The error_type of this ImportError.  # noqa: E501
        :type: str
        """
        allowed_values = ["VALIDATION", "RUNTIME"]  # noqa: E501
        if error_type not in allowed_values:
            raise ValueError(
                "Invalid value for `error_type` ({0}), must be one of {1}"  # noqa: E501
                .format(error_type, allowed_values)
            )

        self._error_type = error_type

    @property
    def resource_type(self):
        """Gets the resource_type of this ImportError.  # noqa: E501

        Import resource type.  # noqa: E501

        :return: The resource_type of this ImportError.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this ImportError.

        Import resource type.  # noqa: E501

        :param resource_type: The resource_type of this ImportError.  # noqa: E501
        :type: str
        """
        allowed_values = ["COMMUNITY", "DOMAIN", "ASSET", "ATTRIBUTE", "RELATION", "COMPLEX_RELATION", "MAPPING", "RESPONSIBILITY"]  # noqa: E501
        if resource_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"  # noqa: E501
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    @property
    def error_message(self):
        """Gets the error_message of this ImportError.  # noqa: E501

        User friendly error message.  # noqa: E501

        :return: The error_message of this ImportError.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this ImportError.

        User friendly error message.  # noqa: E501

        :param error_message: The error_message of this ImportError.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def command(self):
        """Gets the command of this ImportError.  # noqa: E501


        :return: The command of this ImportError.  # noqa: E501
        :rtype: ImportCommandReference
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this ImportError.


        :param command: The command of this ImportError.  # noqa: E501
        :type: ImportCommandReference
        """

        self._command = command

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImportError, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImportError):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Collibra Import API

    <p>The Import API is an efficient way to load large volumes of data into the Collibra Data Governance Center. The API can automatically differentiate between creating and updating data.</p>  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AssetImportCommand(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'identifier': 'AssetIdentifier',
        'indexes': 'list[int]',
        'responsibilities': 'dict(str, list[Owner])',
        'name': 'str',
        'display_name': 'str',
        'domain': 'DomainIdentifier',
        'type': 'AssetTypeIdentifier',
        'status': 'StatusIdentifier',
        'attributes': 'dict(str, list[AttributeValue])',
        'relations': 'dict(str, list[AssetIdentifier])',
        'tags': 'list[str]',
        'resource_type': 'str'
    }

    attribute_map = {
        'identifier': 'identifier',
        'indexes': 'indexes',
        'responsibilities': 'responsibilities',
        'name': 'name',
        'display_name': 'displayName',
        'domain': 'domain',
        'type': 'type',
        'status': 'status',
        'attributes': 'attributes',
        'relations': 'relations',
        'tags': 'tags',
        'resource_type': 'resourceType'
    }

    def __init__(self, identifier=None, indexes=None, responsibilities=None, name=None, display_name=None, domain=None, type=None, status=None, attributes=None, relations=None, tags=None, resource_type=None):  # noqa: E501
        """AssetImportCommand - a model defined in Swagger"""  # noqa: E501
        self._identifier = None
        self._indexes = None
        self._responsibilities = None
        self._name = None
        self._display_name = None
        self._domain = None
        self._type = None
        self._status = None
        self._attributes = None
        self._relations = None
        self._tags = None
        self._resource_type = None
        self.discriminator = None
        if identifier is not None:
            self.identifier = identifier
        if indexes is not None:
            self.indexes = indexes
        if responsibilities is not None:
            self.responsibilities = responsibilities
        if name is not None:
            self.name = name
        if display_name is not None:
            self.display_name = display_name
        if domain is not None:
            self.domain = domain
        if type is not None:
            self.type = type
        if status is not None:
            self.status = status
        if attributes is not None:
            self.attributes = attributes
        if relations is not None:
            self.relations = relations
        if tags is not None:
            self.tags = tags
        if resource_type is not None:
            self.resource_type = resource_type

    @property
    def identifier(self):
        """Gets the identifier of this AssetImportCommand.  # noqa: E501


        :return: The identifier of this AssetImportCommand.  # noqa: E501
        :rtype: AssetIdentifier
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this AssetImportCommand.


        :param identifier: The identifier of this AssetImportCommand.  # noqa: E501
        :type: AssetIdentifier
        """

        self._identifier = identifier

    @property
    def indexes(self):
        """Gets the indexes of this AssetImportCommand.  # noqa: E501


        :return: The indexes of this AssetImportCommand.  # noqa: E501
        :rtype: list[int]
        """
        return self._indexes

    @indexes.setter
    def indexes(self, indexes):
        """Sets the indexes of this AssetImportCommand.


        :param indexes: The indexes of this AssetImportCommand.  # noqa: E501
        :type: list[int]
        """

        self._indexes = indexes

    @property
    def responsibilities(self):
        """Gets the responsibilities of this AssetImportCommand.  # noqa: E501


        :return: The responsibilities of this AssetImportCommand.  # noqa: E501
        :rtype: dict(str, list[Owner])
        """
        return self._responsibilities

    @responsibilities.setter
    def responsibilities(self, responsibilities):
        """Sets the responsibilities of this AssetImportCommand.


        :param responsibilities: The responsibilities of this AssetImportCommand.  # noqa: E501
        :type: dict(str, list[Owner])
        """

        self._responsibilities = responsibilities

    @property
    def name(self):
        """Gets the name of this AssetImportCommand.  # noqa: E501


        :return: The name of this AssetImportCommand.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AssetImportCommand.


        :param name: The name of this AssetImportCommand.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def display_name(self):
        """Gets the display_name of this AssetImportCommand.  # noqa: E501


        :return: The display_name of this AssetImportCommand.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this AssetImportCommand.


        :param display_name: The display_name of this AssetImportCommand.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def domain(self):
        """Gets the domain of this AssetImportCommand.  # noqa: E501


        :return: The domain of this AssetImportCommand.  # noqa: E501
        :rtype: DomainIdentifier
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this AssetImportCommand.


        :param domain: The domain of this AssetImportCommand.  # noqa: E501
        :type: DomainIdentifier
        """

        self._domain = domain

    @property
    def type(self):
        """Gets the type of this AssetImportCommand.  # noqa: E501


        :return: The type of this AssetImportCommand.  # noqa: E501
        :rtype: AssetTypeIdentifier
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AssetImportCommand.


        :param type: The type of this AssetImportCommand.  # noqa: E501
        :type: AssetTypeIdentifier
        """

        self._type = type

    @property
    def status(self):
        """Gets the status of this AssetImportCommand.  # noqa: E501


        :return: The status of this AssetImportCommand.  # noqa: E501
        :rtype: StatusIdentifier
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AssetImportCommand.


        :param status: The status of this AssetImportCommand.  # noqa: E501
        :type: StatusIdentifier
        """

        self._status = status

    @property
    def attributes(self):
        """Gets the attributes of this AssetImportCommand.  # noqa: E501


        :return: The attributes of this AssetImportCommand.  # noqa: E501
        :rtype: dict(str, list[AttributeValue])
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this AssetImportCommand.


        :param attributes: The attributes of this AssetImportCommand.  # noqa: E501
        :type: dict(str, list[AttributeValue])
        """

        self._attributes = attributes

    @property
    def relations(self):
        """Gets the relations of this AssetImportCommand.  # noqa: E501


        :return: The relations of this AssetImportCommand.  # noqa: E501
        :rtype: dict(str, list[AssetIdentifier])
        """
        return self._relations

    @relations.setter
    def relations(self, relations):
        """Sets the relations of this AssetImportCommand.


        :param relations: The relations of this AssetImportCommand.  # noqa: E501
        :type: dict(str, list[AssetIdentifier])
        """

        self._relations = relations

    @property
    def tags(self):
        """Gets the tags of this AssetImportCommand.  # noqa: E501


        :return: The tags of this AssetImportCommand.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this AssetImportCommand.


        :param tags: The tags of this AssetImportCommand.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def resource_type(self):
        """Gets the resource_type of this AssetImportCommand.  # noqa: E501


        :return: The resource_type of this AssetImportCommand.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this AssetImportCommand.


        :param resource_type: The resource_type of this AssetImportCommand.  # noqa: E501
        :type: str
        """

        self._resource_type = resource_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssetImportCommand, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssetImportCommand):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

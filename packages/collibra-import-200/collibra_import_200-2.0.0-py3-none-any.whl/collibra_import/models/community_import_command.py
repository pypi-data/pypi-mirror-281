# coding: utf-8

"""
    Collibra Import API

    <p>The Import API is an efficient way to load large volumes of data into the Collibra Data Governance Center. The API can automatically differentiate between creating and updating data.</p>  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CommunityImportCommand(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'identifier': 'CommunityIdentifier',
        'indexes': 'list[int]',
        'responsibilities': 'dict(str, list[Owner])',
        'name': 'str',
        'description': 'str',
        'language': 'str',
        'parent': 'CommunityIdentifier',
        'resource_type': 'str'
    }

    attribute_map = {
        'identifier': 'identifier',
        'indexes': 'indexes',
        'responsibilities': 'responsibilities',
        'name': 'name',
        'description': 'description',
        'language': 'language',
        'parent': 'parent',
        'resource_type': 'resourceType'
    }

    def __init__(self, identifier=None, indexes=None, responsibilities=None, name=None, description=None, language=None, parent=None, resource_type=None):  # noqa: E501
        """CommunityImportCommand - a model defined in Swagger"""  # noqa: E501
        self._identifier = None
        self._indexes = None
        self._responsibilities = None
        self._name = None
        self._description = None
        self._language = None
        self._parent = None
        self._resource_type = None
        self.discriminator = None
        if identifier is not None:
            self.identifier = identifier
        if indexes is not None:
            self.indexes = indexes
        if responsibilities is not None:
            self.responsibilities = responsibilities
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if language is not None:
            self.language = language
        if parent is not None:
            self.parent = parent
        if resource_type is not None:
            self.resource_type = resource_type

    @property
    def identifier(self):
        """Gets the identifier of this CommunityImportCommand.  # noqa: E501


        :return: The identifier of this CommunityImportCommand.  # noqa: E501
        :rtype: CommunityIdentifier
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this CommunityImportCommand.


        :param identifier: The identifier of this CommunityImportCommand.  # noqa: E501
        :type: CommunityIdentifier
        """

        self._identifier = identifier

    @property
    def indexes(self):
        """Gets the indexes of this CommunityImportCommand.  # noqa: E501


        :return: The indexes of this CommunityImportCommand.  # noqa: E501
        :rtype: list[int]
        """
        return self._indexes

    @indexes.setter
    def indexes(self, indexes):
        """Sets the indexes of this CommunityImportCommand.


        :param indexes: The indexes of this CommunityImportCommand.  # noqa: E501
        :type: list[int]
        """

        self._indexes = indexes

    @property
    def responsibilities(self):
        """Gets the responsibilities of this CommunityImportCommand.  # noqa: E501


        :return: The responsibilities of this CommunityImportCommand.  # noqa: E501
        :rtype: dict(str, list[Owner])
        """
        return self._responsibilities

    @responsibilities.setter
    def responsibilities(self, responsibilities):
        """Sets the responsibilities of this CommunityImportCommand.


        :param responsibilities: The responsibilities of this CommunityImportCommand.  # noqa: E501
        :type: dict(str, list[Owner])
        """

        self._responsibilities = responsibilities

    @property
    def name(self):
        """Gets the name of this CommunityImportCommand.  # noqa: E501


        :return: The name of this CommunityImportCommand.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CommunityImportCommand.


        :param name: The name of this CommunityImportCommand.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this CommunityImportCommand.  # noqa: E501


        :return: The description of this CommunityImportCommand.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CommunityImportCommand.


        :param description: The description of this CommunityImportCommand.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def language(self):
        """Gets the language of this CommunityImportCommand.  # noqa: E501


        :return: The language of this CommunityImportCommand.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this CommunityImportCommand.


        :param language: The language of this CommunityImportCommand.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def parent(self):
        """Gets the parent of this CommunityImportCommand.  # noqa: E501


        :return: The parent of this CommunityImportCommand.  # noqa: E501
        :rtype: CommunityIdentifier
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this CommunityImportCommand.


        :param parent: The parent of this CommunityImportCommand.  # noqa: E501
        :type: CommunityIdentifier
        """

        self._parent = parent

    @property
    def resource_type(self):
        """Gets the resource_type of this CommunityImportCommand.  # noqa: E501


        :return: The resource_type of this CommunityImportCommand.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this CommunityImportCommand.


        :param resource_type: The resource_type of this CommunityImportCommand.  # noqa: E501
        :type: str
        """

        self._resource_type = resource_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CommunityImportCommand, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommunityImportCommand):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

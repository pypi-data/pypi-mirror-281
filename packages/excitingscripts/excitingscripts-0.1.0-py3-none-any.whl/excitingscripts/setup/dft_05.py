import os
import pathlib
from argparse import ArgumentParser
from os.path import join
from typing import Union

import numpy as np
from excitingtools import ExcitingInputXML


def setup_dft_05(input_file: Union[str, pathlib.Path], r_cut_min: float, r_cut_max: float,
                              number_r_cut_steps: int, species: str, root_directory: str=os.getcwd()) -> None:
    """Generate a set of input files varying the attribute "cut".

    :param input_file: Input file.
    :param r_cut_min: Minimum r_cut value.
    :param r_cut_max: Maximum r_cut value.
    :param number_r_cut_steps: Number of r_cut values for which input files are generated by varying the attribute
    "cut".
    :param species: Species used for varying r_cut.
    :param root_directory: Root directory.
    """
    if number_r_cut_steps < 1 or number_r_cut_steps > 99:
        raise ValueError("Number of r_cut values is out of range [1-99]!\n")

    parsed_input = ExcitingInputXML.from_xml(input_file)

    new_cut = np.linspace(r_cut_min, r_cut_max, number_r_cut_steps)
    for index, new_cut_value in enumerate(new_cut):
        rundir = join(root_directory, f"rundir-{index + 1}")
        os.makedirs(rundir, exist_ok=True)

        with open(join(rundir, f"strain-{index + 1}"), "w") as fid:
            fid.write(str(new_cut_value))

        parsed_input.structure.species_properties[species].dfthalfparam.cut = new_cut_value

        parsed_input.write(join(rundir, "input.xml"))


def main() -> None:
    parser = ArgumentParser(description="Create input files with varying cut values.")

    parser.add_argument("--input-file", "-i",
                        type=Union[str, pathlib.Path],
                        default=["input.xml"],
                        nargs=1,
                        dest="infile",
                        help="name of the input file")

    parser.add_argument("r_cut_min",
                        type=float,
                        nargs=1,
                        help="minimum r_cut value")

    parser.add_argument("r_cut_max",
                        type=float,
                        nargs=1,
                        help="maximum r_cut value")

    parser.add_argument("number_r_cut_steps",
                        type=int,
                        nargs=1,
                        help="number of r_cut values")

    parser.add_argument("--species", "-s",
                        type=str,
                        nargs=1,
                        required=True,
                        dest="species",
                        help="species for varying r_cut")

    parser.add_argument("--root-directory", "-r",
                        default=[os.getcwd()],
                        nargs=1,
                        dest="root_directory",
                        help="root path for folders that are created by this script")

    args = parser.parse_args()

    setup_dft_05(args.infile[0], args.r_cut_min[0], args.r_cut_max[0], args.number_r_cut_steps[0], args.species[0],
                 args.root_directory[0])


if __name__ == "__main__":
    main()

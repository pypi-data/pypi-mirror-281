import os
import pathlib
from argparse import ArgumentParser
from os.path import join
from typing import Union

from excitingtools import ExcitingInputXML


def setup_volume_optimization(input_file: Union[str, pathlib.Path], number_volume_values: int,
                              root_directory=os.getcwd()) -> None:
    """Create input files with a series volume values for structures generated at equally spaced intervals of the
    lattice constant with a variation of between -5% and +5% from the reference lattice constant and save them in
    corresponding directories.

    :param input_file: Input file.
    :param number_volume_values: Number of volume values for which structures are generated by varying the lattice
    constant.
    :param root_directory: Root directory.
    """
    if 3 > number_volume_values or number_volume_values > 99:
        raise ValueError("Number of volume values is out of range [3-99]!\n")

    parsed_input = ExcitingInputXML.from_xml(input_file)

    if hasattr(parsed_input.structure.crystal_properties, "scale"):
        scale = parsed_input.structure.crystal_properties.scale
    else:
        scale = 1.0

    maximum_strain = 0.05
    delta = number_volume_values - 1
    convert = 1
    eta_step = 2 * maximum_strain / delta

    for i_v in range(0, number_volume_values):
        eta = i_v * eta_step - maximum_strain * convert
        if abs(eta) < 0.000001:
            eta = 0.000001

        new_scale = scale * (1.0 + eta)

        parsed_input.structure.crystal_properties.scale = new_scale

        rundir = join(root_directory, f"volume-{i_v + 1}")

        os.makedirs(rundir, exist_ok=True)
        parsed_input.write(join(rundir, "input.xml"))

def main() -> None:
    parser = ArgumentParser(description="Create input files with varying volume values.")

    parser.add_argument("--input-file", "-i",
                        type=Union[str, pathlib.Path],
                        default=["input.xml"],
                        nargs=1,
                        dest="infile",
                        help="name of the input file")

    parser.add_argument("number_volume_values",
                        type=int,
                        nargs=1,
                        help="number of volume values for which structures are generated")

    parser.add_argument("--root-directory", "-r",
                        type=Union[str, pathlib.Path],
                        default=[os.getcwd()],
                        nargs=1,
                        dest="root_directory",
                        help="root path for folders that are created by this script")

    args = parser.parse_args()

    setup_volume_optimization(args.infile[0], args.number_volume_values[0], args.root_directory[0])


if __name__ == "__main__":
    main()

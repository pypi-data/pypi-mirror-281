# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _dingosdk
else:
    import _dingosdk

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dingosdk.delete_SwigPyIterator

    def value(self):
        return _dingosdk.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _dingosdk.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _dingosdk.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _dingosdk.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _dingosdk.SwigPyIterator_equal(self, x)

    def copy(self):
        return _dingosdk.SwigPyIterator_copy(self)

    def next(self):
        return _dingosdk.SwigPyIterator_next(self)

    def __next__(self):
        return _dingosdk.SwigPyIterator___next__(self)

    def previous(self):
        return _dingosdk.SwigPyIterator_previous(self)

    def advance(self, n):
        return _dingosdk.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _dingosdk.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _dingosdk.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _dingosdk.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _dingosdk.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _dingosdk.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _dingosdk.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _dingosdk:
_dingosdk.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _dingosdk.SHARED_PTR_DISOWN
class Int64Vector(object):
    r"""Proxy of C++ std::vector< int64_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Int64Vector self) -> SwigPyIterator"""
        return _dingosdk.Int64Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Int64Vector self) -> bool"""
        return _dingosdk.Int64Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Int64Vector self) -> bool"""
        return _dingosdk.Int64Vector___bool__(self)

    def __len__(self):
        r"""__len__(Int64Vector self) -> std::vector< long >::size_type"""
        return _dingosdk.Int64Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Int64Vector self, std::vector< long >::difference_type i, std::vector< long >::difference_type j) -> Int64Vector

        Parameters
        ----------
        i: std::vector< long >::difference_type
        j: std::vector< long >::difference_type

        """
        return _dingosdk.Int64Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Int64Vector self, std::vector< long >::difference_type i, std::vector< long >::difference_type j)

        Parameters
        ----------
        i: std::vector< long >::difference_type
        j: std::vector< long >::difference_type

        __setslice__(Int64Vector self, std::vector< long >::difference_type i, std::vector< long >::difference_type j, Int64Vector v)

        Parameters
        ----------
        i: std::vector< long >::difference_type
        j: std::vector< long >::difference_type
        v: std::vector< long,std::allocator< long > > const &

        """
        return _dingosdk.Int64Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Int64Vector self, std::vector< long >::difference_type i, std::vector< long >::difference_type j)

        Parameters
        ----------
        i: std::vector< long >::difference_type
        j: std::vector< long >::difference_type

        """
        return _dingosdk.Int64Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Int64Vector self, std::vector< long >::difference_type i)

        Parameters
        ----------
        i: std::vector< long >::difference_type

        __delitem__(Int64Vector self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _dingosdk.Int64Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Int64Vector self, SWIGPY_SLICEOBJECT * slice) -> Int64Vector

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(Int64Vector self, std::vector< long >::difference_type i) -> std::vector< long >::value_type const &

        Parameters
        ----------
        i: std::vector< long >::difference_type

        """
        return _dingosdk.Int64Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Int64Vector self, SWIGPY_SLICEOBJECT * slice, Int64Vector v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< long,std::allocator< long > > const &

        __setitem__(Int64Vector self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(Int64Vector self, std::vector< long >::difference_type i, std::vector< long >::value_type const & x)

        Parameters
        ----------
        i: std::vector< long >::difference_type
        x: std::vector< long >::value_type const &

        """
        return _dingosdk.Int64Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Int64Vector self) -> std::vector< long >::value_type"""
        return _dingosdk.Int64Vector_pop(self)

    def append(self, x):
        r"""
        append(Int64Vector self, std::vector< long >::value_type const & x)

        Parameters
        ----------
        x: std::vector< long >::value_type const &

        """
        return _dingosdk.Int64Vector_append(self, x)

    def empty(self):
        r"""empty(Int64Vector self) -> bool"""
        return _dingosdk.Int64Vector_empty(self)

    def size(self):
        r"""size(Int64Vector self) -> std::vector< long >::size_type"""
        return _dingosdk.Int64Vector_size(self)

    def swap(self, v):
        r"""
        swap(Int64Vector self, Int64Vector v)

        Parameters
        ----------
        v: std::vector< int64_t > &

        """
        return _dingosdk.Int64Vector_swap(self, v)

    def begin(self):
        r"""begin(Int64Vector self) -> std::vector< long >::iterator"""
        return _dingosdk.Int64Vector_begin(self)

    def end(self):
        r"""end(Int64Vector self) -> std::vector< long >::iterator"""
        return _dingosdk.Int64Vector_end(self)

    def rbegin(self):
        r"""rbegin(Int64Vector self) -> std::vector< long >::reverse_iterator"""
        return _dingosdk.Int64Vector_rbegin(self)

    def rend(self):
        r"""rend(Int64Vector self) -> std::vector< long >::reverse_iterator"""
        return _dingosdk.Int64Vector_rend(self)

    def clear(self):
        r"""clear(Int64Vector self)"""
        return _dingosdk.Int64Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Int64Vector self) -> std::vector< long >::allocator_type"""
        return _dingosdk.Int64Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Int64Vector self)"""
        return _dingosdk.Int64Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Int64Vector self, std::vector< long >::iterator pos) -> std::vector< long >::iterator

        Parameters
        ----------
        pos: std::vector< long >::iterator

        erase(Int64Vector self, std::vector< long >::iterator first, std::vector< long >::iterator last) -> std::vector< long >::iterator

        Parameters
        ----------
        first: std::vector< long >::iterator
        last: std::vector< long >::iterator

        """
        return _dingosdk.Int64Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Int64Vector self) -> Int64Vector
        __init__(Int64Vector self, Int64Vector other) -> Int64Vector

        Parameters
        ----------
        other: std::vector< int64_t > const &

        __init__(Int64Vector self, std::vector< long >::size_type size) -> Int64Vector

        Parameters
        ----------
        size: std::vector< long >::size_type

        __init__(Int64Vector self, std::vector< long >::size_type size, std::vector< long >::value_type const & value) -> Int64Vector

        Parameters
        ----------
        size: std::vector< long >::size_type
        value: std::vector< long >::value_type const &

        """
        _dingosdk.Int64Vector_swiginit(self, _dingosdk.new_Int64Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Int64Vector self, std::vector< long >::value_type const & x)

        Parameters
        ----------
        x: std::vector< long >::value_type const &

        """
        return _dingosdk.Int64Vector_push_back(self, x)

    def front(self):
        r"""front(Int64Vector self) -> std::vector< long >::value_type const &"""
        return _dingosdk.Int64Vector_front(self)

    def back(self):
        r"""back(Int64Vector self) -> std::vector< long >::value_type const &"""
        return _dingosdk.Int64Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Int64Vector self, std::vector< long >::size_type n, std::vector< long >::value_type const & x)

        Parameters
        ----------
        n: std::vector< long >::size_type
        x: std::vector< long >::value_type const &

        """
        return _dingosdk.Int64Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Int64Vector self, std::vector< long >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< long >::size_type

        resize(Int64Vector self, std::vector< long >::size_type new_size, std::vector< long >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< long >::size_type
        x: std::vector< long >::value_type const &

        """
        return _dingosdk.Int64Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Int64Vector self, std::vector< long >::iterator pos, std::vector< long >::value_type const & x) -> std::vector< long >::iterator

        Parameters
        ----------
        pos: std::vector< long >::iterator
        x: std::vector< long >::value_type const &

        insert(Int64Vector self, std::vector< long >::iterator pos, std::vector< long >::size_type n, std::vector< long >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< long >::iterator
        n: std::vector< long >::size_type
        x: std::vector< long >::value_type const &

        """
        return _dingosdk.Int64Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Int64Vector self, std::vector< long >::size_type n)

        Parameters
        ----------
        n: std::vector< long >::size_type

        """
        return _dingosdk.Int64Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Int64Vector self) -> std::vector< long >::size_type"""
        return _dingosdk.Int64Vector_capacity(self)
    __swig_destroy__ = _dingosdk.delete_Int64Vector

# Register Int64Vector in _dingosdk:
_dingosdk.Int64Vector_swigregister(Int64Vector)
class FloatVector(object):
    r"""Proxy of C++ std::vector< float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(FloatVector self) -> SwigPyIterator"""
        return _dingosdk.FloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(FloatVector self) -> bool"""
        return _dingosdk.FloatVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(FloatVector self) -> bool"""
        return _dingosdk.FloatVector___bool__(self)

    def __len__(self):
        r"""__len__(FloatVector self) -> std::vector< float >::size_type"""
        return _dingosdk.FloatVector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(FloatVector self, std::vector< float >::difference_type i, std::vector< float >::difference_type j) -> FloatVector

        Parameters
        ----------
        i: std::vector< float >::difference_type
        j: std::vector< float >::difference_type

        """
        return _dingosdk.FloatVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(FloatVector self, std::vector< float >::difference_type i, std::vector< float >::difference_type j)

        Parameters
        ----------
        i: std::vector< float >::difference_type
        j: std::vector< float >::difference_type

        __setslice__(FloatVector self, std::vector< float >::difference_type i, std::vector< float >::difference_type j, FloatVector v)

        Parameters
        ----------
        i: std::vector< float >::difference_type
        j: std::vector< float >::difference_type
        v: std::vector< float,std::allocator< float > > const &

        """
        return _dingosdk.FloatVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(FloatVector self, std::vector< float >::difference_type i, std::vector< float >::difference_type j)

        Parameters
        ----------
        i: std::vector< float >::difference_type
        j: std::vector< float >::difference_type

        """
        return _dingosdk.FloatVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(FloatVector self, std::vector< float >::difference_type i)

        Parameters
        ----------
        i: std::vector< float >::difference_type

        __delitem__(FloatVector self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _dingosdk.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(FloatVector self, SWIGPY_SLICEOBJECT * slice) -> FloatVector

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(FloatVector self, std::vector< float >::difference_type i) -> std::vector< float >::value_type const &

        Parameters
        ----------
        i: std::vector< float >::difference_type

        """
        return _dingosdk.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(FloatVector self, SWIGPY_SLICEOBJECT * slice, FloatVector v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< float,std::allocator< float > > const &

        __setitem__(FloatVector self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(FloatVector self, std::vector< float >::difference_type i, std::vector< float >::value_type const & x)

        Parameters
        ----------
        i: std::vector< float >::difference_type
        x: std::vector< float >::value_type const &

        """
        return _dingosdk.FloatVector___setitem__(self, *args)

    def pop(self):
        r"""pop(FloatVector self) -> std::vector< float >::value_type"""
        return _dingosdk.FloatVector_pop(self)

    def append(self, x):
        r"""
        append(FloatVector self, std::vector< float >::value_type const & x)

        Parameters
        ----------
        x: std::vector< float >::value_type const &

        """
        return _dingosdk.FloatVector_append(self, x)

    def empty(self):
        r"""empty(FloatVector self) -> bool"""
        return _dingosdk.FloatVector_empty(self)

    def size(self):
        r"""size(FloatVector self) -> std::vector< float >::size_type"""
        return _dingosdk.FloatVector_size(self)

    def swap(self, v):
        r"""
        swap(FloatVector self, FloatVector v)

        Parameters
        ----------
        v: std::vector< float > &

        """
        return _dingosdk.FloatVector_swap(self, v)

    def begin(self):
        r"""begin(FloatVector self) -> std::vector< float >::iterator"""
        return _dingosdk.FloatVector_begin(self)

    def end(self):
        r"""end(FloatVector self) -> std::vector< float >::iterator"""
        return _dingosdk.FloatVector_end(self)

    def rbegin(self):
        r"""rbegin(FloatVector self) -> std::vector< float >::reverse_iterator"""
        return _dingosdk.FloatVector_rbegin(self)

    def rend(self):
        r"""rend(FloatVector self) -> std::vector< float >::reverse_iterator"""
        return _dingosdk.FloatVector_rend(self)

    def clear(self):
        r"""clear(FloatVector self)"""
        return _dingosdk.FloatVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(FloatVector self) -> std::vector< float >::allocator_type"""
        return _dingosdk.FloatVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(FloatVector self)"""
        return _dingosdk.FloatVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(FloatVector self, std::vector< float >::iterator pos) -> std::vector< float >::iterator

        Parameters
        ----------
        pos: std::vector< float >::iterator

        erase(FloatVector self, std::vector< float >::iterator first, std::vector< float >::iterator last) -> std::vector< float >::iterator

        Parameters
        ----------
        first: std::vector< float >::iterator
        last: std::vector< float >::iterator

        """
        return _dingosdk.FloatVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(FloatVector self) -> FloatVector
        __init__(FloatVector self, FloatVector other) -> FloatVector

        Parameters
        ----------
        other: std::vector< float > const &

        __init__(FloatVector self, std::vector< float >::size_type size) -> FloatVector

        Parameters
        ----------
        size: std::vector< float >::size_type

        __init__(FloatVector self, std::vector< float >::size_type size, std::vector< float >::value_type const & value) -> FloatVector

        Parameters
        ----------
        size: std::vector< float >::size_type
        value: std::vector< float >::value_type const &

        """
        _dingosdk.FloatVector_swiginit(self, _dingosdk.new_FloatVector(*args))

    def push_back(self, x):
        r"""
        push_back(FloatVector self, std::vector< float >::value_type const & x)

        Parameters
        ----------
        x: std::vector< float >::value_type const &

        """
        return _dingosdk.FloatVector_push_back(self, x)

    def front(self):
        r"""front(FloatVector self) -> std::vector< float >::value_type const &"""
        return _dingosdk.FloatVector_front(self)

    def back(self):
        r"""back(FloatVector self) -> std::vector< float >::value_type const &"""
        return _dingosdk.FloatVector_back(self)

    def assign(self, n, x):
        r"""
        assign(FloatVector self, std::vector< float >::size_type n, std::vector< float >::value_type const & x)

        Parameters
        ----------
        n: std::vector< float >::size_type
        x: std::vector< float >::value_type const &

        """
        return _dingosdk.FloatVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(FloatVector self, std::vector< float >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< float >::size_type

        resize(FloatVector self, std::vector< float >::size_type new_size, std::vector< float >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< float >::size_type
        x: std::vector< float >::value_type const &

        """
        return _dingosdk.FloatVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(FloatVector self, std::vector< float >::iterator pos, std::vector< float >::value_type const & x) -> std::vector< float >::iterator

        Parameters
        ----------
        pos: std::vector< float >::iterator
        x: std::vector< float >::value_type const &

        insert(FloatVector self, std::vector< float >::iterator pos, std::vector< float >::size_type n, std::vector< float >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< float >::iterator
        n: std::vector< float >::size_type
        x: std::vector< float >::value_type const &

        """
        return _dingosdk.FloatVector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(FloatVector self, std::vector< float >::size_type n)

        Parameters
        ----------
        n: std::vector< float >::size_type

        """
        return _dingosdk.FloatVector_reserve(self, n)

    def capacity(self):
        r"""capacity(FloatVector self) -> std::vector< float >::size_type"""
        return _dingosdk.FloatVector_capacity(self)
    __swig_destroy__ = _dingosdk.delete_FloatVector

# Register FloatVector in _dingosdk:
_dingosdk.FloatVector_swigregister(FloatVector)
class UInt8Vector(object):
    r"""Proxy of C++ std::vector< uint8_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(UInt8Vector self) -> SwigPyIterator"""
        return _dingosdk.UInt8Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(UInt8Vector self) -> bool"""
        return _dingosdk.UInt8Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(UInt8Vector self) -> bool"""
        return _dingosdk.UInt8Vector___bool__(self)

    def __len__(self):
        r"""__len__(UInt8Vector self) -> std::vector< unsigned char >::size_type"""
        return _dingosdk.UInt8Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(UInt8Vector self, std::vector< unsigned char >::difference_type i, std::vector< unsigned char >::difference_type j) -> UInt8Vector

        Parameters
        ----------
        i: std::vector< unsigned char >::difference_type
        j: std::vector< unsigned char >::difference_type

        """
        return _dingosdk.UInt8Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(UInt8Vector self, std::vector< unsigned char >::difference_type i, std::vector< unsigned char >::difference_type j)

        Parameters
        ----------
        i: std::vector< unsigned char >::difference_type
        j: std::vector< unsigned char >::difference_type

        __setslice__(UInt8Vector self, std::vector< unsigned char >::difference_type i, std::vector< unsigned char >::difference_type j, UInt8Vector v)

        Parameters
        ----------
        i: std::vector< unsigned char >::difference_type
        j: std::vector< unsigned char >::difference_type
        v: std::vector< unsigned char,std::allocator< unsigned char > > const &

        """
        return _dingosdk.UInt8Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(UInt8Vector self, std::vector< unsigned char >::difference_type i, std::vector< unsigned char >::difference_type j)

        Parameters
        ----------
        i: std::vector< unsigned char >::difference_type
        j: std::vector< unsigned char >::difference_type

        """
        return _dingosdk.UInt8Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(UInt8Vector self, std::vector< unsigned char >::difference_type i)

        Parameters
        ----------
        i: std::vector< unsigned char >::difference_type

        __delitem__(UInt8Vector self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _dingosdk.UInt8Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(UInt8Vector self, SWIGPY_SLICEOBJECT * slice) -> UInt8Vector

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(UInt8Vector self, std::vector< unsigned char >::difference_type i) -> std::vector< unsigned char >::value_type const &

        Parameters
        ----------
        i: std::vector< unsigned char >::difference_type

        """
        return _dingosdk.UInt8Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(UInt8Vector self, SWIGPY_SLICEOBJECT * slice, UInt8Vector v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< unsigned char,std::allocator< unsigned char > > const &

        __setitem__(UInt8Vector self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(UInt8Vector self, std::vector< unsigned char >::difference_type i, std::vector< unsigned char >::value_type const & x)

        Parameters
        ----------
        i: std::vector< unsigned char >::difference_type
        x: std::vector< unsigned char >::value_type const &

        """
        return _dingosdk.UInt8Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(UInt8Vector self) -> std::vector< unsigned char >::value_type"""
        return _dingosdk.UInt8Vector_pop(self)

    def append(self, x):
        r"""
        append(UInt8Vector self, std::vector< unsigned char >::value_type const & x)

        Parameters
        ----------
        x: std::vector< unsigned char >::value_type const &

        """
        return _dingosdk.UInt8Vector_append(self, x)

    def empty(self):
        r"""empty(UInt8Vector self) -> bool"""
        return _dingosdk.UInt8Vector_empty(self)

    def size(self):
        r"""size(UInt8Vector self) -> std::vector< unsigned char >::size_type"""
        return _dingosdk.UInt8Vector_size(self)

    def swap(self, v):
        r"""
        swap(UInt8Vector self, UInt8Vector v)

        Parameters
        ----------
        v: std::vector< uint8_t > &

        """
        return _dingosdk.UInt8Vector_swap(self, v)

    def begin(self):
        r"""begin(UInt8Vector self) -> std::vector< unsigned char >::iterator"""
        return _dingosdk.UInt8Vector_begin(self)

    def end(self):
        r"""end(UInt8Vector self) -> std::vector< unsigned char >::iterator"""
        return _dingosdk.UInt8Vector_end(self)

    def rbegin(self):
        r"""rbegin(UInt8Vector self) -> std::vector< unsigned char >::reverse_iterator"""
        return _dingosdk.UInt8Vector_rbegin(self)

    def rend(self):
        r"""rend(UInt8Vector self) -> std::vector< unsigned char >::reverse_iterator"""
        return _dingosdk.UInt8Vector_rend(self)

    def clear(self):
        r"""clear(UInt8Vector self)"""
        return _dingosdk.UInt8Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(UInt8Vector self) -> std::vector< unsigned char >::allocator_type"""
        return _dingosdk.UInt8Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(UInt8Vector self)"""
        return _dingosdk.UInt8Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(UInt8Vector self, std::vector< unsigned char >::iterator pos) -> std::vector< unsigned char >::iterator

        Parameters
        ----------
        pos: std::vector< unsigned char >::iterator

        erase(UInt8Vector self, std::vector< unsigned char >::iterator first, std::vector< unsigned char >::iterator last) -> std::vector< unsigned char >::iterator

        Parameters
        ----------
        first: std::vector< unsigned char >::iterator
        last: std::vector< unsigned char >::iterator

        """
        return _dingosdk.UInt8Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(UInt8Vector self) -> UInt8Vector
        __init__(UInt8Vector self, UInt8Vector other) -> UInt8Vector

        Parameters
        ----------
        other: std::vector< uint8_t > const &

        __init__(UInt8Vector self, std::vector< unsigned char >::size_type size) -> UInt8Vector

        Parameters
        ----------
        size: std::vector< unsigned char >::size_type

        __init__(UInt8Vector self, std::vector< unsigned char >::size_type size, std::vector< unsigned char >::value_type const & value) -> UInt8Vector

        Parameters
        ----------
        size: std::vector< unsigned char >::size_type
        value: std::vector< unsigned char >::value_type const &

        """
        _dingosdk.UInt8Vector_swiginit(self, _dingosdk.new_UInt8Vector(*args))

    def push_back(self, x):
        r"""
        push_back(UInt8Vector self, std::vector< unsigned char >::value_type const & x)

        Parameters
        ----------
        x: std::vector< unsigned char >::value_type const &

        """
        return _dingosdk.UInt8Vector_push_back(self, x)

    def front(self):
        r"""front(UInt8Vector self) -> std::vector< unsigned char >::value_type const &"""
        return _dingosdk.UInt8Vector_front(self)

    def back(self):
        r"""back(UInt8Vector self) -> std::vector< unsigned char >::value_type const &"""
        return _dingosdk.UInt8Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(UInt8Vector self, std::vector< unsigned char >::size_type n, std::vector< unsigned char >::value_type const & x)

        Parameters
        ----------
        n: std::vector< unsigned char >::size_type
        x: std::vector< unsigned char >::value_type const &

        """
        return _dingosdk.UInt8Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(UInt8Vector self, std::vector< unsigned char >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< unsigned char >::size_type

        resize(UInt8Vector self, std::vector< unsigned char >::size_type new_size, std::vector< unsigned char >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< unsigned char >::size_type
        x: std::vector< unsigned char >::value_type const &

        """
        return _dingosdk.UInt8Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(UInt8Vector self, std::vector< unsigned char >::iterator pos, std::vector< unsigned char >::value_type const & x) -> std::vector< unsigned char >::iterator

        Parameters
        ----------
        pos: std::vector< unsigned char >::iterator
        x: std::vector< unsigned char >::value_type const &

        insert(UInt8Vector self, std::vector< unsigned char >::iterator pos, std::vector< unsigned char >::size_type n, std::vector< unsigned char >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< unsigned char >::iterator
        n: std::vector< unsigned char >::size_type
        x: std::vector< unsigned char >::value_type const &

        """
        return _dingosdk.UInt8Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(UInt8Vector self, std::vector< unsigned char >::size_type n)

        Parameters
        ----------
        n: std::vector< unsigned char >::size_type

        """
        return _dingosdk.UInt8Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(UInt8Vector self) -> std::vector< unsigned char >::size_type"""
        return _dingosdk.UInt8Vector_capacity(self)
    __swig_destroy__ = _dingosdk.delete_UInt8Vector

# Register UInt8Vector in _dingosdk:
_dingosdk.UInt8Vector_swigregister(UInt8Vector)
class StringVector(object):
    r"""Proxy of C++ std::vector< std::string > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(StringVector self) -> SwigPyIterator"""
        return _dingosdk.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(StringVector self) -> bool"""
        return _dingosdk.StringVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(StringVector self) -> bool"""
        return _dingosdk.StringVector___bool__(self)

    def __len__(self):
        r"""__len__(StringVector self) -> std::vector< std::string >::size_type"""
        return _dingosdk.StringVector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j) -> StringVector

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type

        """
        return _dingosdk.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type

        __setslice__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j, StringVector v)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type
        v: std::vector< std::string,std::allocator< std::string > > const &

        """
        return _dingosdk.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type

        """
        return _dingosdk.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(StringVector self, std::vector< std::string >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type

        __delitem__(StringVector self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _dingosdk.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(StringVector self, SWIGPY_SLICEOBJECT * slice) -> StringVector

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(StringVector self, std::vector< std::string >::difference_type i) -> std::vector< std::string >::value_type const &

        Parameters
        ----------
        i: std::vector< std::string >::difference_type

        """
        return _dingosdk.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(StringVector self, SWIGPY_SLICEOBJECT * slice, StringVector v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< std::string,std::allocator< std::string > > const &

        __setitem__(StringVector self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        x: std::vector< std::string >::value_type const &

        """
        return _dingosdk.StringVector___setitem__(self, *args)

    def pop(self):
        r"""pop(StringVector self) -> std::vector< std::string >::value_type"""
        return _dingosdk.StringVector_pop(self)

    def append(self, x):
        r"""
        append(StringVector self, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::string >::value_type const &

        """
        return _dingosdk.StringVector_append(self, x)

    def empty(self):
        r"""empty(StringVector self) -> bool"""
        return _dingosdk.StringVector_empty(self)

    def size(self):
        r"""size(StringVector self) -> std::vector< std::string >::size_type"""
        return _dingosdk.StringVector_size(self)

    def swap(self, v):
        r"""
        swap(StringVector self, StringVector v)

        Parameters
        ----------
        v: std::vector< std::string > &

        """
        return _dingosdk.StringVector_swap(self, v)

    def begin(self):
        r"""begin(StringVector self) -> std::vector< std::string >::iterator"""
        return _dingosdk.StringVector_begin(self)

    def end(self):
        r"""end(StringVector self) -> std::vector< std::string >::iterator"""
        return _dingosdk.StringVector_end(self)

    def rbegin(self):
        r"""rbegin(StringVector self) -> std::vector< std::string >::reverse_iterator"""
        return _dingosdk.StringVector_rbegin(self)

    def rend(self):
        r"""rend(StringVector self) -> std::vector< std::string >::reverse_iterator"""
        return _dingosdk.StringVector_rend(self)

    def clear(self):
        r"""clear(StringVector self)"""
        return _dingosdk.StringVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(StringVector self) -> std::vector< std::string >::allocator_type"""
        return _dingosdk.StringVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(StringVector self)"""
        return _dingosdk.StringVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(StringVector self, std::vector< std::string >::iterator pos) -> std::vector< std::string >::iterator

        Parameters
        ----------
        pos: std::vector< std::string >::iterator

        erase(StringVector self, std::vector< std::string >::iterator first, std::vector< std::string >::iterator last) -> std::vector< std::string >::iterator

        Parameters
        ----------
        first: std::vector< std::string >::iterator
        last: std::vector< std::string >::iterator

        """
        return _dingosdk.StringVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(StringVector self) -> StringVector
        __init__(StringVector self, StringVector other) -> StringVector

        Parameters
        ----------
        other: std::vector< std::string > const &

        __init__(StringVector self, std::vector< std::string >::size_type size) -> StringVector

        Parameters
        ----------
        size: std::vector< std::string >::size_type

        __init__(StringVector self, std::vector< std::string >::size_type size, std::vector< std::string >::value_type const & value) -> StringVector

        Parameters
        ----------
        size: std::vector< std::string >::size_type
        value: std::vector< std::string >::value_type const &

        """
        _dingosdk.StringVector_swiginit(self, _dingosdk.new_StringVector(*args))

    def push_back(self, x):
        r"""
        push_back(StringVector self, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::string >::value_type const &

        """
        return _dingosdk.StringVector_push_back(self, x)

    def front(self):
        r"""front(StringVector self) -> std::vector< std::string >::value_type const &"""
        return _dingosdk.StringVector_front(self)

    def back(self):
        r"""back(StringVector self) -> std::vector< std::string >::value_type const &"""
        return _dingosdk.StringVector_back(self)

    def assign(self, n, x):
        r"""
        assign(StringVector self, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::string >::size_type
        x: std::vector< std::string >::value_type const &

        """
        return _dingosdk.StringVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(StringVector self, std::vector< std::string >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::string >::size_type

        resize(StringVector self, std::vector< std::string >::size_type new_size, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::string >::size_type
        x: std::vector< std::string >::value_type const &

        """
        return _dingosdk.StringVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(StringVector self, std::vector< std::string >::iterator pos, std::vector< std::string >::value_type const & x) -> std::vector< std::string >::iterator

        Parameters
        ----------
        pos: std::vector< std::string >::iterator
        x: std::vector< std::string >::value_type const &

        insert(StringVector self, std::vector< std::string >::iterator pos, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::string >::iterator
        n: std::vector< std::string >::size_type
        x: std::vector< std::string >::value_type const &

        """
        return _dingosdk.StringVector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(StringVector self, std::vector< std::string >::size_type n)

        Parameters
        ----------
        n: std::vector< std::string >::size_type

        """
        return _dingosdk.StringVector_reserve(self, n)

    def capacity(self):
        r"""capacity(StringVector self) -> std::vector< std::string >::size_type"""
        return _dingosdk.StringVector_capacity(self)
    __swig_destroy__ = _dingosdk.delete_StringVector

# Register StringVector in _dingosdk:
_dingosdk.StringVector_swigregister(StringVector)
class KVPairVector(object):
    r"""Proxy of C++ std::vector< dingodb::sdk::KVPair > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(KVPairVector self) -> SwigPyIterator"""
        return _dingosdk.KVPairVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(KVPairVector self) -> bool"""
        return _dingosdk.KVPairVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(KVPairVector self) -> bool"""
        return _dingosdk.KVPairVector___bool__(self)

    def __len__(self):
        r"""__len__(KVPairVector self) -> std::vector< dingodb::sdk::KVPair >::size_type"""
        return _dingosdk.KVPairVector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(KVPairVector self, std::vector< dingodb::sdk::KVPair >::difference_type i, std::vector< dingodb::sdk::KVPair >::difference_type j) -> KVPairVector

        Parameters
        ----------
        i: std::vector< dingodb::sdk::KVPair >::difference_type
        j: std::vector< dingodb::sdk::KVPair >::difference_type

        """
        return _dingosdk.KVPairVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(KVPairVector self, std::vector< dingodb::sdk::KVPair >::difference_type i, std::vector< dingodb::sdk::KVPair >::difference_type j)

        Parameters
        ----------
        i: std::vector< dingodb::sdk::KVPair >::difference_type
        j: std::vector< dingodb::sdk::KVPair >::difference_type

        __setslice__(KVPairVector self, std::vector< dingodb::sdk::KVPair >::difference_type i, std::vector< dingodb::sdk::KVPair >::difference_type j, KVPairVector v)

        Parameters
        ----------
        i: std::vector< dingodb::sdk::KVPair >::difference_type
        j: std::vector< dingodb::sdk::KVPair >::difference_type
        v: std::vector< dingodb::sdk::KVPair,std::allocator< dingodb::sdk::KVPair > > const &

        """
        return _dingosdk.KVPairVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(KVPairVector self, std::vector< dingodb::sdk::KVPair >::difference_type i, std::vector< dingodb::sdk::KVPair >::difference_type j)

        Parameters
        ----------
        i: std::vector< dingodb::sdk::KVPair >::difference_type
        j: std::vector< dingodb::sdk::KVPair >::difference_type

        """
        return _dingosdk.KVPairVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(KVPairVector self, std::vector< dingodb::sdk::KVPair >::difference_type i)

        Parameters
        ----------
        i: std::vector< dingodb::sdk::KVPair >::difference_type

        __delitem__(KVPairVector self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _dingosdk.KVPairVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(KVPairVector self, SWIGPY_SLICEOBJECT * slice) -> KVPairVector

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(KVPairVector self, std::vector< dingodb::sdk::KVPair >::difference_type i) -> KVPair

        Parameters
        ----------
        i: std::vector< dingodb::sdk::KVPair >::difference_type

        """
        return _dingosdk.KVPairVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(KVPairVector self, SWIGPY_SLICEOBJECT * slice, KVPairVector v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< dingodb::sdk::KVPair,std::allocator< dingodb::sdk::KVPair > > const &

        __setitem__(KVPairVector self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(KVPairVector self, std::vector< dingodb::sdk::KVPair >::difference_type i, KVPair x)

        Parameters
        ----------
        i: std::vector< dingodb::sdk::KVPair >::difference_type
        x: std::vector< dingodb::sdk::KVPair >::value_type const &

        """
        return _dingosdk.KVPairVector___setitem__(self, *args)

    def pop(self):
        r"""pop(KVPairVector self) -> KVPair"""
        return _dingosdk.KVPairVector_pop(self)

    def append(self, x):
        r"""
        append(KVPairVector self, KVPair x)

        Parameters
        ----------
        x: std::vector< dingodb::sdk::KVPair >::value_type const &

        """
        return _dingosdk.KVPairVector_append(self, x)

    def empty(self):
        r"""empty(KVPairVector self) -> bool"""
        return _dingosdk.KVPairVector_empty(self)

    def size(self):
        r"""size(KVPairVector self) -> std::vector< dingodb::sdk::KVPair >::size_type"""
        return _dingosdk.KVPairVector_size(self)

    def swap(self, v):
        r"""
        swap(KVPairVector self, KVPairVector v)

        Parameters
        ----------
        v: std::vector< dingodb::sdk::KVPair > &

        """
        return _dingosdk.KVPairVector_swap(self, v)

    def begin(self):
        r"""begin(KVPairVector self) -> std::vector< dingodb::sdk::KVPair >::iterator"""
        return _dingosdk.KVPairVector_begin(self)

    def end(self):
        r"""end(KVPairVector self) -> std::vector< dingodb::sdk::KVPair >::iterator"""
        return _dingosdk.KVPairVector_end(self)

    def rbegin(self):
        r"""rbegin(KVPairVector self) -> std::vector< dingodb::sdk::KVPair >::reverse_iterator"""
        return _dingosdk.KVPairVector_rbegin(self)

    def rend(self):
        r"""rend(KVPairVector self) -> std::vector< dingodb::sdk::KVPair >::reverse_iterator"""
        return _dingosdk.KVPairVector_rend(self)

    def clear(self):
        r"""clear(KVPairVector self)"""
        return _dingosdk.KVPairVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(KVPairVector self) -> std::vector< dingodb::sdk::KVPair >::allocator_type"""
        return _dingosdk.KVPairVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(KVPairVector self)"""
        return _dingosdk.KVPairVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(KVPairVector self, std::vector< dingodb::sdk::KVPair >::iterator pos) -> std::vector< dingodb::sdk::KVPair >::iterator

        Parameters
        ----------
        pos: std::vector< dingodb::sdk::KVPair >::iterator

        erase(KVPairVector self, std::vector< dingodb::sdk::KVPair >::iterator first, std::vector< dingodb::sdk::KVPair >::iterator last) -> std::vector< dingodb::sdk::KVPair >::iterator

        Parameters
        ----------
        first: std::vector< dingodb::sdk::KVPair >::iterator
        last: std::vector< dingodb::sdk::KVPair >::iterator

        """
        return _dingosdk.KVPairVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(KVPairVector self) -> KVPairVector
        __init__(KVPairVector self, KVPairVector other) -> KVPairVector

        Parameters
        ----------
        other: std::vector< dingodb::sdk::KVPair > const &

        __init__(KVPairVector self, std::vector< dingodb::sdk::KVPair >::size_type size) -> KVPairVector

        Parameters
        ----------
        size: std::vector< dingodb::sdk::KVPair >::size_type

        __init__(KVPairVector self, std::vector< dingodb::sdk::KVPair >::size_type size, KVPair value) -> KVPairVector

        Parameters
        ----------
        size: std::vector< dingodb::sdk::KVPair >::size_type
        value: std::vector< dingodb::sdk::KVPair >::value_type const &

        """
        _dingosdk.KVPairVector_swiginit(self, _dingosdk.new_KVPairVector(*args))

    def push_back(self, x):
        r"""
        push_back(KVPairVector self, KVPair x)

        Parameters
        ----------
        x: std::vector< dingodb::sdk::KVPair >::value_type const &

        """
        return _dingosdk.KVPairVector_push_back(self, x)

    def front(self):
        r"""front(KVPairVector self) -> KVPair"""
        return _dingosdk.KVPairVector_front(self)

    def back(self):
        r"""back(KVPairVector self) -> KVPair"""
        return _dingosdk.KVPairVector_back(self)

    def assign(self, n, x):
        r"""
        assign(KVPairVector self, std::vector< dingodb::sdk::KVPair >::size_type n, KVPair x)

        Parameters
        ----------
        n: std::vector< dingodb::sdk::KVPair >::size_type
        x: std::vector< dingodb::sdk::KVPair >::value_type const &

        """
        return _dingosdk.KVPairVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(KVPairVector self, std::vector< dingodb::sdk::KVPair >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< dingodb::sdk::KVPair >::size_type

        resize(KVPairVector self, std::vector< dingodb::sdk::KVPair >::size_type new_size, KVPair x)

        Parameters
        ----------
        new_size: std::vector< dingodb::sdk::KVPair >::size_type
        x: std::vector< dingodb::sdk::KVPair >::value_type const &

        """
        return _dingosdk.KVPairVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(KVPairVector self, std::vector< dingodb::sdk::KVPair >::iterator pos, KVPair x) -> std::vector< dingodb::sdk::KVPair >::iterator

        Parameters
        ----------
        pos: std::vector< dingodb::sdk::KVPair >::iterator
        x: std::vector< dingodb::sdk::KVPair >::value_type const &

        insert(KVPairVector self, std::vector< dingodb::sdk::KVPair >::iterator pos, std::vector< dingodb::sdk::KVPair >::size_type n, KVPair x)

        Parameters
        ----------
        pos: std::vector< dingodb::sdk::KVPair >::iterator
        n: std::vector< dingodb::sdk::KVPair >::size_type
        x: std::vector< dingodb::sdk::KVPair >::value_type const &

        """
        return _dingosdk.KVPairVector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(KVPairVector self, std::vector< dingodb::sdk::KVPair >::size_type n)

        Parameters
        ----------
        n: std::vector< dingodb::sdk::KVPair >::size_type

        """
        return _dingosdk.KVPairVector_reserve(self, n)

    def capacity(self):
        r"""capacity(KVPairVector self) -> std::vector< dingodb::sdk::KVPair >::size_type"""
        return _dingosdk.KVPairVector_capacity(self)
    __swig_destroy__ = _dingosdk.delete_KVPairVector

# Register KVPairVector in _dingosdk:
_dingosdk.KVPairVector_swigregister(KVPairVector)
class KeyOpStateVector(object):
    r"""Proxy of C++ std::vector< dingodb::sdk::KeyOpState > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(KeyOpStateVector self) -> SwigPyIterator"""
        return _dingosdk.KeyOpStateVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(KeyOpStateVector self) -> bool"""
        return _dingosdk.KeyOpStateVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(KeyOpStateVector self) -> bool"""
        return _dingosdk.KeyOpStateVector___bool__(self)

    def __len__(self):
        r"""__len__(KeyOpStateVector self) -> std::vector< dingodb::sdk::KeyOpState >::size_type"""
        return _dingosdk.KeyOpStateVector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(KeyOpStateVector self, std::vector< dingodb::sdk::KeyOpState >::difference_type i, std::vector< dingodb::sdk::KeyOpState >::difference_type j) -> KeyOpStateVector

        Parameters
        ----------
        i: std::vector< dingodb::sdk::KeyOpState >::difference_type
        j: std::vector< dingodb::sdk::KeyOpState >::difference_type

        """
        return _dingosdk.KeyOpStateVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(KeyOpStateVector self, std::vector< dingodb::sdk::KeyOpState >::difference_type i, std::vector< dingodb::sdk::KeyOpState >::difference_type j)

        Parameters
        ----------
        i: std::vector< dingodb::sdk::KeyOpState >::difference_type
        j: std::vector< dingodb::sdk::KeyOpState >::difference_type

        __setslice__(KeyOpStateVector self, std::vector< dingodb::sdk::KeyOpState >::difference_type i, std::vector< dingodb::sdk::KeyOpState >::difference_type j, KeyOpStateVector v)

        Parameters
        ----------
        i: std::vector< dingodb::sdk::KeyOpState >::difference_type
        j: std::vector< dingodb::sdk::KeyOpState >::difference_type
        v: std::vector< dingodb::sdk::KeyOpState,std::allocator< dingodb::sdk::KeyOpState > > const &

        """
        return _dingosdk.KeyOpStateVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(KeyOpStateVector self, std::vector< dingodb::sdk::KeyOpState >::difference_type i, std::vector< dingodb::sdk::KeyOpState >::difference_type j)

        Parameters
        ----------
        i: std::vector< dingodb::sdk::KeyOpState >::difference_type
        j: std::vector< dingodb::sdk::KeyOpState >::difference_type

        """
        return _dingosdk.KeyOpStateVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(KeyOpStateVector self, std::vector< dingodb::sdk::KeyOpState >::difference_type i)

        Parameters
        ----------
        i: std::vector< dingodb::sdk::KeyOpState >::difference_type

        __delitem__(KeyOpStateVector self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _dingosdk.KeyOpStateVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(KeyOpStateVector self, SWIGPY_SLICEOBJECT * slice) -> KeyOpStateVector

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(KeyOpStateVector self, std::vector< dingodb::sdk::KeyOpState >::difference_type i) -> KeyOpState

        Parameters
        ----------
        i: std::vector< dingodb::sdk::KeyOpState >::difference_type

        """
        return _dingosdk.KeyOpStateVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(KeyOpStateVector self, SWIGPY_SLICEOBJECT * slice, KeyOpStateVector v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< dingodb::sdk::KeyOpState,std::allocator< dingodb::sdk::KeyOpState > > const &

        __setitem__(KeyOpStateVector self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(KeyOpStateVector self, std::vector< dingodb::sdk::KeyOpState >::difference_type i, KeyOpState x)

        Parameters
        ----------
        i: std::vector< dingodb::sdk::KeyOpState >::difference_type
        x: std::vector< dingodb::sdk::KeyOpState >::value_type const &

        """
        return _dingosdk.KeyOpStateVector___setitem__(self, *args)

    def pop(self):
        r"""pop(KeyOpStateVector self) -> KeyOpState"""
        return _dingosdk.KeyOpStateVector_pop(self)

    def append(self, x):
        r"""
        append(KeyOpStateVector self, KeyOpState x)

        Parameters
        ----------
        x: std::vector< dingodb::sdk::KeyOpState >::value_type const &

        """
        return _dingosdk.KeyOpStateVector_append(self, x)

    def empty(self):
        r"""empty(KeyOpStateVector self) -> bool"""
        return _dingosdk.KeyOpStateVector_empty(self)

    def size(self):
        r"""size(KeyOpStateVector self) -> std::vector< dingodb::sdk::KeyOpState >::size_type"""
        return _dingosdk.KeyOpStateVector_size(self)

    def swap(self, v):
        r"""
        swap(KeyOpStateVector self, KeyOpStateVector v)

        Parameters
        ----------
        v: std::vector< dingodb::sdk::KeyOpState > &

        """
        return _dingosdk.KeyOpStateVector_swap(self, v)

    def begin(self):
        r"""begin(KeyOpStateVector self) -> std::vector< dingodb::sdk::KeyOpState >::iterator"""
        return _dingosdk.KeyOpStateVector_begin(self)

    def end(self):
        r"""end(KeyOpStateVector self) -> std::vector< dingodb::sdk::KeyOpState >::iterator"""
        return _dingosdk.KeyOpStateVector_end(self)

    def rbegin(self):
        r"""rbegin(KeyOpStateVector self) -> std::vector< dingodb::sdk::KeyOpState >::reverse_iterator"""
        return _dingosdk.KeyOpStateVector_rbegin(self)

    def rend(self):
        r"""rend(KeyOpStateVector self) -> std::vector< dingodb::sdk::KeyOpState >::reverse_iterator"""
        return _dingosdk.KeyOpStateVector_rend(self)

    def clear(self):
        r"""clear(KeyOpStateVector self)"""
        return _dingosdk.KeyOpStateVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(KeyOpStateVector self) -> std::vector< dingodb::sdk::KeyOpState >::allocator_type"""
        return _dingosdk.KeyOpStateVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(KeyOpStateVector self)"""
        return _dingosdk.KeyOpStateVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(KeyOpStateVector self, std::vector< dingodb::sdk::KeyOpState >::iterator pos) -> std::vector< dingodb::sdk::KeyOpState >::iterator

        Parameters
        ----------
        pos: std::vector< dingodb::sdk::KeyOpState >::iterator

        erase(KeyOpStateVector self, std::vector< dingodb::sdk::KeyOpState >::iterator first, std::vector< dingodb::sdk::KeyOpState >::iterator last) -> std::vector< dingodb::sdk::KeyOpState >::iterator

        Parameters
        ----------
        first: std::vector< dingodb::sdk::KeyOpState >::iterator
        last: std::vector< dingodb::sdk::KeyOpState >::iterator

        """
        return _dingosdk.KeyOpStateVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(KeyOpStateVector self) -> KeyOpStateVector
        __init__(KeyOpStateVector self, KeyOpStateVector other) -> KeyOpStateVector

        Parameters
        ----------
        other: std::vector< dingodb::sdk::KeyOpState > const &

        __init__(KeyOpStateVector self, std::vector< dingodb::sdk::KeyOpState >::size_type size) -> KeyOpStateVector

        Parameters
        ----------
        size: std::vector< dingodb::sdk::KeyOpState >::size_type

        __init__(KeyOpStateVector self, std::vector< dingodb::sdk::KeyOpState >::size_type size, KeyOpState value) -> KeyOpStateVector

        Parameters
        ----------
        size: std::vector< dingodb::sdk::KeyOpState >::size_type
        value: std::vector< dingodb::sdk::KeyOpState >::value_type const &

        """
        _dingosdk.KeyOpStateVector_swiginit(self, _dingosdk.new_KeyOpStateVector(*args))

    def push_back(self, x):
        r"""
        push_back(KeyOpStateVector self, KeyOpState x)

        Parameters
        ----------
        x: std::vector< dingodb::sdk::KeyOpState >::value_type const &

        """
        return _dingosdk.KeyOpStateVector_push_back(self, x)

    def front(self):
        r"""front(KeyOpStateVector self) -> KeyOpState"""
        return _dingosdk.KeyOpStateVector_front(self)

    def back(self):
        r"""back(KeyOpStateVector self) -> KeyOpState"""
        return _dingosdk.KeyOpStateVector_back(self)

    def assign(self, n, x):
        r"""
        assign(KeyOpStateVector self, std::vector< dingodb::sdk::KeyOpState >::size_type n, KeyOpState x)

        Parameters
        ----------
        n: std::vector< dingodb::sdk::KeyOpState >::size_type
        x: std::vector< dingodb::sdk::KeyOpState >::value_type const &

        """
        return _dingosdk.KeyOpStateVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(KeyOpStateVector self, std::vector< dingodb::sdk::KeyOpState >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< dingodb::sdk::KeyOpState >::size_type

        resize(KeyOpStateVector self, std::vector< dingodb::sdk::KeyOpState >::size_type new_size, KeyOpState x)

        Parameters
        ----------
        new_size: std::vector< dingodb::sdk::KeyOpState >::size_type
        x: std::vector< dingodb::sdk::KeyOpState >::value_type const &

        """
        return _dingosdk.KeyOpStateVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(KeyOpStateVector self, std::vector< dingodb::sdk::KeyOpState >::iterator pos, KeyOpState x) -> std::vector< dingodb::sdk::KeyOpState >::iterator

        Parameters
        ----------
        pos: std::vector< dingodb::sdk::KeyOpState >::iterator
        x: std::vector< dingodb::sdk::KeyOpState >::value_type const &

        insert(KeyOpStateVector self, std::vector< dingodb::sdk::KeyOpState >::iterator pos, std::vector< dingodb::sdk::KeyOpState >::size_type n, KeyOpState x)

        Parameters
        ----------
        pos: std::vector< dingodb::sdk::KeyOpState >::iterator
        n: std::vector< dingodb::sdk::KeyOpState >::size_type
        x: std::vector< dingodb::sdk::KeyOpState >::value_type const &

        """
        return _dingosdk.KeyOpStateVector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(KeyOpStateVector self, std::vector< dingodb::sdk::KeyOpState >::size_type n)

        Parameters
        ----------
        n: std::vector< dingodb::sdk::KeyOpState >::size_type

        """
        return _dingosdk.KeyOpStateVector_reserve(self, n)

    def capacity(self):
        r"""capacity(KeyOpStateVector self) -> std::vector< dingodb::sdk::KeyOpState >::size_type"""
        return _dingosdk.KeyOpStateVector_capacity(self)
    __swig_destroy__ = _dingosdk.delete_KeyOpStateVector

# Register KeyOpStateVector in _dingosdk:
_dingosdk.KeyOpStateVector_swigregister(KeyOpStateVector)
class VectorWithIdVector(object):
    r"""Proxy of C++ std::vector< dingodb::sdk::VectorWithId > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(VectorWithIdVector self) -> SwigPyIterator"""
        return _dingosdk.VectorWithIdVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(VectorWithIdVector self) -> bool"""
        return _dingosdk.VectorWithIdVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(VectorWithIdVector self) -> bool"""
        return _dingosdk.VectorWithIdVector___bool__(self)

    def __len__(self):
        r"""__len__(VectorWithIdVector self) -> std::vector< dingodb::sdk::VectorWithId >::size_type"""
        return _dingosdk.VectorWithIdVector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(VectorWithIdVector self, std::vector< dingodb::sdk::VectorWithId >::difference_type i, std::vector< dingodb::sdk::VectorWithId >::difference_type j) -> VectorWithIdVector

        Parameters
        ----------
        i: std::vector< dingodb::sdk::VectorWithId >::difference_type
        j: std::vector< dingodb::sdk::VectorWithId >::difference_type

        """
        return _dingosdk.VectorWithIdVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(VectorWithIdVector self, std::vector< dingodb::sdk::VectorWithId >::difference_type i, std::vector< dingodb::sdk::VectorWithId >::difference_type j)

        Parameters
        ----------
        i: std::vector< dingodb::sdk::VectorWithId >::difference_type
        j: std::vector< dingodb::sdk::VectorWithId >::difference_type

        __setslice__(VectorWithIdVector self, std::vector< dingodb::sdk::VectorWithId >::difference_type i, std::vector< dingodb::sdk::VectorWithId >::difference_type j, VectorWithIdVector v)

        Parameters
        ----------
        i: std::vector< dingodb::sdk::VectorWithId >::difference_type
        j: std::vector< dingodb::sdk::VectorWithId >::difference_type
        v: std::vector< dingodb::sdk::VectorWithId,std::allocator< dingodb::sdk::VectorWithId > > const &

        """
        return _dingosdk.VectorWithIdVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(VectorWithIdVector self, std::vector< dingodb::sdk::VectorWithId >::difference_type i, std::vector< dingodb::sdk::VectorWithId >::difference_type j)

        Parameters
        ----------
        i: std::vector< dingodb::sdk::VectorWithId >::difference_type
        j: std::vector< dingodb::sdk::VectorWithId >::difference_type

        """
        return _dingosdk.VectorWithIdVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(VectorWithIdVector self, std::vector< dingodb::sdk::VectorWithId >::difference_type i)

        Parameters
        ----------
        i: std::vector< dingodb::sdk::VectorWithId >::difference_type

        __delitem__(VectorWithIdVector self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _dingosdk.VectorWithIdVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(VectorWithIdVector self, SWIGPY_SLICEOBJECT * slice) -> VectorWithIdVector

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(VectorWithIdVector self, std::vector< dingodb::sdk::VectorWithId >::difference_type i) -> VectorWithId

        Parameters
        ----------
        i: std::vector< dingodb::sdk::VectorWithId >::difference_type

        """
        return _dingosdk.VectorWithIdVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(VectorWithIdVector self, SWIGPY_SLICEOBJECT * slice, VectorWithIdVector v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< dingodb::sdk::VectorWithId,std::allocator< dingodb::sdk::VectorWithId > > const &

        __setitem__(VectorWithIdVector self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(VectorWithIdVector self, std::vector< dingodb::sdk::VectorWithId >::difference_type i, VectorWithId x)

        Parameters
        ----------
        i: std::vector< dingodb::sdk::VectorWithId >::difference_type
        x: std::vector< dingodb::sdk::VectorWithId >::value_type const &

        """
        return _dingosdk.VectorWithIdVector___setitem__(self, *args)

    def pop(self):
        r"""pop(VectorWithIdVector self) -> VectorWithId"""
        return _dingosdk.VectorWithIdVector_pop(self)

    def append(self, x):
        r"""
        append(VectorWithIdVector self, VectorWithId x)

        Parameters
        ----------
        x: std::vector< dingodb::sdk::VectorWithId >::value_type const &

        """
        return _dingosdk.VectorWithIdVector_append(self, x)

    def empty(self):
        r"""empty(VectorWithIdVector self) -> bool"""
        return _dingosdk.VectorWithIdVector_empty(self)

    def size(self):
        r"""size(VectorWithIdVector self) -> std::vector< dingodb::sdk::VectorWithId >::size_type"""
        return _dingosdk.VectorWithIdVector_size(self)

    def swap(self, v):
        r"""
        swap(VectorWithIdVector self, VectorWithIdVector v)

        Parameters
        ----------
        v: std::vector< dingodb::sdk::VectorWithId > &

        """
        return _dingosdk.VectorWithIdVector_swap(self, v)

    def begin(self):
        r"""begin(VectorWithIdVector self) -> std::vector< dingodb::sdk::VectorWithId >::iterator"""
        return _dingosdk.VectorWithIdVector_begin(self)

    def end(self):
        r"""end(VectorWithIdVector self) -> std::vector< dingodb::sdk::VectorWithId >::iterator"""
        return _dingosdk.VectorWithIdVector_end(self)

    def rbegin(self):
        r"""rbegin(VectorWithIdVector self) -> std::vector< dingodb::sdk::VectorWithId >::reverse_iterator"""
        return _dingosdk.VectorWithIdVector_rbegin(self)

    def rend(self):
        r"""rend(VectorWithIdVector self) -> std::vector< dingodb::sdk::VectorWithId >::reverse_iterator"""
        return _dingosdk.VectorWithIdVector_rend(self)

    def clear(self):
        r"""clear(VectorWithIdVector self)"""
        return _dingosdk.VectorWithIdVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(VectorWithIdVector self) -> std::vector< dingodb::sdk::VectorWithId >::allocator_type"""
        return _dingosdk.VectorWithIdVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(VectorWithIdVector self)"""
        return _dingosdk.VectorWithIdVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(VectorWithIdVector self, std::vector< dingodb::sdk::VectorWithId >::iterator pos) -> std::vector< dingodb::sdk::VectorWithId >::iterator

        Parameters
        ----------
        pos: std::vector< dingodb::sdk::VectorWithId >::iterator

        erase(VectorWithIdVector self, std::vector< dingodb::sdk::VectorWithId >::iterator first, std::vector< dingodb::sdk::VectorWithId >::iterator last) -> std::vector< dingodb::sdk::VectorWithId >::iterator

        Parameters
        ----------
        first: std::vector< dingodb::sdk::VectorWithId >::iterator
        last: std::vector< dingodb::sdk::VectorWithId >::iterator

        """
        return _dingosdk.VectorWithIdVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(VectorWithIdVector self) -> VectorWithIdVector
        __init__(VectorWithIdVector self, VectorWithIdVector other) -> VectorWithIdVector

        Parameters
        ----------
        other: std::vector< dingodb::sdk::VectorWithId > const &

        __init__(VectorWithIdVector self, std::vector< dingodb::sdk::VectorWithId >::size_type size) -> VectorWithIdVector

        Parameters
        ----------
        size: std::vector< dingodb::sdk::VectorWithId >::size_type

        __init__(VectorWithIdVector self, std::vector< dingodb::sdk::VectorWithId >::size_type size, VectorWithId value) -> VectorWithIdVector

        Parameters
        ----------
        size: std::vector< dingodb::sdk::VectorWithId >::size_type
        value: std::vector< dingodb::sdk::VectorWithId >::value_type const &

        """
        _dingosdk.VectorWithIdVector_swiginit(self, _dingosdk.new_VectorWithIdVector(*args))

    def push_back(self, x):
        r"""
        push_back(VectorWithIdVector self, VectorWithId x)

        Parameters
        ----------
        x: std::vector< dingodb::sdk::VectorWithId >::value_type const &

        """
        return _dingosdk.VectorWithIdVector_push_back(self, x)

    def front(self):
        r"""front(VectorWithIdVector self) -> VectorWithId"""
        return _dingosdk.VectorWithIdVector_front(self)

    def back(self):
        r"""back(VectorWithIdVector self) -> VectorWithId"""
        return _dingosdk.VectorWithIdVector_back(self)

    def assign(self, n, x):
        r"""
        assign(VectorWithIdVector self, std::vector< dingodb::sdk::VectorWithId >::size_type n, VectorWithId x)

        Parameters
        ----------
        n: std::vector< dingodb::sdk::VectorWithId >::size_type
        x: std::vector< dingodb::sdk::VectorWithId >::value_type const &

        """
        return _dingosdk.VectorWithIdVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(VectorWithIdVector self, std::vector< dingodb::sdk::VectorWithId >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< dingodb::sdk::VectorWithId >::size_type

        resize(VectorWithIdVector self, std::vector< dingodb::sdk::VectorWithId >::size_type new_size, VectorWithId x)

        Parameters
        ----------
        new_size: std::vector< dingodb::sdk::VectorWithId >::size_type
        x: std::vector< dingodb::sdk::VectorWithId >::value_type const &

        """
        return _dingosdk.VectorWithIdVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(VectorWithIdVector self, std::vector< dingodb::sdk::VectorWithId >::iterator pos, VectorWithId x) -> std::vector< dingodb::sdk::VectorWithId >::iterator

        Parameters
        ----------
        pos: std::vector< dingodb::sdk::VectorWithId >::iterator
        x: std::vector< dingodb::sdk::VectorWithId >::value_type const &

        insert(VectorWithIdVector self, std::vector< dingodb::sdk::VectorWithId >::iterator pos, std::vector< dingodb::sdk::VectorWithId >::size_type n, VectorWithId x)

        Parameters
        ----------
        pos: std::vector< dingodb::sdk::VectorWithId >::iterator
        n: std::vector< dingodb::sdk::VectorWithId >::size_type
        x: std::vector< dingodb::sdk::VectorWithId >::value_type const &

        """
        return _dingosdk.VectorWithIdVector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(VectorWithIdVector self, std::vector< dingodb::sdk::VectorWithId >::size_type n)

        Parameters
        ----------
        n: std::vector< dingodb::sdk::VectorWithId >::size_type

        """
        return _dingosdk.VectorWithIdVector_reserve(self, n)

    def capacity(self):
        r"""capacity(VectorWithIdVector self) -> std::vector< dingodb::sdk::VectorWithId >::size_type"""
        return _dingosdk.VectorWithIdVector_capacity(self)
    __swig_destroy__ = _dingosdk.delete_VectorWithIdVector

# Register VectorWithIdVector in _dingosdk:
_dingosdk.VectorWithIdVector_swigregister(VectorWithIdVector)
class SearchResultVector(object):
    r"""Proxy of C++ std::vector< dingodb::sdk::SearchResult > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(SearchResultVector self) -> SwigPyIterator"""
        return _dingosdk.SearchResultVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(SearchResultVector self) -> bool"""
        return _dingosdk.SearchResultVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(SearchResultVector self) -> bool"""
        return _dingosdk.SearchResultVector___bool__(self)

    def __len__(self):
        r"""__len__(SearchResultVector self) -> std::vector< dingodb::sdk::SearchResult >::size_type"""
        return _dingosdk.SearchResultVector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(SearchResultVector self, std::vector< dingodb::sdk::SearchResult >::difference_type i, std::vector< dingodb::sdk::SearchResult >::difference_type j) -> SearchResultVector

        Parameters
        ----------
        i: std::vector< dingodb::sdk::SearchResult >::difference_type
        j: std::vector< dingodb::sdk::SearchResult >::difference_type

        """
        return _dingosdk.SearchResultVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(SearchResultVector self, std::vector< dingodb::sdk::SearchResult >::difference_type i, std::vector< dingodb::sdk::SearchResult >::difference_type j)

        Parameters
        ----------
        i: std::vector< dingodb::sdk::SearchResult >::difference_type
        j: std::vector< dingodb::sdk::SearchResult >::difference_type

        __setslice__(SearchResultVector self, std::vector< dingodb::sdk::SearchResult >::difference_type i, std::vector< dingodb::sdk::SearchResult >::difference_type j, SearchResultVector v)

        Parameters
        ----------
        i: std::vector< dingodb::sdk::SearchResult >::difference_type
        j: std::vector< dingodb::sdk::SearchResult >::difference_type
        v: std::vector< dingodb::sdk::SearchResult,std::allocator< dingodb::sdk::SearchResult > > const &

        """
        return _dingosdk.SearchResultVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(SearchResultVector self, std::vector< dingodb::sdk::SearchResult >::difference_type i, std::vector< dingodb::sdk::SearchResult >::difference_type j)

        Parameters
        ----------
        i: std::vector< dingodb::sdk::SearchResult >::difference_type
        j: std::vector< dingodb::sdk::SearchResult >::difference_type

        """
        return _dingosdk.SearchResultVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(SearchResultVector self, std::vector< dingodb::sdk::SearchResult >::difference_type i)

        Parameters
        ----------
        i: std::vector< dingodb::sdk::SearchResult >::difference_type

        __delitem__(SearchResultVector self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _dingosdk.SearchResultVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(SearchResultVector self, SWIGPY_SLICEOBJECT * slice) -> SearchResultVector

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(SearchResultVector self, std::vector< dingodb::sdk::SearchResult >::difference_type i) -> SearchResult

        Parameters
        ----------
        i: std::vector< dingodb::sdk::SearchResult >::difference_type

        """
        return _dingosdk.SearchResultVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(SearchResultVector self, SWIGPY_SLICEOBJECT * slice, SearchResultVector v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< dingodb::sdk::SearchResult,std::allocator< dingodb::sdk::SearchResult > > const &

        __setitem__(SearchResultVector self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(SearchResultVector self, std::vector< dingodb::sdk::SearchResult >::difference_type i, SearchResult x)

        Parameters
        ----------
        i: std::vector< dingodb::sdk::SearchResult >::difference_type
        x: std::vector< dingodb::sdk::SearchResult >::value_type const &

        """
        return _dingosdk.SearchResultVector___setitem__(self, *args)

    def pop(self):
        r"""pop(SearchResultVector self) -> SearchResult"""
        return _dingosdk.SearchResultVector_pop(self)

    def append(self, x):
        r"""
        append(SearchResultVector self, SearchResult x)

        Parameters
        ----------
        x: std::vector< dingodb::sdk::SearchResult >::value_type const &

        """
        return _dingosdk.SearchResultVector_append(self, x)

    def empty(self):
        r"""empty(SearchResultVector self) -> bool"""
        return _dingosdk.SearchResultVector_empty(self)

    def size(self):
        r"""size(SearchResultVector self) -> std::vector< dingodb::sdk::SearchResult >::size_type"""
        return _dingosdk.SearchResultVector_size(self)

    def swap(self, v):
        r"""
        swap(SearchResultVector self, SearchResultVector v)

        Parameters
        ----------
        v: std::vector< dingodb::sdk::SearchResult > &

        """
        return _dingosdk.SearchResultVector_swap(self, v)

    def begin(self):
        r"""begin(SearchResultVector self) -> std::vector< dingodb::sdk::SearchResult >::iterator"""
        return _dingosdk.SearchResultVector_begin(self)

    def end(self):
        r"""end(SearchResultVector self) -> std::vector< dingodb::sdk::SearchResult >::iterator"""
        return _dingosdk.SearchResultVector_end(self)

    def rbegin(self):
        r"""rbegin(SearchResultVector self) -> std::vector< dingodb::sdk::SearchResult >::reverse_iterator"""
        return _dingosdk.SearchResultVector_rbegin(self)

    def rend(self):
        r"""rend(SearchResultVector self) -> std::vector< dingodb::sdk::SearchResult >::reverse_iterator"""
        return _dingosdk.SearchResultVector_rend(self)

    def clear(self):
        r"""clear(SearchResultVector self)"""
        return _dingosdk.SearchResultVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(SearchResultVector self) -> std::vector< dingodb::sdk::SearchResult >::allocator_type"""
        return _dingosdk.SearchResultVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(SearchResultVector self)"""
        return _dingosdk.SearchResultVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(SearchResultVector self, std::vector< dingodb::sdk::SearchResult >::iterator pos) -> std::vector< dingodb::sdk::SearchResult >::iterator

        Parameters
        ----------
        pos: std::vector< dingodb::sdk::SearchResult >::iterator

        erase(SearchResultVector self, std::vector< dingodb::sdk::SearchResult >::iterator first, std::vector< dingodb::sdk::SearchResult >::iterator last) -> std::vector< dingodb::sdk::SearchResult >::iterator

        Parameters
        ----------
        first: std::vector< dingodb::sdk::SearchResult >::iterator
        last: std::vector< dingodb::sdk::SearchResult >::iterator

        """
        return _dingosdk.SearchResultVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(SearchResultVector self) -> SearchResultVector
        __init__(SearchResultVector self, SearchResultVector other) -> SearchResultVector

        Parameters
        ----------
        other: std::vector< dingodb::sdk::SearchResult > const &

        __init__(SearchResultVector self, std::vector< dingodb::sdk::SearchResult >::size_type size) -> SearchResultVector

        Parameters
        ----------
        size: std::vector< dingodb::sdk::SearchResult >::size_type

        __init__(SearchResultVector self, std::vector< dingodb::sdk::SearchResult >::size_type size, SearchResult value) -> SearchResultVector

        Parameters
        ----------
        size: std::vector< dingodb::sdk::SearchResult >::size_type
        value: std::vector< dingodb::sdk::SearchResult >::value_type const &

        """
        _dingosdk.SearchResultVector_swiginit(self, _dingosdk.new_SearchResultVector(*args))

    def push_back(self, x):
        r"""
        push_back(SearchResultVector self, SearchResult x)

        Parameters
        ----------
        x: std::vector< dingodb::sdk::SearchResult >::value_type const &

        """
        return _dingosdk.SearchResultVector_push_back(self, x)

    def front(self):
        r"""front(SearchResultVector self) -> SearchResult"""
        return _dingosdk.SearchResultVector_front(self)

    def back(self):
        r"""back(SearchResultVector self) -> SearchResult"""
        return _dingosdk.SearchResultVector_back(self)

    def assign(self, n, x):
        r"""
        assign(SearchResultVector self, std::vector< dingodb::sdk::SearchResult >::size_type n, SearchResult x)

        Parameters
        ----------
        n: std::vector< dingodb::sdk::SearchResult >::size_type
        x: std::vector< dingodb::sdk::SearchResult >::value_type const &

        """
        return _dingosdk.SearchResultVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(SearchResultVector self, std::vector< dingodb::sdk::SearchResult >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< dingodb::sdk::SearchResult >::size_type

        resize(SearchResultVector self, std::vector< dingodb::sdk::SearchResult >::size_type new_size, SearchResult x)

        Parameters
        ----------
        new_size: std::vector< dingodb::sdk::SearchResult >::size_type
        x: std::vector< dingodb::sdk::SearchResult >::value_type const &

        """
        return _dingosdk.SearchResultVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(SearchResultVector self, std::vector< dingodb::sdk::SearchResult >::iterator pos, SearchResult x) -> std::vector< dingodb::sdk::SearchResult >::iterator

        Parameters
        ----------
        pos: std::vector< dingodb::sdk::SearchResult >::iterator
        x: std::vector< dingodb::sdk::SearchResult >::value_type const &

        insert(SearchResultVector self, std::vector< dingodb::sdk::SearchResult >::iterator pos, std::vector< dingodb::sdk::SearchResult >::size_type n, SearchResult x)

        Parameters
        ----------
        pos: std::vector< dingodb::sdk::SearchResult >::iterator
        n: std::vector< dingodb::sdk::SearchResult >::size_type
        x: std::vector< dingodb::sdk::SearchResult >::value_type const &

        """
        return _dingosdk.SearchResultVector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(SearchResultVector self, std::vector< dingodb::sdk::SearchResult >::size_type n)

        Parameters
        ----------
        n: std::vector< dingodb::sdk::SearchResult >::size_type

        """
        return _dingosdk.SearchResultVector_reserve(self, n)

    def capacity(self):
        r"""capacity(SearchResultVector self) -> std::vector< dingodb::sdk::SearchResult >::size_type"""
        return _dingosdk.SearchResultVector_capacity(self)
    __swig_destroy__ = _dingosdk.delete_SearchResultVector

# Register SearchResultVector in _dingosdk:
_dingosdk.SearchResultVector_swigregister(SearchResultVector)
class DeleteResultVector(object):
    r"""Proxy of C++ std::vector< dingodb::sdk::DeleteResult > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(DeleteResultVector self) -> SwigPyIterator"""
        return _dingosdk.DeleteResultVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(DeleteResultVector self) -> bool"""
        return _dingosdk.DeleteResultVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(DeleteResultVector self) -> bool"""
        return _dingosdk.DeleteResultVector___bool__(self)

    def __len__(self):
        r"""__len__(DeleteResultVector self) -> std::vector< dingodb::sdk::DeleteResult >::size_type"""
        return _dingosdk.DeleteResultVector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(DeleteResultVector self, std::vector< dingodb::sdk::DeleteResult >::difference_type i, std::vector< dingodb::sdk::DeleteResult >::difference_type j) -> DeleteResultVector

        Parameters
        ----------
        i: std::vector< dingodb::sdk::DeleteResult >::difference_type
        j: std::vector< dingodb::sdk::DeleteResult >::difference_type

        """
        return _dingosdk.DeleteResultVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(DeleteResultVector self, std::vector< dingodb::sdk::DeleteResult >::difference_type i, std::vector< dingodb::sdk::DeleteResult >::difference_type j)

        Parameters
        ----------
        i: std::vector< dingodb::sdk::DeleteResult >::difference_type
        j: std::vector< dingodb::sdk::DeleteResult >::difference_type

        __setslice__(DeleteResultVector self, std::vector< dingodb::sdk::DeleteResult >::difference_type i, std::vector< dingodb::sdk::DeleteResult >::difference_type j, DeleteResultVector v)

        Parameters
        ----------
        i: std::vector< dingodb::sdk::DeleteResult >::difference_type
        j: std::vector< dingodb::sdk::DeleteResult >::difference_type
        v: std::vector< dingodb::sdk::DeleteResult,std::allocator< dingodb::sdk::DeleteResult > > const &

        """
        return _dingosdk.DeleteResultVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(DeleteResultVector self, std::vector< dingodb::sdk::DeleteResult >::difference_type i, std::vector< dingodb::sdk::DeleteResult >::difference_type j)

        Parameters
        ----------
        i: std::vector< dingodb::sdk::DeleteResult >::difference_type
        j: std::vector< dingodb::sdk::DeleteResult >::difference_type

        """
        return _dingosdk.DeleteResultVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(DeleteResultVector self, std::vector< dingodb::sdk::DeleteResult >::difference_type i)

        Parameters
        ----------
        i: std::vector< dingodb::sdk::DeleteResult >::difference_type

        __delitem__(DeleteResultVector self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _dingosdk.DeleteResultVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(DeleteResultVector self, SWIGPY_SLICEOBJECT * slice) -> DeleteResultVector

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(DeleteResultVector self, std::vector< dingodb::sdk::DeleteResult >::difference_type i) -> DeleteResult

        Parameters
        ----------
        i: std::vector< dingodb::sdk::DeleteResult >::difference_type

        """
        return _dingosdk.DeleteResultVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(DeleteResultVector self, SWIGPY_SLICEOBJECT * slice, DeleteResultVector v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< dingodb::sdk::DeleteResult,std::allocator< dingodb::sdk::DeleteResult > > const &

        __setitem__(DeleteResultVector self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(DeleteResultVector self, std::vector< dingodb::sdk::DeleteResult >::difference_type i, DeleteResult x)

        Parameters
        ----------
        i: std::vector< dingodb::sdk::DeleteResult >::difference_type
        x: std::vector< dingodb::sdk::DeleteResult >::value_type const &

        """
        return _dingosdk.DeleteResultVector___setitem__(self, *args)

    def pop(self):
        r"""pop(DeleteResultVector self) -> DeleteResult"""
        return _dingosdk.DeleteResultVector_pop(self)

    def append(self, x):
        r"""
        append(DeleteResultVector self, DeleteResult x)

        Parameters
        ----------
        x: std::vector< dingodb::sdk::DeleteResult >::value_type const &

        """
        return _dingosdk.DeleteResultVector_append(self, x)

    def empty(self):
        r"""empty(DeleteResultVector self) -> bool"""
        return _dingosdk.DeleteResultVector_empty(self)

    def size(self):
        r"""size(DeleteResultVector self) -> std::vector< dingodb::sdk::DeleteResult >::size_type"""
        return _dingosdk.DeleteResultVector_size(self)

    def swap(self, v):
        r"""
        swap(DeleteResultVector self, DeleteResultVector v)

        Parameters
        ----------
        v: std::vector< dingodb::sdk::DeleteResult > &

        """
        return _dingosdk.DeleteResultVector_swap(self, v)

    def begin(self):
        r"""begin(DeleteResultVector self) -> std::vector< dingodb::sdk::DeleteResult >::iterator"""
        return _dingosdk.DeleteResultVector_begin(self)

    def end(self):
        r"""end(DeleteResultVector self) -> std::vector< dingodb::sdk::DeleteResult >::iterator"""
        return _dingosdk.DeleteResultVector_end(self)

    def rbegin(self):
        r"""rbegin(DeleteResultVector self) -> std::vector< dingodb::sdk::DeleteResult >::reverse_iterator"""
        return _dingosdk.DeleteResultVector_rbegin(self)

    def rend(self):
        r"""rend(DeleteResultVector self) -> std::vector< dingodb::sdk::DeleteResult >::reverse_iterator"""
        return _dingosdk.DeleteResultVector_rend(self)

    def clear(self):
        r"""clear(DeleteResultVector self)"""
        return _dingosdk.DeleteResultVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(DeleteResultVector self) -> std::vector< dingodb::sdk::DeleteResult >::allocator_type"""
        return _dingosdk.DeleteResultVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(DeleteResultVector self)"""
        return _dingosdk.DeleteResultVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(DeleteResultVector self, std::vector< dingodb::sdk::DeleteResult >::iterator pos) -> std::vector< dingodb::sdk::DeleteResult >::iterator

        Parameters
        ----------
        pos: std::vector< dingodb::sdk::DeleteResult >::iterator

        erase(DeleteResultVector self, std::vector< dingodb::sdk::DeleteResult >::iterator first, std::vector< dingodb::sdk::DeleteResult >::iterator last) -> std::vector< dingodb::sdk::DeleteResult >::iterator

        Parameters
        ----------
        first: std::vector< dingodb::sdk::DeleteResult >::iterator
        last: std::vector< dingodb::sdk::DeleteResult >::iterator

        """
        return _dingosdk.DeleteResultVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(DeleteResultVector self) -> DeleteResultVector
        __init__(DeleteResultVector self, DeleteResultVector other) -> DeleteResultVector

        Parameters
        ----------
        other: std::vector< dingodb::sdk::DeleteResult > const &

        __init__(DeleteResultVector self, std::vector< dingodb::sdk::DeleteResult >::size_type size) -> DeleteResultVector

        Parameters
        ----------
        size: std::vector< dingodb::sdk::DeleteResult >::size_type

        __init__(DeleteResultVector self, std::vector< dingodb::sdk::DeleteResult >::size_type size, DeleteResult value) -> DeleteResultVector

        Parameters
        ----------
        size: std::vector< dingodb::sdk::DeleteResult >::size_type
        value: std::vector< dingodb::sdk::DeleteResult >::value_type const &

        """
        _dingosdk.DeleteResultVector_swiginit(self, _dingosdk.new_DeleteResultVector(*args))

    def push_back(self, x):
        r"""
        push_back(DeleteResultVector self, DeleteResult x)

        Parameters
        ----------
        x: std::vector< dingodb::sdk::DeleteResult >::value_type const &

        """
        return _dingosdk.DeleteResultVector_push_back(self, x)

    def front(self):
        r"""front(DeleteResultVector self) -> DeleteResult"""
        return _dingosdk.DeleteResultVector_front(self)

    def back(self):
        r"""back(DeleteResultVector self) -> DeleteResult"""
        return _dingosdk.DeleteResultVector_back(self)

    def assign(self, n, x):
        r"""
        assign(DeleteResultVector self, std::vector< dingodb::sdk::DeleteResult >::size_type n, DeleteResult x)

        Parameters
        ----------
        n: std::vector< dingodb::sdk::DeleteResult >::size_type
        x: std::vector< dingodb::sdk::DeleteResult >::value_type const &

        """
        return _dingosdk.DeleteResultVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(DeleteResultVector self, std::vector< dingodb::sdk::DeleteResult >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< dingodb::sdk::DeleteResult >::size_type

        resize(DeleteResultVector self, std::vector< dingodb::sdk::DeleteResult >::size_type new_size, DeleteResult x)

        Parameters
        ----------
        new_size: std::vector< dingodb::sdk::DeleteResult >::size_type
        x: std::vector< dingodb::sdk::DeleteResult >::value_type const &

        """
        return _dingosdk.DeleteResultVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(DeleteResultVector self, std::vector< dingodb::sdk::DeleteResult >::iterator pos, DeleteResult x) -> std::vector< dingodb::sdk::DeleteResult >::iterator

        Parameters
        ----------
        pos: std::vector< dingodb::sdk::DeleteResult >::iterator
        x: std::vector< dingodb::sdk::DeleteResult >::value_type const &

        insert(DeleteResultVector self, std::vector< dingodb::sdk::DeleteResult >::iterator pos, std::vector< dingodb::sdk::DeleteResult >::size_type n, DeleteResult x)

        Parameters
        ----------
        pos: std::vector< dingodb::sdk::DeleteResult >::iterator
        n: std::vector< dingodb::sdk::DeleteResult >::size_type
        x: std::vector< dingodb::sdk::DeleteResult >::value_type const &

        """
        return _dingosdk.DeleteResultVector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(DeleteResultVector self, std::vector< dingodb::sdk::DeleteResult >::size_type n)

        Parameters
        ----------
        n: std::vector< dingodb::sdk::DeleteResult >::size_type

        """
        return _dingosdk.DeleteResultVector_reserve(self, n)

    def capacity(self):
        r"""capacity(DeleteResultVector self) -> std::vector< dingodb::sdk::DeleteResult >::size_type"""
        return _dingosdk.DeleteResultVector_capacity(self)
    __swig_destroy__ = _dingosdk.delete_DeleteResultVector

# Register DeleteResultVector in _dingosdk:
_dingosdk.DeleteResultVector_swigregister(DeleteResultVector)
class VectorWithDistanceVector(object):
    r"""Proxy of C++ std::vector< dingodb::sdk::VectorWithDistance > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(VectorWithDistanceVector self) -> SwigPyIterator"""
        return _dingosdk.VectorWithDistanceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(VectorWithDistanceVector self) -> bool"""
        return _dingosdk.VectorWithDistanceVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(VectorWithDistanceVector self) -> bool"""
        return _dingosdk.VectorWithDistanceVector___bool__(self)

    def __len__(self):
        r"""__len__(VectorWithDistanceVector self) -> std::vector< dingodb::sdk::VectorWithDistance >::size_type"""
        return _dingosdk.VectorWithDistanceVector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(VectorWithDistanceVector self, std::vector< dingodb::sdk::VectorWithDistance >::difference_type i, std::vector< dingodb::sdk::VectorWithDistance >::difference_type j) -> VectorWithDistanceVector

        Parameters
        ----------
        i: std::vector< dingodb::sdk::VectorWithDistance >::difference_type
        j: std::vector< dingodb::sdk::VectorWithDistance >::difference_type

        """
        return _dingosdk.VectorWithDistanceVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(VectorWithDistanceVector self, std::vector< dingodb::sdk::VectorWithDistance >::difference_type i, std::vector< dingodb::sdk::VectorWithDistance >::difference_type j)

        Parameters
        ----------
        i: std::vector< dingodb::sdk::VectorWithDistance >::difference_type
        j: std::vector< dingodb::sdk::VectorWithDistance >::difference_type

        __setslice__(VectorWithDistanceVector self, std::vector< dingodb::sdk::VectorWithDistance >::difference_type i, std::vector< dingodb::sdk::VectorWithDistance >::difference_type j, VectorWithDistanceVector v)

        Parameters
        ----------
        i: std::vector< dingodb::sdk::VectorWithDistance >::difference_type
        j: std::vector< dingodb::sdk::VectorWithDistance >::difference_type
        v: std::vector< dingodb::sdk::VectorWithDistance,std::allocator< dingodb::sdk::VectorWithDistance > > const &

        """
        return _dingosdk.VectorWithDistanceVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(VectorWithDistanceVector self, std::vector< dingodb::sdk::VectorWithDistance >::difference_type i, std::vector< dingodb::sdk::VectorWithDistance >::difference_type j)

        Parameters
        ----------
        i: std::vector< dingodb::sdk::VectorWithDistance >::difference_type
        j: std::vector< dingodb::sdk::VectorWithDistance >::difference_type

        """
        return _dingosdk.VectorWithDistanceVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(VectorWithDistanceVector self, std::vector< dingodb::sdk::VectorWithDistance >::difference_type i)

        Parameters
        ----------
        i: std::vector< dingodb::sdk::VectorWithDistance >::difference_type

        __delitem__(VectorWithDistanceVector self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _dingosdk.VectorWithDistanceVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(VectorWithDistanceVector self, SWIGPY_SLICEOBJECT * slice) -> VectorWithDistanceVector

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(VectorWithDistanceVector self, std::vector< dingodb::sdk::VectorWithDistance >::difference_type i) -> VectorWithDistance

        Parameters
        ----------
        i: std::vector< dingodb::sdk::VectorWithDistance >::difference_type

        """
        return _dingosdk.VectorWithDistanceVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(VectorWithDistanceVector self, SWIGPY_SLICEOBJECT * slice, VectorWithDistanceVector v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< dingodb::sdk::VectorWithDistance,std::allocator< dingodb::sdk::VectorWithDistance > > const &

        __setitem__(VectorWithDistanceVector self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(VectorWithDistanceVector self, std::vector< dingodb::sdk::VectorWithDistance >::difference_type i, VectorWithDistance x)

        Parameters
        ----------
        i: std::vector< dingodb::sdk::VectorWithDistance >::difference_type
        x: std::vector< dingodb::sdk::VectorWithDistance >::value_type const &

        """
        return _dingosdk.VectorWithDistanceVector___setitem__(self, *args)

    def pop(self):
        r"""pop(VectorWithDistanceVector self) -> VectorWithDistance"""
        return _dingosdk.VectorWithDistanceVector_pop(self)

    def append(self, x):
        r"""
        append(VectorWithDistanceVector self, VectorWithDistance x)

        Parameters
        ----------
        x: std::vector< dingodb::sdk::VectorWithDistance >::value_type const &

        """
        return _dingosdk.VectorWithDistanceVector_append(self, x)

    def empty(self):
        r"""empty(VectorWithDistanceVector self) -> bool"""
        return _dingosdk.VectorWithDistanceVector_empty(self)

    def size(self):
        r"""size(VectorWithDistanceVector self) -> std::vector< dingodb::sdk::VectorWithDistance >::size_type"""
        return _dingosdk.VectorWithDistanceVector_size(self)

    def swap(self, v):
        r"""
        swap(VectorWithDistanceVector self, VectorWithDistanceVector v)

        Parameters
        ----------
        v: std::vector< dingodb::sdk::VectorWithDistance > &

        """
        return _dingosdk.VectorWithDistanceVector_swap(self, v)

    def begin(self):
        r"""begin(VectorWithDistanceVector self) -> std::vector< dingodb::sdk::VectorWithDistance >::iterator"""
        return _dingosdk.VectorWithDistanceVector_begin(self)

    def end(self):
        r"""end(VectorWithDistanceVector self) -> std::vector< dingodb::sdk::VectorWithDistance >::iterator"""
        return _dingosdk.VectorWithDistanceVector_end(self)

    def rbegin(self):
        r"""rbegin(VectorWithDistanceVector self) -> std::vector< dingodb::sdk::VectorWithDistance >::reverse_iterator"""
        return _dingosdk.VectorWithDistanceVector_rbegin(self)

    def rend(self):
        r"""rend(VectorWithDistanceVector self) -> std::vector< dingodb::sdk::VectorWithDistance >::reverse_iterator"""
        return _dingosdk.VectorWithDistanceVector_rend(self)

    def clear(self):
        r"""clear(VectorWithDistanceVector self)"""
        return _dingosdk.VectorWithDistanceVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(VectorWithDistanceVector self) -> std::vector< dingodb::sdk::VectorWithDistance >::allocator_type"""
        return _dingosdk.VectorWithDistanceVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(VectorWithDistanceVector self)"""
        return _dingosdk.VectorWithDistanceVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(VectorWithDistanceVector self, std::vector< dingodb::sdk::VectorWithDistance >::iterator pos) -> std::vector< dingodb::sdk::VectorWithDistance >::iterator

        Parameters
        ----------
        pos: std::vector< dingodb::sdk::VectorWithDistance >::iterator

        erase(VectorWithDistanceVector self, std::vector< dingodb::sdk::VectorWithDistance >::iterator first, std::vector< dingodb::sdk::VectorWithDistance >::iterator last) -> std::vector< dingodb::sdk::VectorWithDistance >::iterator

        Parameters
        ----------
        first: std::vector< dingodb::sdk::VectorWithDistance >::iterator
        last: std::vector< dingodb::sdk::VectorWithDistance >::iterator

        """
        return _dingosdk.VectorWithDistanceVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(VectorWithDistanceVector self) -> VectorWithDistanceVector
        __init__(VectorWithDistanceVector self, VectorWithDistanceVector other) -> VectorWithDistanceVector

        Parameters
        ----------
        other: std::vector< dingodb::sdk::VectorWithDistance > const &

        __init__(VectorWithDistanceVector self, std::vector< dingodb::sdk::VectorWithDistance >::size_type size) -> VectorWithDistanceVector

        Parameters
        ----------
        size: std::vector< dingodb::sdk::VectorWithDistance >::size_type

        __init__(VectorWithDistanceVector self, std::vector< dingodb::sdk::VectorWithDistance >::size_type size, VectorWithDistance value) -> VectorWithDistanceVector

        Parameters
        ----------
        size: std::vector< dingodb::sdk::VectorWithDistance >::size_type
        value: std::vector< dingodb::sdk::VectorWithDistance >::value_type const &

        """
        _dingosdk.VectorWithDistanceVector_swiginit(self, _dingosdk.new_VectorWithDistanceVector(*args))

    def push_back(self, x):
        r"""
        push_back(VectorWithDistanceVector self, VectorWithDistance x)

        Parameters
        ----------
        x: std::vector< dingodb::sdk::VectorWithDistance >::value_type const &

        """
        return _dingosdk.VectorWithDistanceVector_push_back(self, x)

    def front(self):
        r"""front(VectorWithDistanceVector self) -> VectorWithDistance"""
        return _dingosdk.VectorWithDistanceVector_front(self)

    def back(self):
        r"""back(VectorWithDistanceVector self) -> VectorWithDistance"""
        return _dingosdk.VectorWithDistanceVector_back(self)

    def assign(self, n, x):
        r"""
        assign(VectorWithDistanceVector self, std::vector< dingodb::sdk::VectorWithDistance >::size_type n, VectorWithDistance x)

        Parameters
        ----------
        n: std::vector< dingodb::sdk::VectorWithDistance >::size_type
        x: std::vector< dingodb::sdk::VectorWithDistance >::value_type const &

        """
        return _dingosdk.VectorWithDistanceVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(VectorWithDistanceVector self, std::vector< dingodb::sdk::VectorWithDistance >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< dingodb::sdk::VectorWithDistance >::size_type

        resize(VectorWithDistanceVector self, std::vector< dingodb::sdk::VectorWithDistance >::size_type new_size, VectorWithDistance x)

        Parameters
        ----------
        new_size: std::vector< dingodb::sdk::VectorWithDistance >::size_type
        x: std::vector< dingodb::sdk::VectorWithDistance >::value_type const &

        """
        return _dingosdk.VectorWithDistanceVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(VectorWithDistanceVector self, std::vector< dingodb::sdk::VectorWithDistance >::iterator pos, VectorWithDistance x) -> std::vector< dingodb::sdk::VectorWithDistance >::iterator

        Parameters
        ----------
        pos: std::vector< dingodb::sdk::VectorWithDistance >::iterator
        x: std::vector< dingodb::sdk::VectorWithDistance >::value_type const &

        insert(VectorWithDistanceVector self, std::vector< dingodb::sdk::VectorWithDistance >::iterator pos, std::vector< dingodb::sdk::VectorWithDistance >::size_type n, VectorWithDistance x)

        Parameters
        ----------
        pos: std::vector< dingodb::sdk::VectorWithDistance >::iterator
        n: std::vector< dingodb::sdk::VectorWithDistance >::size_type
        x: std::vector< dingodb::sdk::VectorWithDistance >::value_type const &

        """
        return _dingosdk.VectorWithDistanceVector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(VectorWithDistanceVector self, std::vector< dingodb::sdk::VectorWithDistance >::size_type n)

        Parameters
        ----------
        n: std::vector< dingodb::sdk::VectorWithDistance >::size_type

        """
        return _dingosdk.VectorWithDistanceVector_reserve(self, n)

    def capacity(self):
        r"""capacity(VectorWithDistanceVector self) -> std::vector< dingodb::sdk::VectorWithDistance >::size_type"""
        return _dingosdk.VectorWithDistanceVector_capacity(self)
    __swig_destroy__ = _dingosdk.delete_VectorWithDistanceVector

# Register VectorWithDistanceVector in _dingosdk:
_dingosdk.VectorWithDistanceVector_swigregister(VectorWithDistanceVector)
class ScalarFieldVector(object):
    r"""Proxy of C++ std::vector< dingodb::sdk::ScalarField > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(ScalarFieldVector self) -> SwigPyIterator"""
        return _dingosdk.ScalarFieldVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(ScalarFieldVector self) -> bool"""
        return _dingosdk.ScalarFieldVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(ScalarFieldVector self) -> bool"""
        return _dingosdk.ScalarFieldVector___bool__(self)

    def __len__(self):
        r"""__len__(ScalarFieldVector self) -> std::vector< dingodb::sdk::ScalarField >::size_type"""
        return _dingosdk.ScalarFieldVector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(ScalarFieldVector self, std::vector< dingodb::sdk::ScalarField >::difference_type i, std::vector< dingodb::sdk::ScalarField >::difference_type j) -> ScalarFieldVector

        Parameters
        ----------
        i: std::vector< dingodb::sdk::ScalarField >::difference_type
        j: std::vector< dingodb::sdk::ScalarField >::difference_type

        """
        return _dingosdk.ScalarFieldVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(ScalarFieldVector self, std::vector< dingodb::sdk::ScalarField >::difference_type i, std::vector< dingodb::sdk::ScalarField >::difference_type j)

        Parameters
        ----------
        i: std::vector< dingodb::sdk::ScalarField >::difference_type
        j: std::vector< dingodb::sdk::ScalarField >::difference_type

        __setslice__(ScalarFieldVector self, std::vector< dingodb::sdk::ScalarField >::difference_type i, std::vector< dingodb::sdk::ScalarField >::difference_type j, ScalarFieldVector v)

        Parameters
        ----------
        i: std::vector< dingodb::sdk::ScalarField >::difference_type
        j: std::vector< dingodb::sdk::ScalarField >::difference_type
        v: std::vector< dingodb::sdk::ScalarField,std::allocator< dingodb::sdk::ScalarField > > const &

        """
        return _dingosdk.ScalarFieldVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(ScalarFieldVector self, std::vector< dingodb::sdk::ScalarField >::difference_type i, std::vector< dingodb::sdk::ScalarField >::difference_type j)

        Parameters
        ----------
        i: std::vector< dingodb::sdk::ScalarField >::difference_type
        j: std::vector< dingodb::sdk::ScalarField >::difference_type

        """
        return _dingosdk.ScalarFieldVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(ScalarFieldVector self, std::vector< dingodb::sdk::ScalarField >::difference_type i)

        Parameters
        ----------
        i: std::vector< dingodb::sdk::ScalarField >::difference_type

        __delitem__(ScalarFieldVector self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _dingosdk.ScalarFieldVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(ScalarFieldVector self, SWIGPY_SLICEOBJECT * slice) -> ScalarFieldVector

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(ScalarFieldVector self, std::vector< dingodb::sdk::ScalarField >::difference_type i) -> ScalarField

        Parameters
        ----------
        i: std::vector< dingodb::sdk::ScalarField >::difference_type

        """
        return _dingosdk.ScalarFieldVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(ScalarFieldVector self, SWIGPY_SLICEOBJECT * slice, ScalarFieldVector v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< dingodb::sdk::ScalarField,std::allocator< dingodb::sdk::ScalarField > > const &

        __setitem__(ScalarFieldVector self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(ScalarFieldVector self, std::vector< dingodb::sdk::ScalarField >::difference_type i, ScalarField x)

        Parameters
        ----------
        i: std::vector< dingodb::sdk::ScalarField >::difference_type
        x: std::vector< dingodb::sdk::ScalarField >::value_type const &

        """
        return _dingosdk.ScalarFieldVector___setitem__(self, *args)

    def pop(self):
        r"""pop(ScalarFieldVector self) -> ScalarField"""
        return _dingosdk.ScalarFieldVector_pop(self)

    def append(self, x):
        r"""
        append(ScalarFieldVector self, ScalarField x)

        Parameters
        ----------
        x: std::vector< dingodb::sdk::ScalarField >::value_type const &

        """
        return _dingosdk.ScalarFieldVector_append(self, x)

    def empty(self):
        r"""empty(ScalarFieldVector self) -> bool"""
        return _dingosdk.ScalarFieldVector_empty(self)

    def size(self):
        r"""size(ScalarFieldVector self) -> std::vector< dingodb::sdk::ScalarField >::size_type"""
        return _dingosdk.ScalarFieldVector_size(self)

    def swap(self, v):
        r"""
        swap(ScalarFieldVector self, ScalarFieldVector v)

        Parameters
        ----------
        v: std::vector< dingodb::sdk::ScalarField > &

        """
        return _dingosdk.ScalarFieldVector_swap(self, v)

    def begin(self):
        r"""begin(ScalarFieldVector self) -> std::vector< dingodb::sdk::ScalarField >::iterator"""
        return _dingosdk.ScalarFieldVector_begin(self)

    def end(self):
        r"""end(ScalarFieldVector self) -> std::vector< dingodb::sdk::ScalarField >::iterator"""
        return _dingosdk.ScalarFieldVector_end(self)

    def rbegin(self):
        r"""rbegin(ScalarFieldVector self) -> std::vector< dingodb::sdk::ScalarField >::reverse_iterator"""
        return _dingosdk.ScalarFieldVector_rbegin(self)

    def rend(self):
        r"""rend(ScalarFieldVector self) -> std::vector< dingodb::sdk::ScalarField >::reverse_iterator"""
        return _dingosdk.ScalarFieldVector_rend(self)

    def clear(self):
        r"""clear(ScalarFieldVector self)"""
        return _dingosdk.ScalarFieldVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(ScalarFieldVector self) -> std::vector< dingodb::sdk::ScalarField >::allocator_type"""
        return _dingosdk.ScalarFieldVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(ScalarFieldVector self)"""
        return _dingosdk.ScalarFieldVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(ScalarFieldVector self, std::vector< dingodb::sdk::ScalarField >::iterator pos) -> std::vector< dingodb::sdk::ScalarField >::iterator

        Parameters
        ----------
        pos: std::vector< dingodb::sdk::ScalarField >::iterator

        erase(ScalarFieldVector self, std::vector< dingodb::sdk::ScalarField >::iterator first, std::vector< dingodb::sdk::ScalarField >::iterator last) -> std::vector< dingodb::sdk::ScalarField >::iterator

        Parameters
        ----------
        first: std::vector< dingodb::sdk::ScalarField >::iterator
        last: std::vector< dingodb::sdk::ScalarField >::iterator

        """
        return _dingosdk.ScalarFieldVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(ScalarFieldVector self) -> ScalarFieldVector
        __init__(ScalarFieldVector self, ScalarFieldVector other) -> ScalarFieldVector

        Parameters
        ----------
        other: std::vector< dingodb::sdk::ScalarField > const &

        __init__(ScalarFieldVector self, std::vector< dingodb::sdk::ScalarField >::size_type size) -> ScalarFieldVector

        Parameters
        ----------
        size: std::vector< dingodb::sdk::ScalarField >::size_type

        __init__(ScalarFieldVector self, std::vector< dingodb::sdk::ScalarField >::size_type size, ScalarField value) -> ScalarFieldVector

        Parameters
        ----------
        size: std::vector< dingodb::sdk::ScalarField >::size_type
        value: std::vector< dingodb::sdk::ScalarField >::value_type const &

        """
        _dingosdk.ScalarFieldVector_swiginit(self, _dingosdk.new_ScalarFieldVector(*args))

    def push_back(self, x):
        r"""
        push_back(ScalarFieldVector self, ScalarField x)

        Parameters
        ----------
        x: std::vector< dingodb::sdk::ScalarField >::value_type const &

        """
        return _dingosdk.ScalarFieldVector_push_back(self, x)

    def front(self):
        r"""front(ScalarFieldVector self) -> ScalarField"""
        return _dingosdk.ScalarFieldVector_front(self)

    def back(self):
        r"""back(ScalarFieldVector self) -> ScalarField"""
        return _dingosdk.ScalarFieldVector_back(self)

    def assign(self, n, x):
        r"""
        assign(ScalarFieldVector self, std::vector< dingodb::sdk::ScalarField >::size_type n, ScalarField x)

        Parameters
        ----------
        n: std::vector< dingodb::sdk::ScalarField >::size_type
        x: std::vector< dingodb::sdk::ScalarField >::value_type const &

        """
        return _dingosdk.ScalarFieldVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(ScalarFieldVector self, std::vector< dingodb::sdk::ScalarField >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< dingodb::sdk::ScalarField >::size_type

        resize(ScalarFieldVector self, std::vector< dingodb::sdk::ScalarField >::size_type new_size, ScalarField x)

        Parameters
        ----------
        new_size: std::vector< dingodb::sdk::ScalarField >::size_type
        x: std::vector< dingodb::sdk::ScalarField >::value_type const &

        """
        return _dingosdk.ScalarFieldVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(ScalarFieldVector self, std::vector< dingodb::sdk::ScalarField >::iterator pos, ScalarField x) -> std::vector< dingodb::sdk::ScalarField >::iterator

        Parameters
        ----------
        pos: std::vector< dingodb::sdk::ScalarField >::iterator
        x: std::vector< dingodb::sdk::ScalarField >::value_type const &

        insert(ScalarFieldVector self, std::vector< dingodb::sdk::ScalarField >::iterator pos, std::vector< dingodb::sdk::ScalarField >::size_type n, ScalarField x)

        Parameters
        ----------
        pos: std::vector< dingodb::sdk::ScalarField >::iterator
        n: std::vector< dingodb::sdk::ScalarField >::size_type
        x: std::vector< dingodb::sdk::ScalarField >::value_type const &

        """
        return _dingosdk.ScalarFieldVector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(ScalarFieldVector self, std::vector< dingodb::sdk::ScalarField >::size_type n)

        Parameters
        ----------
        n: std::vector< dingodb::sdk::ScalarField >::size_type

        """
        return _dingosdk.ScalarFieldVector_reserve(self, n)

    def capacity(self):
        r"""capacity(ScalarFieldVector self) -> std::vector< dingodb::sdk::ScalarField >::size_type"""
        return _dingosdk.ScalarFieldVector_capacity(self)
    __swig_destroy__ = _dingosdk.delete_ScalarFieldVector

# Register ScalarFieldVector in _dingosdk:
_dingosdk.ScalarFieldVector_swigregister(ScalarFieldVector)
class SearchExtraParamMap(object):
    r"""Proxy of C++ std::map< enum dingodb::sdk::SearchExtraParamType,int32_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(SearchExtraParamMap self) -> SwigPyIterator"""
        return _dingosdk.SearchExtraParamMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(SearchExtraParamMap self) -> bool"""
        return _dingosdk.SearchExtraParamMap___nonzero__(self)

    def __bool__(self):
        r"""__bool__(SearchExtraParamMap self) -> bool"""
        return _dingosdk.SearchExtraParamMap___bool__(self)

    def __len__(self):
        r"""__len__(SearchExtraParamMap self) -> std::map< enum dingodb::sdk::SearchExtraParamType,int >::size_type"""
        return _dingosdk.SearchExtraParamMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        r"""
        __getitem__(SearchExtraParamMap self, std::map< enum dingodb::sdk::SearchExtraParamType,int >::key_type const & key) -> std::map< enum dingodb::sdk::SearchExtraParamType,int >::mapped_type const &

        Parameters
        ----------
        key: std::map< enum dingodb::sdk::SearchExtraParamType,int >::key_type const &

        """
        return _dingosdk.SearchExtraParamMap___getitem__(self, key)

    def __delitem__(self, key):
        r"""
        __delitem__(SearchExtraParamMap self, std::map< enum dingodb::sdk::SearchExtraParamType,int >::key_type const & key)

        Parameters
        ----------
        key: std::map< enum dingodb::sdk::SearchExtraParamType,int >::key_type const &

        """
        return _dingosdk.SearchExtraParamMap___delitem__(self, key)

    def has_key(self, key):
        r"""
        has_key(SearchExtraParamMap self, std::map< enum dingodb::sdk::SearchExtraParamType,int >::key_type const & key) -> bool

        Parameters
        ----------
        key: std::map< enum dingodb::sdk::SearchExtraParamType,int >::key_type const &

        """
        return _dingosdk.SearchExtraParamMap_has_key(self, key)

    def keys(self):
        r"""keys(SearchExtraParamMap self) -> PyObject *"""
        return _dingosdk.SearchExtraParamMap_keys(self)

    def values(self):
        r"""values(SearchExtraParamMap self) -> PyObject *"""
        return _dingosdk.SearchExtraParamMap_values(self)

    def items(self):
        r"""items(SearchExtraParamMap self) -> PyObject *"""
        return _dingosdk.SearchExtraParamMap_items(self)

    def __contains__(self, key):
        r"""
        __contains__(SearchExtraParamMap self, std::map< enum dingodb::sdk::SearchExtraParamType,int >::key_type const & key) -> bool

        Parameters
        ----------
        key: std::map< enum dingodb::sdk::SearchExtraParamType,int >::key_type const &

        """
        return _dingosdk.SearchExtraParamMap___contains__(self, key)

    def key_iterator(self):
        r"""key_iterator(SearchExtraParamMap self) -> SwigPyIterator"""
        return _dingosdk.SearchExtraParamMap_key_iterator(self)

    def value_iterator(self):
        r"""value_iterator(SearchExtraParamMap self) -> SwigPyIterator"""
        return _dingosdk.SearchExtraParamMap_value_iterator(self)

    def __setitem__(self, *args):
        r"""
        __setitem__(SearchExtraParamMap self, std::map< enum dingodb::sdk::SearchExtraParamType,int >::key_type const & key)

        Parameters
        ----------
        key: std::map< enum dingodb::sdk::SearchExtraParamType,int >::key_type const &

        __setitem__(SearchExtraParamMap self, std::map< enum dingodb::sdk::SearchExtraParamType,int >::key_type const & key, std::map< enum dingodb::sdk::SearchExtraParamType,int >::mapped_type const & x)

        Parameters
        ----------
        key: std::map< enum dingodb::sdk::SearchExtraParamType,int >::key_type const &
        x: std::map< enum dingodb::sdk::SearchExtraParamType,int >::mapped_type const &

        """
        return _dingosdk.SearchExtraParamMap___setitem__(self, *args)

    def asdict(self):
        r"""asdict(SearchExtraParamMap self) -> PyObject *"""
        return _dingosdk.SearchExtraParamMap_asdict(self)

    def __init__(self, *args):
        r"""
        __init__(SearchExtraParamMap self, std::less< enum dingodb::sdk::SearchExtraParamType > const & other) -> SearchExtraParamMap

        Parameters
        ----------
        other: std::less< enum dingodb::sdk::SearchExtraParamType > const &

        __init__(SearchExtraParamMap self) -> SearchExtraParamMap
        __init__(SearchExtraParamMap self, SearchExtraParamMap other) -> SearchExtraParamMap

        Parameters
        ----------
        other: std::map< enum dingodb::sdk::SearchExtraParamType,int32_t > const &

        """
        _dingosdk.SearchExtraParamMap_swiginit(self, _dingosdk.new_SearchExtraParamMap(*args))

    def empty(self):
        r"""empty(SearchExtraParamMap self) -> bool"""
        return _dingosdk.SearchExtraParamMap_empty(self)

    def size(self):
        r"""size(SearchExtraParamMap self) -> std::map< enum dingodb::sdk::SearchExtraParamType,int >::size_type"""
        return _dingosdk.SearchExtraParamMap_size(self)

    def swap(self, v):
        r"""
        swap(SearchExtraParamMap self, SearchExtraParamMap v)

        Parameters
        ----------
        v: std::map< enum dingodb::sdk::SearchExtraParamType,int32_t > &

        """
        return _dingosdk.SearchExtraParamMap_swap(self, v)

    def begin(self):
        r"""begin(SearchExtraParamMap self) -> std::map< enum dingodb::sdk::SearchExtraParamType,int >::iterator"""
        return _dingosdk.SearchExtraParamMap_begin(self)

    def end(self):
        r"""end(SearchExtraParamMap self) -> std::map< enum dingodb::sdk::SearchExtraParamType,int >::iterator"""
        return _dingosdk.SearchExtraParamMap_end(self)

    def rbegin(self):
        r"""rbegin(SearchExtraParamMap self) -> std::map< enum dingodb::sdk::SearchExtraParamType,int >::reverse_iterator"""
        return _dingosdk.SearchExtraParamMap_rbegin(self)

    def rend(self):
        r"""rend(SearchExtraParamMap self) -> std::map< enum dingodb::sdk::SearchExtraParamType,int >::reverse_iterator"""
        return _dingosdk.SearchExtraParamMap_rend(self)

    def clear(self):
        r"""clear(SearchExtraParamMap self)"""
        return _dingosdk.SearchExtraParamMap_clear(self)

    def get_allocator(self):
        r"""get_allocator(SearchExtraParamMap self) -> std::map< enum dingodb::sdk::SearchExtraParamType,int >::allocator_type"""
        return _dingosdk.SearchExtraParamMap_get_allocator(self)

    def count(self, x):
        r"""
        count(SearchExtraParamMap self, std::map< enum dingodb::sdk::SearchExtraParamType,int >::key_type const & x) -> std::map< enum dingodb::sdk::SearchExtraParamType,int >::size_type

        Parameters
        ----------
        x: std::map< enum dingodb::sdk::SearchExtraParamType,int >::key_type const &

        """
        return _dingosdk.SearchExtraParamMap_count(self, x)

    def erase(self, *args):
        r"""
        erase(SearchExtraParamMap self, std::map< enum dingodb::sdk::SearchExtraParamType,int >::key_type const & x) -> std::map< enum dingodb::sdk::SearchExtraParamType,int >::size_type

        Parameters
        ----------
        x: std::map< enum dingodb::sdk::SearchExtraParamType,int >::key_type const &

        erase(SearchExtraParamMap self, std::map< enum dingodb::sdk::SearchExtraParamType,int >::iterator position)

        Parameters
        ----------
        position: std::map< enum dingodb::sdk::SearchExtraParamType,int >::iterator

        erase(SearchExtraParamMap self, std::map< enum dingodb::sdk::SearchExtraParamType,int >::iterator first, std::map< enum dingodb::sdk::SearchExtraParamType,int >::iterator last)

        Parameters
        ----------
        first: std::map< enum dingodb::sdk::SearchExtraParamType,int >::iterator
        last: std::map< enum dingodb::sdk::SearchExtraParamType,int >::iterator

        """
        return _dingosdk.SearchExtraParamMap_erase(self, *args)

    def find(self, x):
        r"""
        find(SearchExtraParamMap self, std::map< enum dingodb::sdk::SearchExtraParamType,int >::key_type const & x) -> std::map< enum dingodb::sdk::SearchExtraParamType,int >::iterator

        Parameters
        ----------
        x: std::map< enum dingodb::sdk::SearchExtraParamType,int >::key_type const &

        """
        return _dingosdk.SearchExtraParamMap_find(self, x)

    def lower_bound(self, x):
        r"""
        lower_bound(SearchExtraParamMap self, std::map< enum dingodb::sdk::SearchExtraParamType,int >::key_type const & x) -> std::map< enum dingodb::sdk::SearchExtraParamType,int >::iterator

        Parameters
        ----------
        x: std::map< enum dingodb::sdk::SearchExtraParamType,int >::key_type const &

        """
        return _dingosdk.SearchExtraParamMap_lower_bound(self, x)

    def upper_bound(self, x):
        r"""
        upper_bound(SearchExtraParamMap self, std::map< enum dingodb::sdk::SearchExtraParamType,int >::key_type const & x) -> std::map< enum dingodb::sdk::SearchExtraParamType,int >::iterator

        Parameters
        ----------
        x: std::map< enum dingodb::sdk::SearchExtraParamType,int >::key_type const &

        """
        return _dingosdk.SearchExtraParamMap_upper_bound(self, x)
    __swig_destroy__ = _dingosdk.delete_SearchExtraParamMap

# Register SearchExtraParamMap in _dingosdk:
_dingosdk.SearchExtraParamMap_swigregister(SearchExtraParamMap)
class ScalarDataMap(object):
    r"""Proxy of C++ std::map< std::string,dingodb::sdk::ScalarValue > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(ScalarDataMap self) -> SwigPyIterator"""
        return _dingosdk.ScalarDataMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(ScalarDataMap self) -> bool"""
        return _dingosdk.ScalarDataMap___nonzero__(self)

    def __bool__(self):
        r"""__bool__(ScalarDataMap self) -> bool"""
        return _dingosdk.ScalarDataMap___bool__(self)

    def __len__(self):
        r"""__len__(ScalarDataMap self) -> std::map< std::string,dingodb::sdk::ScalarValue >::size_type"""
        return _dingosdk.ScalarDataMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        r"""
        __getitem__(ScalarDataMap self, std::map< std::string,dingodb::sdk::ScalarValue >::key_type const & key) -> ScalarValue

        Parameters
        ----------
        key: std::map< std::string,dingodb::sdk::ScalarValue >::key_type const &

        """
        return _dingosdk.ScalarDataMap___getitem__(self, key)

    def __delitem__(self, key):
        r"""
        __delitem__(ScalarDataMap self, std::map< std::string,dingodb::sdk::ScalarValue >::key_type const & key)

        Parameters
        ----------
        key: std::map< std::string,dingodb::sdk::ScalarValue >::key_type const &

        """
        return _dingosdk.ScalarDataMap___delitem__(self, key)

    def has_key(self, key):
        r"""
        has_key(ScalarDataMap self, std::map< std::string,dingodb::sdk::ScalarValue >::key_type const & key) -> bool

        Parameters
        ----------
        key: std::map< std::string,dingodb::sdk::ScalarValue >::key_type const &

        """
        return _dingosdk.ScalarDataMap_has_key(self, key)

    def keys(self):
        r"""keys(ScalarDataMap self) -> PyObject *"""
        return _dingosdk.ScalarDataMap_keys(self)

    def values(self):
        r"""values(ScalarDataMap self) -> PyObject *"""
        return _dingosdk.ScalarDataMap_values(self)

    def items(self):
        r"""items(ScalarDataMap self) -> PyObject *"""
        return _dingosdk.ScalarDataMap_items(self)

    def __contains__(self, key):
        r"""
        __contains__(ScalarDataMap self, std::map< std::string,dingodb::sdk::ScalarValue >::key_type const & key) -> bool

        Parameters
        ----------
        key: std::map< std::string,dingodb::sdk::ScalarValue >::key_type const &

        """
        return _dingosdk.ScalarDataMap___contains__(self, key)

    def key_iterator(self):
        r"""key_iterator(ScalarDataMap self) -> SwigPyIterator"""
        return _dingosdk.ScalarDataMap_key_iterator(self)

    def value_iterator(self):
        r"""value_iterator(ScalarDataMap self) -> SwigPyIterator"""
        return _dingosdk.ScalarDataMap_value_iterator(self)

    def __setitem__(self, *args):
        r"""
        __setitem__(ScalarDataMap self, std::map< std::string,dingodb::sdk::ScalarValue >::key_type const & key)

        Parameters
        ----------
        key: std::map< std::string,dingodb::sdk::ScalarValue >::key_type const &

        __setitem__(ScalarDataMap self, std::map< std::string,dingodb::sdk::ScalarValue >::key_type const & key, ScalarValue x)

        Parameters
        ----------
        key: std::map< std::string,dingodb::sdk::ScalarValue >::key_type const &
        x: std::map< std::string,dingodb::sdk::ScalarValue >::mapped_type const &

        """
        return _dingosdk.ScalarDataMap___setitem__(self, *args)

    def asdict(self):
        r"""asdict(ScalarDataMap self) -> PyObject *"""
        return _dingosdk.ScalarDataMap_asdict(self)

    def __init__(self, *args):
        r"""
        __init__(ScalarDataMap self, std::less< std::string > const & other) -> ScalarDataMap

        Parameters
        ----------
        other: std::less< std::string > const &

        __init__(ScalarDataMap self) -> ScalarDataMap
        __init__(ScalarDataMap self, ScalarDataMap other) -> ScalarDataMap

        Parameters
        ----------
        other: std::map< std::string,dingodb::sdk::ScalarValue > const &

        """
        _dingosdk.ScalarDataMap_swiginit(self, _dingosdk.new_ScalarDataMap(*args))

    def empty(self):
        r"""empty(ScalarDataMap self) -> bool"""
        return _dingosdk.ScalarDataMap_empty(self)

    def size(self):
        r"""size(ScalarDataMap self) -> std::map< std::string,dingodb::sdk::ScalarValue >::size_type"""
        return _dingosdk.ScalarDataMap_size(self)

    def swap(self, v):
        r"""
        swap(ScalarDataMap self, ScalarDataMap v)

        Parameters
        ----------
        v: std::map< std::string,dingodb::sdk::ScalarValue > &

        """
        return _dingosdk.ScalarDataMap_swap(self, v)

    def begin(self):
        r"""begin(ScalarDataMap self) -> std::map< std::string,dingodb::sdk::ScalarValue >::iterator"""
        return _dingosdk.ScalarDataMap_begin(self)

    def end(self):
        r"""end(ScalarDataMap self) -> std::map< std::string,dingodb::sdk::ScalarValue >::iterator"""
        return _dingosdk.ScalarDataMap_end(self)

    def rbegin(self):
        r"""rbegin(ScalarDataMap self) -> std::map< std::string,dingodb::sdk::ScalarValue >::reverse_iterator"""
        return _dingosdk.ScalarDataMap_rbegin(self)

    def rend(self):
        r"""rend(ScalarDataMap self) -> std::map< std::string,dingodb::sdk::ScalarValue >::reverse_iterator"""
        return _dingosdk.ScalarDataMap_rend(self)

    def clear(self):
        r"""clear(ScalarDataMap self)"""
        return _dingosdk.ScalarDataMap_clear(self)

    def get_allocator(self):
        r"""get_allocator(ScalarDataMap self) -> std::map< std::string,dingodb::sdk::ScalarValue >::allocator_type"""
        return _dingosdk.ScalarDataMap_get_allocator(self)

    def count(self, x):
        r"""
        count(ScalarDataMap self, std::map< std::string,dingodb::sdk::ScalarValue >::key_type const & x) -> std::map< std::string,dingodb::sdk::ScalarValue >::size_type

        Parameters
        ----------
        x: std::map< std::string,dingodb::sdk::ScalarValue >::key_type const &

        """
        return _dingosdk.ScalarDataMap_count(self, x)

    def erase(self, *args):
        r"""
        erase(ScalarDataMap self, std::map< std::string,dingodb::sdk::ScalarValue >::key_type const & x) -> std::map< std::string,dingodb::sdk::ScalarValue >::size_type

        Parameters
        ----------
        x: std::map< std::string,dingodb::sdk::ScalarValue >::key_type const &

        erase(ScalarDataMap self, std::map< std::string,dingodb::sdk::ScalarValue >::iterator position)

        Parameters
        ----------
        position: std::map< std::string,dingodb::sdk::ScalarValue >::iterator

        erase(ScalarDataMap self, std::map< std::string,dingodb::sdk::ScalarValue >::iterator first, std::map< std::string,dingodb::sdk::ScalarValue >::iterator last)

        Parameters
        ----------
        first: std::map< std::string,dingodb::sdk::ScalarValue >::iterator
        last: std::map< std::string,dingodb::sdk::ScalarValue >::iterator

        """
        return _dingosdk.ScalarDataMap_erase(self, *args)

    def find(self, x):
        r"""
        find(ScalarDataMap self, std::map< std::string,dingodb::sdk::ScalarValue >::key_type const & x) -> std::map< std::string,dingodb::sdk::ScalarValue >::iterator

        Parameters
        ----------
        x: std::map< std::string,dingodb::sdk::ScalarValue >::key_type const &

        """
        return _dingosdk.ScalarDataMap_find(self, x)

    def lower_bound(self, x):
        r"""
        lower_bound(ScalarDataMap self, std::map< std::string,dingodb::sdk::ScalarValue >::key_type const & x) -> std::map< std::string,dingodb::sdk::ScalarValue >::iterator

        Parameters
        ----------
        x: std::map< std::string,dingodb::sdk::ScalarValue >::key_type const &

        """
        return _dingosdk.ScalarDataMap_lower_bound(self, x)

    def upper_bound(self, x):
        r"""
        upper_bound(ScalarDataMap self, std::map< std::string,dingodb::sdk::ScalarValue >::key_type const & x) -> std::map< std::string,dingodb::sdk::ScalarValue >::iterator

        Parameters
        ----------
        x: std::map< std::string,dingodb::sdk::ScalarValue >::key_type const &

        """
        return _dingosdk.ScalarDataMap_upper_bound(self, x)
    __swig_destroy__ = _dingosdk.delete_ScalarDataMap

# Register ScalarDataMap in _dingosdk:
_dingosdk.ScalarDataMap_swigregister(ScalarDataMap)
class Status(object):
    r"""Proxy of C++ dingodb::sdk::Status class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _dingosdk.delete_Status

    def __init__(self, *args):
        r"""
        __init__(Status self) -> Status
        __init__(Status self, Status rhs) -> Status

        Parameters
        ----------
        rhs: dingodb::sdk::Status const &

        __init__(Status self, Status rhs) -> Status

        Parameters
        ----------
        rhs: dingodb::sdk::Status &&

        """
        _dingosdk.Status_swiginit(self, _dingosdk.new_Status(*args))

    def ok(self):
        r"""ok(Status self) -> bool"""
        return _dingosdk.Status_ok(self)

    @staticmethod
    def OK(*args):
        r"""
        OK() -> Status
        OK(Slice const & msg, Slice const & msg2=Slice()) -> Status

        Parameters
        ----------
        msg: Slice const &
        msg2: Slice const &

        OK(int32_t p_errno, Slice const & msg, Slice const & msg2=Slice()) -> Status

        Parameters
        ----------
        p_errno: int32_t
        msg: Slice const &
        msg2: Slice const &

        """
        return _dingosdk.Status_OK(*args)

    def IsOK(self):
        r"""IsOK(Status self) -> bool"""
        return _dingosdk.Status_IsOK(self)

    @staticmethod
    def NotFound(*args):
        r"""
        NotFound(Slice const & msg, Slice const & msg2=Slice()) -> Status

        Parameters
        ----------
        msg: Slice const &
        msg2: Slice const &

        NotFound(int32_t p_errno, Slice const & msg, Slice const & msg2=Slice()) -> Status

        Parameters
        ----------
        p_errno: int32_t
        msg: Slice const &
        msg2: Slice const &

        """
        return _dingosdk.Status_NotFound(*args)

    def IsNotFound(self):
        r"""IsNotFound(Status self) -> bool"""
        return _dingosdk.Status_IsNotFound(self)

    @staticmethod
    def Corruption(*args):
        r"""
        Corruption(Slice const & msg, Slice const & msg2=Slice()) -> Status

        Parameters
        ----------
        msg: Slice const &
        msg2: Slice const &

        Corruption(int32_t p_errno, Slice const & msg, Slice const & msg2=Slice()) -> Status

        Parameters
        ----------
        p_errno: int32_t
        msg: Slice const &
        msg2: Slice const &

        """
        return _dingosdk.Status_Corruption(*args)

    def IsCorruption(self):
        r"""IsCorruption(Status self) -> bool"""
        return _dingosdk.Status_IsCorruption(self)

    @staticmethod
    def NotSupported(*args):
        r"""
        NotSupported(Slice const & msg, Slice const & msg2=Slice()) -> Status

        Parameters
        ----------
        msg: Slice const &
        msg2: Slice const &

        NotSupported(int32_t p_errno, Slice const & msg, Slice const & msg2=Slice()) -> Status

        Parameters
        ----------
        p_errno: int32_t
        msg: Slice const &
        msg2: Slice const &

        """
        return _dingosdk.Status_NotSupported(*args)

    def IsNotSupported(self):
        r"""IsNotSupported(Status self) -> bool"""
        return _dingosdk.Status_IsNotSupported(self)

    @staticmethod
    def InvalidArgument(*args):
        r"""
        InvalidArgument(Slice const & msg, Slice const & msg2=Slice()) -> Status

        Parameters
        ----------
        msg: Slice const &
        msg2: Slice const &

        InvalidArgument(int32_t p_errno, Slice const & msg, Slice const & msg2=Slice()) -> Status

        Parameters
        ----------
        p_errno: int32_t
        msg: Slice const &
        msg2: Slice const &

        """
        return _dingosdk.Status_InvalidArgument(*args)

    def IsInvalidArgument(self):
        r"""IsInvalidArgument(Status self) -> bool"""
        return _dingosdk.Status_IsInvalidArgument(self)

    @staticmethod
    def IOError(*args):
        r"""
        IOError(Slice const & msg, Slice const & msg2=Slice()) -> Status

        Parameters
        ----------
        msg: Slice const &
        msg2: Slice const &

        IOError(int32_t p_errno, Slice const & msg, Slice const & msg2=Slice()) -> Status

        Parameters
        ----------
        p_errno: int32_t
        msg: Slice const &
        msg2: Slice const &

        """
        return _dingosdk.Status_IOError(*args)

    def IsIOError(self):
        r"""IsIOError(Status self) -> bool"""
        return _dingosdk.Status_IsIOError(self)

    @staticmethod
    def AlreadyPresent(*args):
        r"""
        AlreadyPresent(Slice const & msg, Slice const & msg2=Slice()) -> Status

        Parameters
        ----------
        msg: Slice const &
        msg2: Slice const &

        AlreadyPresent(int32_t p_errno, Slice const & msg, Slice const & msg2=Slice()) -> Status

        Parameters
        ----------
        p_errno: int32_t
        msg: Slice const &
        msg2: Slice const &

        """
        return _dingosdk.Status_AlreadyPresent(*args)

    def IsAlreadyPresent(self):
        r"""IsAlreadyPresent(Status self) -> bool"""
        return _dingosdk.Status_IsAlreadyPresent(self)

    @staticmethod
    def RuntimeError(*args):
        r"""
        RuntimeError(Slice const & msg, Slice const & msg2=Slice()) -> Status

        Parameters
        ----------
        msg: Slice const &
        msg2: Slice const &

        RuntimeError(int32_t p_errno, Slice const & msg, Slice const & msg2=Slice()) -> Status

        Parameters
        ----------
        p_errno: int32_t
        msg: Slice const &
        msg2: Slice const &

        """
        return _dingosdk.Status_RuntimeError(*args)

    def IsRuntimeError(self):
        r"""IsRuntimeError(Status self) -> bool"""
        return _dingosdk.Status_IsRuntimeError(self)

    @staticmethod
    def NetworkError(*args):
        r"""
        NetworkError(Slice const & msg, Slice const & msg2=Slice()) -> Status

        Parameters
        ----------
        msg: Slice const &
        msg2: Slice const &

        NetworkError(int32_t p_errno, Slice const & msg, Slice const & msg2=Slice()) -> Status

        Parameters
        ----------
        p_errno: int32_t
        msg: Slice const &
        msg2: Slice const &

        """
        return _dingosdk.Status_NetworkError(*args)

    def IsNetworkError(self):
        r"""IsNetworkError(Status self) -> bool"""
        return _dingosdk.Status_IsNetworkError(self)

    @staticmethod
    def IllegalState(*args):
        r"""
        IllegalState(Slice const & msg, Slice const & msg2=Slice()) -> Status

        Parameters
        ----------
        msg: Slice const &
        msg2: Slice const &

        IllegalState(int32_t p_errno, Slice const & msg, Slice const & msg2=Slice()) -> Status

        Parameters
        ----------
        p_errno: int32_t
        msg: Slice const &
        msg2: Slice const &

        """
        return _dingosdk.Status_IllegalState(*args)

    def IsIllegalState(self):
        r"""IsIllegalState(Status self) -> bool"""
        return _dingosdk.Status_IsIllegalState(self)

    @staticmethod
    def NotAuthorized(*args):
        r"""
        NotAuthorized(Slice const & msg, Slice const & msg2=Slice()) -> Status

        Parameters
        ----------
        msg: Slice const &
        msg2: Slice const &

        NotAuthorized(int32_t p_errno, Slice const & msg, Slice const & msg2=Slice()) -> Status

        Parameters
        ----------
        p_errno: int32_t
        msg: Slice const &
        msg2: Slice const &

        """
        return _dingosdk.Status_NotAuthorized(*args)

    def IsNotAuthorized(self):
        r"""IsNotAuthorized(Status self) -> bool"""
        return _dingosdk.Status_IsNotAuthorized(self)

    @staticmethod
    def Aborted(*args):
        r"""
        Aborted(Slice const & msg, Slice const & msg2=Slice()) -> Status

        Parameters
        ----------
        msg: Slice const &
        msg2: Slice const &

        Aborted(int32_t p_errno, Slice const & msg, Slice const & msg2=Slice()) -> Status

        Parameters
        ----------
        p_errno: int32_t
        msg: Slice const &
        msg2: Slice const &

        """
        return _dingosdk.Status_Aborted(*args)

    def IsAborted(self):
        r"""IsAborted(Status self) -> bool"""
        return _dingosdk.Status_IsAborted(self)

    @staticmethod
    def RemoteError(*args):
        r"""
        RemoteError(Slice const & msg, Slice const & msg2=Slice()) -> Status

        Parameters
        ----------
        msg: Slice const &
        msg2: Slice const &

        RemoteError(int32_t p_errno, Slice const & msg, Slice const & msg2=Slice()) -> Status

        Parameters
        ----------
        p_errno: int32_t
        msg: Slice const &
        msg2: Slice const &

        """
        return _dingosdk.Status_RemoteError(*args)

    def IsRemoteError(self):
        r"""IsRemoteError(Status self) -> bool"""
        return _dingosdk.Status_IsRemoteError(self)

    @staticmethod
    def ServiceUnavailable(*args):
        r"""
        ServiceUnavailable(Slice const & msg, Slice const & msg2=Slice()) -> Status

        Parameters
        ----------
        msg: Slice const &
        msg2: Slice const &

        ServiceUnavailable(int32_t p_errno, Slice const & msg, Slice const & msg2=Slice()) -> Status

        Parameters
        ----------
        p_errno: int32_t
        msg: Slice const &
        msg2: Slice const &

        """
        return _dingosdk.Status_ServiceUnavailable(*args)

    def IsServiceUnavailable(self):
        r"""IsServiceUnavailable(Status self) -> bool"""
        return _dingosdk.Status_IsServiceUnavailable(self)

    @staticmethod
    def TimedOut(*args):
        r"""
        TimedOut(Slice const & msg, Slice const & msg2=Slice()) -> Status

        Parameters
        ----------
        msg: Slice const &
        msg2: Slice const &

        TimedOut(int32_t p_errno, Slice const & msg, Slice const & msg2=Slice()) -> Status

        Parameters
        ----------
        p_errno: int32_t
        msg: Slice const &
        msg2: Slice const &

        """
        return _dingosdk.Status_TimedOut(*args)

    def IsTimedOut(self):
        r"""IsTimedOut(Status self) -> bool"""
        return _dingosdk.Status_IsTimedOut(self)

    @staticmethod
    def Uninitialized(*args):
        r"""
        Uninitialized(Slice const & msg, Slice const & msg2=Slice()) -> Status

        Parameters
        ----------
        msg: Slice const &
        msg2: Slice const &

        Uninitialized(int32_t p_errno, Slice const & msg, Slice const & msg2=Slice()) -> Status

        Parameters
        ----------
        p_errno: int32_t
        msg: Slice const &
        msg2: Slice const &

        """
        return _dingosdk.Status_Uninitialized(*args)

    def IsUninitialized(self):
        r"""IsUninitialized(Status self) -> bool"""
        return _dingosdk.Status_IsUninitialized(self)

    @staticmethod
    def ConfigurationError(*args):
        r"""
        ConfigurationError(Slice const & msg, Slice const & msg2=Slice()) -> Status

        Parameters
        ----------
        msg: Slice const &
        msg2: Slice const &

        ConfigurationError(int32_t p_errno, Slice const & msg, Slice const & msg2=Slice()) -> Status

        Parameters
        ----------
        p_errno: int32_t
        msg: Slice const &
        msg2: Slice const &

        """
        return _dingosdk.Status_ConfigurationError(*args)

    def IsConfigurationError(self):
        r"""IsConfigurationError(Status self) -> bool"""
        return _dingosdk.Status_IsConfigurationError(self)

    @staticmethod
    def Incomplete(*args):
        r"""
        Incomplete(Slice const & msg, Slice const & msg2=Slice()) -> Status

        Parameters
        ----------
        msg: Slice const &
        msg2: Slice const &

        Incomplete(int32_t p_errno, Slice const & msg, Slice const & msg2=Slice()) -> Status

        Parameters
        ----------
        p_errno: int32_t
        msg: Slice const &
        msg2: Slice const &

        """
        return _dingosdk.Status_Incomplete(*args)

    def IsIncomplete(self):
        r"""IsIncomplete(Status self) -> bool"""
        return _dingosdk.Status_IsIncomplete(self)

    @staticmethod
    def NotLeader(*args):
        r"""
        NotLeader(Slice const & msg, Slice const & msg2=Slice()) -> Status

        Parameters
        ----------
        msg: Slice const &
        msg2: Slice const &

        NotLeader(int32_t p_errno, Slice const & msg, Slice const & msg2=Slice()) -> Status

        Parameters
        ----------
        p_errno: int32_t
        msg: Slice const &
        msg2: Slice const &

        """
        return _dingosdk.Status_NotLeader(*args)

    def IsNotLeader(self):
        r"""IsNotLeader(Status self) -> bool"""
        return _dingosdk.Status_IsNotLeader(self)

    @staticmethod
    def TxnLockConflict(*args):
        r"""
        TxnLockConflict(Slice const & msg, Slice const & msg2=Slice()) -> Status

        Parameters
        ----------
        msg: Slice const &
        msg2: Slice const &

        TxnLockConflict(int32_t p_errno, Slice const & msg, Slice const & msg2=Slice()) -> Status

        Parameters
        ----------
        p_errno: int32_t
        msg: Slice const &
        msg2: Slice const &

        """
        return _dingosdk.Status_TxnLockConflict(*args)

    def IsTxnLockConflict(self):
        r"""IsTxnLockConflict(Status self) -> bool"""
        return _dingosdk.Status_IsTxnLockConflict(self)

    @staticmethod
    def TxnWriteConflict(*args):
        r"""
        TxnWriteConflict(Slice const & msg, Slice const & msg2=Slice()) -> Status

        Parameters
        ----------
        msg: Slice const &
        msg2: Slice const &

        TxnWriteConflict(int32_t p_errno, Slice const & msg, Slice const & msg2=Slice()) -> Status

        Parameters
        ----------
        p_errno: int32_t
        msg: Slice const &
        msg2: Slice const &

        """
        return _dingosdk.Status_TxnWriteConflict(*args)

    def IsTxnWriteConflict(self):
        r"""IsTxnWriteConflict(Status self) -> bool"""
        return _dingosdk.Status_IsTxnWriteConflict(self)

    @staticmethod
    def TxnNotFound(*args):
        r"""
        TxnNotFound(Slice const & msg, Slice const & msg2=Slice()) -> Status

        Parameters
        ----------
        msg: Slice const &
        msg2: Slice const &

        TxnNotFound(int32_t p_errno, Slice const & msg, Slice const & msg2=Slice()) -> Status

        Parameters
        ----------
        p_errno: int32_t
        msg: Slice const &
        msg2: Slice const &

        """
        return _dingosdk.Status_TxnNotFound(*args)

    def IsTxnNotFound(self):
        r"""IsTxnNotFound(Status self) -> bool"""
        return _dingosdk.Status_IsTxnNotFound(self)

    @staticmethod
    def TxnPrimaryMismatch(*args):
        r"""
        TxnPrimaryMismatch(Slice const & msg, Slice const & msg2=Slice()) -> Status

        Parameters
        ----------
        msg: Slice const &
        msg2: Slice const &

        TxnPrimaryMismatch(int32_t p_errno, Slice const & msg, Slice const & msg2=Slice()) -> Status

        Parameters
        ----------
        p_errno: int32_t
        msg: Slice const &
        msg2: Slice const &

        """
        return _dingosdk.Status_TxnPrimaryMismatch(*args)

    def IsTxnPrimaryMismatch(self):
        r"""IsTxnPrimaryMismatch(Status self) -> bool"""
        return _dingosdk.Status_IsTxnPrimaryMismatch(self)

    @staticmethod
    def TxnRolledBack(*args):
        r"""
        TxnRolledBack(Slice const & msg, Slice const & msg2=Slice()) -> Status

        Parameters
        ----------
        msg: Slice const &
        msg2: Slice const &

        TxnRolledBack(int32_t p_errno, Slice const & msg, Slice const & msg2=Slice()) -> Status

        Parameters
        ----------
        p_errno: int32_t
        msg: Slice const &
        msg2: Slice const &

        """
        return _dingosdk.Status_TxnRolledBack(*args)

    def IsTxnRolledBack(self):
        r"""IsTxnRolledBack(Status self) -> bool"""
        return _dingosdk.Status_IsTxnRolledBack(self)

    @staticmethod
    def NoLeader(*args):
        r"""
        NoLeader(Slice const & msg, Slice const & msg2=Slice()) -> Status

        Parameters
        ----------
        msg: Slice const &
        msg2: Slice const &

        NoLeader(int32_t p_errno, Slice const & msg, Slice const & msg2=Slice()) -> Status

        Parameters
        ----------
        p_errno: int32_t
        msg: Slice const &
        msg2: Slice const &

        """
        return _dingosdk.Status_NoLeader(*args)

    def IsNoLeader(self):
        r"""IsNoLeader(Status self) -> bool"""
        return _dingosdk.Status_IsNoLeader(self)

    def ToString(self):
        r"""ToString(Status self) -> std::string"""
        return _dingosdk.Status_ToString(self)

    def Errno(self):
        r"""Errno(Status self) -> int32_t"""
        return _dingosdk.Status_Errno(self)

# Register Status in _dingosdk:
_dingosdk.Status_swigregister(Status)
cvar = _dingosdk.cvar
kNone = cvar.kNone

kBOOL = _dingosdk.kBOOL

kINT64 = _dingosdk.kINT64

kDOUBLE = _dingosdk.kDOUBLE

kSTRING = _dingosdk.kSTRING

kTypeEnd = _dingosdk.kTypeEnd


def TypeToString(type):
    r"""
    TypeToString(dingodb::sdk::Type type) -> std::string

    Parameters
    ----------
    type: enum dingodb::sdk::Type

    """
    return _dingosdk.TypeToString(type)
kNoneIndexType = _dingosdk.kNoneIndexType

kFlat = _dingosdk.kFlat

kIvfFlat = _dingosdk.kIvfFlat

kIvfPq = _dingosdk.kIvfPq

kHnsw = _dingosdk.kHnsw

kDiskAnn = _dingosdk.kDiskAnn

kBruteForce = _dingosdk.kBruteForce


def VectorIndexTypeToString(type):
    r"""
    VectorIndexTypeToString(dingodb::sdk::VectorIndexType type) -> std::string

    Parameters
    ----------
    type: enum dingodb::sdk::VectorIndexType

    """
    return _dingosdk.VectorIndexTypeToString(type)
kNoneMetricType = _dingosdk.kNoneMetricType

kL2 = _dingosdk.kL2

kInnerProduct = _dingosdk.kInnerProduct

kCosine = _dingosdk.kCosine


def MetricTypeToString(type):
    r"""
    MetricTypeToString(dingodb::sdk::MetricType type) -> std::string

    Parameters
    ----------
    type: enum dingodb::sdk::MetricType

    """
    return _dingosdk.MetricTypeToString(type)
class FlatParam(object):
    r"""Proxy of C++ dingodb::sdk::FlatParam class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dimension = property(_dingosdk.FlatParam_dimension_get, _dingosdk.FlatParam_dimension_set, doc=r"""dimension : int32_t""")
    metric_type = property(_dingosdk.FlatParam_metric_type_get, _dingosdk.FlatParam_metric_type_set, doc=r"""metric_type : dingodb::sdk::MetricType""")

    def __init__(self, p_dimension, p_metric_type):
        r"""
        __init__(FlatParam self, int32_t p_dimension, dingodb::sdk::MetricType p_metric_type) -> FlatParam

        Parameters
        ----------
        p_dimension: int32_t
        p_metric_type: enum dingodb::sdk::MetricType

        """
        _dingosdk.FlatParam_swiginit(self, _dingosdk.new_FlatParam(p_dimension, p_metric_type))

    @staticmethod
    def Type():
        r"""Type() -> dingodb::sdk::VectorIndexType"""
        return _dingosdk.FlatParam_Type()
    __swig_destroy__ = _dingosdk.delete_FlatParam

# Register FlatParam in _dingosdk:
_dingosdk.FlatParam_swigregister(FlatParam)
kTypeConversionMatrix = cvar.kTypeConversionMatrix

class IvfFlatParam(object):
    r"""Proxy of C++ dingodb::sdk::IvfFlatParam class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dimension = property(_dingosdk.IvfFlatParam_dimension_get, _dingosdk.IvfFlatParam_dimension_set, doc=r"""dimension : int32_t""")
    metric_type = property(_dingosdk.IvfFlatParam_metric_type_get, _dingosdk.IvfFlatParam_metric_type_set, doc=r"""metric_type : dingodb::sdk::MetricType""")
    ncentroids = property(_dingosdk.IvfFlatParam_ncentroids_get, _dingosdk.IvfFlatParam_ncentroids_set, doc=r"""ncentroids : int32_t""")

    def __init__(self, p_dimension, p_metric_type):
        r"""
        __init__(IvfFlatParam self, int32_t p_dimension, dingodb::sdk::MetricType p_metric_type) -> IvfFlatParam

        Parameters
        ----------
        p_dimension: int32_t
        p_metric_type: enum dingodb::sdk::MetricType

        """
        _dingosdk.IvfFlatParam_swiginit(self, _dingosdk.new_IvfFlatParam(p_dimension, p_metric_type))

    @staticmethod
    def Type():
        r"""Type() -> dingodb::sdk::VectorIndexType"""
        return _dingosdk.IvfFlatParam_Type()
    __swig_destroy__ = _dingosdk.delete_IvfFlatParam

# Register IvfFlatParam in _dingosdk:
_dingosdk.IvfFlatParam_swigregister(IvfFlatParam)
class IvfPqParam(object):
    r"""Proxy of C++ dingodb::sdk::IvfPqParam class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dimension = property(_dingosdk.IvfPqParam_dimension_get, _dingosdk.IvfPqParam_dimension_set, doc=r"""dimension : int32_t""")
    metric_type = property(_dingosdk.IvfPqParam_metric_type_get, _dingosdk.IvfPqParam_metric_type_set, doc=r"""metric_type : dingodb::sdk::MetricType""")
    ncentroids = property(_dingosdk.IvfPqParam_ncentroids_get, _dingosdk.IvfPqParam_ncentroids_set, doc=r"""ncentroids : int32_t""")
    nsubvector = property(_dingosdk.IvfPqParam_nsubvector_get, _dingosdk.IvfPqParam_nsubvector_set, doc=r"""nsubvector : int32_t""")
    bucket_init_size = property(_dingosdk.IvfPqParam_bucket_init_size_get, _dingosdk.IvfPqParam_bucket_init_size_set, doc=r"""bucket_init_size : int32_t""")
    bucket_max_size = property(_dingosdk.IvfPqParam_bucket_max_size_get, _dingosdk.IvfPqParam_bucket_max_size_set, doc=r"""bucket_max_size : int32_t""")
    nbits_per_idx = property(_dingosdk.IvfPqParam_nbits_per_idx_get, _dingosdk.IvfPqParam_nbits_per_idx_set, doc=r"""nbits_per_idx : int32_t""")

    def __init__(self, p_dimension, p_metric_type):
        r"""
        __init__(IvfPqParam self, int32_t p_dimension, dingodb::sdk::MetricType p_metric_type) -> IvfPqParam

        Parameters
        ----------
        p_dimension: int32_t
        p_metric_type: enum dingodb::sdk::MetricType

        """
        _dingosdk.IvfPqParam_swiginit(self, _dingosdk.new_IvfPqParam(p_dimension, p_metric_type))

    @staticmethod
    def Type():
        r"""Type() -> dingodb::sdk::VectorIndexType"""
        return _dingosdk.IvfPqParam_Type()
    __swig_destroy__ = _dingosdk.delete_IvfPqParam

# Register IvfPqParam in _dingosdk:
_dingosdk.IvfPqParam_swigregister(IvfPqParam)
class HnswParam(object):
    r"""Proxy of C++ dingodb::sdk::HnswParam class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dimension = property(_dingosdk.HnswParam_dimension_get, _dingosdk.HnswParam_dimension_set, doc=r"""dimension : int32_t""")
    metric_type = property(_dingosdk.HnswParam_metric_type_get, _dingosdk.HnswParam_metric_type_set, doc=r"""metric_type : dingodb::sdk::MetricType""")
    ef_construction = property(_dingosdk.HnswParam_ef_construction_get, _dingosdk.HnswParam_ef_construction_set, doc=r"""ef_construction : int32_t""")
    max_elements = property(_dingosdk.HnswParam_max_elements_get, _dingosdk.HnswParam_max_elements_set, doc=r"""max_elements : int32_t""")
    nlinks = property(_dingosdk.HnswParam_nlinks_get, _dingosdk.HnswParam_nlinks_set, doc=r"""nlinks : int32_t""")

    def __init__(self, p_dimension, p_metric_type, p_max_elements):
        r"""
        __init__(HnswParam self, int32_t p_dimension, dingodb::sdk::MetricType p_metric_type, int32_t p_max_elements) -> HnswParam

        Parameters
        ----------
        p_dimension: int32_t
        p_metric_type: enum dingodb::sdk::MetricType
        p_max_elements: int32_t

        """
        _dingosdk.HnswParam_swiginit(self, _dingosdk.new_HnswParam(p_dimension, p_metric_type, p_max_elements))

    @staticmethod
    def Type():
        r"""Type() -> dingodb::sdk::VectorIndexType"""
        return _dingosdk.HnswParam_Type()
    __swig_destroy__ = _dingosdk.delete_HnswParam

# Register HnswParam in _dingosdk:
_dingosdk.HnswParam_swigregister(HnswParam)
class DiskAnnParam(object):
    r"""Proxy of C++ dingodb::sdk::DiskAnnParam class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(DiskAnnParam self) -> DiskAnnParam"""
        _dingosdk.DiskAnnParam_swiginit(self, _dingosdk.new_DiskAnnParam())
    __swig_destroy__ = _dingosdk.delete_DiskAnnParam

# Register DiskAnnParam in _dingosdk:
_dingosdk.DiskAnnParam_swigregister(DiskAnnParam)
class BruteForceParam(object):
    r"""Proxy of C++ dingodb::sdk::BruteForceParam class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dimension = property(_dingosdk.BruteForceParam_dimension_get, _dingosdk.BruteForceParam_dimension_set, doc=r"""dimension : int32_t""")
    metric_type = property(_dingosdk.BruteForceParam_metric_type_get, _dingosdk.BruteForceParam_metric_type_set, doc=r"""metric_type : dingodb::sdk::MetricType""")

    def __init__(self, p_dimension, p_metric_type):
        r"""
        __init__(BruteForceParam self, int32_t p_dimension, dingodb::sdk::MetricType p_metric_type) -> BruteForceParam

        Parameters
        ----------
        p_dimension: int32_t
        p_metric_type: enum dingodb::sdk::MetricType

        """
        _dingosdk.BruteForceParam_swiginit(self, _dingosdk.new_BruteForceParam(p_dimension, p_metric_type))

    @staticmethod
    def Type():
        r"""Type() -> dingodb::sdk::VectorIndexType"""
        return _dingosdk.BruteForceParam_Type()
    __swig_destroy__ = _dingosdk.delete_BruteForceParam

# Register BruteForceParam in _dingosdk:
_dingosdk.BruteForceParam_swigregister(BruteForceParam)
class VectorScalarColumnSchema(object):
    r"""Proxy of C++ dingodb::sdk::VectorScalarColumnSchema class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    key = property(_dingosdk.VectorScalarColumnSchema_key_get, _dingosdk.VectorScalarColumnSchema_key_set, doc=r"""key : std::string""")
    type = property(_dingosdk.VectorScalarColumnSchema_type_get, _dingosdk.VectorScalarColumnSchema_type_set, doc=r"""type : dingodb::sdk::Type""")
    speed = property(_dingosdk.VectorScalarColumnSchema_speed_get, _dingosdk.VectorScalarColumnSchema_speed_set, doc=r"""speed : bool""")

    def __init__(self, key, type, speed=False):
        r"""
        __init__(VectorScalarColumnSchema self, std::string const & key, dingodb::sdk::Type type, bool speed=False) -> VectorScalarColumnSchema

        Parameters
        ----------
        key: std::string const &
        type: enum dingodb::sdk::Type
        speed: bool

        """
        _dingosdk.VectorScalarColumnSchema_swiginit(self, _dingosdk.new_VectorScalarColumnSchema(key, type, speed))
    __swig_destroy__ = _dingosdk.delete_VectorScalarColumnSchema

# Register VectorScalarColumnSchema in _dingosdk:
_dingosdk.VectorScalarColumnSchema_swigregister(VectorScalarColumnSchema)
class VectorScalarSchema(object):
    r"""Proxy of C++ dingodb::sdk::VectorScalarSchema class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def AddScalarColumn(self, col):
        r"""
        AddScalarColumn(VectorScalarSchema self, VectorScalarColumnSchema col)

        Parameters
        ----------
        col: dingodb::sdk::VectorScalarColumnSchema const &

        """
        return _dingosdk.VectorScalarSchema_AddScalarColumn(self, col)
    cols = property(_dingosdk.VectorScalarSchema_cols_get, _dingosdk.VectorScalarSchema_cols_set, doc=r"""cols : std::vector<(dingodb::sdk::VectorScalarColumnSchema,std::allocator<(dingodb::sdk::VectorScalarColumnSchema)>)>""")

    def __init__(self):
        r"""__init__(VectorScalarSchema self) -> VectorScalarSchema"""
        _dingosdk.VectorScalarSchema_swiginit(self, _dingosdk.new_VectorScalarSchema())
    __swig_destroy__ = _dingosdk.delete_VectorScalarSchema

# Register VectorScalarSchema in _dingosdk:
_dingosdk.VectorScalarSchema_swigregister(VectorScalarSchema)
kNoneValueType = _dingosdk.kNoneValueType

kFloat = _dingosdk.kFloat

kUint8 = _dingosdk.kUint8


def ValueTypeToString(type):
    r"""
    ValueTypeToString(dingodb::sdk::ValueType type) -> std::string

    Parameters
    ----------
    type: enum dingodb::sdk::ValueType

    """
    return _dingosdk.ValueTypeToString(type)
class Vector(object):
    r"""Proxy of C++ dingodb::sdk::Vector class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dimension = property(_dingosdk.Vector_dimension_get, _dingosdk.Vector_dimension_set, doc=r"""dimension : int32_t""")
    value_type = property(_dingosdk.Vector_value_type_get, _dingosdk.Vector_value_type_set, doc=r"""value_type : dingodb::sdk::ValueType""")
    float_values = property(_dingosdk.Vector_float_values_get, _dingosdk.Vector_float_values_set, doc=r"""float_values : std::vector<(float,std::allocator<(float)>)>""")
    binary_values = property(_dingosdk.Vector_binary_values_get, _dingosdk.Vector_binary_values_set, doc=r"""binary_values : std::vector<(uint8_t,std::allocator<(uint8_t)>)>""")

    def __init__(self, *args):
        r"""
        __init__(Vector self) -> Vector
        __init__(Vector self, dingodb::sdk::ValueType p_value_type, int32_t p_dimension) -> Vector

        Parameters
        ----------
        p_value_type: enum dingodb::sdk::ValueType
        p_dimension: int32_t

        __init__(Vector self, Vector other) -> Vector

        Parameters
        ----------
        other: dingodb::sdk::Vector &&

        __init__(Vector self, Vector other) -> Vector

        Parameters
        ----------
        other: dingodb::sdk::Vector const &

        """
        _dingosdk.Vector_swiginit(self, _dingosdk.new_Vector(*args))

    def Size(self):
        r"""Size(Vector self) -> uint32_t"""
        return _dingosdk.Vector_Size(self)

    def ToString(self):
        r"""ToString(Vector self) -> std::string"""
        return _dingosdk.Vector_ToString(self)
    __swig_destroy__ = _dingosdk.delete_Vector

# Register Vector in _dingosdk:
_dingosdk.Vector_swigregister(Vector)
class ScalarField(object):
    r"""Proxy of C++ dingodb::sdk::ScalarField class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bool_data = property(_dingosdk.ScalarField_bool_data_get, _dingosdk.ScalarField_bool_data_set, doc=r"""bool_data : bool""")
    long_data = property(_dingosdk.ScalarField_long_data_get, _dingosdk.ScalarField_long_data_set, doc=r"""long_data : int64_t""")
    double_data = property(_dingosdk.ScalarField_double_data_get, _dingosdk.ScalarField_double_data_set, doc=r"""double_data : double""")
    string_data = property(_dingosdk.ScalarField_string_data_get, _dingosdk.ScalarField_string_data_set, doc=r"""string_data : std::string""")

    def __init__(self):
        r"""__init__(ScalarField self) -> ScalarField"""
        _dingosdk.ScalarField_swiginit(self, _dingosdk.new_ScalarField())
    __swig_destroy__ = _dingosdk.delete_ScalarField

# Register ScalarField in _dingosdk:
_dingosdk.ScalarField_swigregister(ScalarField)
class ScalarValue(object):
    r"""Proxy of C++ dingodb::sdk::ScalarValue class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    type = property(_dingosdk.ScalarValue_type_get, _dingosdk.ScalarValue_type_set, doc=r"""type : dingodb::sdk::Type""")
    fields = property(_dingosdk.ScalarValue_fields_get, _dingosdk.ScalarValue_fields_set, doc=r"""fields : std::vector<(dingodb::sdk::ScalarField,std::allocator<(dingodb::sdk::ScalarField)>)>""")

    def ToString(self):
        r"""ToString(ScalarValue self) -> std::string"""
        return _dingosdk.ScalarValue_ToString(self)

    def __init__(self):
        r"""__init__(ScalarValue self) -> ScalarValue"""
        _dingosdk.ScalarValue_swiginit(self, _dingosdk.new_ScalarValue())
    __swig_destroy__ = _dingosdk.delete_ScalarValue

# Register ScalarValue in _dingosdk:
_dingosdk.ScalarValue_swigregister(ScalarValue)
class VectorWithId(object):
    r"""Proxy of C++ dingodb::sdk::VectorWithId class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_dingosdk.VectorWithId_id_get, _dingosdk.VectorWithId_id_set, doc=r"""id : int64_t""")
    vector = property(_dingosdk.VectorWithId_vector_get, _dingosdk.VectorWithId_vector_set, doc=r"""vector : dingodb::sdk::Vector""")
    scalar_data = property(_dingosdk.VectorWithId_scalar_data_get, _dingosdk.VectorWithId_scalar_data_set, doc=r"""scalar_data : std::map<(std::string,dingodb::sdk::ScalarValue,std::less<(std::string)>,std::allocator<(std::pair<(q(const).std::string,dingodb::sdk::ScalarValue)>)>)>""")

    def __init__(self, *args):
        r"""
        __init__(VectorWithId self) -> VectorWithId
        __init__(VectorWithId self, int64_t p_id, Vector p_vector) -> VectorWithId

        Parameters
        ----------
        p_id: int64_t
        p_vector: dingodb::sdk::Vector

        __init__(VectorWithId self, Vector p_vector) -> VectorWithId

        Parameters
        ----------
        p_vector: dingodb::sdk::Vector

        __init__(VectorWithId self, VectorWithId other) -> VectorWithId

        Parameters
        ----------
        other: dingodb::sdk::VectorWithId &&

        __init__(VectorWithId self, VectorWithId other) -> VectorWithId

        Parameters
        ----------
        other: dingodb::sdk::VectorWithId const &

        """
        _dingosdk.VectorWithId_swiginit(self, _dingosdk.new_VectorWithId(*args))

    def ToString(self):
        r"""ToString(VectorWithId self) -> std::string"""
        return _dingosdk.VectorWithId_ToString(self)
    __swig_destroy__ = _dingosdk.delete_VectorWithId

# Register VectorWithId in _dingosdk:
_dingosdk.VectorWithId_swigregister(VectorWithId)
kNoneFilterSource = _dingosdk.kNoneFilterSource

kScalarFilter = _dingosdk.kScalarFilter

kTableFilter = _dingosdk.kTableFilter

kVectorIdFilter = _dingosdk.kVectorIdFilter

kNoneFilterType = _dingosdk.kNoneFilterType

kQueryPost = _dingosdk.kQueryPost

kQueryPre = _dingosdk.kQueryPre

kParallelOnQueries = _dingosdk.kParallelOnQueries

kNprobe = _dingosdk.kNprobe

kRecallNum = _dingosdk.kRecallNum

kEfSearch = _dingosdk.kEfSearch

class SearchParam(object):
    r"""Proxy of C++ dingodb::sdk::SearchParam class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    topk = property(_dingosdk.SearchParam_topk_get, _dingosdk.SearchParam_topk_set, doc=r"""topk : int32_t""")
    with_vector_data = property(_dingosdk.SearchParam_with_vector_data_get, _dingosdk.SearchParam_with_vector_data_set, doc=r"""with_vector_data : bool""")
    with_scalar_data = property(_dingosdk.SearchParam_with_scalar_data_get, _dingosdk.SearchParam_with_scalar_data_set, doc=r"""with_scalar_data : bool""")
    selected_keys = property(_dingosdk.SearchParam_selected_keys_get, _dingosdk.SearchParam_selected_keys_set, doc=r"""selected_keys : std::vector<(std::string,std::allocator<(std::string)>)>""")
    with_table_data = property(_dingosdk.SearchParam_with_table_data_get, _dingosdk.SearchParam_with_table_data_set, doc=r"""with_table_data : bool""")
    enable_range_search = property(_dingosdk.SearchParam_enable_range_search_get, _dingosdk.SearchParam_enable_range_search_set, doc=r"""enable_range_search : bool""")
    radius = property(_dingosdk.SearchParam_radius_get, _dingosdk.SearchParam_radius_set, doc=r"""radius : float""")
    filter_source = property(_dingosdk.SearchParam_filter_source_get, _dingosdk.SearchParam_filter_source_set, doc=r"""filter_source : dingodb::sdk::FilterSource""")
    filter_type = property(_dingosdk.SearchParam_filter_type_get, _dingosdk.SearchParam_filter_type_set, doc=r"""filter_type : dingodb::sdk::FilterType""")
    is_negation = property(_dingosdk.SearchParam_is_negation_get, _dingosdk.SearchParam_is_negation_set, doc=r"""is_negation : bool""")
    is_sorted = property(_dingosdk.SearchParam_is_sorted_get, _dingosdk.SearchParam_is_sorted_set, doc=r"""is_sorted : bool""")
    vector_ids = property(_dingosdk.SearchParam_vector_ids_get, _dingosdk.SearchParam_vector_ids_set, doc=r"""vector_ids : std::vector<(int64_t,std::allocator<(int64_t)>)>""")
    use_brute_force = property(_dingosdk.SearchParam_use_brute_force_get, _dingosdk.SearchParam_use_brute_force_set, doc=r"""use_brute_force : bool""")
    extra_params = property(_dingosdk.SearchParam_extra_params_get, _dingosdk.SearchParam_extra_params_set, doc=r"""extra_params : std::map<(dingodb::sdk::SearchExtraParamType,int32_t,std::less<(dingodb::sdk::SearchExtraParamType)>,std::allocator<(std::pair<(q(const).dingodb::sdk::SearchExtraParamType,int32_t)>)>)>""")
    langchain_expr_json = property(_dingosdk.SearchParam_langchain_expr_json_get, _dingosdk.SearchParam_langchain_expr_json_set, doc=r"""langchain_expr_json : std::string""")

    def __init__(self, *args):
        r"""
        __init__(SearchParam self) -> SearchParam
        __init__(SearchParam self, SearchParam other) -> SearchParam

        Parameters
        ----------
        other: dingodb::sdk::SearchParam &&

        """
        _dingosdk.SearchParam_swiginit(self, _dingosdk.new_SearchParam(*args))
    __swig_destroy__ = _dingosdk.delete_SearchParam

# Register SearchParam in _dingosdk:
_dingosdk.SearchParam_swigregister(SearchParam)
class VectorWithDistance(object):
    r"""Proxy of C++ dingodb::sdk::VectorWithDistance class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    vector_data = property(_dingosdk.VectorWithDistance_vector_data_get, _dingosdk.VectorWithDistance_vector_data_set, doc=r"""vector_data : dingodb::sdk::VectorWithId""")
    distance = property(_dingosdk.VectorWithDistance_distance_get, _dingosdk.VectorWithDistance_distance_set, doc=r"""distance : float""")
    metric_type = property(_dingosdk.VectorWithDistance_metric_type_get, _dingosdk.VectorWithDistance_metric_type_set, doc=r"""metric_type : dingodb::sdk::MetricType""")

    def __init__(self, *args):
        r"""
        __init__(VectorWithDistance self) -> VectorWithDistance
        __init__(VectorWithDistance self, VectorWithDistance other) -> VectorWithDistance

        Parameters
        ----------
        other: dingodb::sdk::VectorWithDistance &&

        __init__(VectorWithDistance self, VectorWithDistance arg2) -> VectorWithDistance

        Parameters
        ----------
        arg2: dingodb::sdk::VectorWithDistance const &

        """
        _dingosdk.VectorWithDistance_swiginit(self, _dingosdk.new_VectorWithDistance(*args))

    def ToString(self):
        r"""ToString(VectorWithDistance self) -> std::string"""
        return _dingosdk.VectorWithDistance_ToString(self)
    __swig_destroy__ = _dingosdk.delete_VectorWithDistance

# Register VectorWithDistance in _dingosdk:
_dingosdk.VectorWithDistance_swigregister(VectorWithDistance)
class SearchResult(object):
    r"""Proxy of C++ dingodb::sdk::SearchResult class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_dingosdk.SearchResult_id_get, _dingosdk.SearchResult_id_set, doc=r"""id : dingodb::sdk::VectorWithId""")
    vector_datas = property(_dingosdk.SearchResult_vector_datas_get, _dingosdk.SearchResult_vector_datas_set, doc=r"""vector_datas : std::vector<(dingodb::sdk::VectorWithDistance,std::allocator<(dingodb::sdk::VectorWithDistance)>)>""")

    def __init__(self, *args):
        r"""
        __init__(SearchResult self) -> SearchResult
        __init__(SearchResult self, VectorWithId p_id) -> SearchResult

        Parameters
        ----------
        p_id: dingodb::sdk::VectorWithId

        __init__(SearchResult self, SearchResult other) -> SearchResult

        Parameters
        ----------
        other: dingodb::sdk::SearchResult &&

        __init__(SearchResult self, SearchResult arg2) -> SearchResult

        Parameters
        ----------
        arg2: dingodb::sdk::SearchResult const &

        """
        _dingosdk.SearchResult_swiginit(self, _dingosdk.new_SearchResult(*args))

    def ToString(self):
        r"""ToString(SearchResult self) -> std::string"""
        return _dingosdk.SearchResult_ToString(self)
    __swig_destroy__ = _dingosdk.delete_SearchResult

# Register SearchResult in _dingosdk:
_dingosdk.SearchResult_swigregister(SearchResult)
class DeleteResult(object):
    r"""Proxy of C++ dingodb::sdk::DeleteResult class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    vector_id = property(_dingosdk.DeleteResult_vector_id_get, _dingosdk.DeleteResult_vector_id_set, doc=r"""vector_id : int64_t""")
    deleted = property(_dingosdk.DeleteResult_deleted_get, _dingosdk.DeleteResult_deleted_set, doc=r"""deleted : bool""")

    def ToString(self):
        r"""ToString(DeleteResult self) -> std::string"""
        return _dingosdk.DeleteResult_ToString(self)

    def __init__(self):
        r"""__init__(DeleteResult self) -> DeleteResult"""
        _dingosdk.DeleteResult_swiginit(self, _dingosdk.new_DeleteResult())
    __swig_destroy__ = _dingosdk.delete_DeleteResult

# Register DeleteResult in _dingosdk:
_dingosdk.DeleteResult_swigregister(DeleteResult)
class QueryParam(object):
    r"""Proxy of C++ dingodb::sdk::QueryParam class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    vector_ids = property(_dingosdk.QueryParam_vector_ids_get, _dingosdk.QueryParam_vector_ids_set, doc=r"""vector_ids : std::vector<(int64_t,std::allocator<(int64_t)>)>""")
    with_vector_data = property(_dingosdk.QueryParam_with_vector_data_get, _dingosdk.QueryParam_with_vector_data_set, doc=r"""with_vector_data : bool""")
    with_scalar_data = property(_dingosdk.QueryParam_with_scalar_data_get, _dingosdk.QueryParam_with_scalar_data_set, doc=r"""with_scalar_data : bool""")
    selected_keys = property(_dingosdk.QueryParam_selected_keys_get, _dingosdk.QueryParam_selected_keys_set, doc=r"""selected_keys : std::vector<(std::string,std::allocator<(std::string)>)>""")
    with_table_data = property(_dingosdk.QueryParam_with_table_data_get, _dingosdk.QueryParam_with_table_data_set, doc=r"""with_table_data : bool""")

    def __init__(self):
        r"""__init__(QueryParam self) -> QueryParam"""
        _dingosdk.QueryParam_swiginit(self, _dingosdk.new_QueryParam())
    __swig_destroy__ = _dingosdk.delete_QueryParam

# Register QueryParam in _dingosdk:
_dingosdk.QueryParam_swigregister(QueryParam)
class QueryResult(object):
    r"""Proxy of C++ dingodb::sdk::QueryResult class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    vectors = property(_dingosdk.QueryResult_vectors_get, _dingosdk.QueryResult_vectors_set, doc=r"""vectors : std::vector<(dingodb::sdk::VectorWithId,std::allocator<(dingodb::sdk::VectorWithId)>)>""")

    def ToString(self):
        r"""ToString(QueryResult self) -> std::string"""
        return _dingosdk.QueryResult_ToString(self)

    def __init__(self):
        r"""__init__(QueryResult self) -> QueryResult"""
        _dingosdk.QueryResult_swiginit(self, _dingosdk.new_QueryResult())
    __swig_destroy__ = _dingosdk.delete_QueryResult

# Register QueryResult in _dingosdk:
_dingosdk.QueryResult_swigregister(QueryResult)
class ScanQueryParam(object):
    r"""Proxy of C++ dingodb::sdk::ScanQueryParam class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    vector_id_start = property(_dingosdk.ScanQueryParam_vector_id_start_get, _dingosdk.ScanQueryParam_vector_id_start_set, doc=r"""vector_id_start : int64_t""")
    vector_id_end = property(_dingosdk.ScanQueryParam_vector_id_end_get, _dingosdk.ScanQueryParam_vector_id_end_set, doc=r"""vector_id_end : int64_t""")
    max_scan_count = property(_dingosdk.ScanQueryParam_max_scan_count_get, _dingosdk.ScanQueryParam_max_scan_count_set, doc=r"""max_scan_count : int64_t""")
    is_reverse = property(_dingosdk.ScanQueryParam_is_reverse_get, _dingosdk.ScanQueryParam_is_reverse_set, doc=r"""is_reverse : bool""")
    with_vector_data = property(_dingosdk.ScanQueryParam_with_vector_data_get, _dingosdk.ScanQueryParam_with_vector_data_set, doc=r"""with_vector_data : bool""")
    with_scalar_data = property(_dingosdk.ScanQueryParam_with_scalar_data_get, _dingosdk.ScanQueryParam_with_scalar_data_set, doc=r"""with_scalar_data : bool""")
    selected_keys = property(_dingosdk.ScanQueryParam_selected_keys_get, _dingosdk.ScanQueryParam_selected_keys_set, doc=r"""selected_keys : std::vector<(std::string,std::allocator<(std::string)>)>""")
    with_table_data = property(_dingosdk.ScanQueryParam_with_table_data_get, _dingosdk.ScanQueryParam_with_table_data_set, doc=r"""with_table_data : bool""")
    use_scalar_filter = property(_dingosdk.ScanQueryParam_use_scalar_filter_get, _dingosdk.ScanQueryParam_use_scalar_filter_set, doc=r"""use_scalar_filter : bool""")
    scalar_data = property(_dingosdk.ScanQueryParam_scalar_data_get, _dingosdk.ScanQueryParam_scalar_data_set, doc=r"""scalar_data : std::map<(std::string,dingodb::sdk::ScalarValue,std::less<(std::string)>,std::allocator<(std::pair<(q(const).std::string,dingodb::sdk::ScalarValue)>)>)>""")

    def __init__(self, *args):
        r"""
        __init__(ScanQueryParam self) -> ScanQueryParam
        __init__(ScanQueryParam self, ScanQueryParam other) -> ScanQueryParam

        Parameters
        ----------
        other: dingodb::sdk::ScanQueryParam &&

        """
        _dingosdk.ScanQueryParam_swiginit(self, _dingosdk.new_ScanQueryParam(*args))
    __swig_destroy__ = _dingosdk.delete_ScanQueryParam

# Register ScanQueryParam in _dingosdk:
_dingosdk.ScanQueryParam_swigregister(ScanQueryParam)
class ScanQueryResult(object):
    r"""Proxy of C++ dingodb::sdk::ScanQueryResult class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    vectors = property(_dingosdk.ScanQueryResult_vectors_get, _dingosdk.ScanQueryResult_vectors_set, doc=r"""vectors : std::vector<(dingodb::sdk::VectorWithId,std::allocator<(dingodb::sdk::VectorWithId)>)>""")

    def ToString(self):
        r"""ToString(ScanQueryResult self) -> std::string"""
        return _dingosdk.ScanQueryResult_ToString(self)

    def __init__(self):
        r"""__init__(ScanQueryResult self) -> ScanQueryResult"""
        _dingosdk.ScanQueryResult_swiginit(self, _dingosdk.new_ScanQueryResult())
    __swig_destroy__ = _dingosdk.delete_ScanQueryResult

# Register ScanQueryResult in _dingosdk:
_dingosdk.ScanQueryResult_swigregister(ScanQueryResult)
class IndexMetricsResult(object):
    r"""Proxy of C++ dingodb::sdk::IndexMetricsResult class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    index_type = property(_dingosdk.IndexMetricsResult_index_type_get, _dingosdk.IndexMetricsResult_index_type_set, doc=r"""index_type : dingodb::sdk::VectorIndexType""")
    count = property(_dingosdk.IndexMetricsResult_count_get, _dingosdk.IndexMetricsResult_count_set, doc=r"""count : int64_t""")
    deleted_count = property(_dingosdk.IndexMetricsResult_deleted_count_get, _dingosdk.IndexMetricsResult_deleted_count_set, doc=r"""deleted_count : int64_t""")
    max_vector_id = property(_dingosdk.IndexMetricsResult_max_vector_id_get, _dingosdk.IndexMetricsResult_max_vector_id_set, doc=r"""max_vector_id : int64_t""")
    min_vector_id = property(_dingosdk.IndexMetricsResult_min_vector_id_get, _dingosdk.IndexMetricsResult_min_vector_id_set, doc=r"""min_vector_id : int64_t""")
    memory_bytes = property(_dingosdk.IndexMetricsResult_memory_bytes_get, _dingosdk.IndexMetricsResult_memory_bytes_set, doc=r"""memory_bytes : int64_t""")

    def ToString(self):
        r"""ToString(IndexMetricsResult self) -> std::string"""
        return _dingosdk.IndexMetricsResult_ToString(self)

    def __init__(self):
        r"""__init__(IndexMetricsResult self) -> IndexMetricsResult"""
        _dingosdk.IndexMetricsResult_swiginit(self, _dingosdk.new_IndexMetricsResult())
    __swig_destroy__ = _dingosdk.delete_IndexMetricsResult

# Register IndexMetricsResult in _dingosdk:
_dingosdk.IndexMetricsResult_swigregister(IndexMetricsResult)
class VectorIndexCreator(object):
    r"""Proxy of C++ dingodb::sdk::VectorIndexCreator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dingosdk.delete_VectorIndexCreator

    def SetSchemaId(self, schema_id):
        r"""
        SetSchemaId(VectorIndexCreator self, int64_t schema_id) -> VectorIndexCreator

        Parameters
        ----------
        schema_id: int64_t

        """
        return _dingosdk.VectorIndexCreator_SetSchemaId(self, schema_id)

    def SetName(self, name):
        r"""
        SetName(VectorIndexCreator self, std::string const & name) -> VectorIndexCreator

        Parameters
        ----------
        name: std::string const &

        """
        return _dingosdk.VectorIndexCreator_SetName(self, name)

    def SetRangePartitions(self, separator_id):
        r"""
        SetRangePartitions(VectorIndexCreator self, Int64Vector separator_id) -> VectorIndexCreator

        Parameters
        ----------
        separator_id: std::vector< int64_t,std::allocator< int64_t > >

        """
        return _dingosdk.VectorIndexCreator_SetRangePartitions(self, separator_id)

    def SetReplicaNum(self, num):
        r"""
        SetReplicaNum(VectorIndexCreator self, int64_t num) -> VectorIndexCreator

        Parameters
        ----------
        num: int64_t

        """
        return _dingosdk.VectorIndexCreator_SetReplicaNum(self, num)

    def SetFlatParam(self, params):
        r"""
        SetFlatParam(VectorIndexCreator self, FlatParam params) -> VectorIndexCreator

        Parameters
        ----------
        params: dingodb::sdk::FlatParam const &

        """
        return _dingosdk.VectorIndexCreator_SetFlatParam(self, params)

    def SetIvfFlatParam(self, params):
        r"""
        SetIvfFlatParam(VectorIndexCreator self, IvfFlatParam params) -> VectorIndexCreator

        Parameters
        ----------
        params: dingodb::sdk::IvfFlatParam const &

        """
        return _dingosdk.VectorIndexCreator_SetIvfFlatParam(self, params)

    def SetIvfPqParam(self, params):
        r"""
        SetIvfPqParam(VectorIndexCreator self, IvfPqParam params) -> VectorIndexCreator

        Parameters
        ----------
        params: dingodb::sdk::IvfPqParam const &

        """
        return _dingosdk.VectorIndexCreator_SetIvfPqParam(self, params)

    def SetHnswParam(self, params):
        r"""
        SetHnswParam(VectorIndexCreator self, HnswParam params) -> VectorIndexCreator

        Parameters
        ----------
        params: dingodb::sdk::HnswParam const &

        """
        return _dingosdk.VectorIndexCreator_SetHnswParam(self, params)

    def SetBruteForceParam(self, params):
        r"""
        SetBruteForceParam(VectorIndexCreator self, BruteForceParam params) -> VectorIndexCreator

        Parameters
        ----------
        params: dingodb::sdk::BruteForceParam const &

        """
        return _dingosdk.VectorIndexCreator_SetBruteForceParam(self, params)

    def SetAutoIncrementStart(self, start_id):
        r"""
        SetAutoIncrementStart(VectorIndexCreator self, int64_t start_id) -> VectorIndexCreator

        Parameters
        ----------
        start_id: int64_t

        """
        return _dingosdk.VectorIndexCreator_SetAutoIncrementStart(self, start_id)

    def SetScalarSchema(self, schema):
        r"""
        SetScalarSchema(VectorIndexCreator self, VectorScalarSchema schema) -> VectorIndexCreator

        Parameters
        ----------
        schema: dingodb::sdk::VectorScalarSchema const &

        """
        return _dingosdk.VectorIndexCreator_SetScalarSchema(self, schema)

    def Create(self):
        r"""
        Create(VectorIndexCreator self) -> Status
        return Status, int64_t out_index_id
        """
        return _dingosdk.VectorIndexCreator_Create(self)

# Register VectorIndexCreator in _dingosdk:
_dingosdk.VectorIndexCreator_swigregister(VectorIndexCreator)
class VectorClient(object):
    r"""Proxy of C++ dingodb::sdk::VectorClient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dingosdk.delete_VectorClient

    def AddByIndexId(self, index_id, vectors, replace_deleted=False, is_update=False):
        r"""
        AddByIndexId(VectorClient self, int64_t index_id, VectorWithIdVector vectors, bool replace_deleted=False, bool is_update=False) -> Status

        Parameters
        ----------
        index_id: int64_t
        vectors: std::vector< dingodb::sdk::VectorWithId,std::allocator< dingodb::sdk::VectorWithId > > &
        replace_deleted: bool
        is_update: bool

        """
        return _dingosdk.VectorClient_AddByIndexId(self, index_id, vectors, replace_deleted, is_update)

    def AddByIndexName(self, schema_id, index_name, vectors, replace_deleted=False, is_update=False):
        r"""
        AddByIndexName(VectorClient self, int64_t schema_id, std::string const & index_name, VectorWithIdVector vectors, bool replace_deleted=False, bool is_update=False) -> Status

        Parameters
        ----------
        schema_id: int64_t
        index_name: std::string const &
        vectors: std::vector< dingodb::sdk::VectorWithId,std::allocator< dingodb::sdk::VectorWithId > > &
        replace_deleted: bool
        is_update: bool

        """
        return _dingosdk.VectorClient_AddByIndexName(self, schema_id, index_name, vectors, replace_deleted, is_update)

    def UpdateByIndexId(self, index_id, vectors):
        r"""
        UpdateByIndexId(VectorClient self, int64_t index_id, VectorWithIdVector vectors) -> Status

        Parameters
        ----------
        index_id: int64_t
        vectors: std::vector< dingodb::sdk::VectorWithId,std::allocator< dingodb::sdk::VectorWithId > > &

        """
        return _dingosdk.VectorClient_UpdateByIndexId(self, index_id, vectors)

    def UpdateByIndexName(self, schema_id, index_name, vectors):
        r"""
        UpdateByIndexName(VectorClient self, int64_t schema_id, std::string const & index_name, VectorWithIdVector vectors) -> Status

        Parameters
        ----------
        schema_id: int64_t
        index_name: std::string const &
        vectors: std::vector< dingodb::sdk::VectorWithId,std::allocator< dingodb::sdk::VectorWithId > > &

        """
        return _dingosdk.VectorClient_UpdateByIndexName(self, schema_id, index_name, vectors)

    def SearchByIndexId(self, index_id, search_param, target_vectors):
        r"""
        SearchByIndexId(VectorClient self, int64_t index_id, SearchParam search_param, VectorWithIdVector target_vectors) -> Status

        Parameters
        ----------
        index_id: int64_t
        search_param: dingodb::sdk::SearchParam const &
        target_vectors: std::vector< dingodb::sdk::VectorWithId,std::allocator< dingodb::sdk::VectorWithId > > const &

        return Status, std::vector<SearchResult> out_result
        """
        return _dingosdk.VectorClient_SearchByIndexId(self, index_id, search_param, target_vectors)

    def SearchByIndexName(self, schema_id, index_name, search_param, target_vectors):
        r"""
        SearchByIndexName(VectorClient self, int64_t schema_id, std::string const & index_name, SearchParam search_param, VectorWithIdVector target_vectors) -> Status

        Parameters
        ----------
        schema_id: int64_t
        index_name: std::string const &
        search_param: dingodb::sdk::SearchParam const &
        target_vectors: std::vector< dingodb::sdk::VectorWithId,std::allocator< dingodb::sdk::VectorWithId > > const &

        return Status, std::vector<SearchResult> out_result
        """
        return _dingosdk.VectorClient_SearchByIndexName(self, schema_id, index_name, search_param, target_vectors)

    def DeleteByIndexId(self, index_id, vector_ids):
        r"""
        DeleteByIndexId(VectorClient self, int64_t index_id, Int64Vector vector_ids) -> Status

        Parameters
        ----------
        index_id: int64_t
        vector_ids: std::vector< int64_t,std::allocator< int64_t > > const &

        return Status, std::vector<DeleteResult> out_result
        """
        return _dingosdk.VectorClient_DeleteByIndexId(self, index_id, vector_ids)

    def DeleteByIndexName(self, schema_id, index_name, vector_ids):
        r"""
        DeleteByIndexName(VectorClient self, int64_t schema_id, std::string const & index_name, Int64Vector vector_ids) -> Status

        Parameters
        ----------
        schema_id: int64_t
        index_name: std::string const &
        vector_ids: std::vector< int64_t,std::allocator< int64_t > > const &

        return Status, std::vector<DeleteResult> out_result
        """
        return _dingosdk.VectorClient_DeleteByIndexName(self, schema_id, index_name, vector_ids)

    def BatchQueryByIndexId(self, index_id, query_param):
        r"""
        BatchQueryByIndexId(VectorClient self, int64_t index_id, QueryParam query_param) -> Status

        Parameters
        ----------
        index_id: int64_t
        query_param: dingodb::sdk::QueryParam const &

        return Status, QueryResult out_result
        """
        return _dingosdk.VectorClient_BatchQueryByIndexId(self, index_id, query_param)

    def BatchQueryByIndexName(self, schema_id, index_name, query_param):
        r"""
        BatchQueryByIndexName(VectorClient self, int64_t schema_id, std::string const & index_name, QueryParam query_param) -> Status

        Parameters
        ----------
        schema_id: int64_t
        index_name: std::string const &
        query_param: dingodb::sdk::QueryParam const &

        return Status, QueryResult out_result
        """
        return _dingosdk.VectorClient_BatchQueryByIndexName(self, schema_id, index_name, query_param)

    def GetBorderByIndexId(self, index_id, is_max):
        r"""
        GetBorderByIndexId(VectorClient self, int64_t index_id, bool is_max) -> Status

        Parameters
        ----------
        index_id: int64_t
        is_max: bool

        return Status, int64_t out_vector_id
        """
        return _dingosdk.VectorClient_GetBorderByIndexId(self, index_id, is_max)

    def GetBorderByIndexName(self, schema_id, index_name, is_max):
        r"""
        GetBorderByIndexName(VectorClient self, int64_t schema_id, std::string const & index_name, bool is_max) -> Status

        Parameters
        ----------
        schema_id: int64_t
        index_name: std::string const &
        is_max: bool

        return Status, int64_t out_vector_id
        """
        return _dingosdk.VectorClient_GetBorderByIndexName(self, schema_id, index_name, is_max)

    def ScanQueryByIndexId(self, index_id, query_param):
        r"""
        ScanQueryByIndexId(VectorClient self, int64_t index_id, ScanQueryParam query_param) -> Status

        Parameters
        ----------
        index_id: int64_t
        query_param: dingodb::sdk::ScanQueryParam const &

        return Status, ScanQueryResult out_result
        """
        return _dingosdk.VectorClient_ScanQueryByIndexId(self, index_id, query_param)

    def ScanQueryByIndexName(self, schema_id, index_name, query_param):
        r"""
        ScanQueryByIndexName(VectorClient self, int64_t schema_id, std::string const & index_name, ScanQueryParam query_param) -> Status

        Parameters
        ----------
        schema_id: int64_t
        index_name: std::string const &
        query_param: dingodb::sdk::ScanQueryParam const &

        return Status, ScanQueryResult out_result
        """
        return _dingosdk.VectorClient_ScanQueryByIndexName(self, schema_id, index_name, query_param)

    def GetIndexMetricsByIndexId(self, index_id):
        r"""
        GetIndexMetricsByIndexId(VectorClient self, int64_t index_id) -> Status

        Parameters
        ----------
        index_id: int64_t

        return Status, IndexMetricsResult out_result
        """
        return _dingosdk.VectorClient_GetIndexMetricsByIndexId(self, index_id)

    def GetIndexMetricsByIndexName(self, schema_id, index_name):
        r"""
        GetIndexMetricsByIndexName(VectorClient self, int64_t schema_id, std::string const & index_name) -> Status

        Parameters
        ----------
        schema_id: int64_t
        index_name: std::string const &

        return Status, IndexMetricsResult out_result
        """
        return _dingosdk.VectorClient_GetIndexMetricsByIndexName(self, schema_id, index_name)

    def CountAllByIndexId(self, index_id):
        r"""
        CountAllByIndexId(VectorClient self, int64_t index_id) -> Status

        Parameters
        ----------
        index_id: int64_t

        """
        return _dingosdk.VectorClient_CountAllByIndexId(self, index_id)

    def CountallByIndexName(self, schema_id, index_name):
        r"""
        CountallByIndexName(VectorClient self, int64_t schema_id, std::string const & index_name) -> Status

        Parameters
        ----------
        schema_id: int64_t
        index_name: std::string const &

        """
        return _dingosdk.VectorClient_CountallByIndexName(self, schema_id, index_name)

    def CountByIndexId(self, index_id, start_vector_id, end_vector_id):
        r"""
        CountByIndexId(VectorClient self, int64_t index_id, int64_t start_vector_id, int64_t end_vector_id) -> Status

        Parameters
        ----------
        index_id: int64_t
        start_vector_id: int64_t
        end_vector_id: int64_t

        return Status, int64_t out_count
        """
        return _dingosdk.VectorClient_CountByIndexId(self, index_id, start_vector_id, end_vector_id)

    def CountByIndexName(self, schema_id, index_name, start_vector_id, end_vector_id):
        r"""
        CountByIndexName(VectorClient self, int64_t schema_id, std::string const & index_name, int64_t start_vector_id, int64_t end_vector_id) -> Status

        Parameters
        ----------
        schema_id: int64_t
        index_name: std::string const &
        start_vector_id: int64_t
        end_vector_id: int64_t

        return Status, int64_t out_count
        """
        return _dingosdk.VectorClient_CountByIndexName(self, schema_id, index_name, start_vector_id, end_vector_id)

# Register VectorClient in _dingosdk:
_dingosdk.VectorClient_swigregister(VectorClient)
class Client(object):
    r"""Proxy of C++ dingodb::sdk::Client class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dingosdk.delete_Client

    @staticmethod
    def BuildAndInitLog(addrs):
        r"""
        BuildAndInitLog(std::string addrs) -> Status

        Parameters
        ----------
        addrs: std::string

        return Status, Client
        """
        return _dingosdk.Client_BuildAndInitLog(addrs)

    @staticmethod
    def BuildFromAddrs(addrs):
        r"""
        BuildFromAddrs(std::string addrs) -> Status

        Parameters
        ----------
        addrs: std::string

        """
        return _dingosdk.Client_BuildFromAddrs(addrs)

    @staticmethod
    def Build(naming_service_url):
        r"""
        Build(std::string naming_service_url) -> Status

        Parameters
        ----------
        naming_service_url: std::string

        return Status, Client
        """
        return _dingosdk.Client_Build(naming_service_url)

    def NewRawKV(self):
        r"""
        NewRawKV(Client self) -> Status
        return Status, RawKV
        """
        return _dingosdk.Client_NewRawKV(self)

    def NewTransaction(self, options):
        r"""
        NewTransaction(Client self, TransactionOptions options) -> Status

        Parameters
        ----------
        options: dingodb::sdk::TransactionOptions const &

        return Status, Transaction
        """
        return _dingosdk.Client_NewTransaction(self, options)

    def NewRegionCreator(self):
        r"""
        NewRegionCreator(Client self) -> Status
        return Status, RegionCreator
        """
        return _dingosdk.Client_NewRegionCreator(self)

    def IsCreateRegionInProgress(self, region_id):
        r"""
        IsCreateRegionInProgress(Client self, int64_t region_id) -> Status

        Parameters
        ----------
        region_id: int64_t

        return Status, bool out_create_in_progress
        """
        return _dingosdk.Client_IsCreateRegionInProgress(self, region_id)

    def DropRegion(self, region_id):
        r"""
        DropRegion(Client self, int64_t region_id) -> Status

        Parameters
        ----------
        region_id: int64_t

        """
        return _dingosdk.Client_DropRegion(self, region_id)

    def NewVectorClient(self):
        r"""
        NewVectorClient(Client self) -> Status
        return Status, VectorClient
        """
        return _dingosdk.Client_NewVectorClient(self)

    def NewVectorIndexCreator(self):
        r"""
        NewVectorIndexCreator(Client self) -> Status
        return Status, VectorIndexCreator
        """
        return _dingosdk.Client_NewVectorIndexCreator(self)

    def GetIndexId(self, schema_id, index_name):
        r"""
        GetIndexId(Client self, int64_t schema_id, std::string const & index_name) -> Status

        Parameters
        ----------
        schema_id: int64_t
        index_name: std::string const &

        return Status, int64_t out_index_id
        """
        return _dingosdk.Client_GetIndexId(self, schema_id, index_name)

    def DropIndex(self, index_id):
        r"""
        DropIndex(Client self, int64_t index_id) -> Status

        Parameters
        ----------
        index_id: int64_t

        """
        return _dingosdk.Client_DropIndex(self, index_id)

    def DropIndexByName(self, schema_id, index_name):
        r"""
        DropIndexByName(Client self, int64_t schema_id, std::string const & index_name) -> Status

        Parameters
        ----------
        schema_id: int64_t
        index_name: std::string const &

        """
        return _dingosdk.Client_DropIndexByName(self, schema_id, index_name)

# Register Client in _dingosdk:
_dingosdk.Client_swigregister(Client)
class KVPair(object):
    r"""Proxy of C++ dingodb::sdk::KVPair class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    key = property(_dingosdk.KVPair_key_get, _dingosdk.KVPair_key_set, doc=r"""key : std::string""")
    value = property(_dingosdk.KVPair_value_get, _dingosdk.KVPair_value_set, doc=r"""value : std::string""")

    def __init__(self):
        r"""__init__(KVPair self) -> KVPair"""
        _dingosdk.KVPair_swiginit(self, _dingosdk.new_KVPair())
    __swig_destroy__ = _dingosdk.delete_KVPair

# Register KVPair in _dingosdk:
_dingosdk.KVPair_swigregister(KVPair)
class KeyOpState(object):
    r"""Proxy of C++ dingodb::sdk::KeyOpState class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    key = property(_dingosdk.KeyOpState_key_get, _dingosdk.KeyOpState_key_set, doc=r"""key : std::string""")
    state = property(_dingosdk.KeyOpState_state_get, _dingosdk.KeyOpState_state_set, doc=r"""state : bool""")

    def __init__(self):
        r"""__init__(KeyOpState self) -> KeyOpState"""
        _dingosdk.KeyOpState_swiginit(self, _dingosdk.new_KeyOpState())
    __swig_destroy__ = _dingosdk.delete_KeyOpState

# Register KeyOpState in _dingosdk:
_dingosdk.KeyOpState_swigregister(KeyOpState)
class RawKV(object):
    r"""Proxy of C++ dingodb::sdk::RawKV class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dingosdk.delete_RawKV

    def Get(self, key):
        r"""
        Get(RawKV self, std::string const & key) -> Status

        Parameters
        ----------
        key: std::string const &

        return Status, std::string out_value
        """
        return _dingosdk.RawKV_Get(self, key)

    def BatchGet(self, keys, out_kvs):
        r"""
        BatchGet(RawKV self, StringVector keys, KVPairVector out_kvs) -> Status

        Parameters
        ----------
        keys: std::vector< std::string,std::allocator< std::string > > const &
        out_kvs: std::vector< dingodb::sdk::KVPair,std::allocator< dingodb::sdk::KVPair > > &

        """
        return _dingosdk.RawKV_BatchGet(self, keys, out_kvs)

    def Put(self, key, value):
        r"""
        Put(RawKV self, std::string const & key, std::string const & value) -> Status

        Parameters
        ----------
        key: std::string const &
        value: std::string const &

        """
        return _dingosdk.RawKV_Put(self, key, value)

    def BatchPut(self, kvs):
        r"""
        BatchPut(RawKV self, KVPairVector kvs) -> Status

        Parameters
        ----------
        kvs: std::vector< dingodb::sdk::KVPair,std::allocator< dingodb::sdk::KVPair > > const &

        """
        return _dingosdk.RawKV_BatchPut(self, kvs)

    def PutIfAbsent(self, key, value):
        r"""
        PutIfAbsent(RawKV self, std::string const & key, std::string const & value) -> Status

        Parameters
        ----------
        key: std::string const &
        value: std::string const &

        return Status, bool out_state
        """
        return _dingosdk.RawKV_PutIfAbsent(self, key, value)

    def BatchPutIfAbsent(self, kvs, out_states):
        r"""
        BatchPutIfAbsent(RawKV self, KVPairVector kvs, KeyOpStateVector out_states) -> Status

        Parameters
        ----------
        kvs: std::vector< dingodb::sdk::KVPair,std::allocator< dingodb::sdk::KVPair > > const &
        out_states: std::vector< dingodb::sdk::KeyOpState,std::allocator< dingodb::sdk::KeyOpState > > &

        """
        return _dingosdk.RawKV_BatchPutIfAbsent(self, kvs, out_states)

    def Delete(self, key):
        r"""
        Delete(RawKV self, std::string const & key) -> Status

        Parameters
        ----------
        key: std::string const &

        """
        return _dingosdk.RawKV_Delete(self, key)

    def BatchDelete(self, keys):
        r"""
        BatchDelete(RawKV self, StringVector keys) -> Status

        Parameters
        ----------
        keys: std::vector< std::string,std::allocator< std::string > > const &

        """
        return _dingosdk.RawKV_BatchDelete(self, keys)

    def DeleteRangeNonContinuous(self, start_key, end_key):
        r"""
        DeleteRangeNonContinuous(RawKV self, std::string const & start_key, std::string const & end_key) -> Status

        Parameters
        ----------
        start_key: std::string const &
        end_key: std::string const &

        return Status, int64_t out_delete_count
        """
        return _dingosdk.RawKV_DeleteRangeNonContinuous(self, start_key, end_key)

    def DeleteRange(self, start_key, end_key):
        r"""
        DeleteRange(RawKV self, std::string const & start_key, std::string const & end_key) -> Status

        Parameters
        ----------
        start_key: std::string const &
        end_key: std::string const &

        return Status, int64_t out_delete_count
        """
        return _dingosdk.RawKV_DeleteRange(self, start_key, end_key)

    def CompareAndSet(self, key, value, expected_value):
        r"""
        CompareAndSet(RawKV self, std::string const & key, std::string const & value, std::string const & expected_value) -> Status

        Parameters
        ----------
        key: std::string const &
        value: std::string const &
        expected_value: std::string const &

        return Status, bool out_state
        """
        return _dingosdk.RawKV_CompareAndSet(self, key, value, expected_value)

    def BatchCompareAndSet(self, kvs, expected_values, out_states):
        r"""
        BatchCompareAndSet(RawKV self, KVPairVector kvs, StringVector expected_values, KeyOpStateVector out_states) -> Status

        Parameters
        ----------
        kvs: std::vector< dingodb::sdk::KVPair,std::allocator< dingodb::sdk::KVPair > > const &
        expected_values: std::vector< std::string,std::allocator< std::string > > const &
        out_states: std::vector< dingodb::sdk::KeyOpState,std::allocator< dingodb::sdk::KeyOpState > > &

        """
        return _dingosdk.RawKV_BatchCompareAndSet(self, kvs, expected_values, out_states)

    def Scan(self, start_key, end_key, limit, out_kvs):
        r"""
        Scan(RawKV self, std::string const & start_key, std::string const & end_key, uint64_t limit, KVPairVector out_kvs) -> Status

        Parameters
        ----------
        start_key: std::string const &
        end_key: std::string const &
        limit: uint64_t
        out_kvs: std::vector< dingodb::sdk::KVPair,std::allocator< dingodb::sdk::KVPair > > &

        """
        return _dingosdk.RawKV_Scan(self, start_key, end_key, limit, out_kvs)

# Register RawKV in _dingosdk:
_dingosdk.RawKV_swigregister(RawKV)
kOptimistic = _dingosdk.kOptimistic

kPessimistic = _dingosdk.kPessimistic

kSnapshotIsolation = _dingosdk.kSnapshotIsolation

kReadCommitted = _dingosdk.kReadCommitted

class TransactionOptions(object):
    r"""Proxy of C++ dingodb::sdk::TransactionOptions class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kind = property(_dingosdk.TransactionOptions_kind_get, _dingosdk.TransactionOptions_kind_set, doc=r"""kind : dingodb::sdk::TransactionKind""")
    isolation = property(_dingosdk.TransactionOptions_isolation_get, _dingosdk.TransactionOptions_isolation_set, doc=r"""isolation : dingodb::sdk::TransactionIsolation""")
    keep_alive_ms = property(_dingosdk.TransactionOptions_keep_alive_ms_get, _dingosdk.TransactionOptions_keep_alive_ms_set, doc=r"""keep_alive_ms : uint32_t""")

    def __init__(self):
        r"""__init__(TransactionOptions self) -> TransactionOptions"""
        _dingosdk.TransactionOptions_swiginit(self, _dingosdk.new_TransactionOptions())
    __swig_destroy__ = _dingosdk.delete_TransactionOptions

# Register TransactionOptions in _dingosdk:
_dingosdk.TransactionOptions_swigregister(TransactionOptions)
class Transaction(object):
    r"""Proxy of C++ dingodb::sdk::Transaction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dingosdk.delete_Transaction

    def Get(self, key, value):
        r"""
        Get(Transaction self, std::string const & key, std::string & value) -> Status

        Parameters
        ----------
        key: std::string const &
        value: std::string &

        """
        return _dingosdk.Transaction_Get(self, key, value)

    def BatchGet(self, keys, kvs):
        r"""
        BatchGet(Transaction self, StringVector keys, KVPairVector kvs) -> Status

        Parameters
        ----------
        keys: std::vector< std::string,std::allocator< std::string > > const &
        kvs: std::vector< dingodb::sdk::KVPair,std::allocator< dingodb::sdk::KVPair > > &

        """
        return _dingosdk.Transaction_BatchGet(self, keys, kvs)

    def Put(self, key, value):
        r"""
        Put(Transaction self, std::string const & key, std::string const & value) -> Status

        Parameters
        ----------
        key: std::string const &
        value: std::string const &

        """
        return _dingosdk.Transaction_Put(self, key, value)

    def BatchPut(self, kvs):
        r"""
        BatchPut(Transaction self, KVPairVector kvs) -> Status

        Parameters
        ----------
        kvs: std::vector< dingodb::sdk::KVPair,std::allocator< dingodb::sdk::KVPair > > const &

        """
        return _dingosdk.Transaction_BatchPut(self, kvs)

    def PutIfAbsent(self, key, value):
        r"""
        PutIfAbsent(Transaction self, std::string const & key, std::string const & value) -> Status

        Parameters
        ----------
        key: std::string const &
        value: std::string const &

        """
        return _dingosdk.Transaction_PutIfAbsent(self, key, value)

    def BatchPutIfAbsent(self, kvs):
        r"""
        BatchPutIfAbsent(Transaction self, KVPairVector kvs) -> Status

        Parameters
        ----------
        kvs: std::vector< dingodb::sdk::KVPair,std::allocator< dingodb::sdk::KVPair > > const &

        """
        return _dingosdk.Transaction_BatchPutIfAbsent(self, kvs)

    def Delete(self, key):
        r"""
        Delete(Transaction self, std::string const & key) -> Status

        Parameters
        ----------
        key: std::string const &

        """
        return _dingosdk.Transaction_Delete(self, key)

    def BatchDelete(self, keys):
        r"""
        BatchDelete(Transaction self, StringVector keys) -> Status

        Parameters
        ----------
        keys: std::vector< std::string,std::allocator< std::string > > const &

        """
        return _dingosdk.Transaction_BatchDelete(self, keys)

    def Scan(self, start_key, end_key, limit, kvs):
        r"""
        Scan(Transaction self, std::string const & start_key, std::string const & end_key, uint64_t limit, KVPairVector kvs) -> Status

        Parameters
        ----------
        start_key: std::string const &
        end_key: std::string const &
        limit: uint64_t
        kvs: std::vector< dingodb::sdk::KVPair,std::allocator< dingodb::sdk::KVPair > > &

        """
        return _dingosdk.Transaction_Scan(self, start_key, end_key, limit, kvs)

    def PreCommit(self):
        r"""PreCommit(Transaction self) -> Status"""
        return _dingosdk.Transaction_PreCommit(self)

    def Commit(self):
        r"""Commit(Transaction self) -> Status"""
        return _dingosdk.Transaction_Commit(self)

    def Rollback(self):
        r"""Rollback(Transaction self) -> Status"""
        return _dingosdk.Transaction_Rollback(self)

# Register Transaction in _dingosdk:
_dingosdk.Transaction_swigregister(Transaction)
kLSM = _dingosdk.kLSM

kBTree = _dingosdk.kBTree

kXDPROCKS = _dingosdk.kXDPROCKS

class RegionCreator(object):
    r"""Proxy of C++ dingodb::sdk::RegionCreator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dingosdk.delete_RegionCreator

    def SetRegionName(self, name):
        r"""
        SetRegionName(RegionCreator self, std::string const & name) -> RegionCreator

        Parameters
        ----------
        name: std::string const &

        """
        return _dingosdk.RegionCreator_SetRegionName(self, name)

    def SetRange(self, lower_bound, upper_bound):
        r"""
        SetRange(RegionCreator self, std::string const & lower_bound, std::string const & upper_bound) -> RegionCreator

        Parameters
        ----------
        lower_bound: std::string const &
        upper_bound: std::string const &

        """
        return _dingosdk.RegionCreator_SetRange(self, lower_bound, upper_bound)

    def SetEngineType(self, engine_type):
        r"""
        SetEngineType(RegionCreator self, dingodb::sdk::EngineType engine_type) -> RegionCreator

        Parameters
        ----------
        engine_type: enum dingodb::sdk::EngineType

        """
        return _dingosdk.RegionCreator_SetEngineType(self, engine_type)

    def SetReplicaNum(self, num):
        r"""
        SetReplicaNum(RegionCreator self, int64_t num) -> RegionCreator

        Parameters
        ----------
        num: int64_t

        """
        return _dingosdk.RegionCreator_SetReplicaNum(self, num)

    def Wait(self, wait):
        r"""
        Wait(RegionCreator self, bool wait) -> RegionCreator

        Parameters
        ----------
        wait: bool

        """
        return _dingosdk.RegionCreator_Wait(self, wait)

    def Create(self):
        r"""
        Create(RegionCreator self) -> Status
        return Status, int64_t out_region_id
        """
        return _dingosdk.RegionCreator_Create(self)

# Register RegionCreator in _dingosdk:
_dingosdk.RegionCreator_swigregister(RegionCreator)


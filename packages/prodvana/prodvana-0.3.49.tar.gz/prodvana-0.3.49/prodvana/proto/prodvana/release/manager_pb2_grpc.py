# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from prodvana.proto.prodvana.deployment import manager_pb2 as prodvana_dot_deployment_dot_manager__pb2


class ReleaseManagerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RecordRelease = channel.unary_unary(
                '/prodvana.release.ReleaseManager/RecordRelease',
                request_serializer=prodvana_dot_deployment_dot_manager__pb2.RecordDeploymentReq.SerializeToString,
                response_deserializer=prodvana_dot_deployment_dot_manager__pb2.RecordDeploymentResp.FromString,
                )
        self.UpdateReleaseStatus = channel.unary_unary(
                '/prodvana.release.ReleaseManager/UpdateReleaseStatus',
                request_serializer=prodvana_dot_deployment_dot_manager__pb2.UpdateDeploymentStatusReq.SerializeToString,
                response_deserializer=prodvana_dot_deployment_dot_manager__pb2.UpdateDeploymentStatusResp.FromString,
                )
        self.ListReleases = channel.unary_unary(
                '/prodvana.release.ReleaseManager/ListReleases',
                request_serializer=prodvana_dot_deployment_dot_manager__pb2.ListDeploymentsReq.SerializeToString,
                response_deserializer=prodvana_dot_deployment_dot_manager__pb2.ListDeploymentsResp.FromString,
                )
        self.ListReleasesStream = channel.unary_stream(
                '/prodvana.release.ReleaseManager/ListReleasesStream',
                request_serializer=prodvana_dot_deployment_dot_manager__pb2.ListDeploymentsReq.SerializeToString,
                response_deserializer=prodvana_dot_deployment_dot_manager__pb2.ListDeploymentsResp.FromString,
                )
        self.CompareRelease = channel.unary_unary(
                '/prodvana.release.ReleaseManager/CompareRelease',
                request_serializer=prodvana_dot_deployment_dot_manager__pb2.CompareDeploymentReq.SerializeToString,
                response_deserializer=prodvana_dot_deployment_dot_manager__pb2.CompareDeploymentResp.FromString,
                )
        self.PreviewRelease = channel.unary_unary(
                '/prodvana.release.ReleaseManager/PreviewRelease',
                request_serializer=prodvana_dot_deployment_dot_manager__pb2.PreviewDeploymentReq.SerializeToString,
                response_deserializer=prodvana_dot_deployment_dot_manager__pb2.PreviewDeploymentResp.FromString,
                )
        self.GetLatestReleases = channel.unary_unary(
                '/prodvana.release.ReleaseManager/GetLatestReleases',
                request_serializer=prodvana_dot_deployment_dot_manager__pb2.GetLatestDeploymentsReq.SerializeToString,
                response_deserializer=prodvana_dot_deployment_dot_manager__pb2.GetLatestDeploymentsResp.FromString,
                )
        self.CheckCommitInRelease = channel.unary_unary(
                '/prodvana.release.ReleaseManager/CheckCommitInRelease',
                request_serializer=prodvana_dot_deployment_dot_manager__pb2.CheckCommitInDeploymentReq.SerializeToString,
                response_deserializer=prodvana_dot_deployment_dot_manager__pb2.CheckCommitInDeploymentResp.FromString,
                )


class ReleaseManagerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RecordRelease(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateReleaseStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListReleases(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListReleasesStream(self, request, context):
        """page tokens arguments are ignored here
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CompareRelease(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PreviewRelease(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLatestReleases(self, request, context):
        """returns the latest releases for each (application, service, release channel) tuple.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckCommitInRelease(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ReleaseManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RecordRelease': grpc.unary_unary_rpc_method_handler(
                    servicer.RecordRelease,
                    request_deserializer=prodvana_dot_deployment_dot_manager__pb2.RecordDeploymentReq.FromString,
                    response_serializer=prodvana_dot_deployment_dot_manager__pb2.RecordDeploymentResp.SerializeToString,
            ),
            'UpdateReleaseStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateReleaseStatus,
                    request_deserializer=prodvana_dot_deployment_dot_manager__pb2.UpdateDeploymentStatusReq.FromString,
                    response_serializer=prodvana_dot_deployment_dot_manager__pb2.UpdateDeploymentStatusResp.SerializeToString,
            ),
            'ListReleases': grpc.unary_unary_rpc_method_handler(
                    servicer.ListReleases,
                    request_deserializer=prodvana_dot_deployment_dot_manager__pb2.ListDeploymentsReq.FromString,
                    response_serializer=prodvana_dot_deployment_dot_manager__pb2.ListDeploymentsResp.SerializeToString,
            ),
            'ListReleasesStream': grpc.unary_stream_rpc_method_handler(
                    servicer.ListReleasesStream,
                    request_deserializer=prodvana_dot_deployment_dot_manager__pb2.ListDeploymentsReq.FromString,
                    response_serializer=prodvana_dot_deployment_dot_manager__pb2.ListDeploymentsResp.SerializeToString,
            ),
            'CompareRelease': grpc.unary_unary_rpc_method_handler(
                    servicer.CompareRelease,
                    request_deserializer=prodvana_dot_deployment_dot_manager__pb2.CompareDeploymentReq.FromString,
                    response_serializer=prodvana_dot_deployment_dot_manager__pb2.CompareDeploymentResp.SerializeToString,
            ),
            'PreviewRelease': grpc.unary_unary_rpc_method_handler(
                    servicer.PreviewRelease,
                    request_deserializer=prodvana_dot_deployment_dot_manager__pb2.PreviewDeploymentReq.FromString,
                    response_serializer=prodvana_dot_deployment_dot_manager__pb2.PreviewDeploymentResp.SerializeToString,
            ),
            'GetLatestReleases': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLatestReleases,
                    request_deserializer=prodvana_dot_deployment_dot_manager__pb2.GetLatestDeploymentsReq.FromString,
                    response_serializer=prodvana_dot_deployment_dot_manager__pb2.GetLatestDeploymentsResp.SerializeToString,
            ),
            'CheckCommitInRelease': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckCommitInRelease,
                    request_deserializer=prodvana_dot_deployment_dot_manager__pb2.CheckCommitInDeploymentReq.FromString,
                    response_serializer=prodvana_dot_deployment_dot_manager__pb2.CheckCommitInDeploymentResp.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'prodvana.release.ReleaseManager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ReleaseManager(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RecordRelease(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/prodvana.release.ReleaseManager/RecordRelease',
            prodvana_dot_deployment_dot_manager__pb2.RecordDeploymentReq.SerializeToString,
            prodvana_dot_deployment_dot_manager__pb2.RecordDeploymentResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateReleaseStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/prodvana.release.ReleaseManager/UpdateReleaseStatus',
            prodvana_dot_deployment_dot_manager__pb2.UpdateDeploymentStatusReq.SerializeToString,
            prodvana_dot_deployment_dot_manager__pb2.UpdateDeploymentStatusResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListReleases(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/prodvana.release.ReleaseManager/ListReleases',
            prodvana_dot_deployment_dot_manager__pb2.ListDeploymentsReq.SerializeToString,
            prodvana_dot_deployment_dot_manager__pb2.ListDeploymentsResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListReleasesStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/prodvana.release.ReleaseManager/ListReleasesStream',
            prodvana_dot_deployment_dot_manager__pb2.ListDeploymentsReq.SerializeToString,
            prodvana_dot_deployment_dot_manager__pb2.ListDeploymentsResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CompareRelease(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/prodvana.release.ReleaseManager/CompareRelease',
            prodvana_dot_deployment_dot_manager__pb2.CompareDeploymentReq.SerializeToString,
            prodvana_dot_deployment_dot_manager__pb2.CompareDeploymentResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PreviewRelease(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/prodvana.release.ReleaseManager/PreviewRelease',
            prodvana_dot_deployment_dot_manager__pb2.PreviewDeploymentReq.SerializeToString,
            prodvana_dot_deployment_dot_manager__pb2.PreviewDeploymentResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLatestReleases(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/prodvana.release.ReleaseManager/GetLatestReleases',
            prodvana_dot_deployment_dot_manager__pb2.GetLatestDeploymentsReq.SerializeToString,
            prodvana_dot_deployment_dot_manager__pb2.GetLatestDeploymentsResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckCommitInRelease(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/prodvana.release.ReleaseManager/CheckCommitInRelease',
            prodvana_dot_deployment_dot_manager__pb2.CheckCommitInDeploymentReq.SerializeToString,
            prodvana_dot_deployment_dot_manager__pb2.CheckCommitInDeploymentResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

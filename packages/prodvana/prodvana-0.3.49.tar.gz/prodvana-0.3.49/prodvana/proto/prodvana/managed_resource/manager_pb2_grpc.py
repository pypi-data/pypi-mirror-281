# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from prodvana.proto.prodvana.managed_resource import manager_pb2 as prodvana_dot_managed__resource_dot_manager__pb2


class ResourceManagerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ConfigureK8sCluster = channel.unary_unary(
                '/prodvana.managed_resource.ResourceManager/ConfigureK8sCluster',
                request_serializer=prodvana_dot_managed__resource_dot_manager__pb2.ConfigureK8sClusterReq.SerializeToString,
                response_deserializer=prodvana_dot_managed__resource_dot_manager__pb2.ConfigureK8sClusterResp.FromString,
                )
        self.GetManagedResource = channel.unary_unary(
                '/prodvana.managed_resource.ResourceManager/GetManagedResource',
                request_serializer=prodvana_dot_managed__resource_dot_manager__pb2.GetManagedResourceReq.SerializeToString,
                response_deserializer=prodvana_dot_managed__resource_dot_manager__pb2.GetManagedResourceResp.FromString,
                )
        self.ListManagedResources = channel.unary_unary(
                '/prodvana.managed_resource.ResourceManager/ListManagedResources',
                request_serializer=prodvana_dot_managed__resource_dot_manager__pb2.ListManagedResourcesReq.SerializeToString,
                response_deserializer=prodvana_dot_managed__resource_dot_manager__pb2.ListManagedResourcesResp.FromString,
                )
        self.GetArchive = channel.unary_stream(
                '/prodvana.managed_resource.ResourceManager/GetArchive',
                request_serializer=prodvana_dot_managed__resource_dot_manager__pb2.GetArchiveReq.SerializeToString,
                response_deserializer=prodvana_dot_managed__resource_dot_manager__pb2.GetArchiveResp.FromString,
                )
        self.DeleteManagedResource = channel.unary_unary(
                '/prodvana.managed_resource.ResourceManager/DeleteManagedResource',
                request_serializer=prodvana_dot_managed__resource_dot_manager__pb2.DeleteManagedResourceReq.SerializeToString,
                response_deserializer=prodvana_dot_managed__resource_dot_manager__pb2.DeleteManagedResourceResp.FromString,
                )
        self.MarkRunDone = channel.unary_unary(
                '/prodvana.managed_resource.ResourceManager/MarkRunDone',
                request_serializer=prodvana_dot_managed__resource_dot_manager__pb2.MarkRunDoneReq.SerializeToString,
                response_deserializer=prodvana_dot_managed__resource_dot_manager__pb2.MarkRunDoneResp.FromString,
                )


class ResourceManagerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ConfigureK8sCluster(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetManagedResource(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListManagedResources(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetArchive(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteManagedResource(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MarkRunDone(self, request, context):
        """TODO(naphat) delete this endpoint once we automate pulumi runs
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ResourceManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ConfigureK8sCluster': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureK8sCluster,
                    request_deserializer=prodvana_dot_managed__resource_dot_manager__pb2.ConfigureK8sClusterReq.FromString,
                    response_serializer=prodvana_dot_managed__resource_dot_manager__pb2.ConfigureK8sClusterResp.SerializeToString,
            ),
            'GetManagedResource': grpc.unary_unary_rpc_method_handler(
                    servicer.GetManagedResource,
                    request_deserializer=prodvana_dot_managed__resource_dot_manager__pb2.GetManagedResourceReq.FromString,
                    response_serializer=prodvana_dot_managed__resource_dot_manager__pb2.GetManagedResourceResp.SerializeToString,
            ),
            'ListManagedResources': grpc.unary_unary_rpc_method_handler(
                    servicer.ListManagedResources,
                    request_deserializer=prodvana_dot_managed__resource_dot_manager__pb2.ListManagedResourcesReq.FromString,
                    response_serializer=prodvana_dot_managed__resource_dot_manager__pb2.ListManagedResourcesResp.SerializeToString,
            ),
            'GetArchive': grpc.unary_stream_rpc_method_handler(
                    servicer.GetArchive,
                    request_deserializer=prodvana_dot_managed__resource_dot_manager__pb2.GetArchiveReq.FromString,
                    response_serializer=prodvana_dot_managed__resource_dot_manager__pb2.GetArchiveResp.SerializeToString,
            ),
            'DeleteManagedResource': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteManagedResource,
                    request_deserializer=prodvana_dot_managed__resource_dot_manager__pb2.DeleteManagedResourceReq.FromString,
                    response_serializer=prodvana_dot_managed__resource_dot_manager__pb2.DeleteManagedResourceResp.SerializeToString,
            ),
            'MarkRunDone': grpc.unary_unary_rpc_method_handler(
                    servicer.MarkRunDone,
                    request_deserializer=prodvana_dot_managed__resource_dot_manager__pb2.MarkRunDoneReq.FromString,
                    response_serializer=prodvana_dot_managed__resource_dot_manager__pb2.MarkRunDoneResp.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'prodvana.managed_resource.ResourceManager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ResourceManager(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ConfigureK8sCluster(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/prodvana.managed_resource.ResourceManager/ConfigureK8sCluster',
            prodvana_dot_managed__resource_dot_manager__pb2.ConfigureK8sClusterReq.SerializeToString,
            prodvana_dot_managed__resource_dot_manager__pb2.ConfigureK8sClusterResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetManagedResource(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/prodvana.managed_resource.ResourceManager/GetManagedResource',
            prodvana_dot_managed__resource_dot_manager__pb2.GetManagedResourceReq.SerializeToString,
            prodvana_dot_managed__resource_dot_manager__pb2.GetManagedResourceResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListManagedResources(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/prodvana.managed_resource.ResourceManager/ListManagedResources',
            prodvana_dot_managed__resource_dot_manager__pb2.ListManagedResourcesReq.SerializeToString,
            prodvana_dot_managed__resource_dot_manager__pb2.ListManagedResourcesResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetArchive(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/prodvana.managed_resource.ResourceManager/GetArchive',
            prodvana_dot_managed__resource_dot_manager__pb2.GetArchiveReq.SerializeToString,
            prodvana_dot_managed__resource_dot_manager__pb2.GetArchiveResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteManagedResource(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/prodvana.managed_resource.ResourceManager/DeleteManagedResource',
            prodvana_dot_managed__resource_dot_manager__pb2.DeleteManagedResourceReq.SerializeToString,
            prodvana_dot_managed__resource_dot_manager__pb2.DeleteManagedResourceResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MarkRunDone(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/prodvana.managed_resource.ResourceManager/MarkRunDone',
            prodvana_dot_managed__resource_dot_manager__pb2.MarkRunDoneReq.SerializeToString,
            prodvana_dot_managed__resource_dot_manager__pb2.MarkRunDoneResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

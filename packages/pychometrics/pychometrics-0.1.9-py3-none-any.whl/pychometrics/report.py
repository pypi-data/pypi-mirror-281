from reportlab.lib.pagesizes import A4
from reportlab.platypus import Paragraph, SimpleDocTemplate, Spacer, Table, TableStyle, PageTemplate, Frame
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib.units import inch, mm
from reportlab.lib import colors
from reportlab.pdfgen import canvas


class FooterCanvas(canvas.Canvas):
    def __init__(self, *args, **kwargs):
        canvas.Canvas.__init__(self, *args, **kwargs)
        self._saved_page_states = []

    def showPage(self):
        self._saved_page_states.append(dict(self.__dict__))
        self._startPage()

    def save(self):
        num_pages = len(self._saved_page_states)
        for state in self._saved_page_states:
            self.__dict__.update(state)
            self.draw_footer(num_pages)
            canvas.Canvas.showPage(self)
        canvas.Canvas.save(self)

    def draw_footer(self, page_count):
        self.setFont("Helvetica", 10)
        page_number_text = f"Page {self._pageNumber} of {page_count}"
        self.drawRightString(200 * mm, 15 * mm, page_number_text)
        footer_text = "Generated by Pychometrics Python Library"
        self.drawString(10 * mm, 15 * mm, footer_text)


def generate_pdf_report(marks_df, total_max_marks, item_analysis, stats, filename):
    # Create a PDF document
    doc = SimpleDocTemplate(filename, pagesize=A4)
    elements = []

    # Styles
    styles = getSampleStyleSheet()
    title_style = styles['Title']
    subtitle_style = styles['Heading2']
    heading1_style = styles['Heading1']
    heading2_style = styles['Heading2']
    normal_style = styles['Normal']
    bullet_style = styles['Bullet']

    # Title
    title = Paragraph("Psychometric Analysis of Assessments", title_style)
    elements.append(title)
    elements.append(Spacer(1, 0.2 * inch))

    # Subtitle with blue hyperlink
    subtitle = Paragraph(
        'Created by <a href="https://github.com/Shiva-DS24/pychometrics" color="blue">Pychometrics Python Library</a>',
        subtitle_style)
    elements.append(subtitle)
    elements.append(Spacer(1, 0.5 * inch))

    # Heading1
    heading1 = Paragraph("1. Assessment Analysis", heading1_style)
    elements.append(heading1)
    elements.append(Spacer(1, 0.2 * inch))

    # Number of students and questions
    num_students = len(marks_df)
    num_questions = len(marks_df.columns) - 2  # Exclude 'Total' and 'Total_Percentage'
    student_info = Paragraph(f"Number of students: {num_students}", normal_style)
    question_info = Paragraph(f"Number of items/questions: {num_questions}", normal_style)
    elements.append(student_info)
    elements.append(question_info)
    elements.append(Spacer(1, 0.5 * inch))

    # Centered text
    centered_text = Paragraph("Descriptive Indicators", heading2_style)
    centered_text.style.alignment = 1  # Center alignment
    elements.append(centered_text)
    elements.append(Spacer(1, 0.2 * inch))

    # table 1
    # Data for the table ,
    data = [
        ["Sl.No", "Indicator", "Value", "Acceptable Range"],
        ["1", "Average", f"{stats['mean']}%", "50% to 75%"],
        ["2", "Median", f"{stats['median']}%", "About 50%"],
        ["3", "Standard Deviation", f"{stats['std_dev']}%", "12% to 18%"],
        ["4", "Skewness", stats['skewness'], "-1 to 1"],
        ["5", "Kurtosis", stats['kurt'], "0 to 1"],
        ["6", "Cronbach Alpha", f"{stats['alpha']}%", "Above 70%"],
        ["7", "Standard Error", f"{stats['sem']}%", "Less than 5%"],
    ]

    # Create a table with the data
    table = Table(data)

    # Add style to the table
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),  # Heading background
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),  # Heading text color
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),  # Heading font
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),  # Heading bottom padding
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),  # Body background
        ('GRID', (0, 0), (-1, -1), 1, colors.black)  # Grid lines
    ]))

    # List of elements to build the PDF
    elements.append(table)
    elements.append(Spacer(1, 0.5 * inch))

    # Heading2
    heading2 = Paragraph("2. Item Analysis", heading1_style)
    elements.append(heading2)
    elements.append(Spacer(1, 0.2 * inch))

    # Item analysis table with index as the first column
    item_analysis_with_index = item_analysis.reset_index()
    data = [item_analysis_with_index.columns.tolist()] + item_analysis_with_index.values.tolist()
    table = Table(data)
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    elements.append(table)
    elements.append(Spacer(1, 0.5 * inch))

    # Build the PDF
    doc.build(elements, canvasmaker=FooterCanvas)

"""
This module contains four napari widgets declared in
different ways:

- a pure Python function flagged with `autogenerate: true`
    in the plugin manifest. Type annotations are used by
    magicgui to generate widgets for each parameter. Best
    suited for simple processing tasks - usually taking
    in and/or returning a layer.
- a `magic_factory` decorated function. The `magic_factory`
    decorator allows us to customize aspects of the resulting
    GUI, including the widgets associated with each parameter.
    Best used when you have a very simple processing task,
    but want some control over the autogenerated widgets. If you
    find yourself needing to define lots of nested functions to achieve
    your functionality, maybe look at the `Container` widget!
- a `magicgui.widgets.Container` subclass. This provides lots
    of flexibility and customization options while still supporting
    `magicgui` widgets and convenience methods for creating widgets
    from type annotations. If you want to customize your widgets and
    connect callbacks, this is the best widget option for you.
- a `QWidget` subclass. This provides maximal flexibility but requires
    full specification of widget layouts, callbacks, events, etc.

References:
- Widget specification: https://napari.org/stable/plugins/guides.html?#widgets
- magicgui docs: https://pyapp-kit.github.io/magicgui/

Replace code below according to your needs.
"""
print("Hi Todd")
from typing import TYPE_CHECKING
from magicgui.widgets import Container, create_widget, PushButton, Table, FileEdit
import numpy as np
import pandas as pd
from .functions import create_overlap_df, remove_objects, combine_images, pct_overlap_filter, check_dask

if TYPE_CHECKING:
    import napari


class OverlappingSegmentationWidget(Container):
    def __init__(self, viewer: "napari.viewer.Viewer"):
        super().__init__()
        self._viewer = viewer

        # image layer comboboxes
        self._image_A_combo = create_widget(
            label="Image A", annotation="napari.layers.Labels"
        )
        self._image_B_combo = create_widget(
            label="Image B", annotation="napari.layers.Labels"
        )

        # percentage overlap filter
        self._threshold_slider = create_widget(
            label="Percent Overlap", annotation=float, widget_type="FloatSlider"
        )
        self._threshold_slider.min = 0
        self._threshold_slider.max = 1

        # run button
        self._run_button = PushButton(text="Click me to run :)")

        #create table
        self._table = Table()

        #create save button
        self._save_button = PushButton(text="Save Table as *.csv")
        self._save_button.clicked.connect(self.save_button)
        # connecting callbacks
        self._run_button.clicked.connect(self.segmentation_overlap_filter)

        self.extend(
            [
                self._image_A_combo,
                self._image_B_combo,
                self._threshold_slider,
                self._run_button,
                self._table,
                self._save_button
            ]
        )

    def segmentation_overlap_filter(self):

        image_A_layer = self._image_A_combo.value
        image_B_layer = self._image_B_combo.value

        image_A = image_A_layer.data
        image_B = image_B_layer.data

        percentage_overlap = self._threshold_slider.value

        overlap_df = create_overlap_df(image_A, image_B)
        self.overlap_df = overlap_df
        df_filtered = pct_overlap_filter(overlap_df, percentage_overlap)

        dask_bool = check_dask()

        image_A_overlap_removed = remove_objects(image_A, list(df_filtered['Image_A_Object_ID']), dask_bool)
        image_combined = combine_images(image_A_overlap_removed, image_B)

        # display table
        self._table.value = self.overlap_df
        self._table.show(run=True)

        name = image_A_layer.name + "_" + image_B_layer.name + "_combined"
        if name in self._viewer.layers:
            self._viewer.layers[name].data = image_combined
        else:
            self._viewer.add_labels(image_combined, name=name)

    def save_button(self): #this saves the df. If for some reason we change the table code to make it editable, this will have to change too.
        #pass
        fdialog = FileEdit(mode="w", filter="*.csv")
        filename = fdialog._show_file_dialog(
            fdialog.mode,
            caption=fdialog._btn_text,
            start_path=str(fdialog.value),
            filter=fdialog.filter,
        )
        if filename:
            if not filename.endswith(".csv"):
                filename = filename + ".csv"
            self.overlap_df.to_csv(filename)

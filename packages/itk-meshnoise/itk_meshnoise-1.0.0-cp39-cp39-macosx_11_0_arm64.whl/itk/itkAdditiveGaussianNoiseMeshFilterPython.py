# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _MeshNoisePython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkAdditiveGaussianNoiseMeshFilterPython
else:
    import _itkAdditiveGaussianNoiseMeshFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkPointPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorContainerPython
import itk.itkArrayPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkContinuousIndexPython
import itk.itkIndexPython
import itk.itkBoundingBoxPython
import itk.itkMapContainerPython
import itk.itkMeshBasePython
import itk.itkPointSetPython

def itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_Superclass_New():
    return itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_Superclass.New()

class itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_Superclass(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_Superclass_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_Superclass_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_Superclass_Clone(self)

    def GetOutput(self, *args):
        r"""
        GetOutput(self) -> itkMeshD2DTD2
        GetOutput(self, idx) -> itkMeshD2DTD2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_Superclass_GetOutput(self, *args)

    def SetOutput(self, output):
        r"""
        SetOutput(self, output)

        Parameters
        ----------
        output: itkMeshD2DTD2 *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_Superclass_SetOutput(self, output)

    def GraftOutput(self, *args):
        r"""
        GraftOutput(self, graft)

        Parameters
        ----------
        graft: itkDataObject *

        GraftOutput(self, key, graft)

        Parameters
        ----------
        key: std::string const &
        graft: itkDataObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_Superclass_GraftOutput(self, *args)

    def GraftNthOutput(self, idx, graft):
        r"""
        GraftNthOutput(self, idx, graft)

        Parameters
        ----------
        idx: unsigned int
        graft: itkDataObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_Superclass_GraftNthOutput(self, idx, graft)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_Superclass

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_Superclass in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_Superclass_swigregister(itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_Superclass)

def itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_Superclass_New():
    return itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_Superclass.New()

class itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_Superclass(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_Superclass_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_Superclass_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_Superclass_Clone(self)

    def GetOutput(self, *args):
        r"""
        GetOutput(self) -> itkMeshD2
        GetOutput(self, idx) -> itkMeshD2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_Superclass_GetOutput(self, *args)

    def SetOutput(self, output):
        r"""
        SetOutput(self, output)

        Parameters
        ----------
        output: itkMeshD2 *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_Superclass_SetOutput(self, output)

    def GraftOutput(self, *args):
        r"""
        GraftOutput(self, graft)

        Parameters
        ----------
        graft: itkDataObject *

        GraftOutput(self, key, graft)

        Parameters
        ----------
        key: std::string const &
        graft: itkDataObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_Superclass_GraftOutput(self, *args)

    def GraftNthOutput(self, idx, graft):
        r"""
        GraftNthOutput(self, idx, graft)

        Parameters
        ----------
        idx: unsigned int
        graft: itkDataObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_Superclass_GraftNthOutput(self, idx, graft)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_Superclass

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_Superclass in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_Superclass_swigregister(itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_Superclass)

def itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_Superclass_New():
    return itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_Superclass.New()

class itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_Superclass(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_Superclass_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_Superclass_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_Superclass_Clone(self)

    def GetOutput(self, *args):
        r"""
        GetOutput(self) -> itkMeshD3DTD3
        GetOutput(self, idx) -> itkMeshD3DTD3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_Superclass_GetOutput(self, *args)

    def SetOutput(self, output):
        r"""
        SetOutput(self, output)

        Parameters
        ----------
        output: itkMeshD3DTD3 *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_Superclass_SetOutput(self, output)

    def GraftOutput(self, *args):
        r"""
        GraftOutput(self, graft)

        Parameters
        ----------
        graft: itkDataObject *

        GraftOutput(self, key, graft)

        Parameters
        ----------
        key: std::string const &
        graft: itkDataObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_Superclass_GraftOutput(self, *args)

    def GraftNthOutput(self, idx, graft):
        r"""
        GraftNthOutput(self, idx, graft)

        Parameters
        ----------
        idx: unsigned int
        graft: itkDataObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_Superclass_GraftNthOutput(self, idx, graft)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_Superclass

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_Superclass in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_Superclass_swigregister(itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_Superclass)

def itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_Superclass_New():
    return itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_Superclass.New()

class itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_Superclass(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_Superclass_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_Superclass_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_Superclass_Clone(self)

    def GetOutput(self, *args):
        r"""
        GetOutput(self) -> itkMeshD3
        GetOutput(self, idx) -> itkMeshD3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_Superclass_GetOutput(self, *args)

    def SetOutput(self, output):
        r"""
        SetOutput(self, output)

        Parameters
        ----------
        output: itkMeshD3 *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_Superclass_SetOutput(self, output)

    def GraftOutput(self, *args):
        r"""
        GraftOutput(self, graft)

        Parameters
        ----------
        graft: itkDataObject *

        GraftOutput(self, key, graft)

        Parameters
        ----------
        key: std::string const &
        graft: itkDataObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_Superclass_GraftOutput(self, *args)

    def GraftNthOutput(self, idx, graft):
        r"""
        GraftNthOutput(self, idx, graft)

        Parameters
        ----------
        idx: unsigned int
        graft: itkDataObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_Superclass_GraftNthOutput(self, idx, graft)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_Superclass

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_Superclass in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_Superclass_swigregister(itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_Superclass)

def itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4_Superclass_Superclass_New():
    return itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4_Superclass_Superclass.New()

class itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4_Superclass_Superclass(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4_Superclass_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4_Superclass_Superclass_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4_Superclass_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4_Superclass_Superclass_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4_Superclass_Superclass_Clone(self)

    def GetOutput(self, *args):
        r"""
        GetOutput(self) -> itkMeshD4DTD4
        GetOutput(self, idx) -> itkMeshD4DTD4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4_Superclass_Superclass_GetOutput(self, *args)

    def SetOutput(self, output):
        r"""
        SetOutput(self, output)

        Parameters
        ----------
        output: itkMeshD4DTD4 *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4_Superclass_Superclass_SetOutput(self, output)

    def GraftOutput(self, *args):
        r"""
        GraftOutput(self, graft)

        Parameters
        ----------
        graft: itkDataObject *

        GraftOutput(self, key, graft)

        Parameters
        ----------
        key: std::string const &
        graft: itkDataObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4_Superclass_Superclass_GraftOutput(self, *args)

    def GraftNthOutput(self, idx, graft):
        r"""
        GraftNthOutput(self, idx, graft)

        Parameters
        ----------
        idx: unsigned int
        graft: itkDataObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4_Superclass_Superclass_GraftNthOutput(self, idx, graft)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4_Superclass_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4_Superclass_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4_Superclass_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4_Superclass_Superclass

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4_Superclass_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4_Superclass_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4_Superclass_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4_Superclass_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4_Superclass_Superclass in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4_Superclass_Superclass_swigregister(itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4_Superclass_Superclass)

def itkAdditiveGaussianNoiseMeshFilterMD4MD4_Superclass_Superclass_New():
    return itkAdditiveGaussianNoiseMeshFilterMD4MD4_Superclass_Superclass.New()

class itkAdditiveGaussianNoiseMeshFilterMD4MD4_Superclass_Superclass(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMD4MD4_Superclass_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAdditiveGaussianNoiseMeshFilterMD4MD4_Superclass_Superclass_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD4MD4_Superclass_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAdditiveGaussianNoiseMeshFilterMD4MD4_Superclass_Superclass_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD4MD4_Superclass_Superclass_Clone(self)

    def GetOutput(self, *args):
        r"""
        GetOutput(self) -> itkMeshD4
        GetOutput(self, idx) -> itkMeshD4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD4MD4_Superclass_Superclass_GetOutput(self, *args)

    def SetOutput(self, output):
        r"""
        SetOutput(self, output)

        Parameters
        ----------
        output: itkMeshD4 *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD4MD4_Superclass_Superclass_SetOutput(self, output)

    def GraftOutput(self, *args):
        r"""
        GraftOutput(self, graft)

        Parameters
        ----------
        graft: itkDataObject *

        GraftOutput(self, key, graft)

        Parameters
        ----------
        key: std::string const &
        graft: itkDataObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD4MD4_Superclass_Superclass_GraftOutput(self, *args)

    def GraftNthOutput(self, idx, graft):
        r"""
        GraftNthOutput(self, idx, graft)

        Parameters
        ----------
        idx: unsigned int
        graft: itkDataObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD4MD4_Superclass_Superclass_GraftNthOutput(self, idx, graft)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMD4MD4_Superclass_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAdditiveGaussianNoiseMeshFilterMD4MD4_Superclass_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD4MD4_Superclass_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMD4MD4_Superclass_Superclass

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMD4MD4_Superclass_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMD4MD4_Superclass_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMD4MD4_Superclass_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMD4MD4_Superclass_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMD4MD4_Superclass_Superclass in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD4MD4_Superclass_Superclass_swigregister(itkAdditiveGaussianNoiseMeshFilterMD4MD4_Superclass_Superclass)

def itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_Superclass_New():
    return itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_Superclass.New()

class itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_Superclass(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_Superclass_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_Superclass_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_Superclass_Clone(self)

    def GetOutput(self, *args):
        r"""
        GetOutput(self) -> itkMeshF2DTF2
        GetOutput(self, idx) -> itkMeshF2DTF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_Superclass_GetOutput(self, *args)

    def SetOutput(self, output):
        r"""
        SetOutput(self, output)

        Parameters
        ----------
        output: itkMeshF2DTF2 *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_Superclass_SetOutput(self, output)

    def GraftOutput(self, *args):
        r"""
        GraftOutput(self, graft)

        Parameters
        ----------
        graft: itkDataObject *

        GraftOutput(self, key, graft)

        Parameters
        ----------
        key: std::string const &
        graft: itkDataObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_Superclass_GraftOutput(self, *args)

    def GraftNthOutput(self, idx, graft):
        r"""
        GraftNthOutput(self, idx, graft)

        Parameters
        ----------
        idx: unsigned int
        graft: itkDataObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_Superclass_GraftNthOutput(self, idx, graft)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_Superclass

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_Superclass in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_Superclass_swigregister(itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_Superclass)

def itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_Superclass_New():
    return itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_Superclass.New()

class itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_Superclass(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_Superclass_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_Superclass_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_Superclass_Clone(self)

    def GetOutput(self, *args):
        r"""
        GetOutput(self) -> itkMeshF2
        GetOutput(self, idx) -> itkMeshF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_Superclass_GetOutput(self, *args)

    def SetOutput(self, output):
        r"""
        SetOutput(self, output)

        Parameters
        ----------
        output: itkMeshF2 *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_Superclass_SetOutput(self, output)

    def GraftOutput(self, *args):
        r"""
        GraftOutput(self, graft)

        Parameters
        ----------
        graft: itkDataObject *

        GraftOutput(self, key, graft)

        Parameters
        ----------
        key: std::string const &
        graft: itkDataObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_Superclass_GraftOutput(self, *args)

    def GraftNthOutput(self, idx, graft):
        r"""
        GraftNthOutput(self, idx, graft)

        Parameters
        ----------
        idx: unsigned int
        graft: itkDataObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_Superclass_GraftNthOutput(self, idx, graft)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_Superclass

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_Superclass in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_Superclass_swigregister(itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_Superclass)

def itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_Superclass_New():
    return itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_Superclass.New()

class itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_Superclass(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_Superclass_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_Superclass_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_Superclass_Clone(self)

    def GetOutput(self, *args):
        r"""
        GetOutput(self) -> itkMeshF3DTF3
        GetOutput(self, idx) -> itkMeshF3DTF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_Superclass_GetOutput(self, *args)

    def SetOutput(self, output):
        r"""
        SetOutput(self, output)

        Parameters
        ----------
        output: itkMeshF3DTF3 *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_Superclass_SetOutput(self, output)

    def GraftOutput(self, *args):
        r"""
        GraftOutput(self, graft)

        Parameters
        ----------
        graft: itkDataObject *

        GraftOutput(self, key, graft)

        Parameters
        ----------
        key: std::string const &
        graft: itkDataObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_Superclass_GraftOutput(self, *args)

    def GraftNthOutput(self, idx, graft):
        r"""
        GraftNthOutput(self, idx, graft)

        Parameters
        ----------
        idx: unsigned int
        graft: itkDataObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_Superclass_GraftNthOutput(self, idx, graft)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_Superclass

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_Superclass in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_Superclass_swigregister(itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_Superclass)

def itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_Superclass_New():
    return itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_Superclass.New()

class itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_Superclass(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_Superclass_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_Superclass_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_Superclass_Clone(self)

    def GetOutput(self, *args):
        r"""
        GetOutput(self) -> itkMeshF3
        GetOutput(self, idx) -> itkMeshF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_Superclass_GetOutput(self, *args)

    def SetOutput(self, output):
        r"""
        SetOutput(self, output)

        Parameters
        ----------
        output: itkMeshF3 *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_Superclass_SetOutput(self, output)

    def GraftOutput(self, *args):
        r"""
        GraftOutput(self, graft)

        Parameters
        ----------
        graft: itkDataObject *

        GraftOutput(self, key, graft)

        Parameters
        ----------
        key: std::string const &
        graft: itkDataObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_Superclass_GraftOutput(self, *args)

    def GraftNthOutput(self, idx, graft):
        r"""
        GraftNthOutput(self, idx, graft)

        Parameters
        ----------
        idx: unsigned int
        graft: itkDataObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_Superclass_GraftNthOutput(self, idx, graft)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_Superclass

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_Superclass in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_Superclass_swigregister(itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_Superclass)

def itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4_Superclass_Superclass_New():
    return itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4_Superclass_Superclass.New()

class itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4_Superclass_Superclass(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4_Superclass_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4_Superclass_Superclass_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4_Superclass_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4_Superclass_Superclass_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4_Superclass_Superclass_Clone(self)

    def GetOutput(self, *args):
        r"""
        GetOutput(self) -> itkMeshF4DTF4
        GetOutput(self, idx) -> itkMeshF4DTF4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4_Superclass_Superclass_GetOutput(self, *args)

    def SetOutput(self, output):
        r"""
        SetOutput(self, output)

        Parameters
        ----------
        output: itkMeshF4DTF4 *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4_Superclass_Superclass_SetOutput(self, output)

    def GraftOutput(self, *args):
        r"""
        GraftOutput(self, graft)

        Parameters
        ----------
        graft: itkDataObject *

        GraftOutput(self, key, graft)

        Parameters
        ----------
        key: std::string const &
        graft: itkDataObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4_Superclass_Superclass_GraftOutput(self, *args)

    def GraftNthOutput(self, idx, graft):
        r"""
        GraftNthOutput(self, idx, graft)

        Parameters
        ----------
        idx: unsigned int
        graft: itkDataObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4_Superclass_Superclass_GraftNthOutput(self, idx, graft)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4_Superclass_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4_Superclass_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4_Superclass_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4_Superclass_Superclass

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4_Superclass_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4_Superclass_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4_Superclass_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4_Superclass_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4_Superclass_Superclass in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4_Superclass_Superclass_swigregister(itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4_Superclass_Superclass)

def itkAdditiveGaussianNoiseMeshFilterMF4MF4_Superclass_Superclass_New():
    return itkAdditiveGaussianNoiseMeshFilterMF4MF4_Superclass_Superclass.New()

class itkAdditiveGaussianNoiseMeshFilterMF4MF4_Superclass_Superclass(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMF4MF4_Superclass_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAdditiveGaussianNoiseMeshFilterMF4MF4_Superclass_Superclass_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF4MF4_Superclass_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAdditiveGaussianNoiseMeshFilterMF4MF4_Superclass_Superclass_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF4MF4_Superclass_Superclass_Clone(self)

    def GetOutput(self, *args):
        r"""
        GetOutput(self) -> itkMeshF4
        GetOutput(self, idx) -> itkMeshF4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF4MF4_Superclass_Superclass_GetOutput(self, *args)

    def SetOutput(self, output):
        r"""
        SetOutput(self, output)

        Parameters
        ----------
        output: itkMeshF4 *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF4MF4_Superclass_Superclass_SetOutput(self, output)

    def GraftOutput(self, *args):
        r"""
        GraftOutput(self, graft)

        Parameters
        ----------
        graft: itkDataObject *

        GraftOutput(self, key, graft)

        Parameters
        ----------
        key: std::string const &
        graft: itkDataObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF4MF4_Superclass_Superclass_GraftOutput(self, *args)

    def GraftNthOutput(self, idx, graft):
        r"""
        GraftNthOutput(self, idx, graft)

        Parameters
        ----------
        idx: unsigned int
        graft: itkDataObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF4MF4_Superclass_Superclass_GraftNthOutput(self, idx, graft)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMF4MF4_Superclass_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAdditiveGaussianNoiseMeshFilterMF4MF4_Superclass_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF4MF4_Superclass_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMF4MF4_Superclass_Superclass

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMF4MF4_Superclass_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMF4MF4_Superclass_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMF4MF4_Superclass_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMF4MF4_Superclass_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMF4MF4_Superclass_Superclass in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF4MF4_Superclass_Superclass_swigregister(itkAdditiveGaussianNoiseMeshFilterMF4MF4_Superclass_Superclass)

def itkPointSetD2DTD2_New():
    return itkPointSetD2DTD2.New()

class itkPointSetD2DTD2(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkPointSetD2DTD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPointSetD2DTD2_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD2DTD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPointSetD2DTD2_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD2DTD2_Clone(self)

    def GetMaximumNumberOfRegions(self):
        r"""GetMaximumNumberOfRegions(self) -> long"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD2DTD2_GetMaximumNumberOfRegions(self)

    def PassStructure(self, inputPointSet):
        r"""
        PassStructure(self, inputPointSet)

        Parameters
        ----------
        inputPointSet: itkPointSetD2DTD2 *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD2DTD2_PassStructure(self, inputPointSet)

    def GetNumberOfPoints(self):
        r"""GetNumberOfPoints(self) -> unsigned long"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD2DTD2_GetNumberOfPoints(self)

    def SetPoints(self, *args):
        r"""
        SetPoints(self, arg0)

        Parameters
        ----------
        arg0: itkMapContainerULPF2 *

        SetPoints(self, arg0)

        Parameters
        ----------
        arg0: itkVectorContainerULF *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD2DTD2_SetPoints(self, *args)

    def GetPoints(self, *args):
        r"""
        GetPoints(self) -> itkMapContainerULPF2
        GetPoints(self) -> itkMapContainerULPF2
        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD2DTD2_GetPoints(self, *args)

    def SetPoint(self, arg0, arg1):
        r"""
        SetPoint(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long
        arg1: itkPointF2

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD2DTD2_SetPoint(self, arg0, arg1)

    def GetPoint(self, *args):
        r"""
        GetPoint(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long
        arg1: itkPointF2 *

        GetPoint(self, arg0) -> itkPointF2

        Parameters
        ----------
        arg0: unsigned long

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD2DTD2_GetPoint(self, *args)

    def SetPointData(self, *args):
        r"""
        SetPointData(self, arg0)

        Parameters
        ----------
        arg0: itkMapContainerULD *

        SetPointData(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long
        arg1: double

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD2DTD2_SetPointData(self, *args)

    def GetPointData(self, *args):
        r"""
        GetPointData(self) -> itkMapContainerULD
        GetPointData(self) -> itkMapContainerULD
        GetPointData(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long
        arg1: double *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD2DTD2_GetPointData(self, *args)

    def SetRequestedRegion(self, *args):
        r"""
        SetRequestedRegion(self, data)

        Parameters
        ----------
        data: itkDataObject const *

        SetRequestedRegion(self, region)

        Parameters
        ----------
        region: long const &

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD2DTD2_SetRequestedRegion(self, *args)

    def GetRequestedRegion(self):
        r"""GetRequestedRegion(self) -> long"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD2DTD2_GetRequestedRegion(self)

    def SetBufferedRegion(self, region):
        r"""
        SetBufferedRegion(self, region)

        Parameters
        ----------
        region: long const &

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD2DTD2_SetBufferedRegion(self, region)

    def GetBufferedRegion(self):
        r"""GetBufferedRegion(self) -> long"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD2DTD2_GetBufferedRegion(self)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkPointSetD2DTD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPointSetD2DTD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD2DTD2_cast(obj)

    def keys(self):
        """
        Return keys related to the pointset's metadata.
        These keys are used in the dictionary resulting from dict(pointset).
        """
        result = ['name', 'dimension', 'numberOfPoints', 'points', 'numberOfPointPixels', 'pointData']
        return result

    def __getitem__(self, key):
        """Access metadata keys, see help(pointset.keys), for string keys."""
        import itk
        if isinstance(key, str):
            state = itk.dict_from_pointset(self)
            return state[key]

    def __setitem__(self, key, value):
        if isinstance(key, str):
            import numpy as np
            if key == 'name':
                self.SetObjectName(value)
            elif key == 'points':
                self.SetPoints(itk.vector_container_from_array(value))
            elif key == 'pointData':
                self.SetPointData(itk.vector_container_from_array(value))

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.dict_from_pointset(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        import itk
        import numpy as np
        deserialized = itk.pointset_from_dict(state)
        self.__dict__['this'] = deserialized


    def New(*args, **kargs):
        """New() -> itkPointSetD2DTD2

        Create a new object of the class itkPointSetD2DTD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetD2DTD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetD2DTD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetD2DTD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetD2DTD2 in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD2DTD2_swigregister(itkPointSetD2DTD2)

def itkPointSetD3DTD3_New():
    return itkPointSetD3DTD3.New()

class itkPointSetD3DTD3(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkPointSetD3DTD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPointSetD3DTD3_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD3DTD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPointSetD3DTD3_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD3DTD3_Clone(self)

    def GetMaximumNumberOfRegions(self):
        r"""GetMaximumNumberOfRegions(self) -> long"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD3DTD3_GetMaximumNumberOfRegions(self)

    def PassStructure(self, inputPointSet):
        r"""
        PassStructure(self, inputPointSet)

        Parameters
        ----------
        inputPointSet: itkPointSetD3DTD3 *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD3DTD3_PassStructure(self, inputPointSet)

    def GetNumberOfPoints(self):
        r"""GetNumberOfPoints(self) -> unsigned long"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD3DTD3_GetNumberOfPoints(self)

    def SetPoints(self, *args):
        r"""
        SetPoints(self, arg0)

        Parameters
        ----------
        arg0: itkMapContainerULPF3 *

        SetPoints(self, arg0)

        Parameters
        ----------
        arg0: itkVectorContainerULF *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD3DTD3_SetPoints(self, *args)

    def GetPoints(self, *args):
        r"""
        GetPoints(self) -> itkMapContainerULPF3
        GetPoints(self) -> itkMapContainerULPF3
        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD3DTD3_GetPoints(self, *args)

    def SetPoint(self, arg0, arg1):
        r"""
        SetPoint(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long
        arg1: itkPointF3

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD3DTD3_SetPoint(self, arg0, arg1)

    def GetPoint(self, *args):
        r"""
        GetPoint(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long
        arg1: itkPointF3 *

        GetPoint(self, arg0) -> itkPointF3

        Parameters
        ----------
        arg0: unsigned long

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD3DTD3_GetPoint(self, *args)

    def SetPointData(self, *args):
        r"""
        SetPointData(self, arg0)

        Parameters
        ----------
        arg0: itkMapContainerULD *

        SetPointData(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long
        arg1: double

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD3DTD3_SetPointData(self, *args)

    def GetPointData(self, *args):
        r"""
        GetPointData(self) -> itkMapContainerULD
        GetPointData(self) -> itkMapContainerULD
        GetPointData(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long
        arg1: double *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD3DTD3_GetPointData(self, *args)

    def SetRequestedRegion(self, *args):
        r"""
        SetRequestedRegion(self, data)

        Parameters
        ----------
        data: itkDataObject const *

        SetRequestedRegion(self, region)

        Parameters
        ----------
        region: long const &

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD3DTD3_SetRequestedRegion(self, *args)

    def GetRequestedRegion(self):
        r"""GetRequestedRegion(self) -> long"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD3DTD3_GetRequestedRegion(self)

    def SetBufferedRegion(self, region):
        r"""
        SetBufferedRegion(self, region)

        Parameters
        ----------
        region: long const &

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD3DTD3_SetBufferedRegion(self, region)

    def GetBufferedRegion(self):
        r"""GetBufferedRegion(self) -> long"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD3DTD3_GetBufferedRegion(self)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkPointSetD3DTD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPointSetD3DTD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD3DTD3_cast(obj)

    def keys(self):
        """
        Return keys related to the pointset's metadata.
        These keys are used in the dictionary resulting from dict(pointset).
        """
        result = ['name', 'dimension', 'numberOfPoints', 'points', 'numberOfPointPixels', 'pointData']
        return result

    def __getitem__(self, key):
        """Access metadata keys, see help(pointset.keys), for string keys."""
        import itk
        if isinstance(key, str):
            state = itk.dict_from_pointset(self)
            return state[key]

    def __setitem__(self, key, value):
        if isinstance(key, str):
            import numpy as np
            if key == 'name':
                self.SetObjectName(value)
            elif key == 'points':
                self.SetPoints(itk.vector_container_from_array(value))
            elif key == 'pointData':
                self.SetPointData(itk.vector_container_from_array(value))

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.dict_from_pointset(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        import itk
        import numpy as np
        deserialized = itk.pointset_from_dict(state)
        self.__dict__['this'] = deserialized


    def New(*args, **kargs):
        """New() -> itkPointSetD3DTD3

        Create a new object of the class itkPointSetD3DTD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetD3DTD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetD3DTD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetD3DTD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetD3DTD3 in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD3DTD3_swigregister(itkPointSetD3DTD3)

def itkPointSetD4DTD4_New():
    return itkPointSetD4DTD4.New()

class itkPointSetD4DTD4(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkPointSetD4DTD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPointSetD4DTD4_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD4DTD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPointSetD4DTD4_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD4DTD4_Clone(self)

    def GetMaximumNumberOfRegions(self):
        r"""GetMaximumNumberOfRegions(self) -> long"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD4DTD4_GetMaximumNumberOfRegions(self)

    def PassStructure(self, inputPointSet):
        r"""
        PassStructure(self, inputPointSet)

        Parameters
        ----------
        inputPointSet: itkPointSetD4DTD4 *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD4DTD4_PassStructure(self, inputPointSet)

    def GetNumberOfPoints(self):
        r"""GetNumberOfPoints(self) -> unsigned long"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD4DTD4_GetNumberOfPoints(self)

    def SetPoints(self, *args):
        r"""
        SetPoints(self, arg0)

        Parameters
        ----------
        arg0: itkMapContainerULPF4 *

        SetPoints(self, arg0)

        Parameters
        ----------
        arg0: itkVectorContainerULF *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD4DTD4_SetPoints(self, *args)

    def GetPoints(self, *args):
        r"""
        GetPoints(self) -> itkMapContainerULPF4
        GetPoints(self) -> itkMapContainerULPF4
        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD4DTD4_GetPoints(self, *args)

    def SetPoint(self, arg0, arg1):
        r"""
        SetPoint(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long
        arg1: itkPointF4

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD4DTD4_SetPoint(self, arg0, arg1)

    def GetPoint(self, *args):
        r"""
        GetPoint(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long
        arg1: itkPointF4 *

        GetPoint(self, arg0) -> itkPointF4

        Parameters
        ----------
        arg0: unsigned long

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD4DTD4_GetPoint(self, *args)

    def SetPointData(self, *args):
        r"""
        SetPointData(self, arg0)

        Parameters
        ----------
        arg0: itkMapContainerULD *

        SetPointData(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long
        arg1: double

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD4DTD4_SetPointData(self, *args)

    def GetPointData(self, *args):
        r"""
        GetPointData(self) -> itkMapContainerULD
        GetPointData(self) -> itkMapContainerULD
        GetPointData(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long
        arg1: double *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD4DTD4_GetPointData(self, *args)

    def SetRequestedRegion(self, *args):
        r"""
        SetRequestedRegion(self, data)

        Parameters
        ----------
        data: itkDataObject const *

        SetRequestedRegion(self, region)

        Parameters
        ----------
        region: long const &

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD4DTD4_SetRequestedRegion(self, *args)

    def GetRequestedRegion(self):
        r"""GetRequestedRegion(self) -> long"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD4DTD4_GetRequestedRegion(self)

    def SetBufferedRegion(self, region):
        r"""
        SetBufferedRegion(self, region)

        Parameters
        ----------
        region: long const &

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD4DTD4_SetBufferedRegion(self, region)

    def GetBufferedRegion(self):
        r"""GetBufferedRegion(self) -> long"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD4DTD4_GetBufferedRegion(self)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkPointSetD4DTD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPointSetD4DTD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD4DTD4_cast(obj)

    def keys(self):
        """
        Return keys related to the pointset's metadata.
        These keys are used in the dictionary resulting from dict(pointset).
        """
        result = ['name', 'dimension', 'numberOfPoints', 'points', 'numberOfPointPixels', 'pointData']
        return result

    def __getitem__(self, key):
        """Access metadata keys, see help(pointset.keys), for string keys."""
        import itk
        if isinstance(key, str):
            state = itk.dict_from_pointset(self)
            return state[key]

    def __setitem__(self, key, value):
        if isinstance(key, str):
            import numpy as np
            if key == 'name':
                self.SetObjectName(value)
            elif key == 'points':
                self.SetPoints(itk.vector_container_from_array(value))
            elif key == 'pointData':
                self.SetPointData(itk.vector_container_from_array(value))

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.dict_from_pointset(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        import itk
        import numpy as np
        deserialized = itk.pointset_from_dict(state)
        self.__dict__['this'] = deserialized


    def New(*args, **kargs):
        """New() -> itkPointSetD4DTD4

        Create a new object of the class itkPointSetD4DTD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetD4DTD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetD4DTD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetD4DTD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetD4DTD4 in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetD4DTD4_swigregister(itkPointSetD4DTD4)

def itkPointSetF2DTF2_New():
    return itkPointSetF2DTF2.New()

class itkPointSetF2DTF2(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkPointSetF2DTF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPointSetF2DTF2_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF2DTF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPointSetF2DTF2_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF2DTF2_Clone(self)

    def GetMaximumNumberOfRegions(self):
        r"""GetMaximumNumberOfRegions(self) -> long"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF2DTF2_GetMaximumNumberOfRegions(self)

    def PassStructure(self, inputPointSet):
        r"""
        PassStructure(self, inputPointSet)

        Parameters
        ----------
        inputPointSet: itkPointSetF2DTF2 *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF2DTF2_PassStructure(self, inputPointSet)

    def GetNumberOfPoints(self):
        r"""GetNumberOfPoints(self) -> unsigned long"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF2DTF2_GetNumberOfPoints(self)

    def SetPoints(self, *args):
        r"""
        SetPoints(self, arg0)

        Parameters
        ----------
        arg0: itkMapContainerULPF2 *

        SetPoints(self, arg0)

        Parameters
        ----------
        arg0: itkVectorContainerULF *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF2DTF2_SetPoints(self, *args)

    def GetPoints(self, *args):
        r"""
        GetPoints(self) -> itkMapContainerULPF2
        GetPoints(self) -> itkMapContainerULPF2
        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF2DTF2_GetPoints(self, *args)

    def SetPoint(self, arg0, arg1):
        r"""
        SetPoint(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long
        arg1: itkPointF2

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF2DTF2_SetPoint(self, arg0, arg1)

    def GetPoint(self, *args):
        r"""
        GetPoint(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long
        arg1: itkPointF2 *

        GetPoint(self, arg0) -> itkPointF2

        Parameters
        ----------
        arg0: unsigned long

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF2DTF2_GetPoint(self, *args)

    def SetPointData(self, *args):
        r"""
        SetPointData(self, arg0)

        Parameters
        ----------
        arg0: itkMapContainerULF *

        SetPointData(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long
        arg1: float

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF2DTF2_SetPointData(self, *args)

    def GetPointData(self, *args):
        r"""
        GetPointData(self) -> itkMapContainerULF
        GetPointData(self) -> itkMapContainerULF
        GetPointData(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long
        arg1: float *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF2DTF2_GetPointData(self, *args)

    def SetRequestedRegion(self, *args):
        r"""
        SetRequestedRegion(self, data)

        Parameters
        ----------
        data: itkDataObject const *

        SetRequestedRegion(self, region)

        Parameters
        ----------
        region: long const &

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF2DTF2_SetRequestedRegion(self, *args)

    def GetRequestedRegion(self):
        r"""GetRequestedRegion(self) -> long"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF2DTF2_GetRequestedRegion(self)

    def SetBufferedRegion(self, region):
        r"""
        SetBufferedRegion(self, region)

        Parameters
        ----------
        region: long const &

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF2DTF2_SetBufferedRegion(self, region)

    def GetBufferedRegion(self):
        r"""GetBufferedRegion(self) -> long"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF2DTF2_GetBufferedRegion(self)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkPointSetF2DTF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPointSetF2DTF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF2DTF2_cast(obj)

    def keys(self):
        """
        Return keys related to the pointset's metadata.
        These keys are used in the dictionary resulting from dict(pointset).
        """
        result = ['name', 'dimension', 'numberOfPoints', 'points', 'numberOfPointPixels', 'pointData']
        return result

    def __getitem__(self, key):
        """Access metadata keys, see help(pointset.keys), for string keys."""
        import itk
        if isinstance(key, str):
            state = itk.dict_from_pointset(self)
            return state[key]

    def __setitem__(self, key, value):
        if isinstance(key, str):
            import numpy as np
            if key == 'name':
                self.SetObjectName(value)
            elif key == 'points':
                self.SetPoints(itk.vector_container_from_array(value))
            elif key == 'pointData':
                self.SetPointData(itk.vector_container_from_array(value))

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.dict_from_pointset(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        import itk
        import numpy as np
        deserialized = itk.pointset_from_dict(state)
        self.__dict__['this'] = deserialized


    def New(*args, **kargs):
        """New() -> itkPointSetF2DTF2

        Create a new object of the class itkPointSetF2DTF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetF2DTF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetF2DTF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetF2DTF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetF2DTF2 in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF2DTF2_swigregister(itkPointSetF2DTF2)

def itkPointSetF3DTF3_New():
    return itkPointSetF3DTF3.New()

class itkPointSetF3DTF3(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkPointSetF3DTF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPointSetF3DTF3_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF3DTF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPointSetF3DTF3_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF3DTF3_Clone(self)

    def GetMaximumNumberOfRegions(self):
        r"""GetMaximumNumberOfRegions(self) -> long"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF3DTF3_GetMaximumNumberOfRegions(self)

    def PassStructure(self, inputPointSet):
        r"""
        PassStructure(self, inputPointSet)

        Parameters
        ----------
        inputPointSet: itkPointSetF3DTF3 *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF3DTF3_PassStructure(self, inputPointSet)

    def GetNumberOfPoints(self):
        r"""GetNumberOfPoints(self) -> unsigned long"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF3DTF3_GetNumberOfPoints(self)

    def SetPoints(self, *args):
        r"""
        SetPoints(self, arg0)

        Parameters
        ----------
        arg0: itkMapContainerULPF3 *

        SetPoints(self, arg0)

        Parameters
        ----------
        arg0: itkVectorContainerULF *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF3DTF3_SetPoints(self, *args)

    def GetPoints(self, *args):
        r"""
        GetPoints(self) -> itkMapContainerULPF3
        GetPoints(self) -> itkMapContainerULPF3
        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF3DTF3_GetPoints(self, *args)

    def SetPoint(self, arg0, arg1):
        r"""
        SetPoint(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long
        arg1: itkPointF3

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF3DTF3_SetPoint(self, arg0, arg1)

    def GetPoint(self, *args):
        r"""
        GetPoint(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long
        arg1: itkPointF3 *

        GetPoint(self, arg0) -> itkPointF3

        Parameters
        ----------
        arg0: unsigned long

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF3DTF3_GetPoint(self, *args)

    def SetPointData(self, *args):
        r"""
        SetPointData(self, arg0)

        Parameters
        ----------
        arg0: itkMapContainerULF *

        SetPointData(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long
        arg1: float

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF3DTF3_SetPointData(self, *args)

    def GetPointData(self, *args):
        r"""
        GetPointData(self) -> itkMapContainerULF
        GetPointData(self) -> itkMapContainerULF
        GetPointData(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long
        arg1: float *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF3DTF3_GetPointData(self, *args)

    def SetRequestedRegion(self, *args):
        r"""
        SetRequestedRegion(self, data)

        Parameters
        ----------
        data: itkDataObject const *

        SetRequestedRegion(self, region)

        Parameters
        ----------
        region: long const &

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF3DTF3_SetRequestedRegion(self, *args)

    def GetRequestedRegion(self):
        r"""GetRequestedRegion(self) -> long"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF3DTF3_GetRequestedRegion(self)

    def SetBufferedRegion(self, region):
        r"""
        SetBufferedRegion(self, region)

        Parameters
        ----------
        region: long const &

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF3DTF3_SetBufferedRegion(self, region)

    def GetBufferedRegion(self):
        r"""GetBufferedRegion(self) -> long"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF3DTF3_GetBufferedRegion(self)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkPointSetF3DTF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPointSetF3DTF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF3DTF3_cast(obj)

    def keys(self):
        """
        Return keys related to the pointset's metadata.
        These keys are used in the dictionary resulting from dict(pointset).
        """
        result = ['name', 'dimension', 'numberOfPoints', 'points', 'numberOfPointPixels', 'pointData']
        return result

    def __getitem__(self, key):
        """Access metadata keys, see help(pointset.keys), for string keys."""
        import itk
        if isinstance(key, str):
            state = itk.dict_from_pointset(self)
            return state[key]

    def __setitem__(self, key, value):
        if isinstance(key, str):
            import numpy as np
            if key == 'name':
                self.SetObjectName(value)
            elif key == 'points':
                self.SetPoints(itk.vector_container_from_array(value))
            elif key == 'pointData':
                self.SetPointData(itk.vector_container_from_array(value))

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.dict_from_pointset(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        import itk
        import numpy as np
        deserialized = itk.pointset_from_dict(state)
        self.__dict__['this'] = deserialized


    def New(*args, **kargs):
        """New() -> itkPointSetF3DTF3

        Create a new object of the class itkPointSetF3DTF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetF3DTF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetF3DTF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetF3DTF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetF3DTF3 in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF3DTF3_swigregister(itkPointSetF3DTF3)

def itkPointSetF4DTF4_New():
    return itkPointSetF4DTF4.New()

class itkPointSetF4DTF4(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkPointSetF4DTF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPointSetF4DTF4_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF4DTF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPointSetF4DTF4_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF4DTF4_Clone(self)

    def GetMaximumNumberOfRegions(self):
        r"""GetMaximumNumberOfRegions(self) -> long"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF4DTF4_GetMaximumNumberOfRegions(self)

    def PassStructure(self, inputPointSet):
        r"""
        PassStructure(self, inputPointSet)

        Parameters
        ----------
        inputPointSet: itkPointSetF4DTF4 *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF4DTF4_PassStructure(self, inputPointSet)

    def GetNumberOfPoints(self):
        r"""GetNumberOfPoints(self) -> unsigned long"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF4DTF4_GetNumberOfPoints(self)

    def SetPoints(self, *args):
        r"""
        SetPoints(self, arg0)

        Parameters
        ----------
        arg0: itkMapContainerULPF4 *

        SetPoints(self, arg0)

        Parameters
        ----------
        arg0: itkVectorContainerULF *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF4DTF4_SetPoints(self, *args)

    def GetPoints(self, *args):
        r"""
        GetPoints(self) -> itkMapContainerULPF4
        GetPoints(self) -> itkMapContainerULPF4
        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF4DTF4_GetPoints(self, *args)

    def SetPoint(self, arg0, arg1):
        r"""
        SetPoint(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long
        arg1: itkPointF4

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF4DTF4_SetPoint(self, arg0, arg1)

    def GetPoint(self, *args):
        r"""
        GetPoint(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long
        arg1: itkPointF4 *

        GetPoint(self, arg0) -> itkPointF4

        Parameters
        ----------
        arg0: unsigned long

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF4DTF4_GetPoint(self, *args)

    def SetPointData(self, *args):
        r"""
        SetPointData(self, arg0)

        Parameters
        ----------
        arg0: itkMapContainerULF *

        SetPointData(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long
        arg1: float

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF4DTF4_SetPointData(self, *args)

    def GetPointData(self, *args):
        r"""
        GetPointData(self) -> itkMapContainerULF
        GetPointData(self) -> itkMapContainerULF
        GetPointData(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long
        arg1: float *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF4DTF4_GetPointData(self, *args)

    def SetRequestedRegion(self, *args):
        r"""
        SetRequestedRegion(self, data)

        Parameters
        ----------
        data: itkDataObject const *

        SetRequestedRegion(self, region)

        Parameters
        ----------
        region: long const &

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF4DTF4_SetRequestedRegion(self, *args)

    def GetRequestedRegion(self):
        r"""GetRequestedRegion(self) -> long"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF4DTF4_GetRequestedRegion(self)

    def SetBufferedRegion(self, region):
        r"""
        SetBufferedRegion(self, region)

        Parameters
        ----------
        region: long const &

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF4DTF4_SetBufferedRegion(self, region)

    def GetBufferedRegion(self):
        r"""GetBufferedRegion(self) -> long"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF4DTF4_GetBufferedRegion(self)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkPointSetF4DTF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPointSetF4DTF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF4DTF4_cast(obj)

    def keys(self):
        """
        Return keys related to the pointset's metadata.
        These keys are used in the dictionary resulting from dict(pointset).
        """
        result = ['name', 'dimension', 'numberOfPoints', 'points', 'numberOfPointPixels', 'pointData']
        return result

    def __getitem__(self, key):
        """Access metadata keys, see help(pointset.keys), for string keys."""
        import itk
        if isinstance(key, str):
            state = itk.dict_from_pointset(self)
            return state[key]

    def __setitem__(self, key, value):
        if isinstance(key, str):
            import numpy as np
            if key == 'name':
                self.SetObjectName(value)
            elif key == 'points':
                self.SetPoints(itk.vector_container_from_array(value))
            elif key == 'pointData':
                self.SetPointData(itk.vector_container_from_array(value))

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.dict_from_pointset(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        import itk
        import numpy as np
        deserialized = itk.pointset_from_dict(state)
        self.__dict__['this'] = deserialized


    def New(*args, **kargs):
        """New() -> itkPointSetF4DTF4

        Create a new object of the class itkPointSetF4DTF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetF4DTF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetF4DTF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetF4DTF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetF4DTF4 in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkPointSetF4DTF4_swigregister(itkPointSetF4DTF4)

def itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_New():
    return itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass.New()

class itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass(itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_Superclass):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkMeshD2DTD2 const *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_SetInput(self, input)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkMeshD2DTD2
        GetInput(self, idx) -> itkMeshD2DTD2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_GetInput(self, *args)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass_swigregister(itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass)

def itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_New():
    return itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass.New()

class itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass(itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_Superclass):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkMeshD2 const *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_SetInput(self, input)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkMeshD2
        GetInput(self, idx) -> itkMeshD2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_GetInput(self, *args)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass_swigregister(itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass)

def itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_New():
    return itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass.New()

class itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass(itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_Superclass):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkMeshD3DTD3 const *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_SetInput(self, input)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkMeshD3DTD3
        GetInput(self, idx) -> itkMeshD3DTD3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_GetInput(self, *args)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass_swigregister(itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass)

def itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_New():
    return itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass.New()

class itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass(itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_Superclass):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkMeshD3 const *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_SetInput(self, input)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkMeshD3
        GetInput(self, idx) -> itkMeshD3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_GetInput(self, *args)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass_swigregister(itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass)

def itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4_Superclass_New():
    return itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4_Superclass.New()

class itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4_Superclass(itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4_Superclass_Superclass):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4_Superclass_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4_Superclass_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkMeshD4DTD4 const *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4_Superclass_SetInput(self, input)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkMeshD4DTD4
        GetInput(self, idx) -> itkMeshD4DTD4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4_Superclass_GetInput(self, *args)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4_Superclass

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4_Superclass in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4_Superclass_swigregister(itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4_Superclass)

def itkAdditiveGaussianNoiseMeshFilterMD4MD4_Superclass_New():
    return itkAdditiveGaussianNoiseMeshFilterMD4MD4_Superclass.New()

class itkAdditiveGaussianNoiseMeshFilterMD4MD4_Superclass(itkAdditiveGaussianNoiseMeshFilterMD4MD4_Superclass_Superclass):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMD4MD4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAdditiveGaussianNoiseMeshFilterMD4MD4_Superclass_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD4MD4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAdditiveGaussianNoiseMeshFilterMD4MD4_Superclass_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD4MD4_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkMeshD4 const *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD4MD4_Superclass_SetInput(self, input)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkMeshD4
        GetInput(self, idx) -> itkMeshD4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD4MD4_Superclass_GetInput(self, *args)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMD4MD4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAdditiveGaussianNoiseMeshFilterMD4MD4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD4MD4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMD4MD4_Superclass

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMD4MD4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMD4MD4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMD4MD4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMD4MD4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMD4MD4_Superclass in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD4MD4_Superclass_swigregister(itkAdditiveGaussianNoiseMeshFilterMD4MD4_Superclass)

def itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_New():
    return itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass.New()

class itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass(itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_Superclass):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkMeshF2DTF2 const *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_SetInput(self, input)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkMeshF2DTF2
        GetInput(self, idx) -> itkMeshF2DTF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_GetInput(self, *args)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass_swigregister(itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass)

def itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_New():
    return itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass.New()

class itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass(itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_Superclass):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkMeshF2 const *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_SetInput(self, input)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkMeshF2
        GetInput(self, idx) -> itkMeshF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_GetInput(self, *args)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass_swigregister(itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass)

def itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_New():
    return itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass.New()

class itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass(itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_Superclass):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkMeshF3DTF3 const *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_SetInput(self, input)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkMeshF3DTF3
        GetInput(self, idx) -> itkMeshF3DTF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_GetInput(self, *args)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass_swigregister(itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass)

def itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_New():
    return itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass.New()

class itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass(itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_Superclass):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkMeshF3 const *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_SetInput(self, input)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkMeshF3
        GetInput(self, idx) -> itkMeshF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_GetInput(self, *args)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass_swigregister(itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass)

def itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4_Superclass_New():
    return itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4_Superclass.New()

class itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4_Superclass(itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4_Superclass_Superclass):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4_Superclass_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4_Superclass_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkMeshF4DTF4 const *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4_Superclass_SetInput(self, input)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkMeshF4DTF4
        GetInput(self, idx) -> itkMeshF4DTF4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4_Superclass_GetInput(self, *args)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4_Superclass

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4_Superclass in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4_Superclass_swigregister(itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4_Superclass)

def itkAdditiveGaussianNoiseMeshFilterMF4MF4_Superclass_New():
    return itkAdditiveGaussianNoiseMeshFilterMF4MF4_Superclass.New()

class itkAdditiveGaussianNoiseMeshFilterMF4MF4_Superclass(itkAdditiveGaussianNoiseMeshFilterMF4MF4_Superclass_Superclass):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMF4MF4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAdditiveGaussianNoiseMeshFilterMF4MF4_Superclass_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF4MF4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAdditiveGaussianNoiseMeshFilterMF4MF4_Superclass_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF4MF4_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkMeshF4 const *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF4MF4_Superclass_SetInput(self, input)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkMeshF4
        GetInput(self, idx) -> itkMeshF4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF4MF4_Superclass_GetInput(self, *args)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMF4MF4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAdditiveGaussianNoiseMeshFilterMF4MF4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF4MF4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMF4MF4_Superclass

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMF4MF4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMF4MF4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMF4MF4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMF4MF4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMF4MF4_Superclass in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF4MF4_Superclass_swigregister(itkAdditiveGaussianNoiseMeshFilterMF4MF4_Superclass)

def itkMeshD2DTD2_New():
    return itkMeshD2DTD2.New()

class itkMeshD2DTD2(itkPointSetD2DTD2):
    r"""Proxy of C++ itkMeshD2DTD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMeshD2DTD2_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMeshD2DTD2_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2_Clone(self)

    def GetNumberOfCells(self):
        r"""GetNumberOfCells(self) -> unsigned long"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2_GetNumberOfCells(self)

    def PassStructure(self, inputMesh):
        r"""
        PassStructure(self, inputMesh)

        Parameters
        ----------
        inputMesh: itkMeshD2DTD2 *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2_PassStructure(self, inputMesh)

    def GetBoundingBox(self):
        r"""GetBoundingBox(self) -> itkBoundingBoxUL2FMCULPF2"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2_GetBoundingBox(self)

    def SetCellLinks(self, arg0):
        r"""
        SetCellLinks(self, arg0)

        Parameters
        ----------
        arg0: itkMapContainerULSIT *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2_SetCellLinks(self, arg0)

    def GetCellLinks(self, *args):
        r"""
        GetCellLinks(self) -> itkMapContainerULSIT
        GetCellLinks(self) -> itkMapContainerULSIT
        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2_GetCellLinks(self, *args)

    def SetCells(self, arg0):
        r"""
        SetCells(self, arg0)

        Parameters
        ----------
        arg0: itkMapContainerULCIDCTI2FFULULULPF2MCULPF2 *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2_SetCells(self, arg0)

    def SetCellsArray(self, *args):
        r"""
        SetCellsArray(self, arg0)

        Parameters
        ----------
        arg0: itkVectorContainerULUL *

        SetCellsArray(self, arg0, cellType)

        Parameters
        ----------
        arg0: itkVectorContainerULUL *
        cellType: int

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2_SetCellsArray(self, *args)

    def GetCellsArray(self):
        r"""GetCellsArray(self) -> itkVectorContainerULUL"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2_GetCellsArray(self)

    def GetCells(self, *args):
        r"""
        GetCells(self) -> itkMapContainerULCIDCTI2FFULULULPF2MCULPF2
        GetCells(self) -> itkMapContainerULCIDCTI2FFULULULPF2MCULPF2
        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2_GetCells(self, *args)

    def DeleteUnusedCellData(self):
        r"""DeleteUnusedCellData(self)"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2_DeleteUnusedCellData(self)

    def SetCell(self, arg0, arg1):
        r"""
        SetCell(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long
        arg1: itkCellInterfaceDCTI2FFULULULPF2MCULPF2_AutoPointer &

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2_SetCell(self, arg0, arg1)

    def GetCell(self, arg0, arg1):
        r"""
        GetCell(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long
        arg1: itkCellInterfaceDCTI2FFULULULPF2MCULPF2_AutoPointer &

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2_GetCell(self, arg0, arg1)

    def SetCellData(self, *args):
        r"""
        SetCellData(self, arg0)

        Parameters
        ----------
        arg0: itkMapContainerULD *

        SetCellData(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long
        arg1: double

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2_SetCellData(self, *args)

    def GetCellData(self, *args):
        r"""
        GetCellData(self) -> itkMapContainerULD
        GetCellData(self) -> itkMapContainerULD
        GetCellData(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long
        arg1: double *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2_GetCellData(self, *args)

    def SetBoundaryAssignment(self, dimension, cellId, featureId, boundaryId):
        r"""
        SetBoundaryAssignment(self, dimension, cellId, featureId, boundaryId)

        Parameters
        ----------
        dimension: int
        cellId: unsigned long
        featureId: unsigned long
        boundaryId: unsigned long

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2_SetBoundaryAssignment(self, dimension, cellId, featureId, boundaryId)

    def GetBoundaryAssignment(self, dimension, cellId, featureId, boundaryId):
        r"""
        GetBoundaryAssignment(self, dimension, cellId, featureId, boundaryId) -> bool

        Parameters
        ----------
        dimension: int
        cellId: unsigned long
        featureId: unsigned long
        boundaryId: unsigned long *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2_GetBoundaryAssignment(self, dimension, cellId, featureId, boundaryId)

    def RemoveBoundaryAssignment(self, dimension, cellId, featureId):
        r"""
        RemoveBoundaryAssignment(self, dimension, cellId, featureId) -> bool

        Parameters
        ----------
        dimension: int
        cellId: unsigned long
        featureId: unsigned long

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2_RemoveBoundaryAssignment(self, dimension, cellId, featureId)

    def GetNumberOfCellBoundaryFeatures(self, dimension, arg1):
        r"""
        GetNumberOfCellBoundaryFeatures(self, dimension, arg1) -> unsigned long

        Parameters
        ----------
        dimension: int
        arg1: unsigned long

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2_GetNumberOfCellBoundaryFeatures(self, dimension, arg1)

    def GetCellBoundaryFeature(self, dimension, arg1, arg2, arg3):
        r"""
        GetCellBoundaryFeature(self, dimension, arg1, arg2, arg3) -> bool

        Parameters
        ----------
        dimension: int
        arg1: unsigned long
        arg2: unsigned long
        arg3: itkCellInterfaceDCTI2FFULULULPF2MCULPF2_AutoPointer &

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2_GetCellBoundaryFeature(self, dimension, arg1, arg2, arg3)

    def GetCellBoundaryFeatureNeighbors(self, dimension, arg1, arg2, cellSet):
        r"""
        GetCellBoundaryFeatureNeighbors(self, dimension, arg1, arg2, cellSet) -> unsigned long

        Parameters
        ----------
        dimension: int
        arg1: unsigned long
        arg2: unsigned long
        cellSet: std::set< unsigned long,std::less< unsigned long >,std::allocator< unsigned long > > *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2_GetCellBoundaryFeatureNeighbors(self, dimension, arg1, arg2, cellSet)

    def GetCellNeighbors(self, cellId, cellSet):
        r"""
        GetCellNeighbors(self, cellId, cellSet) -> unsigned long

        Parameters
        ----------
        cellId: unsigned long
        cellSet: std::set< unsigned long,std::less< unsigned long >,std::allocator< unsigned long > > *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2_GetCellNeighbors(self, cellId, cellSet)

    def GetAssignedCellBoundaryIfOneExists(self, dimension, arg1, arg2, arg3):
        r"""
        GetAssignedCellBoundaryIfOneExists(self, dimension, arg1, arg2, arg3) -> bool

        Parameters
        ----------
        dimension: int
        arg1: unsigned long
        arg2: unsigned long
        arg3: itkCellInterfaceDCTI2FFULULULPF2MCULPF2_AutoPointer &

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2_GetAssignedCellBoundaryIfOneExists(self, dimension, arg1, arg2, arg3)

    def BuildCellLinks(self):
        r"""BuildCellLinks(self)"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2_BuildCellLinks(self)

    def Accept(self, mv):
        r"""
        Accept(self, mv)

        Parameters
        ----------
        mv: itkCellInterfaceDCTI2FFULULULPF2MCULPF2::MultiVisitor *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2_Accept(self, mv)

    def SetCellsAllocationMethod(self, _arg):
        r"""
        SetCellsAllocationMethod(self, _arg)

        Parameters
        ----------
        _arg: enum itkMeshEnums::MeshClassCellsAllocationMethod

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2_SetCellsAllocationMethod(self, _arg)

    def GetCellsAllocationMethod(self):
        r"""GetCellsAllocationMethod(self) -> itkMeshEnums::MeshClassCellsAllocationMethod const &"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2_GetCellsAllocationMethod(self)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkMeshD2DTD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMeshD2DTD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2_cast(obj)

    def keys(self):
        """
        Return keys related to the mesh's metadata.
        These keys are used in the dictionary resulting from dict(mesh).
        """
        result = ['meshType', 'name', 'dimension', 'numberOfPoints', 'points', 'numberOfPointPixels', 'pointData',
                    'numberOfCells', 'cells', 'numberOfCellPixels', 'cellData', 'cellBufferSize']
        return result

    def __getitem__(self, key):
        """Access metadata keys, see help(mesh.keys), for string keys."""
        import itk
        if isinstance(key, str):
            state = itk.dict_from_mesh(self)
            return state[key]

    def __setitem__(self, key, value):
        """Set metadata keys, see help(image.keys), for string
        keys, otherwise provide NumPy indexing to the pixel buffer
        array view. The index order follows NumPy array indexing
        order, i.e. [z, y, x] versus [x, y, z]."""
        if isinstance(key, str):
            import numpy as np
            if key == 'name':
                self.SetObjectName(value)
            elif key == 'points':
                self.SetPoints(itk.vector_container_from_array(value))
            elif key == 'cells':
                self.SetCellsArray(itk.vector_container_from_array(value))
            elif key == 'pointData':
                self.SetPointData(itk.vector_container_from_array(value))
            elif key == 'cellData':
                self.SetCellData(itk.vector_container_from_array(value))

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.dict_from_mesh(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        import itk
        import numpy as np
        deserialized = itk.mesh_from_dict(state)
        self.__dict__['this'] = deserialized


    def New(*args, **kargs):
        """New() -> itkMeshD2DTD2

        Create a new object of the class itkMeshD2DTD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshD2DTD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeshD2DTD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeshD2DTD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeshD2DTD2 in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD2DTD2_swigregister(itkMeshD2DTD2)

def itkMeshD3DTD3_New():
    return itkMeshD3DTD3.New()

class itkMeshD3DTD3(itkPointSetD3DTD3):
    r"""Proxy of C++ itkMeshD3DTD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMeshD3DTD3_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMeshD3DTD3_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3_Clone(self)

    def GetNumberOfCells(self):
        r"""GetNumberOfCells(self) -> unsigned long"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3_GetNumberOfCells(self)

    def PassStructure(self, inputMesh):
        r"""
        PassStructure(self, inputMesh)

        Parameters
        ----------
        inputMesh: itkMeshD3DTD3 *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3_PassStructure(self, inputMesh)

    def GetBoundingBox(self):
        r"""GetBoundingBox(self) -> itkBoundingBoxUL3FMCULPF3"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3_GetBoundingBox(self)

    def SetCellLinks(self, arg0):
        r"""
        SetCellLinks(self, arg0)

        Parameters
        ----------
        arg0: itkMapContainerULSIT *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3_SetCellLinks(self, arg0)

    def GetCellLinks(self, *args):
        r"""
        GetCellLinks(self) -> itkMapContainerULSIT
        GetCellLinks(self) -> itkMapContainerULSIT
        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3_GetCellLinks(self, *args)

    def SetCells(self, arg0):
        r"""
        SetCells(self, arg0)

        Parameters
        ----------
        arg0: itkMapContainerULCIDCTI3FFULULULPF3MCULPF3 *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3_SetCells(self, arg0)

    def SetCellsArray(self, *args):
        r"""
        SetCellsArray(self, arg0)

        Parameters
        ----------
        arg0: itkVectorContainerULUL *

        SetCellsArray(self, arg0, cellType)

        Parameters
        ----------
        arg0: itkVectorContainerULUL *
        cellType: int

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3_SetCellsArray(self, *args)

    def GetCellsArray(self):
        r"""GetCellsArray(self) -> itkVectorContainerULUL"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3_GetCellsArray(self)

    def GetCells(self, *args):
        r"""
        GetCells(self) -> itkMapContainerULCIDCTI3FFULULULPF3MCULPF3
        GetCells(self) -> itkMapContainerULCIDCTI3FFULULULPF3MCULPF3
        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3_GetCells(self, *args)

    def DeleteUnusedCellData(self):
        r"""DeleteUnusedCellData(self)"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3_DeleteUnusedCellData(self)

    def SetCell(self, arg0, arg1):
        r"""
        SetCell(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long
        arg1: itkCellInterfaceDCTI3FFULULULPF3MCULPF3_AutoPointer &

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3_SetCell(self, arg0, arg1)

    def GetCell(self, arg0, arg1):
        r"""
        GetCell(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long
        arg1: itkCellInterfaceDCTI3FFULULULPF3MCULPF3_AutoPointer &

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3_GetCell(self, arg0, arg1)

    def SetCellData(self, *args):
        r"""
        SetCellData(self, arg0)

        Parameters
        ----------
        arg0: itkMapContainerULD *

        SetCellData(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long
        arg1: double

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3_SetCellData(self, *args)

    def GetCellData(self, *args):
        r"""
        GetCellData(self) -> itkMapContainerULD
        GetCellData(self) -> itkMapContainerULD
        GetCellData(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long
        arg1: double *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3_GetCellData(self, *args)

    def SetBoundaryAssignment(self, dimension, cellId, featureId, boundaryId):
        r"""
        SetBoundaryAssignment(self, dimension, cellId, featureId, boundaryId)

        Parameters
        ----------
        dimension: int
        cellId: unsigned long
        featureId: unsigned long
        boundaryId: unsigned long

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3_SetBoundaryAssignment(self, dimension, cellId, featureId, boundaryId)

    def GetBoundaryAssignment(self, dimension, cellId, featureId, boundaryId):
        r"""
        GetBoundaryAssignment(self, dimension, cellId, featureId, boundaryId) -> bool

        Parameters
        ----------
        dimension: int
        cellId: unsigned long
        featureId: unsigned long
        boundaryId: unsigned long *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3_GetBoundaryAssignment(self, dimension, cellId, featureId, boundaryId)

    def RemoveBoundaryAssignment(self, dimension, cellId, featureId):
        r"""
        RemoveBoundaryAssignment(self, dimension, cellId, featureId) -> bool

        Parameters
        ----------
        dimension: int
        cellId: unsigned long
        featureId: unsigned long

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3_RemoveBoundaryAssignment(self, dimension, cellId, featureId)

    def GetNumberOfCellBoundaryFeatures(self, dimension, arg1):
        r"""
        GetNumberOfCellBoundaryFeatures(self, dimension, arg1) -> unsigned long

        Parameters
        ----------
        dimension: int
        arg1: unsigned long

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3_GetNumberOfCellBoundaryFeatures(self, dimension, arg1)

    def GetCellBoundaryFeature(self, dimension, arg1, arg2, arg3):
        r"""
        GetCellBoundaryFeature(self, dimension, arg1, arg2, arg3) -> bool

        Parameters
        ----------
        dimension: int
        arg1: unsigned long
        arg2: unsigned long
        arg3: itkCellInterfaceDCTI3FFULULULPF3MCULPF3_AutoPointer &

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3_GetCellBoundaryFeature(self, dimension, arg1, arg2, arg3)

    def GetCellBoundaryFeatureNeighbors(self, dimension, arg1, arg2, cellSet):
        r"""
        GetCellBoundaryFeatureNeighbors(self, dimension, arg1, arg2, cellSet) -> unsigned long

        Parameters
        ----------
        dimension: int
        arg1: unsigned long
        arg2: unsigned long
        cellSet: std::set< unsigned long,std::less< unsigned long >,std::allocator< unsigned long > > *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3_GetCellBoundaryFeatureNeighbors(self, dimension, arg1, arg2, cellSet)

    def GetCellNeighbors(self, cellId, cellSet):
        r"""
        GetCellNeighbors(self, cellId, cellSet) -> unsigned long

        Parameters
        ----------
        cellId: unsigned long
        cellSet: std::set< unsigned long,std::less< unsigned long >,std::allocator< unsigned long > > *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3_GetCellNeighbors(self, cellId, cellSet)

    def GetAssignedCellBoundaryIfOneExists(self, dimension, arg1, arg2, arg3):
        r"""
        GetAssignedCellBoundaryIfOneExists(self, dimension, arg1, arg2, arg3) -> bool

        Parameters
        ----------
        dimension: int
        arg1: unsigned long
        arg2: unsigned long
        arg3: itkCellInterfaceDCTI3FFULULULPF3MCULPF3_AutoPointer &

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3_GetAssignedCellBoundaryIfOneExists(self, dimension, arg1, arg2, arg3)

    def BuildCellLinks(self):
        r"""BuildCellLinks(self)"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3_BuildCellLinks(self)

    def Accept(self, mv):
        r"""
        Accept(self, mv)

        Parameters
        ----------
        mv: itkCellInterfaceDCTI3FFULULULPF3MCULPF3::MultiVisitor *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3_Accept(self, mv)

    def SetCellsAllocationMethod(self, _arg):
        r"""
        SetCellsAllocationMethod(self, _arg)

        Parameters
        ----------
        _arg: enum itkMeshEnums::MeshClassCellsAllocationMethod

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3_SetCellsAllocationMethod(self, _arg)

    def GetCellsAllocationMethod(self):
        r"""GetCellsAllocationMethod(self) -> itkMeshEnums::MeshClassCellsAllocationMethod const &"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3_GetCellsAllocationMethod(self)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkMeshD3DTD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMeshD3DTD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3_cast(obj)

    def keys(self):
        """
        Return keys related to the mesh's metadata.
        These keys are used in the dictionary resulting from dict(mesh).
        """
        result = ['meshType', 'name', 'dimension', 'numberOfPoints', 'points', 'numberOfPointPixels', 'pointData',
                    'numberOfCells', 'cells', 'numberOfCellPixels', 'cellData', 'cellBufferSize']
        return result

    def __getitem__(self, key):
        """Access metadata keys, see help(mesh.keys), for string keys."""
        import itk
        if isinstance(key, str):
            state = itk.dict_from_mesh(self)
            return state[key]

    def __setitem__(self, key, value):
        """Set metadata keys, see help(image.keys), for string
        keys, otherwise provide NumPy indexing to the pixel buffer
        array view. The index order follows NumPy array indexing
        order, i.e. [z, y, x] versus [x, y, z]."""
        if isinstance(key, str):
            import numpy as np
            if key == 'name':
                self.SetObjectName(value)
            elif key == 'points':
                self.SetPoints(itk.vector_container_from_array(value))
            elif key == 'cells':
                self.SetCellsArray(itk.vector_container_from_array(value))
            elif key == 'pointData':
                self.SetPointData(itk.vector_container_from_array(value))
            elif key == 'cellData':
                self.SetCellData(itk.vector_container_from_array(value))

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.dict_from_mesh(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        import itk
        import numpy as np
        deserialized = itk.mesh_from_dict(state)
        self.__dict__['this'] = deserialized


    def New(*args, **kargs):
        """New() -> itkMeshD3DTD3

        Create a new object of the class itkMeshD3DTD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshD3DTD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeshD3DTD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeshD3DTD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeshD3DTD3 in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD3DTD3_swigregister(itkMeshD3DTD3)

def itkMeshD4DTD4_New():
    return itkMeshD4DTD4.New()

class itkMeshD4DTD4(itkPointSetD4DTD4):
    r"""Proxy of C++ itkMeshD4DTD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMeshD4DTD4_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD4DTD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMeshD4DTD4_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD4DTD4_Clone(self)

    def GetNumberOfCells(self):
        r"""GetNumberOfCells(self) -> unsigned long"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD4DTD4_GetNumberOfCells(self)

    def PassStructure(self, inputMesh):
        r"""
        PassStructure(self, inputMesh)

        Parameters
        ----------
        inputMesh: itkMeshD4DTD4 *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD4DTD4_PassStructure(self, inputMesh)

    def GetBoundingBox(self):
        r"""GetBoundingBox(self) -> itkBoundingBoxUL4FMCULPF4"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD4DTD4_GetBoundingBox(self)

    def SetCellLinks(self, arg0):
        r"""
        SetCellLinks(self, arg0)

        Parameters
        ----------
        arg0: itkMapContainerULSIT *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD4DTD4_SetCellLinks(self, arg0)

    def GetCellLinks(self, *args):
        r"""
        GetCellLinks(self) -> itkMapContainerULSIT
        GetCellLinks(self) -> itkMapContainerULSIT
        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD4DTD4_GetCellLinks(self, *args)

    def SetCells(self, arg0):
        r"""
        SetCells(self, arg0)

        Parameters
        ----------
        arg0: itkMapContainerULCIDCTI4FFULULULPF4MCULPF4 *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD4DTD4_SetCells(self, arg0)

    def SetCellsArray(self, *args):
        r"""
        SetCellsArray(self, arg0)

        Parameters
        ----------
        arg0: itkVectorContainerULUL *

        SetCellsArray(self, arg0, cellType)

        Parameters
        ----------
        arg0: itkVectorContainerULUL *
        cellType: int

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD4DTD4_SetCellsArray(self, *args)

    def GetCellsArray(self):
        r"""GetCellsArray(self) -> itkVectorContainerULUL"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD4DTD4_GetCellsArray(self)

    def GetCells(self, *args):
        r"""
        GetCells(self) -> itkMapContainerULCIDCTI4FFULULULPF4MCULPF4
        GetCells(self) -> itkMapContainerULCIDCTI4FFULULULPF4MCULPF4
        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD4DTD4_GetCells(self, *args)

    def DeleteUnusedCellData(self):
        r"""DeleteUnusedCellData(self)"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD4DTD4_DeleteUnusedCellData(self)

    def SetCell(self, arg0, arg1):
        r"""
        SetCell(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long
        arg1: itkCellInterfaceDCTI4FFULULULPF4MCULPF4_AutoPointer &

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD4DTD4_SetCell(self, arg0, arg1)

    def GetCell(self, arg0, arg1):
        r"""
        GetCell(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long
        arg1: itkCellInterfaceDCTI4FFULULULPF4MCULPF4_AutoPointer &

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD4DTD4_GetCell(self, arg0, arg1)

    def SetCellData(self, *args):
        r"""
        SetCellData(self, arg0)

        Parameters
        ----------
        arg0: itkMapContainerULD *

        SetCellData(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long
        arg1: double

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD4DTD4_SetCellData(self, *args)

    def GetCellData(self, *args):
        r"""
        GetCellData(self) -> itkMapContainerULD
        GetCellData(self) -> itkMapContainerULD
        GetCellData(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long
        arg1: double *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD4DTD4_GetCellData(self, *args)

    def SetBoundaryAssignment(self, dimension, cellId, featureId, boundaryId):
        r"""
        SetBoundaryAssignment(self, dimension, cellId, featureId, boundaryId)

        Parameters
        ----------
        dimension: int
        cellId: unsigned long
        featureId: unsigned long
        boundaryId: unsigned long

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD4DTD4_SetBoundaryAssignment(self, dimension, cellId, featureId, boundaryId)

    def GetBoundaryAssignment(self, dimension, cellId, featureId, boundaryId):
        r"""
        GetBoundaryAssignment(self, dimension, cellId, featureId, boundaryId) -> bool

        Parameters
        ----------
        dimension: int
        cellId: unsigned long
        featureId: unsigned long
        boundaryId: unsigned long *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD4DTD4_GetBoundaryAssignment(self, dimension, cellId, featureId, boundaryId)

    def RemoveBoundaryAssignment(self, dimension, cellId, featureId):
        r"""
        RemoveBoundaryAssignment(self, dimension, cellId, featureId) -> bool

        Parameters
        ----------
        dimension: int
        cellId: unsigned long
        featureId: unsigned long

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD4DTD4_RemoveBoundaryAssignment(self, dimension, cellId, featureId)

    def GetNumberOfCellBoundaryFeatures(self, dimension, arg1):
        r"""
        GetNumberOfCellBoundaryFeatures(self, dimension, arg1) -> unsigned long

        Parameters
        ----------
        dimension: int
        arg1: unsigned long

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD4DTD4_GetNumberOfCellBoundaryFeatures(self, dimension, arg1)

    def GetCellBoundaryFeature(self, dimension, arg1, arg2, arg3):
        r"""
        GetCellBoundaryFeature(self, dimension, arg1, arg2, arg3) -> bool

        Parameters
        ----------
        dimension: int
        arg1: unsigned long
        arg2: unsigned long
        arg3: itkCellInterfaceDCTI4FFULULULPF4MCULPF4_AutoPointer &

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD4DTD4_GetCellBoundaryFeature(self, dimension, arg1, arg2, arg3)

    def GetCellBoundaryFeatureNeighbors(self, dimension, arg1, arg2, cellSet):
        r"""
        GetCellBoundaryFeatureNeighbors(self, dimension, arg1, arg2, cellSet) -> unsigned long

        Parameters
        ----------
        dimension: int
        arg1: unsigned long
        arg2: unsigned long
        cellSet: std::set< unsigned long,std::less< unsigned long >,std::allocator< unsigned long > > *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD4DTD4_GetCellBoundaryFeatureNeighbors(self, dimension, arg1, arg2, cellSet)

    def GetCellNeighbors(self, cellId, cellSet):
        r"""
        GetCellNeighbors(self, cellId, cellSet) -> unsigned long

        Parameters
        ----------
        cellId: unsigned long
        cellSet: std::set< unsigned long,std::less< unsigned long >,std::allocator< unsigned long > > *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD4DTD4_GetCellNeighbors(self, cellId, cellSet)

    def GetAssignedCellBoundaryIfOneExists(self, dimension, arg1, arg2, arg3):
        r"""
        GetAssignedCellBoundaryIfOneExists(self, dimension, arg1, arg2, arg3) -> bool

        Parameters
        ----------
        dimension: int
        arg1: unsigned long
        arg2: unsigned long
        arg3: itkCellInterfaceDCTI4FFULULULPF4MCULPF4_AutoPointer &

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD4DTD4_GetAssignedCellBoundaryIfOneExists(self, dimension, arg1, arg2, arg3)

    def BuildCellLinks(self):
        r"""BuildCellLinks(self)"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD4DTD4_BuildCellLinks(self)

    def Accept(self, mv):
        r"""
        Accept(self, mv)

        Parameters
        ----------
        mv: itkCellInterfaceDCTI4FFULULULPF4MCULPF4::MultiVisitor *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD4DTD4_Accept(self, mv)

    def SetCellsAllocationMethod(self, _arg):
        r"""
        SetCellsAllocationMethod(self, _arg)

        Parameters
        ----------
        _arg: enum itkMeshEnums::MeshClassCellsAllocationMethod

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD4DTD4_SetCellsAllocationMethod(self, _arg)

    def GetCellsAllocationMethod(self):
        r"""GetCellsAllocationMethod(self) -> itkMeshEnums::MeshClassCellsAllocationMethod const &"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD4DTD4_GetCellsAllocationMethod(self)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkMeshD4DTD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMeshD4DTD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD4DTD4_cast(obj)

    def keys(self):
        """
        Return keys related to the mesh's metadata.
        These keys are used in the dictionary resulting from dict(mesh).
        """
        result = ['meshType', 'name', 'dimension', 'numberOfPoints', 'points', 'numberOfPointPixels', 'pointData',
                    'numberOfCells', 'cells', 'numberOfCellPixels', 'cellData', 'cellBufferSize']
        return result

    def __getitem__(self, key):
        """Access metadata keys, see help(mesh.keys), for string keys."""
        import itk
        if isinstance(key, str):
            state = itk.dict_from_mesh(self)
            return state[key]

    def __setitem__(self, key, value):
        """Set metadata keys, see help(image.keys), for string
        keys, otherwise provide NumPy indexing to the pixel buffer
        array view. The index order follows NumPy array indexing
        order, i.e. [z, y, x] versus [x, y, z]."""
        if isinstance(key, str):
            import numpy as np
            if key == 'name':
                self.SetObjectName(value)
            elif key == 'points':
                self.SetPoints(itk.vector_container_from_array(value))
            elif key == 'cells':
                self.SetCellsArray(itk.vector_container_from_array(value))
            elif key == 'pointData':
                self.SetPointData(itk.vector_container_from_array(value))
            elif key == 'cellData':
                self.SetCellData(itk.vector_container_from_array(value))

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.dict_from_mesh(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        import itk
        import numpy as np
        deserialized = itk.mesh_from_dict(state)
        self.__dict__['this'] = deserialized


    def New(*args, **kargs):
        """New() -> itkMeshD4DTD4

        Create a new object of the class itkMeshD4DTD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshD4DTD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeshD4DTD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeshD4DTD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeshD4DTD4 in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshD4DTD4_swigregister(itkMeshD4DTD4)

def itkMeshF2DTF2_New():
    return itkMeshF2DTF2.New()

class itkMeshF2DTF2(itkPointSetF2DTF2):
    r"""Proxy of C++ itkMeshF2DTF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMeshF2DTF2_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMeshF2DTF2_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2_Clone(self)

    def GetNumberOfCells(self):
        r"""GetNumberOfCells(self) -> unsigned long"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2_GetNumberOfCells(self)

    def PassStructure(self, inputMesh):
        r"""
        PassStructure(self, inputMesh)

        Parameters
        ----------
        inputMesh: itkMeshF2DTF2 *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2_PassStructure(self, inputMesh)

    def GetBoundingBox(self):
        r"""GetBoundingBox(self) -> itkBoundingBoxUL2FMCULPF2"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2_GetBoundingBox(self)

    def SetCellLinks(self, arg0):
        r"""
        SetCellLinks(self, arg0)

        Parameters
        ----------
        arg0: itkMapContainerULSIT *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2_SetCellLinks(self, arg0)

    def GetCellLinks(self, *args):
        r"""
        GetCellLinks(self) -> itkMapContainerULSIT
        GetCellLinks(self) -> itkMapContainerULSIT
        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2_GetCellLinks(self, *args)

    def SetCells(self, arg0):
        r"""
        SetCells(self, arg0)

        Parameters
        ----------
        arg0: itkMapContainerULCIFCTI2FFULULULPF2MCULPF2 *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2_SetCells(self, arg0)

    def SetCellsArray(self, *args):
        r"""
        SetCellsArray(self, arg0)

        Parameters
        ----------
        arg0: itkVectorContainerULUL *

        SetCellsArray(self, arg0, cellType)

        Parameters
        ----------
        arg0: itkVectorContainerULUL *
        cellType: int

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2_SetCellsArray(self, *args)

    def GetCellsArray(self):
        r"""GetCellsArray(self) -> itkVectorContainerULUL"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2_GetCellsArray(self)

    def GetCells(self, *args):
        r"""
        GetCells(self) -> itkMapContainerULCIFCTI2FFULULULPF2MCULPF2
        GetCells(self) -> itkMapContainerULCIFCTI2FFULULULPF2MCULPF2
        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2_GetCells(self, *args)

    def DeleteUnusedCellData(self):
        r"""DeleteUnusedCellData(self)"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2_DeleteUnusedCellData(self)

    def SetCell(self, arg0, arg1):
        r"""
        SetCell(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long
        arg1: itkCellInterfaceFCTI2FFULULULPF2MCULPF2_AutoPointer &

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2_SetCell(self, arg0, arg1)

    def GetCell(self, arg0, arg1):
        r"""
        GetCell(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long
        arg1: itkCellInterfaceFCTI2FFULULULPF2MCULPF2_AutoPointer &

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2_GetCell(self, arg0, arg1)

    def SetCellData(self, *args):
        r"""
        SetCellData(self, arg0)

        Parameters
        ----------
        arg0: itkMapContainerULF *

        SetCellData(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long
        arg1: float

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2_SetCellData(self, *args)

    def GetCellData(self, *args):
        r"""
        GetCellData(self) -> itkMapContainerULF
        GetCellData(self) -> itkMapContainerULF
        GetCellData(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long
        arg1: float *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2_GetCellData(self, *args)

    def SetBoundaryAssignment(self, dimension, cellId, featureId, boundaryId):
        r"""
        SetBoundaryAssignment(self, dimension, cellId, featureId, boundaryId)

        Parameters
        ----------
        dimension: int
        cellId: unsigned long
        featureId: unsigned long
        boundaryId: unsigned long

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2_SetBoundaryAssignment(self, dimension, cellId, featureId, boundaryId)

    def GetBoundaryAssignment(self, dimension, cellId, featureId, boundaryId):
        r"""
        GetBoundaryAssignment(self, dimension, cellId, featureId, boundaryId) -> bool

        Parameters
        ----------
        dimension: int
        cellId: unsigned long
        featureId: unsigned long
        boundaryId: unsigned long *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2_GetBoundaryAssignment(self, dimension, cellId, featureId, boundaryId)

    def RemoveBoundaryAssignment(self, dimension, cellId, featureId):
        r"""
        RemoveBoundaryAssignment(self, dimension, cellId, featureId) -> bool

        Parameters
        ----------
        dimension: int
        cellId: unsigned long
        featureId: unsigned long

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2_RemoveBoundaryAssignment(self, dimension, cellId, featureId)

    def GetNumberOfCellBoundaryFeatures(self, dimension, arg1):
        r"""
        GetNumberOfCellBoundaryFeatures(self, dimension, arg1) -> unsigned long

        Parameters
        ----------
        dimension: int
        arg1: unsigned long

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2_GetNumberOfCellBoundaryFeatures(self, dimension, arg1)

    def GetCellBoundaryFeature(self, dimension, arg1, arg2, arg3):
        r"""
        GetCellBoundaryFeature(self, dimension, arg1, arg2, arg3) -> bool

        Parameters
        ----------
        dimension: int
        arg1: unsigned long
        arg2: unsigned long
        arg3: itkCellInterfaceFCTI2FFULULULPF2MCULPF2_AutoPointer &

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2_GetCellBoundaryFeature(self, dimension, arg1, arg2, arg3)

    def GetCellBoundaryFeatureNeighbors(self, dimension, arg1, arg2, cellSet):
        r"""
        GetCellBoundaryFeatureNeighbors(self, dimension, arg1, arg2, cellSet) -> unsigned long

        Parameters
        ----------
        dimension: int
        arg1: unsigned long
        arg2: unsigned long
        cellSet: std::set< unsigned long,std::less< unsigned long >,std::allocator< unsigned long > > *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2_GetCellBoundaryFeatureNeighbors(self, dimension, arg1, arg2, cellSet)

    def GetCellNeighbors(self, cellId, cellSet):
        r"""
        GetCellNeighbors(self, cellId, cellSet) -> unsigned long

        Parameters
        ----------
        cellId: unsigned long
        cellSet: std::set< unsigned long,std::less< unsigned long >,std::allocator< unsigned long > > *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2_GetCellNeighbors(self, cellId, cellSet)

    def GetAssignedCellBoundaryIfOneExists(self, dimension, arg1, arg2, arg3):
        r"""
        GetAssignedCellBoundaryIfOneExists(self, dimension, arg1, arg2, arg3) -> bool

        Parameters
        ----------
        dimension: int
        arg1: unsigned long
        arg2: unsigned long
        arg3: itkCellInterfaceFCTI2FFULULULPF2MCULPF2_AutoPointer &

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2_GetAssignedCellBoundaryIfOneExists(self, dimension, arg1, arg2, arg3)

    def BuildCellLinks(self):
        r"""BuildCellLinks(self)"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2_BuildCellLinks(self)

    def Accept(self, mv):
        r"""
        Accept(self, mv)

        Parameters
        ----------
        mv: itkCellInterfaceFCTI2FFULULULPF2MCULPF2::MultiVisitor *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2_Accept(self, mv)

    def SetCellsAllocationMethod(self, _arg):
        r"""
        SetCellsAllocationMethod(self, _arg)

        Parameters
        ----------
        _arg: enum itkMeshEnums::MeshClassCellsAllocationMethod

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2_SetCellsAllocationMethod(self, _arg)

    def GetCellsAllocationMethod(self):
        r"""GetCellsAllocationMethod(self) -> itkMeshEnums::MeshClassCellsAllocationMethod const &"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2_GetCellsAllocationMethod(self)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkMeshF2DTF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMeshF2DTF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2_cast(obj)

    def keys(self):
        """
        Return keys related to the mesh's metadata.
        These keys are used in the dictionary resulting from dict(mesh).
        """
        result = ['meshType', 'name', 'dimension', 'numberOfPoints', 'points', 'numberOfPointPixels', 'pointData',
                    'numberOfCells', 'cells', 'numberOfCellPixels', 'cellData', 'cellBufferSize']
        return result

    def __getitem__(self, key):
        """Access metadata keys, see help(mesh.keys), for string keys."""
        import itk
        if isinstance(key, str):
            state = itk.dict_from_mesh(self)
            return state[key]

    def __setitem__(self, key, value):
        """Set metadata keys, see help(image.keys), for string
        keys, otherwise provide NumPy indexing to the pixel buffer
        array view. The index order follows NumPy array indexing
        order, i.e. [z, y, x] versus [x, y, z]."""
        if isinstance(key, str):
            import numpy as np
            if key == 'name':
                self.SetObjectName(value)
            elif key == 'points':
                self.SetPoints(itk.vector_container_from_array(value))
            elif key == 'cells':
                self.SetCellsArray(itk.vector_container_from_array(value))
            elif key == 'pointData':
                self.SetPointData(itk.vector_container_from_array(value))
            elif key == 'cellData':
                self.SetCellData(itk.vector_container_from_array(value))

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.dict_from_mesh(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        import itk
        import numpy as np
        deserialized = itk.mesh_from_dict(state)
        self.__dict__['this'] = deserialized


    def New(*args, **kargs):
        """New() -> itkMeshF2DTF2

        Create a new object of the class itkMeshF2DTF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshF2DTF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeshF2DTF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeshF2DTF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeshF2DTF2 in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF2DTF2_swigregister(itkMeshF2DTF2)

def itkMeshF3DTF3_New():
    return itkMeshF3DTF3.New()

class itkMeshF3DTF3(itkPointSetF3DTF3):
    r"""Proxy of C++ itkMeshF3DTF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMeshF3DTF3_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMeshF3DTF3_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3_Clone(self)

    def GetNumberOfCells(self):
        r"""GetNumberOfCells(self) -> unsigned long"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3_GetNumberOfCells(self)

    def PassStructure(self, inputMesh):
        r"""
        PassStructure(self, inputMesh)

        Parameters
        ----------
        inputMesh: itkMeshF3DTF3 *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3_PassStructure(self, inputMesh)

    def GetBoundingBox(self):
        r"""GetBoundingBox(self) -> itkBoundingBoxUL3FMCULPF3"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3_GetBoundingBox(self)

    def SetCellLinks(self, arg0):
        r"""
        SetCellLinks(self, arg0)

        Parameters
        ----------
        arg0: itkMapContainerULSIT *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3_SetCellLinks(self, arg0)

    def GetCellLinks(self, *args):
        r"""
        GetCellLinks(self) -> itkMapContainerULSIT
        GetCellLinks(self) -> itkMapContainerULSIT
        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3_GetCellLinks(self, *args)

    def SetCells(self, arg0):
        r"""
        SetCells(self, arg0)

        Parameters
        ----------
        arg0: itkMapContainerULCIFCTI3FFULULULPF3MCULPF3 *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3_SetCells(self, arg0)

    def SetCellsArray(self, *args):
        r"""
        SetCellsArray(self, arg0)

        Parameters
        ----------
        arg0: itkVectorContainerULUL *

        SetCellsArray(self, arg0, cellType)

        Parameters
        ----------
        arg0: itkVectorContainerULUL *
        cellType: int

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3_SetCellsArray(self, *args)

    def GetCellsArray(self):
        r"""GetCellsArray(self) -> itkVectorContainerULUL"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3_GetCellsArray(self)

    def GetCells(self, *args):
        r"""
        GetCells(self) -> itkMapContainerULCIFCTI3FFULULULPF3MCULPF3
        GetCells(self) -> itkMapContainerULCIFCTI3FFULULULPF3MCULPF3
        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3_GetCells(self, *args)

    def DeleteUnusedCellData(self):
        r"""DeleteUnusedCellData(self)"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3_DeleteUnusedCellData(self)

    def SetCell(self, arg0, arg1):
        r"""
        SetCell(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long
        arg1: itkCellInterfaceFCTI3FFULULULPF3MCULPF3_AutoPointer &

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3_SetCell(self, arg0, arg1)

    def GetCell(self, arg0, arg1):
        r"""
        GetCell(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long
        arg1: itkCellInterfaceFCTI3FFULULULPF3MCULPF3_AutoPointer &

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3_GetCell(self, arg0, arg1)

    def SetCellData(self, *args):
        r"""
        SetCellData(self, arg0)

        Parameters
        ----------
        arg0: itkMapContainerULF *

        SetCellData(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long
        arg1: float

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3_SetCellData(self, *args)

    def GetCellData(self, *args):
        r"""
        GetCellData(self) -> itkMapContainerULF
        GetCellData(self) -> itkMapContainerULF
        GetCellData(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long
        arg1: float *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3_GetCellData(self, *args)

    def SetBoundaryAssignment(self, dimension, cellId, featureId, boundaryId):
        r"""
        SetBoundaryAssignment(self, dimension, cellId, featureId, boundaryId)

        Parameters
        ----------
        dimension: int
        cellId: unsigned long
        featureId: unsigned long
        boundaryId: unsigned long

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3_SetBoundaryAssignment(self, dimension, cellId, featureId, boundaryId)

    def GetBoundaryAssignment(self, dimension, cellId, featureId, boundaryId):
        r"""
        GetBoundaryAssignment(self, dimension, cellId, featureId, boundaryId) -> bool

        Parameters
        ----------
        dimension: int
        cellId: unsigned long
        featureId: unsigned long
        boundaryId: unsigned long *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3_GetBoundaryAssignment(self, dimension, cellId, featureId, boundaryId)

    def RemoveBoundaryAssignment(self, dimension, cellId, featureId):
        r"""
        RemoveBoundaryAssignment(self, dimension, cellId, featureId) -> bool

        Parameters
        ----------
        dimension: int
        cellId: unsigned long
        featureId: unsigned long

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3_RemoveBoundaryAssignment(self, dimension, cellId, featureId)

    def GetNumberOfCellBoundaryFeatures(self, dimension, arg1):
        r"""
        GetNumberOfCellBoundaryFeatures(self, dimension, arg1) -> unsigned long

        Parameters
        ----------
        dimension: int
        arg1: unsigned long

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3_GetNumberOfCellBoundaryFeatures(self, dimension, arg1)

    def GetCellBoundaryFeature(self, dimension, arg1, arg2, arg3):
        r"""
        GetCellBoundaryFeature(self, dimension, arg1, arg2, arg3) -> bool

        Parameters
        ----------
        dimension: int
        arg1: unsigned long
        arg2: unsigned long
        arg3: itkCellInterfaceFCTI3FFULULULPF3MCULPF3_AutoPointer &

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3_GetCellBoundaryFeature(self, dimension, arg1, arg2, arg3)

    def GetCellBoundaryFeatureNeighbors(self, dimension, arg1, arg2, cellSet):
        r"""
        GetCellBoundaryFeatureNeighbors(self, dimension, arg1, arg2, cellSet) -> unsigned long

        Parameters
        ----------
        dimension: int
        arg1: unsigned long
        arg2: unsigned long
        cellSet: std::set< unsigned long,std::less< unsigned long >,std::allocator< unsigned long > > *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3_GetCellBoundaryFeatureNeighbors(self, dimension, arg1, arg2, cellSet)

    def GetCellNeighbors(self, cellId, cellSet):
        r"""
        GetCellNeighbors(self, cellId, cellSet) -> unsigned long

        Parameters
        ----------
        cellId: unsigned long
        cellSet: std::set< unsigned long,std::less< unsigned long >,std::allocator< unsigned long > > *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3_GetCellNeighbors(self, cellId, cellSet)

    def GetAssignedCellBoundaryIfOneExists(self, dimension, arg1, arg2, arg3):
        r"""
        GetAssignedCellBoundaryIfOneExists(self, dimension, arg1, arg2, arg3) -> bool

        Parameters
        ----------
        dimension: int
        arg1: unsigned long
        arg2: unsigned long
        arg3: itkCellInterfaceFCTI3FFULULULPF3MCULPF3_AutoPointer &

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3_GetAssignedCellBoundaryIfOneExists(self, dimension, arg1, arg2, arg3)

    def BuildCellLinks(self):
        r"""BuildCellLinks(self)"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3_BuildCellLinks(self)

    def Accept(self, mv):
        r"""
        Accept(self, mv)

        Parameters
        ----------
        mv: itkCellInterfaceFCTI3FFULULULPF3MCULPF3::MultiVisitor *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3_Accept(self, mv)

    def SetCellsAllocationMethod(self, _arg):
        r"""
        SetCellsAllocationMethod(self, _arg)

        Parameters
        ----------
        _arg: enum itkMeshEnums::MeshClassCellsAllocationMethod

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3_SetCellsAllocationMethod(self, _arg)

    def GetCellsAllocationMethod(self):
        r"""GetCellsAllocationMethod(self) -> itkMeshEnums::MeshClassCellsAllocationMethod const &"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3_GetCellsAllocationMethod(self)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkMeshF3DTF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMeshF3DTF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3_cast(obj)

    def keys(self):
        """
        Return keys related to the mesh's metadata.
        These keys are used in the dictionary resulting from dict(mesh).
        """
        result = ['meshType', 'name', 'dimension', 'numberOfPoints', 'points', 'numberOfPointPixels', 'pointData',
                    'numberOfCells', 'cells', 'numberOfCellPixels', 'cellData', 'cellBufferSize']
        return result

    def __getitem__(self, key):
        """Access metadata keys, see help(mesh.keys), for string keys."""
        import itk
        if isinstance(key, str):
            state = itk.dict_from_mesh(self)
            return state[key]

    def __setitem__(self, key, value):
        """Set metadata keys, see help(image.keys), for string
        keys, otherwise provide NumPy indexing to the pixel buffer
        array view. The index order follows NumPy array indexing
        order, i.e. [z, y, x] versus [x, y, z]."""
        if isinstance(key, str):
            import numpy as np
            if key == 'name':
                self.SetObjectName(value)
            elif key == 'points':
                self.SetPoints(itk.vector_container_from_array(value))
            elif key == 'cells':
                self.SetCellsArray(itk.vector_container_from_array(value))
            elif key == 'pointData':
                self.SetPointData(itk.vector_container_from_array(value))
            elif key == 'cellData':
                self.SetCellData(itk.vector_container_from_array(value))

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.dict_from_mesh(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        import itk
        import numpy as np
        deserialized = itk.mesh_from_dict(state)
        self.__dict__['this'] = deserialized


    def New(*args, **kargs):
        """New() -> itkMeshF3DTF3

        Create a new object of the class itkMeshF3DTF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshF3DTF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeshF3DTF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeshF3DTF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeshF3DTF3 in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF3DTF3_swigregister(itkMeshF3DTF3)

def itkMeshF4DTF4_New():
    return itkMeshF4DTF4.New()

class itkMeshF4DTF4(itkPointSetF4DTF4):
    r"""Proxy of C++ itkMeshF4DTF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMeshF4DTF4_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF4DTF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMeshF4DTF4_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF4DTF4_Clone(self)

    def GetNumberOfCells(self):
        r"""GetNumberOfCells(self) -> unsigned long"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF4DTF4_GetNumberOfCells(self)

    def PassStructure(self, inputMesh):
        r"""
        PassStructure(self, inputMesh)

        Parameters
        ----------
        inputMesh: itkMeshF4DTF4 *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF4DTF4_PassStructure(self, inputMesh)

    def GetBoundingBox(self):
        r"""GetBoundingBox(self) -> itkBoundingBoxUL4FMCULPF4"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF4DTF4_GetBoundingBox(self)

    def SetCellLinks(self, arg0):
        r"""
        SetCellLinks(self, arg0)

        Parameters
        ----------
        arg0: itkMapContainerULSIT *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF4DTF4_SetCellLinks(self, arg0)

    def GetCellLinks(self, *args):
        r"""
        GetCellLinks(self) -> itkMapContainerULSIT
        GetCellLinks(self) -> itkMapContainerULSIT
        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF4DTF4_GetCellLinks(self, *args)

    def SetCells(self, arg0):
        r"""
        SetCells(self, arg0)

        Parameters
        ----------
        arg0: itkMapContainerULCIFCTI4FFULULULPF4MCULPF4 *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF4DTF4_SetCells(self, arg0)

    def SetCellsArray(self, *args):
        r"""
        SetCellsArray(self, arg0)

        Parameters
        ----------
        arg0: itkVectorContainerULUL *

        SetCellsArray(self, arg0, cellType)

        Parameters
        ----------
        arg0: itkVectorContainerULUL *
        cellType: int

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF4DTF4_SetCellsArray(self, *args)

    def GetCellsArray(self):
        r"""GetCellsArray(self) -> itkVectorContainerULUL"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF4DTF4_GetCellsArray(self)

    def GetCells(self, *args):
        r"""
        GetCells(self) -> itkMapContainerULCIFCTI4FFULULULPF4MCULPF4
        GetCells(self) -> itkMapContainerULCIFCTI4FFULULULPF4MCULPF4
        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF4DTF4_GetCells(self, *args)

    def DeleteUnusedCellData(self):
        r"""DeleteUnusedCellData(self)"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF4DTF4_DeleteUnusedCellData(self)

    def SetCell(self, arg0, arg1):
        r"""
        SetCell(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long
        arg1: itkCellInterfaceFCTI4FFULULULPF4MCULPF4_AutoPointer &

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF4DTF4_SetCell(self, arg0, arg1)

    def GetCell(self, arg0, arg1):
        r"""
        GetCell(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long
        arg1: itkCellInterfaceFCTI4FFULULULPF4MCULPF4_AutoPointer &

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF4DTF4_GetCell(self, arg0, arg1)

    def SetCellData(self, *args):
        r"""
        SetCellData(self, arg0)

        Parameters
        ----------
        arg0: itkMapContainerULF *

        SetCellData(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long
        arg1: float

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF4DTF4_SetCellData(self, *args)

    def GetCellData(self, *args):
        r"""
        GetCellData(self) -> itkMapContainerULF
        GetCellData(self) -> itkMapContainerULF
        GetCellData(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long
        arg1: float *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF4DTF4_GetCellData(self, *args)

    def SetBoundaryAssignment(self, dimension, cellId, featureId, boundaryId):
        r"""
        SetBoundaryAssignment(self, dimension, cellId, featureId, boundaryId)

        Parameters
        ----------
        dimension: int
        cellId: unsigned long
        featureId: unsigned long
        boundaryId: unsigned long

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF4DTF4_SetBoundaryAssignment(self, dimension, cellId, featureId, boundaryId)

    def GetBoundaryAssignment(self, dimension, cellId, featureId, boundaryId):
        r"""
        GetBoundaryAssignment(self, dimension, cellId, featureId, boundaryId) -> bool

        Parameters
        ----------
        dimension: int
        cellId: unsigned long
        featureId: unsigned long
        boundaryId: unsigned long *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF4DTF4_GetBoundaryAssignment(self, dimension, cellId, featureId, boundaryId)

    def RemoveBoundaryAssignment(self, dimension, cellId, featureId):
        r"""
        RemoveBoundaryAssignment(self, dimension, cellId, featureId) -> bool

        Parameters
        ----------
        dimension: int
        cellId: unsigned long
        featureId: unsigned long

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF4DTF4_RemoveBoundaryAssignment(self, dimension, cellId, featureId)

    def GetNumberOfCellBoundaryFeatures(self, dimension, arg1):
        r"""
        GetNumberOfCellBoundaryFeatures(self, dimension, arg1) -> unsigned long

        Parameters
        ----------
        dimension: int
        arg1: unsigned long

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF4DTF4_GetNumberOfCellBoundaryFeatures(self, dimension, arg1)

    def GetCellBoundaryFeature(self, dimension, arg1, arg2, arg3):
        r"""
        GetCellBoundaryFeature(self, dimension, arg1, arg2, arg3) -> bool

        Parameters
        ----------
        dimension: int
        arg1: unsigned long
        arg2: unsigned long
        arg3: itkCellInterfaceFCTI4FFULULULPF4MCULPF4_AutoPointer &

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF4DTF4_GetCellBoundaryFeature(self, dimension, arg1, arg2, arg3)

    def GetCellBoundaryFeatureNeighbors(self, dimension, arg1, arg2, cellSet):
        r"""
        GetCellBoundaryFeatureNeighbors(self, dimension, arg1, arg2, cellSet) -> unsigned long

        Parameters
        ----------
        dimension: int
        arg1: unsigned long
        arg2: unsigned long
        cellSet: std::set< unsigned long,std::less< unsigned long >,std::allocator< unsigned long > > *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF4DTF4_GetCellBoundaryFeatureNeighbors(self, dimension, arg1, arg2, cellSet)

    def GetCellNeighbors(self, cellId, cellSet):
        r"""
        GetCellNeighbors(self, cellId, cellSet) -> unsigned long

        Parameters
        ----------
        cellId: unsigned long
        cellSet: std::set< unsigned long,std::less< unsigned long >,std::allocator< unsigned long > > *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF4DTF4_GetCellNeighbors(self, cellId, cellSet)

    def GetAssignedCellBoundaryIfOneExists(self, dimension, arg1, arg2, arg3):
        r"""
        GetAssignedCellBoundaryIfOneExists(self, dimension, arg1, arg2, arg3) -> bool

        Parameters
        ----------
        dimension: int
        arg1: unsigned long
        arg2: unsigned long
        arg3: itkCellInterfaceFCTI4FFULULULPF4MCULPF4_AutoPointer &

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF4DTF4_GetAssignedCellBoundaryIfOneExists(self, dimension, arg1, arg2, arg3)

    def BuildCellLinks(self):
        r"""BuildCellLinks(self)"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF4DTF4_BuildCellLinks(self)

    def Accept(self, mv):
        r"""
        Accept(self, mv)

        Parameters
        ----------
        mv: itkCellInterfaceFCTI4FFULULULPF4MCULPF4::MultiVisitor *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF4DTF4_Accept(self, mv)

    def SetCellsAllocationMethod(self, _arg):
        r"""
        SetCellsAllocationMethod(self, _arg)

        Parameters
        ----------
        _arg: enum itkMeshEnums::MeshClassCellsAllocationMethod

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF4DTF4_SetCellsAllocationMethod(self, _arg)

    def GetCellsAllocationMethod(self):
        r"""GetCellsAllocationMethod(self) -> itkMeshEnums::MeshClassCellsAllocationMethod const &"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF4DTF4_GetCellsAllocationMethod(self)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkMeshF4DTF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMeshF4DTF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF4DTF4_cast(obj)

    def keys(self):
        """
        Return keys related to the mesh's metadata.
        These keys are used in the dictionary resulting from dict(mesh).
        """
        result = ['meshType', 'name', 'dimension', 'numberOfPoints', 'points', 'numberOfPointPixels', 'pointData',
                    'numberOfCells', 'cells', 'numberOfCellPixels', 'cellData', 'cellBufferSize']
        return result

    def __getitem__(self, key):
        """Access metadata keys, see help(mesh.keys), for string keys."""
        import itk
        if isinstance(key, str):
            state = itk.dict_from_mesh(self)
            return state[key]

    def __setitem__(self, key, value):
        """Set metadata keys, see help(image.keys), for string
        keys, otherwise provide NumPy indexing to the pixel buffer
        array view. The index order follows NumPy array indexing
        order, i.e. [z, y, x] versus [x, y, z]."""
        if isinstance(key, str):
            import numpy as np
            if key == 'name':
                self.SetObjectName(value)
            elif key == 'points':
                self.SetPoints(itk.vector_container_from_array(value))
            elif key == 'cells':
                self.SetCellsArray(itk.vector_container_from_array(value))
            elif key == 'pointData':
                self.SetPointData(itk.vector_container_from_array(value))
            elif key == 'cellData':
                self.SetCellData(itk.vector_container_from_array(value))

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.dict_from_mesh(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        import itk
        import numpy as np
        deserialized = itk.mesh_from_dict(state)
        self.__dict__['this'] = deserialized


    def New(*args, **kargs):
        """New() -> itkMeshF4DTF4

        Create a new object of the class itkMeshF4DTF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshF4DTF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeshF4DTF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeshF4DTF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeshF4DTF4 in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkMeshF4DTF4_swigregister(itkMeshF4DTF4)

def itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_New():
    return itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2.New()

class itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2(itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Superclass):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_Clone(self)

    def GetMean(self):
        r"""GetMean(self) -> float"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_GetMean(self)

    def SetMean(self, _arg):
        r"""
        SetMean(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_SetMean(self, _arg)

    def GetSigma(self):
        r"""GetSigma(self) -> float"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_GetSigma(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_SetSigma(self, _arg)

    def GetSeed(self):
        r"""GetSeed(self) -> int"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_GetSeed(self)

    def SetSeed(self, _arg):
        r"""
        SetSeed(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_SetSeed(self, _arg)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2 in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2_swigregister(itkAdditiveGaussianNoiseMeshFilterMD2DTD2MD2DTD2)

def itkAdditiveGaussianNoiseMeshFilterMD2MD2_New():
    return itkAdditiveGaussianNoiseMeshFilterMD2MD2.New()

class itkAdditiveGaussianNoiseMeshFilterMD2MD2(itkAdditiveGaussianNoiseMeshFilterMD2MD2_Superclass):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMD2MD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAdditiveGaussianNoiseMeshFilterMD2MD2_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2MD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAdditiveGaussianNoiseMeshFilterMD2MD2_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2MD2_Clone(self)

    def GetMean(self):
        r"""GetMean(self) -> float"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2MD2_GetMean(self)

    def SetMean(self, _arg):
        r"""
        SetMean(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2MD2_SetMean(self, _arg)

    def GetSigma(self):
        r"""GetSigma(self) -> float"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2MD2_GetSigma(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2MD2_SetSigma(self, _arg)

    def GetSeed(self):
        r"""GetSeed(self) -> int"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2MD2_GetSeed(self)

    def SetSeed(self, _arg):
        r"""
        SetSeed(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2MD2_SetSeed(self, _arg)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMD2MD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAdditiveGaussianNoiseMeshFilterMD2MD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2MD2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMD2MD2

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMD2MD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMD2MD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMD2MD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMD2MD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMD2MD2 in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD2MD2_swigregister(itkAdditiveGaussianNoiseMeshFilterMD2MD2)

def itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_New():
    return itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3.New()

class itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3(itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Superclass):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_Clone(self)

    def GetMean(self):
        r"""GetMean(self) -> float"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_GetMean(self)

    def SetMean(self, _arg):
        r"""
        SetMean(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_SetMean(self, _arg)

    def GetSigma(self):
        r"""GetSigma(self) -> float"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_GetSigma(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_SetSigma(self, _arg)

    def GetSeed(self):
        r"""GetSeed(self) -> int"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_GetSeed(self)

    def SetSeed(self, _arg):
        r"""
        SetSeed(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_SetSeed(self, _arg)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3 in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3_swigregister(itkAdditiveGaussianNoiseMeshFilterMD3DTD3MD3DTD3)

def itkAdditiveGaussianNoiseMeshFilterMD3MD3_New():
    return itkAdditiveGaussianNoiseMeshFilterMD3MD3.New()

class itkAdditiveGaussianNoiseMeshFilterMD3MD3(itkAdditiveGaussianNoiseMeshFilterMD3MD3_Superclass):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMD3MD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAdditiveGaussianNoiseMeshFilterMD3MD3_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3MD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAdditiveGaussianNoiseMeshFilterMD3MD3_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3MD3_Clone(self)

    def GetMean(self):
        r"""GetMean(self) -> float"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3MD3_GetMean(self)

    def SetMean(self, _arg):
        r"""
        SetMean(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3MD3_SetMean(self, _arg)

    def GetSigma(self):
        r"""GetSigma(self) -> float"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3MD3_GetSigma(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3MD3_SetSigma(self, _arg)

    def GetSeed(self):
        r"""GetSeed(self) -> int"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3MD3_GetSeed(self)

    def SetSeed(self, _arg):
        r"""
        SetSeed(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3MD3_SetSeed(self, _arg)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMD3MD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAdditiveGaussianNoiseMeshFilterMD3MD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3MD3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMD3MD3

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMD3MD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMD3MD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMD3MD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMD3MD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMD3MD3 in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD3MD3_swigregister(itkAdditiveGaussianNoiseMeshFilterMD3MD3)

def itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4_New():
    return itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4.New()

class itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4(itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4_Superclass):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4_Clone(self)

    def GetMean(self):
        r"""GetMean(self) -> float"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4_GetMean(self)

    def SetMean(self, _arg):
        r"""
        SetMean(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4_SetMean(self, _arg)

    def GetSigma(self):
        r"""GetSigma(self) -> float"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4_GetSigma(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4_SetSigma(self, _arg)

    def GetSeed(self):
        r"""GetSeed(self) -> int"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4_GetSeed(self)

    def SetSeed(self, _arg):
        r"""
        SetSeed(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4_SetSeed(self, _arg)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4 in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4_swigregister(itkAdditiveGaussianNoiseMeshFilterMD4DTD4MD4DTD4)

def itkAdditiveGaussianNoiseMeshFilterMD4MD4_New():
    return itkAdditiveGaussianNoiseMeshFilterMD4MD4.New()

class itkAdditiveGaussianNoiseMeshFilterMD4MD4(itkAdditiveGaussianNoiseMeshFilterMD4MD4_Superclass):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMD4MD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAdditiveGaussianNoiseMeshFilterMD4MD4_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD4MD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAdditiveGaussianNoiseMeshFilterMD4MD4_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD4MD4_Clone(self)

    def GetMean(self):
        r"""GetMean(self) -> float"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD4MD4_GetMean(self)

    def SetMean(self, _arg):
        r"""
        SetMean(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD4MD4_SetMean(self, _arg)

    def GetSigma(self):
        r"""GetSigma(self) -> float"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD4MD4_GetSigma(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD4MD4_SetSigma(self, _arg)

    def GetSeed(self):
        r"""GetSeed(self) -> int"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD4MD4_GetSeed(self)

    def SetSeed(self, _arg):
        r"""
        SetSeed(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD4MD4_SetSeed(self, _arg)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMD4MD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAdditiveGaussianNoiseMeshFilterMD4MD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD4MD4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMD4MD4

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMD4MD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMD4MD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMD4MD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMD4MD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMD4MD4 in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMD4MD4_swigregister(itkAdditiveGaussianNoiseMeshFilterMD4MD4)

def itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_New():
    return itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2.New()

class itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2(itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Superclass):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_Clone(self)

    def GetMean(self):
        r"""GetMean(self) -> float"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_GetMean(self)

    def SetMean(self, _arg):
        r"""
        SetMean(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_SetMean(self, _arg)

    def GetSigma(self):
        r"""GetSigma(self) -> float"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_GetSigma(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_SetSigma(self, _arg)

    def GetSeed(self):
        r"""GetSeed(self) -> int"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_GetSeed(self)

    def SetSeed(self, _arg):
        r"""
        SetSeed(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_SetSeed(self, _arg)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2 in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2_swigregister(itkAdditiveGaussianNoiseMeshFilterMF2DTF2MF2DTF2)

def itkAdditiveGaussianNoiseMeshFilterMF2MF2_New():
    return itkAdditiveGaussianNoiseMeshFilterMF2MF2.New()

class itkAdditiveGaussianNoiseMeshFilterMF2MF2(itkAdditiveGaussianNoiseMeshFilterMF2MF2_Superclass):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMF2MF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAdditiveGaussianNoiseMeshFilterMF2MF2_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2MF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAdditiveGaussianNoiseMeshFilterMF2MF2_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2MF2_Clone(self)

    def GetMean(self):
        r"""GetMean(self) -> float"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2MF2_GetMean(self)

    def SetMean(self, _arg):
        r"""
        SetMean(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2MF2_SetMean(self, _arg)

    def GetSigma(self):
        r"""GetSigma(self) -> float"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2MF2_GetSigma(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2MF2_SetSigma(self, _arg)

    def GetSeed(self):
        r"""GetSeed(self) -> int"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2MF2_GetSeed(self)

    def SetSeed(self, _arg):
        r"""
        SetSeed(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2MF2_SetSeed(self, _arg)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMF2MF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAdditiveGaussianNoiseMeshFilterMF2MF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2MF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMF2MF2

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMF2MF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMF2MF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMF2MF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMF2MF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMF2MF2 in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF2MF2_swigregister(itkAdditiveGaussianNoiseMeshFilterMF2MF2)

def itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_New():
    return itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3.New()

class itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3(itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Superclass):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_Clone(self)

    def GetMean(self):
        r"""GetMean(self) -> float"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_GetMean(self)

    def SetMean(self, _arg):
        r"""
        SetMean(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_SetMean(self, _arg)

    def GetSigma(self):
        r"""GetSigma(self) -> float"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_GetSigma(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_SetSigma(self, _arg)

    def GetSeed(self):
        r"""GetSeed(self) -> int"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_GetSeed(self)

    def SetSeed(self, _arg):
        r"""
        SetSeed(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_SetSeed(self, _arg)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3 in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3_swigregister(itkAdditiveGaussianNoiseMeshFilterMF3DTF3MF3DTF3)

def itkAdditiveGaussianNoiseMeshFilterMF3MF3_New():
    return itkAdditiveGaussianNoiseMeshFilterMF3MF3.New()

class itkAdditiveGaussianNoiseMeshFilterMF3MF3(itkAdditiveGaussianNoiseMeshFilterMF3MF3_Superclass):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMF3MF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAdditiveGaussianNoiseMeshFilterMF3MF3_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3MF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAdditiveGaussianNoiseMeshFilterMF3MF3_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3MF3_Clone(self)

    def GetMean(self):
        r"""GetMean(self) -> float"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3MF3_GetMean(self)

    def SetMean(self, _arg):
        r"""
        SetMean(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3MF3_SetMean(self, _arg)

    def GetSigma(self):
        r"""GetSigma(self) -> float"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3MF3_GetSigma(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3MF3_SetSigma(self, _arg)

    def GetSeed(self):
        r"""GetSeed(self) -> int"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3MF3_GetSeed(self)

    def SetSeed(self, _arg):
        r"""
        SetSeed(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3MF3_SetSeed(self, _arg)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMF3MF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAdditiveGaussianNoiseMeshFilterMF3MF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3MF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMF3MF3

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMF3MF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMF3MF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMF3MF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMF3MF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMF3MF3 in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF3MF3_swigregister(itkAdditiveGaussianNoiseMeshFilterMF3MF3)

def itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4_New():
    return itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4.New()

class itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4(itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4_Superclass):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4_Clone(self)

    def GetMean(self):
        r"""GetMean(self) -> float"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4_GetMean(self)

    def SetMean(self, _arg):
        r"""
        SetMean(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4_SetMean(self, _arg)

    def GetSigma(self):
        r"""GetSigma(self) -> float"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4_GetSigma(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4_SetSigma(self, _arg)

    def GetSeed(self):
        r"""GetSeed(self) -> int"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4_GetSeed(self)

    def SetSeed(self, _arg):
        r"""
        SetSeed(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4_SetSeed(self, _arg)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4 in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4_swigregister(itkAdditiveGaussianNoiseMeshFilterMF4DTF4MF4DTF4)

def itkAdditiveGaussianNoiseMeshFilterMF4MF4_New():
    return itkAdditiveGaussianNoiseMeshFilterMF4MF4.New()

class itkAdditiveGaussianNoiseMeshFilterMF4MF4(itkAdditiveGaussianNoiseMeshFilterMF4MF4_Superclass):
    r"""Proxy of C++ itkAdditiveGaussianNoiseMeshFilterMF4MF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAdditiveGaussianNoiseMeshFilterMF4MF4_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF4MF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAdditiveGaussianNoiseMeshFilterMF4MF4_Pointer"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF4MF4_Clone(self)

    def GetMean(self):
        r"""GetMean(self) -> float"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF4MF4_GetMean(self)

    def SetMean(self, _arg):
        r"""
        SetMean(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF4MF4_SetMean(self, _arg)

    def GetSigma(self):
        r"""GetSigma(self) -> float"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF4MF4_GetSigma(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF4MF4_SetSigma(self, _arg)

    def GetSeed(self):
        r"""GetSeed(self) -> int"""
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF4MF4_GetSeed(self)

    def SetSeed(self, _arg):
        r"""
        SetSeed(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF4MF4_SetSeed(self, _arg)
    __swig_destroy__ = _itkAdditiveGaussianNoiseMeshFilterPython.delete_itkAdditiveGaussianNoiseMeshFilterMF4MF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAdditiveGaussianNoiseMeshFilterMF4MF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF4MF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseMeshFilterMF4MF4

        Create a new object of the class itkAdditiveGaussianNoiseMeshFilterMF4MF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseMeshFilterMF4MF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseMeshFilterMF4MF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdditiveGaussianNoiseMeshFilterMF4MF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseMeshFilterMF4MF4 in _itkAdditiveGaussianNoiseMeshFilterPython:
_itkAdditiveGaussianNoiseMeshFilterPython.itkAdditiveGaussianNoiseMeshFilterMF4MF4_swigregister(itkAdditiveGaussianNoiseMeshFilterMF4MF4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def mesh_to_mesh_filter(*args,  output: itkt.Mesh=...,**kwargs)-> itkt.MeshSourceReturn:
    """Functional interface for MeshToMeshFilter"""
    import itk

    kwarg_typehints = { 'output':output }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.MeshToMeshFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def mesh_to_mesh_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.MeshNoise.MeshToMeshFilter
    mesh_to_mesh_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    mesh_to_mesh_filter.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def mesh_source(*args,  output: itkt.Mesh=...,**kwargs):
    """Functional interface for MeshSource"""
    import itk

    kwarg_typehints = { 'output':output }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.MeshSource.New(*args, **kwargs)

    return instance.__internal_call__()

def mesh_source_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.MeshNoise.MeshSource
    mesh_source.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    mesh_source.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def additive_gaussian_noise_mesh_filter(*args: itkt.Mesh,  mean: float=..., sigma: float=..., seed: int=..., output: itkt.Mesh=...,**kwargs)-> itkt.MeshSourceReturn:
    """Functional interface for AdditiveGaussianNoiseMeshFilter"""
    import itk

    kwarg_typehints = { 'mean':mean,'sigma':sigma,'seed':seed,'output':output }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.AdditiveGaussianNoiseMeshFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def additive_gaussian_noise_mesh_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.MeshNoise.AdditiveGaussianNoiseMeshFilter
    additive_gaussian_noise_mesh_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    additive_gaussian_noise_mesh_filter.__doc__ = filter_object.__doc__




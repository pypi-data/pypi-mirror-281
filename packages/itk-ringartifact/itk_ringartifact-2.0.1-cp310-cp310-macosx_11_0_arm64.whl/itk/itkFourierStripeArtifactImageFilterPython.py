# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _RingArtifactPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkFourierStripeArtifactImageFilterPython
else:
    import _itkFourierStripeArtifactImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkImageRegionPython
import itk.itkSizePython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageSourceCommonPython

def itkFourierStripeArtifactImageFilterID2_New():
    return itkFourierStripeArtifactImageFilterID2.New()

class itkFourierStripeArtifactImageFilterID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""Proxy of C++ itkFourierStripeArtifactImageFilterID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkFourierStripeArtifactImageFilterID2_Pointer"""
        return _itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkFourierStripeArtifactImageFilterID2_Pointer"""
        return _itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterID2_Clone(self)

    def SetDirection(self, _arg):
        r"""
        SetDirection(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterID2_SetDirection(self, _arg)

    def GetDirection(self):
        r"""GetDirection(self) -> unsigned int"""
        return _itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterID2_GetDirection(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterID2_SetSigma(self, _arg)

    def GetSigma(self):
        r"""GetSigma(self) -> double"""
        return _itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterID2_GetSigma(self)

    def SetStartFrequency(self, _arg):
        r"""
        SetStartFrequency(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterID2_SetStartFrequency(self, _arg)

    def GetStartFrequency(self):
        r"""GetStartFrequency(self) -> double"""
        return _itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterID2_GetStartFrequency(self)
    __swig_destroy__ = _itkFourierStripeArtifactImageFilterPython.delete_itkFourierStripeArtifactImageFilterID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFourierStripeArtifactImageFilterID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkFourierStripeArtifactImageFilterID2

        Create a new object of the class itkFourierStripeArtifactImageFilterID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFourierStripeArtifactImageFilterID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFourierStripeArtifactImageFilterID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFourierStripeArtifactImageFilterID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFourierStripeArtifactImageFilterID2 in _itkFourierStripeArtifactImageFilterPython:
_itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterID2_swigregister(itkFourierStripeArtifactImageFilterID2)

def itkFourierStripeArtifactImageFilterID3_New():
    return itkFourierStripeArtifactImageFilterID3.New()

class itkFourierStripeArtifactImageFilterID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""Proxy of C++ itkFourierStripeArtifactImageFilterID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkFourierStripeArtifactImageFilterID3_Pointer"""
        return _itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkFourierStripeArtifactImageFilterID3_Pointer"""
        return _itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterID3_Clone(self)

    def SetDirection(self, _arg):
        r"""
        SetDirection(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterID3_SetDirection(self, _arg)

    def GetDirection(self):
        r"""GetDirection(self) -> unsigned int"""
        return _itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterID3_GetDirection(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterID3_SetSigma(self, _arg)

    def GetSigma(self):
        r"""GetSigma(self) -> double"""
        return _itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterID3_GetSigma(self)

    def SetStartFrequency(self, _arg):
        r"""
        SetStartFrequency(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterID3_SetStartFrequency(self, _arg)

    def GetStartFrequency(self):
        r"""GetStartFrequency(self) -> double"""
        return _itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterID3_GetStartFrequency(self)
    __swig_destroy__ = _itkFourierStripeArtifactImageFilterPython.delete_itkFourierStripeArtifactImageFilterID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFourierStripeArtifactImageFilterID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkFourierStripeArtifactImageFilterID3

        Create a new object of the class itkFourierStripeArtifactImageFilterID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFourierStripeArtifactImageFilterID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFourierStripeArtifactImageFilterID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFourierStripeArtifactImageFilterID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFourierStripeArtifactImageFilterID3 in _itkFourierStripeArtifactImageFilterPython:
_itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterID3_swigregister(itkFourierStripeArtifactImageFilterID3)

def itkFourierStripeArtifactImageFilterID4_New():
    return itkFourierStripeArtifactImageFilterID4.New()

class itkFourierStripeArtifactImageFilterID4(itk.itkImageToImageFilterAPython.itkImageToImageFilterID4ID4):
    r"""Proxy of C++ itkFourierStripeArtifactImageFilterID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkFourierStripeArtifactImageFilterID4_Pointer"""
        return _itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkFourierStripeArtifactImageFilterID4_Pointer"""
        return _itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterID4_Clone(self)

    def SetDirection(self, _arg):
        r"""
        SetDirection(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterID4_SetDirection(self, _arg)

    def GetDirection(self):
        r"""GetDirection(self) -> unsigned int"""
        return _itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterID4_GetDirection(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterID4_SetSigma(self, _arg)

    def GetSigma(self):
        r"""GetSigma(self) -> double"""
        return _itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterID4_GetSigma(self)

    def SetStartFrequency(self, _arg):
        r"""
        SetStartFrequency(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterID4_SetStartFrequency(self, _arg)

    def GetStartFrequency(self):
        r"""GetStartFrequency(self) -> double"""
        return _itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterID4_GetStartFrequency(self)
    __swig_destroy__ = _itkFourierStripeArtifactImageFilterPython.delete_itkFourierStripeArtifactImageFilterID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFourierStripeArtifactImageFilterID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkFourierStripeArtifactImageFilterID4

        Create a new object of the class itkFourierStripeArtifactImageFilterID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFourierStripeArtifactImageFilterID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFourierStripeArtifactImageFilterID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFourierStripeArtifactImageFilterID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFourierStripeArtifactImageFilterID4 in _itkFourierStripeArtifactImageFilterPython:
_itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterID4_swigregister(itkFourierStripeArtifactImageFilterID4)

def itkFourierStripeArtifactImageFilterIF2_New():
    return itkFourierStripeArtifactImageFilterIF2.New()

class itkFourierStripeArtifactImageFilterIF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""Proxy of C++ itkFourierStripeArtifactImageFilterIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkFourierStripeArtifactImageFilterIF2_Pointer"""
        return _itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterIF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkFourierStripeArtifactImageFilterIF2_Pointer"""
        return _itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterIF2_Clone(self)

    def SetDirection(self, _arg):
        r"""
        SetDirection(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterIF2_SetDirection(self, _arg)

    def GetDirection(self):
        r"""GetDirection(self) -> unsigned int"""
        return _itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterIF2_GetDirection(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterIF2_SetSigma(self, _arg)

    def GetSigma(self):
        r"""GetSigma(self) -> double"""
        return _itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterIF2_GetSigma(self)

    def SetStartFrequency(self, _arg):
        r"""
        SetStartFrequency(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterIF2_SetStartFrequency(self, _arg)

    def GetStartFrequency(self):
        r"""GetStartFrequency(self) -> double"""
        return _itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterIF2_GetStartFrequency(self)
    __swig_destroy__ = _itkFourierStripeArtifactImageFilterPython.delete_itkFourierStripeArtifactImageFilterIF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFourierStripeArtifactImageFilterIF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterIF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkFourierStripeArtifactImageFilterIF2

        Create a new object of the class itkFourierStripeArtifactImageFilterIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFourierStripeArtifactImageFilterIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFourierStripeArtifactImageFilterIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFourierStripeArtifactImageFilterIF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFourierStripeArtifactImageFilterIF2 in _itkFourierStripeArtifactImageFilterPython:
_itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterIF2_swigregister(itkFourierStripeArtifactImageFilterIF2)

def itkFourierStripeArtifactImageFilterIF3_New():
    return itkFourierStripeArtifactImageFilterIF3.New()

class itkFourierStripeArtifactImageFilterIF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""Proxy of C++ itkFourierStripeArtifactImageFilterIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkFourierStripeArtifactImageFilterIF3_Pointer"""
        return _itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterIF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkFourierStripeArtifactImageFilterIF3_Pointer"""
        return _itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterIF3_Clone(self)

    def SetDirection(self, _arg):
        r"""
        SetDirection(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterIF3_SetDirection(self, _arg)

    def GetDirection(self):
        r"""GetDirection(self) -> unsigned int"""
        return _itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterIF3_GetDirection(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterIF3_SetSigma(self, _arg)

    def GetSigma(self):
        r"""GetSigma(self) -> double"""
        return _itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterIF3_GetSigma(self)

    def SetStartFrequency(self, _arg):
        r"""
        SetStartFrequency(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterIF3_SetStartFrequency(self, _arg)

    def GetStartFrequency(self):
        r"""GetStartFrequency(self) -> double"""
        return _itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterIF3_GetStartFrequency(self)
    __swig_destroy__ = _itkFourierStripeArtifactImageFilterPython.delete_itkFourierStripeArtifactImageFilterIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFourierStripeArtifactImageFilterIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterIF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkFourierStripeArtifactImageFilterIF3

        Create a new object of the class itkFourierStripeArtifactImageFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFourierStripeArtifactImageFilterIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFourierStripeArtifactImageFilterIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFourierStripeArtifactImageFilterIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFourierStripeArtifactImageFilterIF3 in _itkFourierStripeArtifactImageFilterPython:
_itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterIF3_swigregister(itkFourierStripeArtifactImageFilterIF3)

def itkFourierStripeArtifactImageFilterIF4_New():
    return itkFourierStripeArtifactImageFilterIF4.New()

class itkFourierStripeArtifactImageFilterIF4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF4IF4):
    r"""Proxy of C++ itkFourierStripeArtifactImageFilterIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkFourierStripeArtifactImageFilterIF4_Pointer"""
        return _itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterIF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkFourierStripeArtifactImageFilterIF4_Pointer"""
        return _itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterIF4_Clone(self)

    def SetDirection(self, _arg):
        r"""
        SetDirection(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterIF4_SetDirection(self, _arg)

    def GetDirection(self):
        r"""GetDirection(self) -> unsigned int"""
        return _itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterIF4_GetDirection(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterIF4_SetSigma(self, _arg)

    def GetSigma(self):
        r"""GetSigma(self) -> double"""
        return _itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterIF4_GetSigma(self)

    def SetStartFrequency(self, _arg):
        r"""
        SetStartFrequency(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterIF4_SetStartFrequency(self, _arg)

    def GetStartFrequency(self):
        r"""GetStartFrequency(self) -> double"""
        return _itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterIF4_GetStartFrequency(self)
    __swig_destroy__ = _itkFourierStripeArtifactImageFilterPython.delete_itkFourierStripeArtifactImageFilterIF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFourierStripeArtifactImageFilterIF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterIF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkFourierStripeArtifactImageFilterIF4

        Create a new object of the class itkFourierStripeArtifactImageFilterIF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFourierStripeArtifactImageFilterIF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFourierStripeArtifactImageFilterIF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFourierStripeArtifactImageFilterIF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFourierStripeArtifactImageFilterIF4 in _itkFourierStripeArtifactImageFilterPython:
_itkFourierStripeArtifactImageFilterPython.itkFourierStripeArtifactImageFilterIF4_swigregister(itkFourierStripeArtifactImageFilterIF4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def fourier_stripe_artifact_image_filter(*args: itkt.ImageLike,  direction: int=..., sigma: float=..., start_frequency: float=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for FourierStripeArtifactImageFilter"""
    import itk

    kwarg_typehints = { 'direction':direction,'sigma':sigma,'start_frequency':start_frequency }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.FourierStripeArtifactImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def fourier_stripe_artifact_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RingArtifact.FourierStripeArtifactImageFilter
    fourier_stripe_artifact_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    fourier_stripe_artifact_image_filter.__doc__ = filter_object.__doc__




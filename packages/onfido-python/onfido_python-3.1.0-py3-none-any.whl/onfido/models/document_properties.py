# coding: utf-8

"""
    Onfido API v3.6

    The Onfido API (v3.6)

    The version of the OpenAPI document: v3.6
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from onfido.models.document_properties_address_lines import DocumentPropertiesAddressLines
from onfido.models.document_properties_barcode_inner import DocumentPropertiesBarcodeInner
from onfido.models.document_properties_document_classification import DocumentPropertiesDocumentClassification
from onfido.models.document_properties_document_numbers_inner import DocumentPropertiesDocumentNumbersInner
from onfido.models.document_properties_driving_licence_information import DocumentPropertiesDrivingLicenceInformation
from onfido.models.document_properties_extracted_data import DocumentPropertiesExtractedData
from onfido.models.document_properties_nfc import DocumentPropertiesNfc
from typing import Optional, Set
from typing_extensions import Self

class DocumentProperties(BaseModel):
    """
    DocumentProperties
    """ # noqa: E501
    date_of_birth: Optional[date] = None
    date_of_expiry: Optional[date] = None
    document_numbers: Optional[List[DocumentPropertiesDocumentNumbersInner]] = None
    document_type: Optional[StrictStr] = None
    first_name: Optional[StrictStr] = None
    gender: Optional[StrictStr] = None
    issuing_country: Optional[StrictStr] = None
    last_name: Optional[StrictStr] = None
    nationality: Optional[StrictStr] = None
    issuing_state: Optional[StrictStr] = None
    issuing_date: Optional[date] = None
    categorisation: Optional[StrictStr] = None
    mrz_line1: Optional[StrictStr] = None
    mrz_line2: Optional[StrictStr] = None
    mrz_line3: Optional[StrictStr] = None
    address: Optional[StrictStr] = None
    place_of_birth: Optional[StrictStr] = None
    spouse_name: Optional[StrictStr] = None
    widow_name: Optional[StrictStr] = None
    alias_name: Optional[StrictStr] = None
    issuing_authority: Optional[StrictStr] = None
    real_id_compliance: Optional[StrictBool] = None
    address_lines: Optional[DocumentPropertiesAddressLines] = None
    barcode: Optional[List[DocumentPropertiesBarcodeInner]] = None
    nfc: Optional[DocumentPropertiesNfc] = None
    driving_licence_information: Optional[DocumentPropertiesDrivingLicenceInformation] = None
    document_classification: Optional[DocumentPropertiesDocumentClassification] = None
    extracted_data: Optional[DocumentPropertiesExtractedData] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["date_of_birth", "date_of_expiry", "document_numbers", "document_type", "first_name", "gender", "issuing_country", "last_name", "nationality", "issuing_state", "issuing_date", "categorisation", "mrz_line1", "mrz_line2", "mrz_line3", "address", "place_of_birth", "spouse_name", "widow_name", "alias_name", "issuing_authority", "real_id_compliance", "address_lines", "barcode", "nfc", "driving_licence_information", "document_classification", "extracted_data"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DocumentProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in document_numbers (list)
        _items = []
        if self.document_numbers:
            for _item in self.document_numbers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['document_numbers'] = _items
        # override the default output from pydantic by calling `to_dict()` of address_lines
        if self.address_lines:
            _dict['address_lines'] = self.address_lines.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in barcode (list)
        _items = []
        if self.barcode:
            for _item in self.barcode:
                if _item:
                    _items.append(_item.to_dict())
            _dict['barcode'] = _items
        # override the default output from pydantic by calling `to_dict()` of nfc
        if self.nfc:
            _dict['nfc'] = self.nfc.to_dict()
        # override the default output from pydantic by calling `to_dict()` of driving_licence_information
        if self.driving_licence_information:
            _dict['driving_licence_information'] = self.driving_licence_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of document_classification
        if self.document_classification:
            _dict['document_classification'] = self.document_classification.to_dict()
        # override the default output from pydantic by calling `to_dict()` of extracted_data
        if self.extracted_data:
            _dict['extracted_data'] = self.extracted_data.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DocumentProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "date_of_birth": obj.get("date_of_birth"),
            "date_of_expiry": obj.get("date_of_expiry"),
            "document_numbers": [DocumentPropertiesDocumentNumbersInner.from_dict(_item) for _item in obj["document_numbers"]] if obj.get("document_numbers") is not None else None,
            "document_type": obj.get("document_type"),
            "first_name": obj.get("first_name"),
            "gender": obj.get("gender"),
            "issuing_country": obj.get("issuing_country"),
            "last_name": obj.get("last_name"),
            "nationality": obj.get("nationality"),
            "issuing_state": obj.get("issuing_state"),
            "issuing_date": obj.get("issuing_date"),
            "categorisation": obj.get("categorisation"),
            "mrz_line1": obj.get("mrz_line1"),
            "mrz_line2": obj.get("mrz_line2"),
            "mrz_line3": obj.get("mrz_line3"),
            "address": obj.get("address"),
            "place_of_birth": obj.get("place_of_birth"),
            "spouse_name": obj.get("spouse_name"),
            "widow_name": obj.get("widow_name"),
            "alias_name": obj.get("alias_name"),
            "issuing_authority": obj.get("issuing_authority"),
            "real_id_compliance": obj.get("real_id_compliance"),
            "address_lines": DocumentPropertiesAddressLines.from_dict(obj["address_lines"]) if obj.get("address_lines") is not None else None,
            "barcode": [DocumentPropertiesBarcodeInner.from_dict(_item) for _item in obj["barcode"]] if obj.get("barcode") is not None else None,
            "nfc": DocumentPropertiesNfc.from_dict(obj["nfc"]) if obj.get("nfc") is not None else None,
            "driving_licence_information": DocumentPropertiesDrivingLicenceInformation.from_dict(obj["driving_licence_information"]) if obj.get("driving_licence_information") is not None else None,
            "document_classification": DocumentPropertiesDocumentClassification.from_dict(obj["document_classification"]) if obj.get("document_classification") is not None else None,
            "extracted_data": DocumentPropertiesExtractedData.from_dict(obj["extracted_data"]) if obj.get("extracted_data") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj



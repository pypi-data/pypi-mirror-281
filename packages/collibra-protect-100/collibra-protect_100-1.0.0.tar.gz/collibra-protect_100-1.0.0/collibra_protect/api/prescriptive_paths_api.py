# coding: utf-8

"""
    Collibra Protect API

    This API allows you to manage groups.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from collibra_protect.api_client import ApiClient


class PrescriptivePathsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_prescriptive_path(self, body, **kwargs):  # noqa: E501
        """Add a new prescriptive path  # noqa: E501

        Adds a new prescriptive path.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_prescriptive_path(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddPrescriptivePathRequest body: The prescriptive path to add. (required)
        :return: PrescriptivePath
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_prescriptive_path_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_prescriptive_path_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def add_prescriptive_path_with_http_info(self, body, **kwargs):  # noqa: E501
        """Add a new prescriptive path  # noqa: E501

        Adds a new prescriptive path.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_prescriptive_path_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddPrescriptivePathRequest body: The prescriptive path to add. (required)
        :return: PrescriptivePath
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_prescriptive_path" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_prescriptive_path`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/prescriptivePaths', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PrescriptivePath',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_prescriptive_path(self, asset_type_id, **kwargs):  # noqa: E501
        """Delete a prescriptive path  # noqa: E501

        Deletes the prescriptive path for the asset type with the specified ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_prescriptive_path(asset_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_type_id: The universally unique identifier (UUID) of the asset type. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_prescriptive_path_with_http_info(asset_type_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_prescriptive_path_with_http_info(asset_type_id, **kwargs)  # noqa: E501
            return data

    def delete_prescriptive_path_with_http_info(self, asset_type_id, **kwargs):  # noqa: E501
        """Delete a prescriptive path  # noqa: E501

        Deletes the prescriptive path for the asset type with the specified ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_prescriptive_path_with_http_info(asset_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_type_id: The universally unique identifier (UUID) of the asset type. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['asset_type_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_prescriptive_path" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'asset_type_id' is set
        if ('asset_type_id' not in params or
                params['asset_type_id'] is None):
            raise ValueError("Missing the required parameter `asset_type_id` when calling `delete_prescriptive_path`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'asset_type_id' in params:
            path_params['assetTypeId'] = params['asset_type_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/prescriptivePaths/{assetTypeId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_prescriptive_path(self, asset_type_id, **kwargs):  # noqa: E501
        """Retrieve a prescriptive path  # noqa: E501

        Returns the prescriptive path information for the asset type with the specified ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_prescriptive_path(asset_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_type_id: The universally unique identifier (UUID) of the asset type. (required)
        :return: PrescriptivePath
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_prescriptive_path_with_http_info(asset_type_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_prescriptive_path_with_http_info(asset_type_id, **kwargs)  # noqa: E501
            return data

    def get_prescriptive_path_with_http_info(self, asset_type_id, **kwargs):  # noqa: E501
        """Retrieve a prescriptive path  # noqa: E501

        Returns the prescriptive path information for the asset type with the specified ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_prescriptive_path_with_http_info(asset_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_type_id: The universally unique identifier (UUID) of the asset type. (required)
        :return: PrescriptivePath
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['asset_type_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_prescriptive_path" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'asset_type_id' is set
        if ('asset_type_id' not in params or
                params['asset_type_id'] is None):
            raise ValueError("Missing the required parameter `asset_type_id` when calling `get_prescriptive_path`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'asset_type_id' in params:
            path_params['assetTypeId'] = params['asset_type_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/prescriptivePaths/{assetTypeId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PrescriptivePath',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_asset_types(self, **kwargs):  # noqa: E501
        """List asset types supported by Protect  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_asset_types(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: AssetTypeIds
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_asset_types_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_asset_types_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_asset_types_with_http_info(self, **kwargs):  # noqa: E501
        """List asset types supported by Protect  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_asset_types_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: AssetTypeIds
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_asset_types" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/prescriptivePaths/assetTypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssetTypeIds',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_prescriptive_paths(self, **kwargs):  # noqa: E501
        """Lists all available prescriptive paths  # noqa: E501

        Returns the prescriptive path information for the asset type with the specified ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_prescriptive_paths(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: PrescriptivePaths
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_prescriptive_paths_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_prescriptive_paths_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_prescriptive_paths_with_http_info(self, **kwargs):  # noqa: E501
        """Lists all available prescriptive paths  # noqa: E501

        Returns the prescriptive path information for the asset type with the specified ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_prescriptive_paths_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: PrescriptivePaths
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_prescriptive_paths" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/prescriptivePaths', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PrescriptivePaths',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_prescriptive_path(self, body, asset_type_id, **kwargs):  # noqa: E501
        """Update a prescriptive path  # noqa: E501

        Updates the prescriptive path for the asset type with the specified ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_prescriptive_path(body, asset_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ChangePrescriptivePathRequest body: The changes that need to be applied to the prescriptive path. (required)
        :param str asset_type_id: The universally unique identifier (UUID) of the asset type. (required)
        :return: PrescriptivePath
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_prescriptive_path_with_http_info(body, asset_type_id, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_prescriptive_path_with_http_info(body, asset_type_id, **kwargs)  # noqa: E501
            return data

    def patch_prescriptive_path_with_http_info(self, body, asset_type_id, **kwargs):  # noqa: E501
        """Update a prescriptive path  # noqa: E501

        Updates the prescriptive path for the asset type with the specified ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_prescriptive_path_with_http_info(body, asset_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ChangePrescriptivePathRequest body: The changes that need to be applied to the prescriptive path. (required)
        :param str asset_type_id: The universally unique identifier (UUID) of the asset type. (required)
        :return: PrescriptivePath
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'asset_type_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_prescriptive_path" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_prescriptive_path`")  # noqa: E501
        # verify the required parameter 'asset_type_id' is set
        if ('asset_type_id' not in params or
                params['asset_type_id'] is None):
            raise ValueError("Missing the required parameter `asset_type_id` when calling `patch_prescriptive_path`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'asset_type_id' in params:
            path_params['assetTypeId'] = params['asset_type_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/prescriptivePaths/{assetTypeId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PrescriptivePath',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

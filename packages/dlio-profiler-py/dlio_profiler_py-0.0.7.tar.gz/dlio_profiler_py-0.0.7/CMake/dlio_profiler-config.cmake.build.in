set(DLIO_PROFILER_FOUND TRUE)

# Include directories
set(DLIO_PROFILER_INCLUDE_DIRS "@CMAKE_INCLUDE_OUTPUT_DIRECTORY@")
if (NOT IS_DIRECTORY "${DLIO_PROFILER_INCLUDE_DIRS}")
    set(DLIO_PROFILER_FOUND FALSE)
endif ()
#message(STATUS "DLIO_PROFILER_INCLUDE_DIRS: " ${DLIO_PROFILER_INCLUDE_DIRS})
get_filename_component(DLIO_PROFILER_ROOT_DIR ${DLIO_PROFILER_INCLUDE_DIRS}/.. ABSOLUTE)
#message(STATUS "DLIO_PROFILER_ROOT_DIR: " ${DLIO_PROFILER_ROOT_DIR})
set(DLIO_PROFILER_LIBRARY_PATH "@CMAKE_LIBRARY_OUTPUT_DIRECTORY@")
#message(STATUS "DLIO_PROFILER_LIBRARY_PATH: " ${DLIO_PROFILER_LIBRARY_PATH})
link_directories(${DLIO_PROFILER_LIBRARY_PATH})
set(DLIO_PROFILER_LIBRARIES "-L${DLIO_PROFILER_LIBRARY_PATH} -ldlio_profiler")
set(DLIO_PROFILER_DEFINITIONS "")
if (NOT TARGET dlio_profiler)
    add_library(dlio_profiler INTERFACE)
    target_include_directories(dlio_profiler INTERFACE ${DLIO_PROFILER_INCLUDE_DIRS})
    target_link_libraries(dlio_profiler INTERFACE ${DLIO_PROFILER_LIBRARIES})
    target_compile_options(dlio_profiler INTERFACE ${DLIO_PROFILER_DEFINITIONS})
endif()
if (NOT TARGET dlio_profiler::dlio_profiler)
    add_library(dlio_profiler::dlio_profiler ALIAS dlio_profiler)
    include(FindPackageHandleStandardArgs)
    find_package_handle_standard_args(dlio_profiler
            REQUIRED_VARS DLIO_PROFILER_FOUND DLIO_PROFILER_INCLUDE_DIRS DLIO_PROFILER_LIBRARIES)
endif ()
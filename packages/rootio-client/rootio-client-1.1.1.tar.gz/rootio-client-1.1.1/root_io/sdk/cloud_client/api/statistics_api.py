# coding: utf-8

"""
    Root.io API

    This is the API documentation for Root.io.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import Optional
from typing_extensions import Annotated
from root_io.sdk.cloud_client.models.finding_status_count import FindingStatusCount
from root_io.sdk.cloud_client.models.severity_count import SeverityCount

from root_io.sdk.cloud_client.api_client import ApiClient, RequestSerialized
from root_io.sdk.cloud_client.api_response import ApiResponse
from root_io.sdk.cloud_client.rest import RESTResponseType


class StatisticsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    async def orgs_org_id_stats_security_findings_by_severity_get(
        self,
        org_id: Annotated[StrictStr, Field(description="Organization ID")],
        release_tag: Annotated[Optional[StrictStr], Field(description="Release tag")] = None,
        package_name: Annotated[Optional[StrictStr], Field(description="Package name")] = None,
        package_ecosystem: Annotated[Optional[StrictStr], Field(description="Package ecosystem")] = None,
        package_distro: Annotated[Optional[StrictStr], Field(description="Package distro")] = None,
        severity: Annotated[Optional[StrictStr], Field(description="Security finding severity")] = None,
        image_repo: Annotated[Optional[StrictStr], Field(description="Image repository")] = None,
        external_vuln_id: Annotated[Optional[StrictStr], Field(description="External vulnerability ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SeverityCount:
        """Count security findings by severity in an organization

        Retrieves the count of security findings by severity by a given organization.

        :param org_id: Organization ID (required)
        :type org_id: str
        :param release_tag: Release tag
        :type release_tag: str
        :param package_name: Package name
        :type package_name: str
        :param package_ecosystem: Package ecosystem
        :type package_ecosystem: str
        :param package_distro: Package distro
        :type package_distro: str
        :param severity: Security finding severity
        :type severity: str
        :param image_repo: Image repository
        :type image_repo: str
        :param external_vuln_id: External vulnerability ID
        :type external_vuln_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._orgs_org_id_stats_security_findings_by_severity_get_serialize(
            org_id=org_id,
            release_tag=release_tag,
            package_name=package_name,
            package_ecosystem=package_ecosystem,
            package_distro=package_distro,
            severity=severity,
            image_repo=image_repo,
            external_vuln_id=external_vuln_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SeverityCount",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def orgs_org_id_stats_security_findings_by_severity_get_with_http_info(
        self,
        org_id: Annotated[StrictStr, Field(description="Organization ID")],
        release_tag: Annotated[Optional[StrictStr], Field(description="Release tag")] = None,
        package_name: Annotated[Optional[StrictStr], Field(description="Package name")] = None,
        package_ecosystem: Annotated[Optional[StrictStr], Field(description="Package ecosystem")] = None,
        package_distro: Annotated[Optional[StrictStr], Field(description="Package distro")] = None,
        severity: Annotated[Optional[StrictStr], Field(description="Security finding severity")] = None,
        image_repo: Annotated[Optional[StrictStr], Field(description="Image repository")] = None,
        external_vuln_id: Annotated[Optional[StrictStr], Field(description="External vulnerability ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SeverityCount]:
        """Count security findings by severity in an organization

        Retrieves the count of security findings by severity by a given organization.

        :param org_id: Organization ID (required)
        :type org_id: str
        :param release_tag: Release tag
        :type release_tag: str
        :param package_name: Package name
        :type package_name: str
        :param package_ecosystem: Package ecosystem
        :type package_ecosystem: str
        :param package_distro: Package distro
        :type package_distro: str
        :param severity: Security finding severity
        :type severity: str
        :param image_repo: Image repository
        :type image_repo: str
        :param external_vuln_id: External vulnerability ID
        :type external_vuln_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._orgs_org_id_stats_security_findings_by_severity_get_serialize(
            org_id=org_id,
            release_tag=release_tag,
            package_name=package_name,
            package_ecosystem=package_ecosystem,
            package_distro=package_distro,
            severity=severity,
            image_repo=image_repo,
            external_vuln_id=external_vuln_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SeverityCount",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def orgs_org_id_stats_security_findings_by_severity_get_without_preload_content(
        self,
        org_id: Annotated[StrictStr, Field(description="Organization ID")],
        release_tag: Annotated[Optional[StrictStr], Field(description="Release tag")] = None,
        package_name: Annotated[Optional[StrictStr], Field(description="Package name")] = None,
        package_ecosystem: Annotated[Optional[StrictStr], Field(description="Package ecosystem")] = None,
        package_distro: Annotated[Optional[StrictStr], Field(description="Package distro")] = None,
        severity: Annotated[Optional[StrictStr], Field(description="Security finding severity")] = None,
        image_repo: Annotated[Optional[StrictStr], Field(description="Image repository")] = None,
        external_vuln_id: Annotated[Optional[StrictStr], Field(description="External vulnerability ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Count security findings by severity in an organization

        Retrieves the count of security findings by severity by a given organization.

        :param org_id: Organization ID (required)
        :type org_id: str
        :param release_tag: Release tag
        :type release_tag: str
        :param package_name: Package name
        :type package_name: str
        :param package_ecosystem: Package ecosystem
        :type package_ecosystem: str
        :param package_distro: Package distro
        :type package_distro: str
        :param severity: Security finding severity
        :type severity: str
        :param image_repo: Image repository
        :type image_repo: str
        :param external_vuln_id: External vulnerability ID
        :type external_vuln_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._orgs_org_id_stats_security_findings_by_severity_get_serialize(
            org_id=org_id,
            release_tag=release_tag,
            package_name=package_name,
            package_ecosystem=package_ecosystem,
            package_distro=package_distro,
            severity=severity,
            image_repo=image_repo,
            external_vuln_id=external_vuln_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SeverityCount",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _orgs_org_id_stats_security_findings_by_severity_get_serialize(
        self,
        org_id,
        release_tag,
        package_name,
        package_ecosystem,
        package_distro,
        severity,
        image_repo,
        external_vuln_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if org_id is not None:
            _path_params['org_id'] = org_id
        # process the query parameters
        if release_tag is not None:
            
            _query_params.append(('release_tag', release_tag))
            
        if package_name is not None:
            
            _query_params.append(('package_name', package_name))
            
        if package_ecosystem is not None:
            
            _query_params.append(('package_ecosystem', package_ecosystem))
            
        if package_distro is not None:
            
            _query_params.append(('package_distro', package_distro))
            
        if severity is not None:
            
            _query_params.append(('severity', severity))
            
        if image_repo is not None:
            
            _query_params.append(('image_repo', image_repo))
            
        if external_vuln_id is not None:
            
            _query_params.append(('external_vuln_id', external_vuln_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/orgs/{org_id}/stats/security_findings_by_severity',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    async def orgs_org_id_stats_security_findings_by_status_get(
        self,
        org_id: Annotated[StrictStr, Field(description="Organization ID")],
        release_tag: Annotated[Optional[StrictStr], Field(description="Release tag")] = None,
        package_name: Annotated[Optional[StrictStr], Field(description="Package name")] = None,
        package_ecosystem: Annotated[Optional[StrictStr], Field(description="Package ecosystem")] = None,
        package_distro: Annotated[Optional[StrictStr], Field(description="Package distro")] = None,
        severity: Annotated[Optional[StrictStr], Field(description="Security finding severity")] = None,
        image_repo: Annotated[Optional[StrictStr], Field(description="Image repository")] = None,
        external_vuln_id: Annotated[Optional[StrictStr], Field(description="External vulnerability ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FindingStatusCount:
        """Count security findings by status in an organization

        Retrieves the count of security findings by status by a given organization.

        :param org_id: Organization ID (required)
        :type org_id: str
        :param release_tag: Release tag
        :type release_tag: str
        :param package_name: Package name
        :type package_name: str
        :param package_ecosystem: Package ecosystem
        :type package_ecosystem: str
        :param package_distro: Package distro
        :type package_distro: str
        :param severity: Security finding severity
        :type severity: str
        :param image_repo: Image repository
        :type image_repo: str
        :param external_vuln_id: External vulnerability ID
        :type external_vuln_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._orgs_org_id_stats_security_findings_by_status_get_serialize(
            org_id=org_id,
            release_tag=release_tag,
            package_name=package_name,
            package_ecosystem=package_ecosystem,
            package_distro=package_distro,
            severity=severity,
            image_repo=image_repo,
            external_vuln_id=external_vuln_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FindingStatusCount",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def orgs_org_id_stats_security_findings_by_status_get_with_http_info(
        self,
        org_id: Annotated[StrictStr, Field(description="Organization ID")],
        release_tag: Annotated[Optional[StrictStr], Field(description="Release tag")] = None,
        package_name: Annotated[Optional[StrictStr], Field(description="Package name")] = None,
        package_ecosystem: Annotated[Optional[StrictStr], Field(description="Package ecosystem")] = None,
        package_distro: Annotated[Optional[StrictStr], Field(description="Package distro")] = None,
        severity: Annotated[Optional[StrictStr], Field(description="Security finding severity")] = None,
        image_repo: Annotated[Optional[StrictStr], Field(description="Image repository")] = None,
        external_vuln_id: Annotated[Optional[StrictStr], Field(description="External vulnerability ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FindingStatusCount]:
        """Count security findings by status in an organization

        Retrieves the count of security findings by status by a given organization.

        :param org_id: Organization ID (required)
        :type org_id: str
        :param release_tag: Release tag
        :type release_tag: str
        :param package_name: Package name
        :type package_name: str
        :param package_ecosystem: Package ecosystem
        :type package_ecosystem: str
        :param package_distro: Package distro
        :type package_distro: str
        :param severity: Security finding severity
        :type severity: str
        :param image_repo: Image repository
        :type image_repo: str
        :param external_vuln_id: External vulnerability ID
        :type external_vuln_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._orgs_org_id_stats_security_findings_by_status_get_serialize(
            org_id=org_id,
            release_tag=release_tag,
            package_name=package_name,
            package_ecosystem=package_ecosystem,
            package_distro=package_distro,
            severity=severity,
            image_repo=image_repo,
            external_vuln_id=external_vuln_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FindingStatusCount",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def orgs_org_id_stats_security_findings_by_status_get_without_preload_content(
        self,
        org_id: Annotated[StrictStr, Field(description="Organization ID")],
        release_tag: Annotated[Optional[StrictStr], Field(description="Release tag")] = None,
        package_name: Annotated[Optional[StrictStr], Field(description="Package name")] = None,
        package_ecosystem: Annotated[Optional[StrictStr], Field(description="Package ecosystem")] = None,
        package_distro: Annotated[Optional[StrictStr], Field(description="Package distro")] = None,
        severity: Annotated[Optional[StrictStr], Field(description="Security finding severity")] = None,
        image_repo: Annotated[Optional[StrictStr], Field(description="Image repository")] = None,
        external_vuln_id: Annotated[Optional[StrictStr], Field(description="External vulnerability ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Count security findings by status in an organization

        Retrieves the count of security findings by status by a given organization.

        :param org_id: Organization ID (required)
        :type org_id: str
        :param release_tag: Release tag
        :type release_tag: str
        :param package_name: Package name
        :type package_name: str
        :param package_ecosystem: Package ecosystem
        :type package_ecosystem: str
        :param package_distro: Package distro
        :type package_distro: str
        :param severity: Security finding severity
        :type severity: str
        :param image_repo: Image repository
        :type image_repo: str
        :param external_vuln_id: External vulnerability ID
        :type external_vuln_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._orgs_org_id_stats_security_findings_by_status_get_serialize(
            org_id=org_id,
            release_tag=release_tag,
            package_name=package_name,
            package_ecosystem=package_ecosystem,
            package_distro=package_distro,
            severity=severity,
            image_repo=image_repo,
            external_vuln_id=external_vuln_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FindingStatusCount",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _orgs_org_id_stats_security_findings_by_status_get_serialize(
        self,
        org_id,
        release_tag,
        package_name,
        package_ecosystem,
        package_distro,
        severity,
        image_repo,
        external_vuln_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if org_id is not None:
            _path_params['org_id'] = org_id
        # process the query parameters
        if release_tag is not None:
            
            _query_params.append(('release_tag', release_tag))
            
        if package_name is not None:
            
            _query_params.append(('package_name', package_name))
            
        if package_ecosystem is not None:
            
            _query_params.append(('package_ecosystem', package_ecosystem))
            
        if package_distro is not None:
            
            _query_params.append(('package_distro', package_distro))
            
        if severity is not None:
            
            _query_params.append(('severity', severity))
            
        if image_repo is not None:
            
            _query_params.append(('image_repo', image_repo))
            
        if external_vuln_id is not None:
            
            _query_params.append(('external_vuln_id', external_vuln_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/orgs/{org_id}/stats/security_findings_by_status',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    async def orgs_org_id_stats_unique_vulnerabilities_by_severity_get(
        self,
        org_id: Annotated[StrictStr, Field(description="Organization ID")],
        release_tag: Annotated[Optional[StrictStr], Field(description="Release tag")] = None,
        package_name: Annotated[Optional[StrictStr], Field(description="Package name")] = None,
        package_ecosystem: Annotated[Optional[StrictStr], Field(description="Package ecosystem")] = None,
        package_distro: Annotated[Optional[StrictStr], Field(description="Package distro")] = None,
        severity: Annotated[Optional[StrictStr], Field(description="Security finding severity")] = None,
        image_repo: Annotated[Optional[StrictStr], Field(description="Image repository")] = None,
        external_vuln_id: Annotated[Optional[StrictStr], Field(description="External vulnerability ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SeverityCount:
        """Count unique vulnerabilities by severity in an organization

        Retrieves the count of security findings by severity by a given organization.

        :param org_id: Organization ID (required)
        :type org_id: str
        :param release_tag: Release tag
        :type release_tag: str
        :param package_name: Package name
        :type package_name: str
        :param package_ecosystem: Package ecosystem
        :type package_ecosystem: str
        :param package_distro: Package distro
        :type package_distro: str
        :param severity: Security finding severity
        :type severity: str
        :param image_repo: Image repository
        :type image_repo: str
        :param external_vuln_id: External vulnerability ID
        :type external_vuln_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._orgs_org_id_stats_unique_vulnerabilities_by_severity_get_serialize(
            org_id=org_id,
            release_tag=release_tag,
            package_name=package_name,
            package_ecosystem=package_ecosystem,
            package_distro=package_distro,
            severity=severity,
            image_repo=image_repo,
            external_vuln_id=external_vuln_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SeverityCount",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def orgs_org_id_stats_unique_vulnerabilities_by_severity_get_with_http_info(
        self,
        org_id: Annotated[StrictStr, Field(description="Organization ID")],
        release_tag: Annotated[Optional[StrictStr], Field(description="Release tag")] = None,
        package_name: Annotated[Optional[StrictStr], Field(description="Package name")] = None,
        package_ecosystem: Annotated[Optional[StrictStr], Field(description="Package ecosystem")] = None,
        package_distro: Annotated[Optional[StrictStr], Field(description="Package distro")] = None,
        severity: Annotated[Optional[StrictStr], Field(description="Security finding severity")] = None,
        image_repo: Annotated[Optional[StrictStr], Field(description="Image repository")] = None,
        external_vuln_id: Annotated[Optional[StrictStr], Field(description="External vulnerability ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SeverityCount]:
        """Count unique vulnerabilities by severity in an organization

        Retrieves the count of security findings by severity by a given organization.

        :param org_id: Organization ID (required)
        :type org_id: str
        :param release_tag: Release tag
        :type release_tag: str
        :param package_name: Package name
        :type package_name: str
        :param package_ecosystem: Package ecosystem
        :type package_ecosystem: str
        :param package_distro: Package distro
        :type package_distro: str
        :param severity: Security finding severity
        :type severity: str
        :param image_repo: Image repository
        :type image_repo: str
        :param external_vuln_id: External vulnerability ID
        :type external_vuln_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._orgs_org_id_stats_unique_vulnerabilities_by_severity_get_serialize(
            org_id=org_id,
            release_tag=release_tag,
            package_name=package_name,
            package_ecosystem=package_ecosystem,
            package_distro=package_distro,
            severity=severity,
            image_repo=image_repo,
            external_vuln_id=external_vuln_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SeverityCount",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def orgs_org_id_stats_unique_vulnerabilities_by_severity_get_without_preload_content(
        self,
        org_id: Annotated[StrictStr, Field(description="Organization ID")],
        release_tag: Annotated[Optional[StrictStr], Field(description="Release tag")] = None,
        package_name: Annotated[Optional[StrictStr], Field(description="Package name")] = None,
        package_ecosystem: Annotated[Optional[StrictStr], Field(description="Package ecosystem")] = None,
        package_distro: Annotated[Optional[StrictStr], Field(description="Package distro")] = None,
        severity: Annotated[Optional[StrictStr], Field(description="Security finding severity")] = None,
        image_repo: Annotated[Optional[StrictStr], Field(description="Image repository")] = None,
        external_vuln_id: Annotated[Optional[StrictStr], Field(description="External vulnerability ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Count unique vulnerabilities by severity in an organization

        Retrieves the count of security findings by severity by a given organization.

        :param org_id: Organization ID (required)
        :type org_id: str
        :param release_tag: Release tag
        :type release_tag: str
        :param package_name: Package name
        :type package_name: str
        :param package_ecosystem: Package ecosystem
        :type package_ecosystem: str
        :param package_distro: Package distro
        :type package_distro: str
        :param severity: Security finding severity
        :type severity: str
        :param image_repo: Image repository
        :type image_repo: str
        :param external_vuln_id: External vulnerability ID
        :type external_vuln_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._orgs_org_id_stats_unique_vulnerabilities_by_severity_get_serialize(
            org_id=org_id,
            release_tag=release_tag,
            package_name=package_name,
            package_ecosystem=package_ecosystem,
            package_distro=package_distro,
            severity=severity,
            image_repo=image_repo,
            external_vuln_id=external_vuln_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SeverityCount",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _orgs_org_id_stats_unique_vulnerabilities_by_severity_get_serialize(
        self,
        org_id,
        release_tag,
        package_name,
        package_ecosystem,
        package_distro,
        severity,
        image_repo,
        external_vuln_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if org_id is not None:
            _path_params['org_id'] = org_id
        # process the query parameters
        if release_tag is not None:
            
            _query_params.append(('release_tag', release_tag))
            
        if package_name is not None:
            
            _query_params.append(('package_name', package_name))
            
        if package_ecosystem is not None:
            
            _query_params.append(('package_ecosystem', package_ecosystem))
            
        if package_distro is not None:
            
            _query_params.append(('package_distro', package_distro))
            
        if severity is not None:
            
            _query_params.append(('severity', severity))
            
        if image_repo is not None:
            
            _query_params.append(('image_repo', image_repo))
            
        if external_vuln_id is not None:
            
            _query_params.append(('external_vuln_id', external_vuln_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/orgs/{org_id}/stats/unique_vulnerabilities_by_severity',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    async def workspaces_workspace_id_stats_security_findings_by_severity_get(
        self,
        workspace_id: Annotated[StrictStr, Field(description="Workspace ID")],
        release_tag: Annotated[Optional[StrictStr], Field(description="Release tag")] = None,
        package_name: Annotated[Optional[StrictStr], Field(description="Package name")] = None,
        package_ecosystem: Annotated[Optional[StrictStr], Field(description="Package ecosystem")] = None,
        package_distro: Annotated[Optional[StrictStr], Field(description="Package distro")] = None,
        severity: Annotated[Optional[StrictStr], Field(description="Security finding severity")] = None,
        image_repo: Annotated[Optional[StrictStr], Field(description="Image repository")] = None,
        external_vuln_id: Annotated[Optional[StrictStr], Field(description="External vulnerability ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SeverityCount:
        """Count security findings by severity in a workspace

        Retrieves the count of security findings by severity by a given workspace.

        :param workspace_id: Workspace ID (required)
        :type workspace_id: str
        :param release_tag: Release tag
        :type release_tag: str
        :param package_name: Package name
        :type package_name: str
        :param package_ecosystem: Package ecosystem
        :type package_ecosystem: str
        :param package_distro: Package distro
        :type package_distro: str
        :param severity: Security finding severity
        :type severity: str
        :param image_repo: Image repository
        :type image_repo: str
        :param external_vuln_id: External vulnerability ID
        :type external_vuln_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._workspaces_workspace_id_stats_security_findings_by_severity_get_serialize(
            workspace_id=workspace_id,
            release_tag=release_tag,
            package_name=package_name,
            package_ecosystem=package_ecosystem,
            package_distro=package_distro,
            severity=severity,
            image_repo=image_repo,
            external_vuln_id=external_vuln_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SeverityCount",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def workspaces_workspace_id_stats_security_findings_by_severity_get_with_http_info(
        self,
        workspace_id: Annotated[StrictStr, Field(description="Workspace ID")],
        release_tag: Annotated[Optional[StrictStr], Field(description="Release tag")] = None,
        package_name: Annotated[Optional[StrictStr], Field(description="Package name")] = None,
        package_ecosystem: Annotated[Optional[StrictStr], Field(description="Package ecosystem")] = None,
        package_distro: Annotated[Optional[StrictStr], Field(description="Package distro")] = None,
        severity: Annotated[Optional[StrictStr], Field(description="Security finding severity")] = None,
        image_repo: Annotated[Optional[StrictStr], Field(description="Image repository")] = None,
        external_vuln_id: Annotated[Optional[StrictStr], Field(description="External vulnerability ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SeverityCount]:
        """Count security findings by severity in a workspace

        Retrieves the count of security findings by severity by a given workspace.

        :param workspace_id: Workspace ID (required)
        :type workspace_id: str
        :param release_tag: Release tag
        :type release_tag: str
        :param package_name: Package name
        :type package_name: str
        :param package_ecosystem: Package ecosystem
        :type package_ecosystem: str
        :param package_distro: Package distro
        :type package_distro: str
        :param severity: Security finding severity
        :type severity: str
        :param image_repo: Image repository
        :type image_repo: str
        :param external_vuln_id: External vulnerability ID
        :type external_vuln_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._workspaces_workspace_id_stats_security_findings_by_severity_get_serialize(
            workspace_id=workspace_id,
            release_tag=release_tag,
            package_name=package_name,
            package_ecosystem=package_ecosystem,
            package_distro=package_distro,
            severity=severity,
            image_repo=image_repo,
            external_vuln_id=external_vuln_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SeverityCount",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def workspaces_workspace_id_stats_security_findings_by_severity_get_without_preload_content(
        self,
        workspace_id: Annotated[StrictStr, Field(description="Workspace ID")],
        release_tag: Annotated[Optional[StrictStr], Field(description="Release tag")] = None,
        package_name: Annotated[Optional[StrictStr], Field(description="Package name")] = None,
        package_ecosystem: Annotated[Optional[StrictStr], Field(description="Package ecosystem")] = None,
        package_distro: Annotated[Optional[StrictStr], Field(description="Package distro")] = None,
        severity: Annotated[Optional[StrictStr], Field(description="Security finding severity")] = None,
        image_repo: Annotated[Optional[StrictStr], Field(description="Image repository")] = None,
        external_vuln_id: Annotated[Optional[StrictStr], Field(description="External vulnerability ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Count security findings by severity in a workspace

        Retrieves the count of security findings by severity by a given workspace.

        :param workspace_id: Workspace ID (required)
        :type workspace_id: str
        :param release_tag: Release tag
        :type release_tag: str
        :param package_name: Package name
        :type package_name: str
        :param package_ecosystem: Package ecosystem
        :type package_ecosystem: str
        :param package_distro: Package distro
        :type package_distro: str
        :param severity: Security finding severity
        :type severity: str
        :param image_repo: Image repository
        :type image_repo: str
        :param external_vuln_id: External vulnerability ID
        :type external_vuln_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._workspaces_workspace_id_stats_security_findings_by_severity_get_serialize(
            workspace_id=workspace_id,
            release_tag=release_tag,
            package_name=package_name,
            package_ecosystem=package_ecosystem,
            package_distro=package_distro,
            severity=severity,
            image_repo=image_repo,
            external_vuln_id=external_vuln_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SeverityCount",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _workspaces_workspace_id_stats_security_findings_by_severity_get_serialize(
        self,
        workspace_id,
        release_tag,
        package_name,
        package_ecosystem,
        package_distro,
        severity,
        image_repo,
        external_vuln_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if workspace_id is not None:
            _path_params['workspace_id'] = workspace_id
        # process the query parameters
        if release_tag is not None:
            
            _query_params.append(('release_tag', release_tag))
            
        if package_name is not None:
            
            _query_params.append(('package_name', package_name))
            
        if package_ecosystem is not None:
            
            _query_params.append(('package_ecosystem', package_ecosystem))
            
        if package_distro is not None:
            
            _query_params.append(('package_distro', package_distro))
            
        if severity is not None:
            
            _query_params.append(('severity', severity))
            
        if image_repo is not None:
            
            _query_params.append(('image_repo', image_repo))
            
        if external_vuln_id is not None:
            
            _query_params.append(('external_vuln_id', external_vuln_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/workspaces/{workspace_id}/stats/security_findings_by_severity',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    async def workspaces_workspace_id_stats_security_findings_by_status_get(
        self,
        workspace_id: Annotated[StrictStr, Field(description="Workspace ID")],
        release_tag: Annotated[Optional[StrictStr], Field(description="Release tag")] = None,
        package_name: Annotated[Optional[StrictStr], Field(description="Package name")] = None,
        package_ecosystem: Annotated[Optional[StrictStr], Field(description="Package ecosystem")] = None,
        package_distro: Annotated[Optional[StrictStr], Field(description="Package distro")] = None,
        severity: Annotated[Optional[StrictStr], Field(description="Security finding severity")] = None,
        image_repo: Annotated[Optional[StrictStr], Field(description="Image repository")] = None,
        external_vuln_id: Annotated[Optional[StrictStr], Field(description="External vulnerability ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FindingStatusCount:
        """Count security findings by status in a workspace

        Retrieves the count of security findings by status by a given workspace.

        :param workspace_id: Workspace ID (required)
        :type workspace_id: str
        :param release_tag: Release tag
        :type release_tag: str
        :param package_name: Package name
        :type package_name: str
        :param package_ecosystem: Package ecosystem
        :type package_ecosystem: str
        :param package_distro: Package distro
        :type package_distro: str
        :param severity: Security finding severity
        :type severity: str
        :param image_repo: Image repository
        :type image_repo: str
        :param external_vuln_id: External vulnerability ID
        :type external_vuln_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._workspaces_workspace_id_stats_security_findings_by_status_get_serialize(
            workspace_id=workspace_id,
            release_tag=release_tag,
            package_name=package_name,
            package_ecosystem=package_ecosystem,
            package_distro=package_distro,
            severity=severity,
            image_repo=image_repo,
            external_vuln_id=external_vuln_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FindingStatusCount",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def workspaces_workspace_id_stats_security_findings_by_status_get_with_http_info(
        self,
        workspace_id: Annotated[StrictStr, Field(description="Workspace ID")],
        release_tag: Annotated[Optional[StrictStr], Field(description="Release tag")] = None,
        package_name: Annotated[Optional[StrictStr], Field(description="Package name")] = None,
        package_ecosystem: Annotated[Optional[StrictStr], Field(description="Package ecosystem")] = None,
        package_distro: Annotated[Optional[StrictStr], Field(description="Package distro")] = None,
        severity: Annotated[Optional[StrictStr], Field(description="Security finding severity")] = None,
        image_repo: Annotated[Optional[StrictStr], Field(description="Image repository")] = None,
        external_vuln_id: Annotated[Optional[StrictStr], Field(description="External vulnerability ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FindingStatusCount]:
        """Count security findings by status in a workspace

        Retrieves the count of security findings by status by a given workspace.

        :param workspace_id: Workspace ID (required)
        :type workspace_id: str
        :param release_tag: Release tag
        :type release_tag: str
        :param package_name: Package name
        :type package_name: str
        :param package_ecosystem: Package ecosystem
        :type package_ecosystem: str
        :param package_distro: Package distro
        :type package_distro: str
        :param severity: Security finding severity
        :type severity: str
        :param image_repo: Image repository
        :type image_repo: str
        :param external_vuln_id: External vulnerability ID
        :type external_vuln_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._workspaces_workspace_id_stats_security_findings_by_status_get_serialize(
            workspace_id=workspace_id,
            release_tag=release_tag,
            package_name=package_name,
            package_ecosystem=package_ecosystem,
            package_distro=package_distro,
            severity=severity,
            image_repo=image_repo,
            external_vuln_id=external_vuln_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FindingStatusCount",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def workspaces_workspace_id_stats_security_findings_by_status_get_without_preload_content(
        self,
        workspace_id: Annotated[StrictStr, Field(description="Workspace ID")],
        release_tag: Annotated[Optional[StrictStr], Field(description="Release tag")] = None,
        package_name: Annotated[Optional[StrictStr], Field(description="Package name")] = None,
        package_ecosystem: Annotated[Optional[StrictStr], Field(description="Package ecosystem")] = None,
        package_distro: Annotated[Optional[StrictStr], Field(description="Package distro")] = None,
        severity: Annotated[Optional[StrictStr], Field(description="Security finding severity")] = None,
        image_repo: Annotated[Optional[StrictStr], Field(description="Image repository")] = None,
        external_vuln_id: Annotated[Optional[StrictStr], Field(description="External vulnerability ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Count security findings by status in a workspace

        Retrieves the count of security findings by status by a given workspace.

        :param workspace_id: Workspace ID (required)
        :type workspace_id: str
        :param release_tag: Release tag
        :type release_tag: str
        :param package_name: Package name
        :type package_name: str
        :param package_ecosystem: Package ecosystem
        :type package_ecosystem: str
        :param package_distro: Package distro
        :type package_distro: str
        :param severity: Security finding severity
        :type severity: str
        :param image_repo: Image repository
        :type image_repo: str
        :param external_vuln_id: External vulnerability ID
        :type external_vuln_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._workspaces_workspace_id_stats_security_findings_by_status_get_serialize(
            workspace_id=workspace_id,
            release_tag=release_tag,
            package_name=package_name,
            package_ecosystem=package_ecosystem,
            package_distro=package_distro,
            severity=severity,
            image_repo=image_repo,
            external_vuln_id=external_vuln_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FindingStatusCount",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _workspaces_workspace_id_stats_security_findings_by_status_get_serialize(
        self,
        workspace_id,
        release_tag,
        package_name,
        package_ecosystem,
        package_distro,
        severity,
        image_repo,
        external_vuln_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if workspace_id is not None:
            _path_params['workspace_id'] = workspace_id
        # process the query parameters
        if release_tag is not None:
            
            _query_params.append(('release_tag', release_tag))
            
        if package_name is not None:
            
            _query_params.append(('package_name', package_name))
            
        if package_ecosystem is not None:
            
            _query_params.append(('package_ecosystem', package_ecosystem))
            
        if package_distro is not None:
            
            _query_params.append(('package_distro', package_distro))
            
        if severity is not None:
            
            _query_params.append(('severity', severity))
            
        if image_repo is not None:
            
            _query_params.append(('image_repo', image_repo))
            
        if external_vuln_id is not None:
            
            _query_params.append(('external_vuln_id', external_vuln_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/workspaces/{workspace_id}/stats/security_findings_by_status',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    async def workspaces_workspace_id_stats_unique_vulnerabilities_by_severity_get(
        self,
        workspace_id: Annotated[StrictStr, Field(description="Workspace ID")],
        release_tag: Annotated[Optional[StrictStr], Field(description="Release tag")] = None,
        package_name: Annotated[Optional[StrictStr], Field(description="Package name")] = None,
        package_ecosystem: Annotated[Optional[StrictStr], Field(description="Package ecosystem")] = None,
        package_distro: Annotated[Optional[StrictStr], Field(description="Package distro")] = None,
        severity: Annotated[Optional[StrictStr], Field(description="Security finding severity")] = None,
        image_repo: Annotated[Optional[StrictStr], Field(description="Image repository")] = None,
        external_vuln_id: Annotated[Optional[StrictStr], Field(description="External vulnerability ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SeverityCount:
        """Count unique vulnerabilities by severity in a workspace

        Retrieves the count of security findings by severity by a given workspace.

        :param workspace_id: Workspace ID (required)
        :type workspace_id: str
        :param release_tag: Release tag
        :type release_tag: str
        :param package_name: Package name
        :type package_name: str
        :param package_ecosystem: Package ecosystem
        :type package_ecosystem: str
        :param package_distro: Package distro
        :type package_distro: str
        :param severity: Security finding severity
        :type severity: str
        :param image_repo: Image repository
        :type image_repo: str
        :param external_vuln_id: External vulnerability ID
        :type external_vuln_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._workspaces_workspace_id_stats_unique_vulnerabilities_by_severity_get_serialize(
            workspace_id=workspace_id,
            release_tag=release_tag,
            package_name=package_name,
            package_ecosystem=package_ecosystem,
            package_distro=package_distro,
            severity=severity,
            image_repo=image_repo,
            external_vuln_id=external_vuln_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SeverityCount",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def workspaces_workspace_id_stats_unique_vulnerabilities_by_severity_get_with_http_info(
        self,
        workspace_id: Annotated[StrictStr, Field(description="Workspace ID")],
        release_tag: Annotated[Optional[StrictStr], Field(description="Release tag")] = None,
        package_name: Annotated[Optional[StrictStr], Field(description="Package name")] = None,
        package_ecosystem: Annotated[Optional[StrictStr], Field(description="Package ecosystem")] = None,
        package_distro: Annotated[Optional[StrictStr], Field(description="Package distro")] = None,
        severity: Annotated[Optional[StrictStr], Field(description="Security finding severity")] = None,
        image_repo: Annotated[Optional[StrictStr], Field(description="Image repository")] = None,
        external_vuln_id: Annotated[Optional[StrictStr], Field(description="External vulnerability ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SeverityCount]:
        """Count unique vulnerabilities by severity in a workspace

        Retrieves the count of security findings by severity by a given workspace.

        :param workspace_id: Workspace ID (required)
        :type workspace_id: str
        :param release_tag: Release tag
        :type release_tag: str
        :param package_name: Package name
        :type package_name: str
        :param package_ecosystem: Package ecosystem
        :type package_ecosystem: str
        :param package_distro: Package distro
        :type package_distro: str
        :param severity: Security finding severity
        :type severity: str
        :param image_repo: Image repository
        :type image_repo: str
        :param external_vuln_id: External vulnerability ID
        :type external_vuln_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._workspaces_workspace_id_stats_unique_vulnerabilities_by_severity_get_serialize(
            workspace_id=workspace_id,
            release_tag=release_tag,
            package_name=package_name,
            package_ecosystem=package_ecosystem,
            package_distro=package_distro,
            severity=severity,
            image_repo=image_repo,
            external_vuln_id=external_vuln_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SeverityCount",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def workspaces_workspace_id_stats_unique_vulnerabilities_by_severity_get_without_preload_content(
        self,
        workspace_id: Annotated[StrictStr, Field(description="Workspace ID")],
        release_tag: Annotated[Optional[StrictStr], Field(description="Release tag")] = None,
        package_name: Annotated[Optional[StrictStr], Field(description="Package name")] = None,
        package_ecosystem: Annotated[Optional[StrictStr], Field(description="Package ecosystem")] = None,
        package_distro: Annotated[Optional[StrictStr], Field(description="Package distro")] = None,
        severity: Annotated[Optional[StrictStr], Field(description="Security finding severity")] = None,
        image_repo: Annotated[Optional[StrictStr], Field(description="Image repository")] = None,
        external_vuln_id: Annotated[Optional[StrictStr], Field(description="External vulnerability ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Count unique vulnerabilities by severity in a workspace

        Retrieves the count of security findings by severity by a given workspace.

        :param workspace_id: Workspace ID (required)
        :type workspace_id: str
        :param release_tag: Release tag
        :type release_tag: str
        :param package_name: Package name
        :type package_name: str
        :param package_ecosystem: Package ecosystem
        :type package_ecosystem: str
        :param package_distro: Package distro
        :type package_distro: str
        :param severity: Security finding severity
        :type severity: str
        :param image_repo: Image repository
        :type image_repo: str
        :param external_vuln_id: External vulnerability ID
        :type external_vuln_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._workspaces_workspace_id_stats_unique_vulnerabilities_by_severity_get_serialize(
            workspace_id=workspace_id,
            release_tag=release_tag,
            package_name=package_name,
            package_ecosystem=package_ecosystem,
            package_distro=package_distro,
            severity=severity,
            image_repo=image_repo,
            external_vuln_id=external_vuln_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SeverityCount",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _workspaces_workspace_id_stats_unique_vulnerabilities_by_severity_get_serialize(
        self,
        workspace_id,
        release_tag,
        package_name,
        package_ecosystem,
        package_distro,
        severity,
        image_repo,
        external_vuln_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if workspace_id is not None:
            _path_params['workspace_id'] = workspace_id
        # process the query parameters
        if release_tag is not None:
            
            _query_params.append(('release_tag', release_tag))
            
        if package_name is not None:
            
            _query_params.append(('package_name', package_name))
            
        if package_ecosystem is not None:
            
            _query_params.append(('package_ecosystem', package_ecosystem))
            
        if package_distro is not None:
            
            _query_params.append(('package_distro', package_distro))
            
        if severity is not None:
            
            _query_params.append(('severity', severity))
            
        if image_repo is not None:
            
            _query_params.append(('image_repo', image_repo))
            
        if external_vuln_id is not None:
            
            _query_params.append(('external_vuln_id', external_vuln_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/workspaces/{workspace_id}/stats/unique_vulnerabilities_by_severity',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



# coding: utf-8

"""
    Root.io API

    This is the API documentation for Root.io.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from root_io.sdk.cloud_client.models.security_finding_comment import SecurityFindingComment

class TestSecurityFindingComment(unittest.TestCase):
    """SecurityFindingComment unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SecurityFindingComment:
        """Test SecurityFindingComment
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SecurityFindingComment`
        """
        model = SecurityFindingComment()
        if include_optional:
            return SecurityFindingComment(
                account = root_io.sdk.cloud_client.models.account.Account(
                    created_at = '', 
                    email = '', 
                    external_id = '', 
                    id = '', 
                    last_login_at = '', 
                    name = '', 
                    org_role_bindings = [
                        root_io.sdk.cloud_client.models.org_role_binding.OrgRoleBinding(
                            account = root_io.sdk.cloud_client.models.account.Account(
                                created_at = '', 
                                email = '', 
                                external_id = '', 
                                id = '', 
                                last_login_at = '', 
                                name = '', 
                                provider = '', 
                                updated_at = '', ), 
                            account_id = '', 
                            created_at = '', 
                            id = '', 
                            organization = root_io.sdk.cloud_client.models.organization.Organization(
                                created_at = '', 
                                id = '', 
                                name = '', 
                                updated_at = '', ), 
                            organization_id = '', 
                            role = 'admin', 
                            updated_at = '', )
                        ], 
                    provider = '', 
                    updated_at = '', ),
                account_id = '',
                account_name = '',
                comment = '',
                created_at = '',
                id = '',
                kind = 'public',
                organization = root_io.sdk.cloud_client.models.organization.Organization(
                    created_at = '', 
                    id = '', 
                    name = '', 
                    updated_at = '', ),
                organization_id = '',
                organization_name = '',
                security_finding_id = '',
                updated_at = '',
                workspace = root_io.sdk.cloud_client.models.workspace.Workspace(
                    consumer = root_io.sdk.cloud_client.models.organization.Organization(
                        created_at = '', 
                        id = '', 
                        name = '', 
                        updated_at = '', ), 
                    consumer_id = '', 
                    created_at = '', 
                    id = '', 
                    name = '', 
                    producer = root_io.sdk.cloud_client.models.organization.Organization(
                        created_at = '', 
                        id = '', 
                        name = '', 
                        updated_at = '', ), 
                    producer_id = '', 
                    tags = [
                        root_io.sdk.cloud_client.models.entities/workspace_tag.entities.WorkspaceTag(
                            created_at = '', 
                            id = '', 
                            tag = '', 
                            updated_at = '', 
                            workspace_id = '', )
                        ], 
                    updated_at = '', 
                    workspace_role_bindings = [
                        root_io.sdk.cloud_client.models.workspace_role_binding.WorkspaceRoleBinding(
                            account = root_io.sdk.cloud_client.models.account.Account(
                                created_at = '', 
                                email = '', 
                                external_id = '', 
                                id = '', 
                                last_login_at = '', 
                                name = '', 
                                org_role_bindings = [
                                    root_io.sdk.cloud_client.models.org_role_binding.OrgRoleBinding(
                                        account_id = '', 
                                        created_at = '', 
                                        id = '', 
                                        organization = , 
                                        organization_id = '', 
                                        role = 'admin', 
                                        updated_at = '', )
                                    ], 
                                provider = '', 
                                updated_at = '', ), 
                            account_id = '', 
                            created_at = '', 
                            id = '', 
                            organization_id = '', 
                            role = 'owner', 
                            updated_at = '', 
                            workspace_id = '', )
                        ], ),
                workspace_id = '',
                workspace_name = ''
            )
        else:
            return SecurityFindingComment(
                account_id = '',
                organization_id = '',
                security_finding_id = '',
        )
        """

    def testSecurityFindingComment(self):
        """Test SecurityFindingComment"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

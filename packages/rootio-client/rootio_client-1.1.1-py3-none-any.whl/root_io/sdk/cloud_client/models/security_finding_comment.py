# coding: utf-8

"""
    Root.io API

    This is the API documentation for Root.io.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from root_io.sdk.cloud_client.models.account import Account
from root_io.sdk.cloud_client.models.entities_security_finding_comment_kind import EntitiesSecurityFindingCommentKind
from root_io.sdk.cloud_client.models.organization import Organization
from root_io.sdk.cloud_client.models.workspace import Workspace
from typing import Optional, Set
from typing_extensions import Self

class SecurityFindingComment(BaseModel):
    """
    SecurityFindingComment
    """ # noqa: E501
    account: Optional[Account] = None
    account_id: StrictStr
    account_name: Optional[StrictStr] = None
    comment: Optional[StrictStr] = None
    created_at: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    kind: Optional[EntitiesSecurityFindingCommentKind] = None
    organization: Optional[Organization] = None
    organization_id: StrictStr
    organization_name: Optional[StrictStr] = None
    security_finding_id: StrictStr
    updated_at: Optional[StrictStr] = None
    workspace: Optional[Workspace] = None
    workspace_id: Optional[StrictStr] = None
    workspace_name: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["account", "account_id", "account_name", "comment", "created_at", "id", "kind", "organization", "organization_id", "organization_name", "security_finding_id", "updated_at", "workspace", "workspace_id", "workspace_name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SecurityFindingComment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of account
        if self.account:
            _dict['account'] = self.account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of organization
        if self.organization:
            _dict['organization'] = self.organization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of workspace
        if self.workspace:
            _dict['workspace'] = self.workspace.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SecurityFindingComment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "account": Account.from_dict(obj["account"]) if obj.get("account") is not None else None,
            "account_id": obj.get("account_id"),
            "account_name": obj.get("account_name"),
            "comment": obj.get("comment"),
            "created_at": obj.get("created_at"),
            "id": obj.get("id"),
            "kind": obj.get("kind"),
            "organization": Organization.from_dict(obj["organization"]) if obj.get("organization") is not None else None,
            "organization_id": obj.get("organization_id"),
            "organization_name": obj.get("organization_name"),
            "security_finding_id": obj.get("security_finding_id"),
            "updated_at": obj.get("updated_at"),
            "workspace": Workspace.from_dict(obj["workspace"]) if obj.get("workspace") is not None else None,
            "workspace_id": obj.get("workspace_id"),
            "workspace_name": obj.get("workspace_name")
        })
        return _obj



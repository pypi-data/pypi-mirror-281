# coding: utf-8

"""
    Root.io API

    This is the API documentation for Root.io.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBytes, StrictInt, StrictStr
from typing import Optional, Union
from typing_extensions import Annotated
from root_io.sdk.cloud_client.models.security_finding_comment import SecurityFindingComment
from root_io.sdk.cloud_client.models.securityfindings_comment_request import SecurityfindingsCommentRequest
from root_io.sdk.cloud_client.models.securityfindings_expected_fix_date_request import SecurityfindingsExpectedFixDateRequest
from root_io.sdk.cloud_client.models.securityfindings_options_resource_list import SecurityfindingsOptionsResourceList
from root_io.sdk.cloud_client.models.securityfindings_security_finding_activity_resource_list import SecurityfindingsSecurityFindingActivityResourceList
from root_io.sdk.cloud_client.models.securityfindings_security_finding_resource import SecurityfindingsSecurityFindingResource
from root_io.sdk.cloud_client.models.securityfindings_status_update_request import SecurityfindingsStatusUpdateRequest
from root_io.sdk.cloud_client.models.workspaces_comment_request import WorkspacesCommentRequest

from root_io.sdk.cloud_client.api_client import ApiClient, RequestSerialized
from root_io.sdk.cloud_client.api_response import ApiResponse
from root_io.sdk.cloud_client.rest import RESTResponseType


class SecurityFindingsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    async def orgs_org_id_security_findings_finding_id_comments_comment_id_delete(
        self,
        org_id: Annotated[StrictStr, Field(description="Organization ID")],
        finding_id: Annotated[StrictStr, Field(description="Security finding ID")],
        comment_id: Annotated[StrictStr, Field(description="Comment ID to delete")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete a comment from a security finding

        Delete a comment from a security finding

        :param org_id: Organization ID (required)
        :type org_id: str
        :param finding_id: Security finding ID (required)
        :type finding_id: str
        :param comment_id: Comment ID to delete (required)
        :type comment_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._orgs_org_id_security_findings_finding_id_comments_comment_id_delete_serialize(
            org_id=org_id,
            finding_id=finding_id,
            comment_id=comment_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def orgs_org_id_security_findings_finding_id_comments_comment_id_delete_with_http_info(
        self,
        org_id: Annotated[StrictStr, Field(description="Organization ID")],
        finding_id: Annotated[StrictStr, Field(description="Security finding ID")],
        comment_id: Annotated[StrictStr, Field(description="Comment ID to delete")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete a comment from a security finding

        Delete a comment from a security finding

        :param org_id: Organization ID (required)
        :type org_id: str
        :param finding_id: Security finding ID (required)
        :type finding_id: str
        :param comment_id: Comment ID to delete (required)
        :type comment_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._orgs_org_id_security_findings_finding_id_comments_comment_id_delete_serialize(
            org_id=org_id,
            finding_id=finding_id,
            comment_id=comment_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def orgs_org_id_security_findings_finding_id_comments_comment_id_delete_without_preload_content(
        self,
        org_id: Annotated[StrictStr, Field(description="Organization ID")],
        finding_id: Annotated[StrictStr, Field(description="Security finding ID")],
        comment_id: Annotated[StrictStr, Field(description="Comment ID to delete")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete a comment from a security finding

        Delete a comment from a security finding

        :param org_id: Organization ID (required)
        :type org_id: str
        :param finding_id: Security finding ID (required)
        :type finding_id: str
        :param comment_id: Comment ID to delete (required)
        :type comment_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._orgs_org_id_security_findings_finding_id_comments_comment_id_delete_serialize(
            org_id=org_id,
            finding_id=finding_id,
            comment_id=comment_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _orgs_org_id_security_findings_finding_id_comments_comment_id_delete_serialize(
        self,
        org_id,
        finding_id,
        comment_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if org_id is not None:
            _path_params['org_id'] = org_id
        if finding_id is not None:
            _path_params['finding_id'] = finding_id
        if comment_id is not None:
            _path_params['comment_id'] = comment_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/orgs/{org_id}/security_findings/{finding_id}/comments/{comment_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    async def orgs_org_id_security_findings_finding_id_comments_comment_id_put(
        self,
        org_id: Annotated[StrictStr, Field(description="Organization ID")],
        finding_id: Annotated[StrictStr, Field(description="Security finding ID")],
        comment_id: Annotated[StrictStr, Field(description="Comment ID to update")],
        comment_request: Annotated[SecurityfindingsCommentRequest, Field(description="Comment data")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SecurityFindingComment:
        """Update a comment to a security finding

        Update a comment for a security finding.

        :param org_id: Organization ID (required)
        :type org_id: str
        :param finding_id: Security finding ID (required)
        :type finding_id: str
        :param comment_id: Comment ID to update (required)
        :type comment_id: str
        :param comment_request: Comment data (required)
        :type comment_request: SecurityfindingsCommentRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._orgs_org_id_security_findings_finding_id_comments_comment_id_put_serialize(
            org_id=org_id,
            finding_id=finding_id,
            comment_id=comment_id,
            comment_request=comment_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SecurityFindingComment",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def orgs_org_id_security_findings_finding_id_comments_comment_id_put_with_http_info(
        self,
        org_id: Annotated[StrictStr, Field(description="Organization ID")],
        finding_id: Annotated[StrictStr, Field(description="Security finding ID")],
        comment_id: Annotated[StrictStr, Field(description="Comment ID to update")],
        comment_request: Annotated[SecurityfindingsCommentRequest, Field(description="Comment data")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SecurityFindingComment]:
        """Update a comment to a security finding

        Update a comment for a security finding.

        :param org_id: Organization ID (required)
        :type org_id: str
        :param finding_id: Security finding ID (required)
        :type finding_id: str
        :param comment_id: Comment ID to update (required)
        :type comment_id: str
        :param comment_request: Comment data (required)
        :type comment_request: SecurityfindingsCommentRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._orgs_org_id_security_findings_finding_id_comments_comment_id_put_serialize(
            org_id=org_id,
            finding_id=finding_id,
            comment_id=comment_id,
            comment_request=comment_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SecurityFindingComment",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def orgs_org_id_security_findings_finding_id_comments_comment_id_put_without_preload_content(
        self,
        org_id: Annotated[StrictStr, Field(description="Organization ID")],
        finding_id: Annotated[StrictStr, Field(description="Security finding ID")],
        comment_id: Annotated[StrictStr, Field(description="Comment ID to update")],
        comment_request: Annotated[SecurityfindingsCommentRequest, Field(description="Comment data")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update a comment to a security finding

        Update a comment for a security finding.

        :param org_id: Organization ID (required)
        :type org_id: str
        :param finding_id: Security finding ID (required)
        :type finding_id: str
        :param comment_id: Comment ID to update (required)
        :type comment_id: str
        :param comment_request: Comment data (required)
        :type comment_request: SecurityfindingsCommentRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._orgs_org_id_security_findings_finding_id_comments_comment_id_put_serialize(
            org_id=org_id,
            finding_id=finding_id,
            comment_id=comment_id,
            comment_request=comment_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SecurityFindingComment",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _orgs_org_id_security_findings_finding_id_comments_comment_id_put_serialize(
        self,
        org_id,
        finding_id,
        comment_id,
        comment_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if org_id is not None:
            _path_params['org_id'] = org_id
        if finding_id is not None:
            _path_params['finding_id'] = finding_id
        if comment_id is not None:
            _path_params['comment_id'] = comment_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if comment_request is not None:
            _body_params = comment_request


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/orgs/{org_id}/security_findings/{finding_id}/comments/{comment_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    async def orgs_org_id_security_findings_finding_id_comments_post(
        self,
        org_id: Annotated[StrictStr, Field(description="Organization ID")],
        finding_id: Annotated[StrictStr, Field(description="Security finding ID")],
        comment_request: Annotated[SecurityfindingsCommentRequest, Field(description="Comment and parent id (if its a reply) data")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SecurityFindingComment:
        """Adds a comment to a security finding

        Add a comment (or a reply to a comment) to a security finding. A reply is defined as a comment with a parent comment id.

        :param org_id: Organization ID (required)
        :type org_id: str
        :param finding_id: Security finding ID (required)
        :type finding_id: str
        :param comment_request: Comment and parent id (if its a reply) data (required)
        :type comment_request: SecurityfindingsCommentRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._orgs_org_id_security_findings_finding_id_comments_post_serialize(
            org_id=org_id,
            finding_id=finding_id,
            comment_request=comment_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "SecurityFindingComment",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def orgs_org_id_security_findings_finding_id_comments_post_with_http_info(
        self,
        org_id: Annotated[StrictStr, Field(description="Organization ID")],
        finding_id: Annotated[StrictStr, Field(description="Security finding ID")],
        comment_request: Annotated[SecurityfindingsCommentRequest, Field(description="Comment and parent id (if its a reply) data")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SecurityFindingComment]:
        """Adds a comment to a security finding

        Add a comment (or a reply to a comment) to a security finding. A reply is defined as a comment with a parent comment id.

        :param org_id: Organization ID (required)
        :type org_id: str
        :param finding_id: Security finding ID (required)
        :type finding_id: str
        :param comment_request: Comment and parent id (if its a reply) data (required)
        :type comment_request: SecurityfindingsCommentRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._orgs_org_id_security_findings_finding_id_comments_post_serialize(
            org_id=org_id,
            finding_id=finding_id,
            comment_request=comment_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "SecurityFindingComment",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def orgs_org_id_security_findings_finding_id_comments_post_without_preload_content(
        self,
        org_id: Annotated[StrictStr, Field(description="Organization ID")],
        finding_id: Annotated[StrictStr, Field(description="Security finding ID")],
        comment_request: Annotated[SecurityfindingsCommentRequest, Field(description="Comment and parent id (if its a reply) data")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Adds a comment to a security finding

        Add a comment (or a reply to a comment) to a security finding. A reply is defined as a comment with a parent comment id.

        :param org_id: Organization ID (required)
        :type org_id: str
        :param finding_id: Security finding ID (required)
        :type finding_id: str
        :param comment_request: Comment and parent id (if its a reply) data (required)
        :type comment_request: SecurityfindingsCommentRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._orgs_org_id_security_findings_finding_id_comments_post_serialize(
            org_id=org_id,
            finding_id=finding_id,
            comment_request=comment_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "SecurityFindingComment",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _orgs_org_id_security_findings_finding_id_comments_post_serialize(
        self,
        org_id,
        finding_id,
        comment_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if org_id is not None:
            _path_params['org_id'] = org_id
        if finding_id is not None:
            _path_params['finding_id'] = finding_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if comment_request is not None:
            _body_params = comment_request


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/orgs/{org_id}/security_findings/{finding_id}/comments',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    async def orgs_org_id_security_findings_finding_id_expected_fix_date_put(
        self,
        org_id: Annotated[StrictStr, Field(description="Organization ID")],
        finding_id: Annotated[StrictStr, Field(description="Security finding ID")],
        expected_fix_date_request: Annotated[SecurityfindingsExpectedFixDateRequest, Field(description="Expected fixed date")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SecurityfindingsSecurityFindingResource:
        """Update expected fixed date for a security finding

        Update expected fixed date for a security finding

        :param org_id: Organization ID (required)
        :type org_id: str
        :param finding_id: Security finding ID (required)
        :type finding_id: str
        :param expected_fix_date_request: Expected fixed date (required)
        :type expected_fix_date_request: SecurityfindingsExpectedFixDateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._orgs_org_id_security_findings_finding_id_expected_fix_date_put_serialize(
            org_id=org_id,
            finding_id=finding_id,
            expected_fix_date_request=expected_fix_date_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SecurityfindingsSecurityFindingResource",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def orgs_org_id_security_findings_finding_id_expected_fix_date_put_with_http_info(
        self,
        org_id: Annotated[StrictStr, Field(description="Organization ID")],
        finding_id: Annotated[StrictStr, Field(description="Security finding ID")],
        expected_fix_date_request: Annotated[SecurityfindingsExpectedFixDateRequest, Field(description="Expected fixed date")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SecurityfindingsSecurityFindingResource]:
        """Update expected fixed date for a security finding

        Update expected fixed date for a security finding

        :param org_id: Organization ID (required)
        :type org_id: str
        :param finding_id: Security finding ID (required)
        :type finding_id: str
        :param expected_fix_date_request: Expected fixed date (required)
        :type expected_fix_date_request: SecurityfindingsExpectedFixDateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._orgs_org_id_security_findings_finding_id_expected_fix_date_put_serialize(
            org_id=org_id,
            finding_id=finding_id,
            expected_fix_date_request=expected_fix_date_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SecurityfindingsSecurityFindingResource",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def orgs_org_id_security_findings_finding_id_expected_fix_date_put_without_preload_content(
        self,
        org_id: Annotated[StrictStr, Field(description="Organization ID")],
        finding_id: Annotated[StrictStr, Field(description="Security finding ID")],
        expected_fix_date_request: Annotated[SecurityfindingsExpectedFixDateRequest, Field(description="Expected fixed date")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update expected fixed date for a security finding

        Update expected fixed date for a security finding

        :param org_id: Organization ID (required)
        :type org_id: str
        :param finding_id: Security finding ID (required)
        :type finding_id: str
        :param expected_fix_date_request: Expected fixed date (required)
        :type expected_fix_date_request: SecurityfindingsExpectedFixDateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._orgs_org_id_security_findings_finding_id_expected_fix_date_put_serialize(
            org_id=org_id,
            finding_id=finding_id,
            expected_fix_date_request=expected_fix_date_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SecurityfindingsSecurityFindingResource",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _orgs_org_id_security_findings_finding_id_expected_fix_date_put_serialize(
        self,
        org_id,
        finding_id,
        expected_fix_date_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if org_id is not None:
            _path_params['org_id'] = org_id
        if finding_id is not None:
            _path_params['finding_id'] = finding_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if expected_fix_date_request is not None:
            _body_params = expected_fix_date_request


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/orgs/{org_id}/security_findings/{finding_id}/expected_fix_date',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    async def orgs_org_id_security_findings_finding_id_get(
        self,
        org_id: Annotated[StrictStr, Field(description="Organization ID")],
        finding_id: Annotated[StrictStr, Field(description="Security finding ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SecurityfindingsSecurityFindingResource:
        """Get a security finding for an organization

        Get detailed information for a security finding by security finding ID. Detailed information includes all activity (status history, comments, etc.)

        :param org_id: Organization ID (required)
        :type org_id: str
        :param finding_id: Security finding ID (required)
        :type finding_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._orgs_org_id_security_findings_finding_id_get_serialize(
            org_id=org_id,
            finding_id=finding_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SecurityfindingsSecurityFindingResource",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def orgs_org_id_security_findings_finding_id_get_with_http_info(
        self,
        org_id: Annotated[StrictStr, Field(description="Organization ID")],
        finding_id: Annotated[StrictStr, Field(description="Security finding ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SecurityfindingsSecurityFindingResource]:
        """Get a security finding for an organization

        Get detailed information for a security finding by security finding ID. Detailed information includes all activity (status history, comments, etc.)

        :param org_id: Organization ID (required)
        :type org_id: str
        :param finding_id: Security finding ID (required)
        :type finding_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._orgs_org_id_security_findings_finding_id_get_serialize(
            org_id=org_id,
            finding_id=finding_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SecurityfindingsSecurityFindingResource",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def orgs_org_id_security_findings_finding_id_get_without_preload_content(
        self,
        org_id: Annotated[StrictStr, Field(description="Organization ID")],
        finding_id: Annotated[StrictStr, Field(description="Security finding ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a security finding for an organization

        Get detailed information for a security finding by security finding ID. Detailed information includes all activity (status history, comments, etc.)

        :param org_id: Organization ID (required)
        :type org_id: str
        :param finding_id: Security finding ID (required)
        :type finding_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._orgs_org_id_security_findings_finding_id_get_serialize(
            org_id=org_id,
            finding_id=finding_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SecurityfindingsSecurityFindingResource",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _orgs_org_id_security_findings_finding_id_get_serialize(
        self,
        org_id,
        finding_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if org_id is not None:
            _path_params['org_id'] = org_id
        if finding_id is not None:
            _path_params['finding_id'] = finding_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/orgs/{org_id}/security_findings/{finding_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    async def orgs_org_id_security_findings_finding_id_status_put(
        self,
        org_id: Annotated[StrictStr, Field(description="Organization ID")],
        finding_id: Annotated[StrictStr, Field(description="Security finding ID")],
        status_update_request: Annotated[SecurityfindingsStatusUpdateRequest, Field(description="Status and Resolution update data")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SecurityfindingsSecurityFindingResource:
        """Updates security finding status and resolution

        Resolution can be updated only if the current status is NotAffected/Fixed, or if the provided status is NotAffected or Fixed. Resolution is Mandatory if moving from a status that is not NotAffected/Fixed to NotAffected/Fixed

        :param org_id: Organization ID (required)
        :type org_id: str
        :param finding_id: Security finding ID (required)
        :type finding_id: str
        :param status_update_request: Status and Resolution update data (required)
        :type status_update_request: SecurityfindingsStatusUpdateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._orgs_org_id_security_findings_finding_id_status_put_serialize(
            org_id=org_id,
            finding_id=finding_id,
            status_update_request=status_update_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SecurityfindingsSecurityFindingResource",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def orgs_org_id_security_findings_finding_id_status_put_with_http_info(
        self,
        org_id: Annotated[StrictStr, Field(description="Organization ID")],
        finding_id: Annotated[StrictStr, Field(description="Security finding ID")],
        status_update_request: Annotated[SecurityfindingsStatusUpdateRequest, Field(description="Status and Resolution update data")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SecurityfindingsSecurityFindingResource]:
        """Updates security finding status and resolution

        Resolution can be updated only if the current status is NotAffected/Fixed, or if the provided status is NotAffected or Fixed. Resolution is Mandatory if moving from a status that is not NotAffected/Fixed to NotAffected/Fixed

        :param org_id: Organization ID (required)
        :type org_id: str
        :param finding_id: Security finding ID (required)
        :type finding_id: str
        :param status_update_request: Status and Resolution update data (required)
        :type status_update_request: SecurityfindingsStatusUpdateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._orgs_org_id_security_findings_finding_id_status_put_serialize(
            org_id=org_id,
            finding_id=finding_id,
            status_update_request=status_update_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SecurityfindingsSecurityFindingResource",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def orgs_org_id_security_findings_finding_id_status_put_without_preload_content(
        self,
        org_id: Annotated[StrictStr, Field(description="Organization ID")],
        finding_id: Annotated[StrictStr, Field(description="Security finding ID")],
        status_update_request: Annotated[SecurityfindingsStatusUpdateRequest, Field(description="Status and Resolution update data")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Updates security finding status and resolution

        Resolution can be updated only if the current status is NotAffected/Fixed, or if the provided status is NotAffected or Fixed. Resolution is Mandatory if moving from a status that is not NotAffected/Fixed to NotAffected/Fixed

        :param org_id: Organization ID (required)
        :type org_id: str
        :param finding_id: Security finding ID (required)
        :type finding_id: str
        :param status_update_request: Status and Resolution update data (required)
        :type status_update_request: SecurityfindingsStatusUpdateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._orgs_org_id_security_findings_finding_id_status_put_serialize(
            org_id=org_id,
            finding_id=finding_id,
            status_update_request=status_update_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SecurityfindingsSecurityFindingResource",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _orgs_org_id_security_findings_finding_id_status_put_serialize(
        self,
        org_id,
        finding_id,
        status_update_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if org_id is not None:
            _path_params['org_id'] = org_id
        if finding_id is not None:
            _path_params['finding_id'] = finding_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if status_update_request is not None:
            _body_params = status_update_request


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/orgs/{org_id}/security_findings/{finding_id}/status',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    async def orgs_org_id_security_findings_get(
        self,
        org_id: Annotated[StrictStr, Field(description="Organization ID")],
        release_tag: Annotated[Optional[StrictStr], Field(description="Release tag")] = None,
        package_name: Annotated[Optional[StrictStr], Field(description="Package name")] = None,
        package_ecosystem: Annotated[Optional[StrictStr], Field(description="Package ecosystem")] = None,
        package_distro: Annotated[Optional[StrictStr], Field(description="Package distro")] = None,
        severity: Annotated[Optional[StrictStr], Field(description="Security finding severity. Should be one of: critical, high, medium, low")] = None,
        image_repo: Annotated[Optional[StrictStr], Field(description="Image repository")] = None,
        external_vuln_id: Annotated[Optional[StrictStr], Field(description="External vulnerability ID")] = None,
        previous_cursor: Annotated[Optional[StrictStr], Field(description="The cursor to get the previous page")] = None,
        next_cursor: Annotated[Optional[StrictStr], Field(description="The cursor to get the next page")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="The number of items to return")] = None,
        sort_field: Annotated[Optional[StrictStr], Field(description="The field to sort by")] = None,
        sort_direction: Annotated[Optional[StrictStr], Field(description="The direction to sort by")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SecurityfindingsSecurityFindingActivityResourceList:
        """List security findings for an organization

        Get list of security findings for an organization, specified by ID, filtered by the release tag and the params: package name, package ecosystem, package distro.

        :param org_id: Organization ID (required)
        :type org_id: str
        :param release_tag: Release tag
        :type release_tag: str
        :param package_name: Package name
        :type package_name: str
        :param package_ecosystem: Package ecosystem
        :type package_ecosystem: str
        :param package_distro: Package distro
        :type package_distro: str
        :param severity: Security finding severity. Should be one of: critical, high, medium, low
        :type severity: str
        :param image_repo: Image repository
        :type image_repo: str
        :param external_vuln_id: External vulnerability ID
        :type external_vuln_id: str
        :param previous_cursor: The cursor to get the previous page
        :type previous_cursor: str
        :param next_cursor: The cursor to get the next page
        :type next_cursor: str
        :param page_size: The number of items to return
        :type page_size: int
        :param sort_field: The field to sort by
        :type sort_field: str
        :param sort_direction: The direction to sort by
        :type sort_direction: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._orgs_org_id_security_findings_get_serialize(
            org_id=org_id,
            release_tag=release_tag,
            package_name=package_name,
            package_ecosystem=package_ecosystem,
            package_distro=package_distro,
            severity=severity,
            image_repo=image_repo,
            external_vuln_id=external_vuln_id,
            previous_cursor=previous_cursor,
            next_cursor=next_cursor,
            page_size=page_size,
            sort_field=sort_field,
            sort_direction=sort_direction,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SecurityfindingsSecurityFindingActivityResourceList",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def orgs_org_id_security_findings_get_with_http_info(
        self,
        org_id: Annotated[StrictStr, Field(description="Organization ID")],
        release_tag: Annotated[Optional[StrictStr], Field(description="Release tag")] = None,
        package_name: Annotated[Optional[StrictStr], Field(description="Package name")] = None,
        package_ecosystem: Annotated[Optional[StrictStr], Field(description="Package ecosystem")] = None,
        package_distro: Annotated[Optional[StrictStr], Field(description="Package distro")] = None,
        severity: Annotated[Optional[StrictStr], Field(description="Security finding severity. Should be one of: critical, high, medium, low")] = None,
        image_repo: Annotated[Optional[StrictStr], Field(description="Image repository")] = None,
        external_vuln_id: Annotated[Optional[StrictStr], Field(description="External vulnerability ID")] = None,
        previous_cursor: Annotated[Optional[StrictStr], Field(description="The cursor to get the previous page")] = None,
        next_cursor: Annotated[Optional[StrictStr], Field(description="The cursor to get the next page")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="The number of items to return")] = None,
        sort_field: Annotated[Optional[StrictStr], Field(description="The field to sort by")] = None,
        sort_direction: Annotated[Optional[StrictStr], Field(description="The direction to sort by")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SecurityfindingsSecurityFindingActivityResourceList]:
        """List security findings for an organization

        Get list of security findings for an organization, specified by ID, filtered by the release tag and the params: package name, package ecosystem, package distro.

        :param org_id: Organization ID (required)
        :type org_id: str
        :param release_tag: Release tag
        :type release_tag: str
        :param package_name: Package name
        :type package_name: str
        :param package_ecosystem: Package ecosystem
        :type package_ecosystem: str
        :param package_distro: Package distro
        :type package_distro: str
        :param severity: Security finding severity. Should be one of: critical, high, medium, low
        :type severity: str
        :param image_repo: Image repository
        :type image_repo: str
        :param external_vuln_id: External vulnerability ID
        :type external_vuln_id: str
        :param previous_cursor: The cursor to get the previous page
        :type previous_cursor: str
        :param next_cursor: The cursor to get the next page
        :type next_cursor: str
        :param page_size: The number of items to return
        :type page_size: int
        :param sort_field: The field to sort by
        :type sort_field: str
        :param sort_direction: The direction to sort by
        :type sort_direction: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._orgs_org_id_security_findings_get_serialize(
            org_id=org_id,
            release_tag=release_tag,
            package_name=package_name,
            package_ecosystem=package_ecosystem,
            package_distro=package_distro,
            severity=severity,
            image_repo=image_repo,
            external_vuln_id=external_vuln_id,
            previous_cursor=previous_cursor,
            next_cursor=next_cursor,
            page_size=page_size,
            sort_field=sort_field,
            sort_direction=sort_direction,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SecurityfindingsSecurityFindingActivityResourceList",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def orgs_org_id_security_findings_get_without_preload_content(
        self,
        org_id: Annotated[StrictStr, Field(description="Organization ID")],
        release_tag: Annotated[Optional[StrictStr], Field(description="Release tag")] = None,
        package_name: Annotated[Optional[StrictStr], Field(description="Package name")] = None,
        package_ecosystem: Annotated[Optional[StrictStr], Field(description="Package ecosystem")] = None,
        package_distro: Annotated[Optional[StrictStr], Field(description="Package distro")] = None,
        severity: Annotated[Optional[StrictStr], Field(description="Security finding severity. Should be one of: critical, high, medium, low")] = None,
        image_repo: Annotated[Optional[StrictStr], Field(description="Image repository")] = None,
        external_vuln_id: Annotated[Optional[StrictStr], Field(description="External vulnerability ID")] = None,
        previous_cursor: Annotated[Optional[StrictStr], Field(description="The cursor to get the previous page")] = None,
        next_cursor: Annotated[Optional[StrictStr], Field(description="The cursor to get the next page")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="The number of items to return")] = None,
        sort_field: Annotated[Optional[StrictStr], Field(description="The field to sort by")] = None,
        sort_direction: Annotated[Optional[StrictStr], Field(description="The direction to sort by")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List security findings for an organization

        Get list of security findings for an organization, specified by ID, filtered by the release tag and the params: package name, package ecosystem, package distro.

        :param org_id: Organization ID (required)
        :type org_id: str
        :param release_tag: Release tag
        :type release_tag: str
        :param package_name: Package name
        :type package_name: str
        :param package_ecosystem: Package ecosystem
        :type package_ecosystem: str
        :param package_distro: Package distro
        :type package_distro: str
        :param severity: Security finding severity. Should be one of: critical, high, medium, low
        :type severity: str
        :param image_repo: Image repository
        :type image_repo: str
        :param external_vuln_id: External vulnerability ID
        :type external_vuln_id: str
        :param previous_cursor: The cursor to get the previous page
        :type previous_cursor: str
        :param next_cursor: The cursor to get the next page
        :type next_cursor: str
        :param page_size: The number of items to return
        :type page_size: int
        :param sort_field: The field to sort by
        :type sort_field: str
        :param sort_direction: The direction to sort by
        :type sort_direction: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._orgs_org_id_security_findings_get_serialize(
            org_id=org_id,
            release_tag=release_tag,
            package_name=package_name,
            package_ecosystem=package_ecosystem,
            package_distro=package_distro,
            severity=severity,
            image_repo=image_repo,
            external_vuln_id=external_vuln_id,
            previous_cursor=previous_cursor,
            next_cursor=next_cursor,
            page_size=page_size,
            sort_field=sort_field,
            sort_direction=sort_direction,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SecurityfindingsSecurityFindingActivityResourceList",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _orgs_org_id_security_findings_get_serialize(
        self,
        org_id,
        release_tag,
        package_name,
        package_ecosystem,
        package_distro,
        severity,
        image_repo,
        external_vuln_id,
        previous_cursor,
        next_cursor,
        page_size,
        sort_field,
        sort_direction,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if org_id is not None:
            _path_params['org_id'] = org_id
        # process the query parameters
        if release_tag is not None:
            
            _query_params.append(('release_tag', release_tag))
            
        if package_name is not None:
            
            _query_params.append(('package_name', package_name))
            
        if package_ecosystem is not None:
            
            _query_params.append(('package_ecosystem', package_ecosystem))
            
        if package_distro is not None:
            
            _query_params.append(('package_distro', package_distro))
            
        if severity is not None:
            
            _query_params.append(('severity', severity))
            
        if image_repo is not None:
            
            _query_params.append(('image_repo', image_repo))
            
        if external_vuln_id is not None:
            
            _query_params.append(('external_vuln_id', external_vuln_id))
            
        if previous_cursor is not None:
            
            _query_params.append(('previous_cursor', previous_cursor))
            
        if next_cursor is not None:
            
            _query_params.append(('next_cursor', next_cursor))
            
        if page_size is not None:
            
            _query_params.append(('page_size', page_size))
            
        if sort_field is not None:
            
            _query_params.append(('sort_field', sort_field))
            
        if sort_direction is not None:
            
            _query_params.append(('sort_direction', sort_direction))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/orgs/{org_id}/security_findings',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    async def orgs_org_id_security_findings_option_type_options_get(
        self,
        org_id: Annotated[StrictStr, Field(description="Organization ID")],
        option_type: Annotated[StrictStr, Field(description="Option type. One of: [image_repo, package_name, external_vuln_id, release_tag]")],
        release_tag: Annotated[Optional[StrictStr], Field(description="Release tag")] = None,
        package_name: Annotated[Optional[StrictStr], Field(description="Package name")] = None,
        package_ecosystem: Annotated[Optional[StrictStr], Field(description="Package ecosystem")] = None,
        package_distro: Annotated[Optional[StrictStr], Field(description="Package distro")] = None,
        severity: Annotated[Optional[StrictStr], Field(description="Security finding severity")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SecurityfindingsOptionsResourceList:
        """List options for an organization

        Retrieves available options for given organization by given type.

        :param org_id: Organization ID (required)
        :type org_id: str
        :param option_type: Option type. One of: [image_repo, package_name, external_vuln_id, release_tag] (required)
        :type option_type: str
        :param release_tag: Release tag
        :type release_tag: str
        :param package_name: Package name
        :type package_name: str
        :param package_ecosystem: Package ecosystem
        :type package_ecosystem: str
        :param package_distro: Package distro
        :type package_distro: str
        :param severity: Security finding severity
        :type severity: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._orgs_org_id_security_findings_option_type_options_get_serialize(
            org_id=org_id,
            option_type=option_type,
            release_tag=release_tag,
            package_name=package_name,
            package_ecosystem=package_ecosystem,
            package_distro=package_distro,
            severity=severity,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SecurityfindingsOptionsResourceList",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def orgs_org_id_security_findings_option_type_options_get_with_http_info(
        self,
        org_id: Annotated[StrictStr, Field(description="Organization ID")],
        option_type: Annotated[StrictStr, Field(description="Option type. One of: [image_repo, package_name, external_vuln_id, release_tag]")],
        release_tag: Annotated[Optional[StrictStr], Field(description="Release tag")] = None,
        package_name: Annotated[Optional[StrictStr], Field(description="Package name")] = None,
        package_ecosystem: Annotated[Optional[StrictStr], Field(description="Package ecosystem")] = None,
        package_distro: Annotated[Optional[StrictStr], Field(description="Package distro")] = None,
        severity: Annotated[Optional[StrictStr], Field(description="Security finding severity")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SecurityfindingsOptionsResourceList]:
        """List options for an organization

        Retrieves available options for given organization by given type.

        :param org_id: Organization ID (required)
        :type org_id: str
        :param option_type: Option type. One of: [image_repo, package_name, external_vuln_id, release_tag] (required)
        :type option_type: str
        :param release_tag: Release tag
        :type release_tag: str
        :param package_name: Package name
        :type package_name: str
        :param package_ecosystem: Package ecosystem
        :type package_ecosystem: str
        :param package_distro: Package distro
        :type package_distro: str
        :param severity: Security finding severity
        :type severity: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._orgs_org_id_security_findings_option_type_options_get_serialize(
            org_id=org_id,
            option_type=option_type,
            release_tag=release_tag,
            package_name=package_name,
            package_ecosystem=package_ecosystem,
            package_distro=package_distro,
            severity=severity,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SecurityfindingsOptionsResourceList",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def orgs_org_id_security_findings_option_type_options_get_without_preload_content(
        self,
        org_id: Annotated[StrictStr, Field(description="Organization ID")],
        option_type: Annotated[StrictStr, Field(description="Option type. One of: [image_repo, package_name, external_vuln_id, release_tag]")],
        release_tag: Annotated[Optional[StrictStr], Field(description="Release tag")] = None,
        package_name: Annotated[Optional[StrictStr], Field(description="Package name")] = None,
        package_ecosystem: Annotated[Optional[StrictStr], Field(description="Package ecosystem")] = None,
        package_distro: Annotated[Optional[StrictStr], Field(description="Package distro")] = None,
        severity: Annotated[Optional[StrictStr], Field(description="Security finding severity")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List options for an organization

        Retrieves available options for given organization by given type.

        :param org_id: Organization ID (required)
        :type org_id: str
        :param option_type: Option type. One of: [image_repo, package_name, external_vuln_id, release_tag] (required)
        :type option_type: str
        :param release_tag: Release tag
        :type release_tag: str
        :param package_name: Package name
        :type package_name: str
        :param package_ecosystem: Package ecosystem
        :type package_ecosystem: str
        :param package_distro: Package distro
        :type package_distro: str
        :param severity: Security finding severity
        :type severity: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._orgs_org_id_security_findings_option_type_options_get_serialize(
            org_id=org_id,
            option_type=option_type,
            release_tag=release_tag,
            package_name=package_name,
            package_ecosystem=package_ecosystem,
            package_distro=package_distro,
            severity=severity,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SecurityfindingsOptionsResourceList",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _orgs_org_id_security_findings_option_type_options_get_serialize(
        self,
        org_id,
        option_type,
        release_tag,
        package_name,
        package_ecosystem,
        package_distro,
        severity,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if org_id is not None:
            _path_params['org_id'] = org_id
        if option_type is not None:
            _path_params['optionType'] = option_type
        # process the query parameters
        if release_tag is not None:
            
            _query_params.append(('release_tag', release_tag))
            
        if package_name is not None:
            
            _query_params.append(('package_name', package_name))
            
        if package_ecosystem is not None:
            
            _query_params.append(('package_ecosystem', package_ecosystem))
            
        if package_distro is not None:
            
            _query_params.append(('package_distro', package_distro))
            
        if severity is not None:
            
            _query_params.append(('severity', severity))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/orgs/{org_id}/security_findings/{optionType}/options',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    async def orgs_org_id_security_findings_report_get(
        self,
        org_id: Annotated[StrictStr, Field(description="Organization ID")],
        release_tag: Annotated[Optional[StrictStr], Field(description="Release tag")] = None,
        package_name: Annotated[Optional[StrictStr], Field(description="Package name")] = None,
        package_ecosystem: Annotated[Optional[StrictStr], Field(description="Package ecosystem")] = None,
        package_distro: Annotated[Optional[StrictStr], Field(description="Package distro")] = None,
        severity: Annotated[Optional[StrictStr], Field(description="Security finding severity. Should be one of: critical, high, medium, low")] = None,
        external_vuln_id: Annotated[Optional[StrictStr], Field(description="External vulnerability ID")] = None,
        image_repo: Annotated[Optional[StrictStr], Field(description="Image repository")] = None,
        format: Annotated[Optional[StrictStr], Field(description="file format, surrently supports 'csv'")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> bytearray:
        """Export a security findings file for an organization

        Export a detailed list of security findings for an organization, specified by release_tag.

        :param org_id: Organization ID (required)
        :type org_id: str
        :param release_tag: Release tag
        :type release_tag: str
        :param package_name: Package name
        :type package_name: str
        :param package_ecosystem: Package ecosystem
        :type package_ecosystem: str
        :param package_distro: Package distro
        :type package_distro: str
        :param severity: Security finding severity. Should be one of: critical, high, medium, low
        :type severity: str
        :param external_vuln_id: External vulnerability ID
        :type external_vuln_id: str
        :param image_repo: Image repository
        :type image_repo: str
        :param format: file format, surrently supports 'csv'
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._orgs_org_id_security_findings_report_get_serialize(
            org_id=org_id,
            release_tag=release_tag,
            package_name=package_name,
            package_ecosystem=package_ecosystem,
            package_distro=package_distro,
            severity=severity,
            external_vuln_id=external_vuln_id,
            image_repo=image_repo,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "bytearray",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def orgs_org_id_security_findings_report_get_with_http_info(
        self,
        org_id: Annotated[StrictStr, Field(description="Organization ID")],
        release_tag: Annotated[Optional[StrictStr], Field(description="Release tag")] = None,
        package_name: Annotated[Optional[StrictStr], Field(description="Package name")] = None,
        package_ecosystem: Annotated[Optional[StrictStr], Field(description="Package ecosystem")] = None,
        package_distro: Annotated[Optional[StrictStr], Field(description="Package distro")] = None,
        severity: Annotated[Optional[StrictStr], Field(description="Security finding severity. Should be one of: critical, high, medium, low")] = None,
        external_vuln_id: Annotated[Optional[StrictStr], Field(description="External vulnerability ID")] = None,
        image_repo: Annotated[Optional[StrictStr], Field(description="Image repository")] = None,
        format: Annotated[Optional[StrictStr], Field(description="file format, surrently supports 'csv'")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[bytearray]:
        """Export a security findings file for an organization

        Export a detailed list of security findings for an organization, specified by release_tag.

        :param org_id: Organization ID (required)
        :type org_id: str
        :param release_tag: Release tag
        :type release_tag: str
        :param package_name: Package name
        :type package_name: str
        :param package_ecosystem: Package ecosystem
        :type package_ecosystem: str
        :param package_distro: Package distro
        :type package_distro: str
        :param severity: Security finding severity. Should be one of: critical, high, medium, low
        :type severity: str
        :param external_vuln_id: External vulnerability ID
        :type external_vuln_id: str
        :param image_repo: Image repository
        :type image_repo: str
        :param format: file format, surrently supports 'csv'
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._orgs_org_id_security_findings_report_get_serialize(
            org_id=org_id,
            release_tag=release_tag,
            package_name=package_name,
            package_ecosystem=package_ecosystem,
            package_distro=package_distro,
            severity=severity,
            external_vuln_id=external_vuln_id,
            image_repo=image_repo,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "bytearray",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def orgs_org_id_security_findings_report_get_without_preload_content(
        self,
        org_id: Annotated[StrictStr, Field(description="Organization ID")],
        release_tag: Annotated[Optional[StrictStr], Field(description="Release tag")] = None,
        package_name: Annotated[Optional[StrictStr], Field(description="Package name")] = None,
        package_ecosystem: Annotated[Optional[StrictStr], Field(description="Package ecosystem")] = None,
        package_distro: Annotated[Optional[StrictStr], Field(description="Package distro")] = None,
        severity: Annotated[Optional[StrictStr], Field(description="Security finding severity. Should be one of: critical, high, medium, low")] = None,
        external_vuln_id: Annotated[Optional[StrictStr], Field(description="External vulnerability ID")] = None,
        image_repo: Annotated[Optional[StrictStr], Field(description="Image repository")] = None,
        format: Annotated[Optional[StrictStr], Field(description="file format, surrently supports 'csv'")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Export a security findings file for an organization

        Export a detailed list of security findings for an organization, specified by release_tag.

        :param org_id: Organization ID (required)
        :type org_id: str
        :param release_tag: Release tag
        :type release_tag: str
        :param package_name: Package name
        :type package_name: str
        :param package_ecosystem: Package ecosystem
        :type package_ecosystem: str
        :param package_distro: Package distro
        :type package_distro: str
        :param severity: Security finding severity. Should be one of: critical, high, medium, low
        :type severity: str
        :param external_vuln_id: External vulnerability ID
        :type external_vuln_id: str
        :param image_repo: Image repository
        :type image_repo: str
        :param format: file format, surrently supports 'csv'
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._orgs_org_id_security_findings_report_get_serialize(
            org_id=org_id,
            release_tag=release_tag,
            package_name=package_name,
            package_ecosystem=package_ecosystem,
            package_distro=package_distro,
            severity=severity,
            external_vuln_id=external_vuln_id,
            image_repo=image_repo,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "bytearray",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _orgs_org_id_security_findings_report_get_serialize(
        self,
        org_id,
        release_tag,
        package_name,
        package_ecosystem,
        package_distro,
        severity,
        external_vuln_id,
        image_repo,
        format,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if org_id is not None:
            _path_params['org_id'] = org_id
        # process the query parameters
        if release_tag is not None:
            
            _query_params.append(('release_tag', release_tag))
            
        if package_name is not None:
            
            _query_params.append(('package_name', package_name))
            
        if package_ecosystem is not None:
            
            _query_params.append(('package_ecosystem', package_ecosystem))
            
        if package_distro is not None:
            
            _query_params.append(('package_distro', package_distro))
            
        if severity is not None:
            
            _query_params.append(('severity', severity))
            
        if external_vuln_id is not None:
            
            _query_params.append(('external_vuln_id', external_vuln_id))
            
        if image_repo is not None:
            
            _query_params.append(('image_repo', image_repo))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'text/csv'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/orgs/{org_id}/security_findings/report',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    async def workspaces_ws_id_security_findings_finding_id_comments_comment_id_put(
        self,
        ws_id: Annotated[StrictStr, Field(description="Workspace ID")],
        finding_id: Annotated[StrictStr, Field(description="Security finding ID")],
        comment_id: Annotated[StrictStr, Field(description="Comment ID to update")],
        comment_request: Annotated[WorkspacesCommentRequest, Field(description="Comment data")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SecurityFindingComment:
        """Update a comment to a security finding

        Update a comment for a security finding.

        :param ws_id: Workspace ID (required)
        :type ws_id: str
        :param finding_id: Security finding ID (required)
        :type finding_id: str
        :param comment_id: Comment ID to update (required)
        :type comment_id: str
        :param comment_request: Comment data (required)
        :type comment_request: WorkspacesCommentRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._workspaces_ws_id_security_findings_finding_id_comments_comment_id_put_serialize(
            ws_id=ws_id,
            finding_id=finding_id,
            comment_id=comment_id,
            comment_request=comment_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SecurityFindingComment",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def workspaces_ws_id_security_findings_finding_id_comments_comment_id_put_with_http_info(
        self,
        ws_id: Annotated[StrictStr, Field(description="Workspace ID")],
        finding_id: Annotated[StrictStr, Field(description="Security finding ID")],
        comment_id: Annotated[StrictStr, Field(description="Comment ID to update")],
        comment_request: Annotated[WorkspacesCommentRequest, Field(description="Comment data")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SecurityFindingComment]:
        """Update a comment to a security finding

        Update a comment for a security finding.

        :param ws_id: Workspace ID (required)
        :type ws_id: str
        :param finding_id: Security finding ID (required)
        :type finding_id: str
        :param comment_id: Comment ID to update (required)
        :type comment_id: str
        :param comment_request: Comment data (required)
        :type comment_request: WorkspacesCommentRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._workspaces_ws_id_security_findings_finding_id_comments_comment_id_put_serialize(
            ws_id=ws_id,
            finding_id=finding_id,
            comment_id=comment_id,
            comment_request=comment_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SecurityFindingComment",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def workspaces_ws_id_security_findings_finding_id_comments_comment_id_put_without_preload_content(
        self,
        ws_id: Annotated[StrictStr, Field(description="Workspace ID")],
        finding_id: Annotated[StrictStr, Field(description="Security finding ID")],
        comment_id: Annotated[StrictStr, Field(description="Comment ID to update")],
        comment_request: Annotated[WorkspacesCommentRequest, Field(description="Comment data")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update a comment to a security finding

        Update a comment for a security finding.

        :param ws_id: Workspace ID (required)
        :type ws_id: str
        :param finding_id: Security finding ID (required)
        :type finding_id: str
        :param comment_id: Comment ID to update (required)
        :type comment_id: str
        :param comment_request: Comment data (required)
        :type comment_request: WorkspacesCommentRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._workspaces_ws_id_security_findings_finding_id_comments_comment_id_put_serialize(
            ws_id=ws_id,
            finding_id=finding_id,
            comment_id=comment_id,
            comment_request=comment_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SecurityFindingComment",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _workspaces_ws_id_security_findings_finding_id_comments_comment_id_put_serialize(
        self,
        ws_id,
        finding_id,
        comment_id,
        comment_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if ws_id is not None:
            _path_params['ws_id'] = ws_id
        if finding_id is not None:
            _path_params['finding_id'] = finding_id
        if comment_id is not None:
            _path_params['comment_id'] = comment_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if comment_request is not None:
            _body_params = comment_request


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/workspaces/{ws_id}/security_findings/{finding_id}/comments/{comment_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    async def workspaces_ws_id_security_findings_finding_id_get(
        self,
        ws_id: Annotated[StrictStr, Field(description="Workspace ID")],
        finding_id: Annotated[StrictStr, Field(description="Security finding ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SecurityfindingsSecurityFindingResource:
        """Get a security finding for a workspace

        Get detailed information for a security finding by security finding ID. Detailed information includes all activity (status history, comments, etc.)

        :param ws_id: Workspace ID (required)
        :type ws_id: str
        :param finding_id: Security finding ID (required)
        :type finding_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._workspaces_ws_id_security_findings_finding_id_get_serialize(
            ws_id=ws_id,
            finding_id=finding_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SecurityfindingsSecurityFindingResource",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def workspaces_ws_id_security_findings_finding_id_get_with_http_info(
        self,
        ws_id: Annotated[StrictStr, Field(description="Workspace ID")],
        finding_id: Annotated[StrictStr, Field(description="Security finding ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SecurityfindingsSecurityFindingResource]:
        """Get a security finding for a workspace

        Get detailed information for a security finding by security finding ID. Detailed information includes all activity (status history, comments, etc.)

        :param ws_id: Workspace ID (required)
        :type ws_id: str
        :param finding_id: Security finding ID (required)
        :type finding_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._workspaces_ws_id_security_findings_finding_id_get_serialize(
            ws_id=ws_id,
            finding_id=finding_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SecurityfindingsSecurityFindingResource",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def workspaces_ws_id_security_findings_finding_id_get_without_preload_content(
        self,
        ws_id: Annotated[StrictStr, Field(description="Workspace ID")],
        finding_id: Annotated[StrictStr, Field(description="Security finding ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a security finding for a workspace

        Get detailed information for a security finding by security finding ID. Detailed information includes all activity (status history, comments, etc.)

        :param ws_id: Workspace ID (required)
        :type ws_id: str
        :param finding_id: Security finding ID (required)
        :type finding_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._workspaces_ws_id_security_findings_finding_id_get_serialize(
            ws_id=ws_id,
            finding_id=finding_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SecurityfindingsSecurityFindingResource",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _workspaces_ws_id_security_findings_finding_id_get_serialize(
        self,
        ws_id,
        finding_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if ws_id is not None:
            _path_params['ws_id'] = ws_id
        if finding_id is not None:
            _path_params['finding_id'] = finding_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/workspaces/{ws_id}/security_findings/{finding_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    async def workspaces_ws_id_security_findings_get(
        self,
        ws_id: Annotated[StrictStr, Field(description="Workspace ID")],
        release_tag: Annotated[Optional[StrictStr], Field(description="Release tag")] = None,
        package_name: Annotated[Optional[StrictStr], Field(description="Package name")] = None,
        package_ecosystem: Annotated[Optional[StrictStr], Field(description="Package ecosystem")] = None,
        package_distro: Annotated[Optional[StrictStr], Field(description="Package distro")] = None,
        severity: Annotated[Optional[StrictStr], Field(description="Security finding severity. Should be one of: critical, high, medium, low")] = None,
        previous_cursor: Annotated[Optional[StrictStr], Field(description="The cursor to get the previous page")] = None,
        next_cursor: Annotated[Optional[StrictStr], Field(description="The cursor to get the next page")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="The number of items to return")] = None,
        sort_field: Annotated[Optional[StrictStr], Field(description="The field to sort by")] = None,
        sort_direction: Annotated[Optional[StrictStr], Field(description="The direction to sort by")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SecurityfindingsSecurityFindingActivityResourceList:
        """List security findings for a workspace

        Get list of security findings for a workspace specified by the workspace ID, filtered by the release tag and the params: package name, package ecosystem, package distro.

        :param ws_id: Workspace ID (required)
        :type ws_id: str
        :param release_tag: Release tag
        :type release_tag: str
        :param package_name: Package name
        :type package_name: str
        :param package_ecosystem: Package ecosystem
        :type package_ecosystem: str
        :param package_distro: Package distro
        :type package_distro: str
        :param severity: Security finding severity. Should be one of: critical, high, medium, low
        :type severity: str
        :param previous_cursor: The cursor to get the previous page
        :type previous_cursor: str
        :param next_cursor: The cursor to get the next page
        :type next_cursor: str
        :param page_size: The number of items to return
        :type page_size: int
        :param sort_field: The field to sort by
        :type sort_field: str
        :param sort_direction: The direction to sort by
        :type sort_direction: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._workspaces_ws_id_security_findings_get_serialize(
            ws_id=ws_id,
            release_tag=release_tag,
            package_name=package_name,
            package_ecosystem=package_ecosystem,
            package_distro=package_distro,
            severity=severity,
            previous_cursor=previous_cursor,
            next_cursor=next_cursor,
            page_size=page_size,
            sort_field=sort_field,
            sort_direction=sort_direction,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SecurityfindingsSecurityFindingActivityResourceList",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def workspaces_ws_id_security_findings_get_with_http_info(
        self,
        ws_id: Annotated[StrictStr, Field(description="Workspace ID")],
        release_tag: Annotated[Optional[StrictStr], Field(description="Release tag")] = None,
        package_name: Annotated[Optional[StrictStr], Field(description="Package name")] = None,
        package_ecosystem: Annotated[Optional[StrictStr], Field(description="Package ecosystem")] = None,
        package_distro: Annotated[Optional[StrictStr], Field(description="Package distro")] = None,
        severity: Annotated[Optional[StrictStr], Field(description="Security finding severity. Should be one of: critical, high, medium, low")] = None,
        previous_cursor: Annotated[Optional[StrictStr], Field(description="The cursor to get the previous page")] = None,
        next_cursor: Annotated[Optional[StrictStr], Field(description="The cursor to get the next page")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="The number of items to return")] = None,
        sort_field: Annotated[Optional[StrictStr], Field(description="The field to sort by")] = None,
        sort_direction: Annotated[Optional[StrictStr], Field(description="The direction to sort by")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SecurityfindingsSecurityFindingActivityResourceList]:
        """List security findings for a workspace

        Get list of security findings for a workspace specified by the workspace ID, filtered by the release tag and the params: package name, package ecosystem, package distro.

        :param ws_id: Workspace ID (required)
        :type ws_id: str
        :param release_tag: Release tag
        :type release_tag: str
        :param package_name: Package name
        :type package_name: str
        :param package_ecosystem: Package ecosystem
        :type package_ecosystem: str
        :param package_distro: Package distro
        :type package_distro: str
        :param severity: Security finding severity. Should be one of: critical, high, medium, low
        :type severity: str
        :param previous_cursor: The cursor to get the previous page
        :type previous_cursor: str
        :param next_cursor: The cursor to get the next page
        :type next_cursor: str
        :param page_size: The number of items to return
        :type page_size: int
        :param sort_field: The field to sort by
        :type sort_field: str
        :param sort_direction: The direction to sort by
        :type sort_direction: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._workspaces_ws_id_security_findings_get_serialize(
            ws_id=ws_id,
            release_tag=release_tag,
            package_name=package_name,
            package_ecosystem=package_ecosystem,
            package_distro=package_distro,
            severity=severity,
            previous_cursor=previous_cursor,
            next_cursor=next_cursor,
            page_size=page_size,
            sort_field=sort_field,
            sort_direction=sort_direction,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SecurityfindingsSecurityFindingActivityResourceList",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def workspaces_ws_id_security_findings_get_without_preload_content(
        self,
        ws_id: Annotated[StrictStr, Field(description="Workspace ID")],
        release_tag: Annotated[Optional[StrictStr], Field(description="Release tag")] = None,
        package_name: Annotated[Optional[StrictStr], Field(description="Package name")] = None,
        package_ecosystem: Annotated[Optional[StrictStr], Field(description="Package ecosystem")] = None,
        package_distro: Annotated[Optional[StrictStr], Field(description="Package distro")] = None,
        severity: Annotated[Optional[StrictStr], Field(description="Security finding severity. Should be one of: critical, high, medium, low")] = None,
        previous_cursor: Annotated[Optional[StrictStr], Field(description="The cursor to get the previous page")] = None,
        next_cursor: Annotated[Optional[StrictStr], Field(description="The cursor to get the next page")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="The number of items to return")] = None,
        sort_field: Annotated[Optional[StrictStr], Field(description="The field to sort by")] = None,
        sort_direction: Annotated[Optional[StrictStr], Field(description="The direction to sort by")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List security findings for a workspace

        Get list of security findings for a workspace specified by the workspace ID, filtered by the release tag and the params: package name, package ecosystem, package distro.

        :param ws_id: Workspace ID (required)
        :type ws_id: str
        :param release_tag: Release tag
        :type release_tag: str
        :param package_name: Package name
        :type package_name: str
        :param package_ecosystem: Package ecosystem
        :type package_ecosystem: str
        :param package_distro: Package distro
        :type package_distro: str
        :param severity: Security finding severity. Should be one of: critical, high, medium, low
        :type severity: str
        :param previous_cursor: The cursor to get the previous page
        :type previous_cursor: str
        :param next_cursor: The cursor to get the next page
        :type next_cursor: str
        :param page_size: The number of items to return
        :type page_size: int
        :param sort_field: The field to sort by
        :type sort_field: str
        :param sort_direction: The direction to sort by
        :type sort_direction: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._workspaces_ws_id_security_findings_get_serialize(
            ws_id=ws_id,
            release_tag=release_tag,
            package_name=package_name,
            package_ecosystem=package_ecosystem,
            package_distro=package_distro,
            severity=severity,
            previous_cursor=previous_cursor,
            next_cursor=next_cursor,
            page_size=page_size,
            sort_field=sort_field,
            sort_direction=sort_direction,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SecurityfindingsSecurityFindingActivityResourceList",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _workspaces_ws_id_security_findings_get_serialize(
        self,
        ws_id,
        release_tag,
        package_name,
        package_ecosystem,
        package_distro,
        severity,
        previous_cursor,
        next_cursor,
        page_size,
        sort_field,
        sort_direction,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if ws_id is not None:
            _path_params['ws_id'] = ws_id
        # process the query parameters
        if release_tag is not None:
            
            _query_params.append(('release_tag', release_tag))
            
        if package_name is not None:
            
            _query_params.append(('package_name', package_name))
            
        if package_ecosystem is not None:
            
            _query_params.append(('package_ecosystem', package_ecosystem))
            
        if package_distro is not None:
            
            _query_params.append(('package_distro', package_distro))
            
        if severity is not None:
            
            _query_params.append(('severity', severity))
            
        if previous_cursor is not None:
            
            _query_params.append(('previous_cursor', previous_cursor))
            
        if next_cursor is not None:
            
            _query_params.append(('next_cursor', next_cursor))
            
        if page_size is not None:
            
            _query_params.append(('page_size', page_size))
            
        if sort_field is not None:
            
            _query_params.append(('sort_field', sort_field))
            
        if sort_direction is not None:
            
            _query_params.append(('sort_direction', sort_direction))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/workspaces/{ws_id}/security_findings',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    async def workspaces_ws_id_security_findings_option_type_options_get(
        self,
        ws_id: Annotated[StrictStr, Field(description="Workspace ID")],
        option_type: Annotated[StrictStr, Field(description="Option type. One of: [image_repo, package_name, external_vuln_id, release_tag]")],
        release_tag: Annotated[Optional[StrictStr], Field(description="Release tag")] = None,
        package_name: Annotated[Optional[StrictStr], Field(description="Package name")] = None,
        package_ecosystem: Annotated[Optional[StrictStr], Field(description="Package ecosystem")] = None,
        package_distro: Annotated[Optional[StrictStr], Field(description="Package distro")] = None,
        severity: Annotated[Optional[StrictStr], Field(description="Security finding severity")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SecurityfindingsOptionsResourceList:
        """List options for a workspace

        Retrieves available options for given workspace by given type.

        :param ws_id: Workspace ID (required)
        :type ws_id: str
        :param option_type: Option type. One of: [image_repo, package_name, external_vuln_id, release_tag] (required)
        :type option_type: str
        :param release_tag: Release tag
        :type release_tag: str
        :param package_name: Package name
        :type package_name: str
        :param package_ecosystem: Package ecosystem
        :type package_ecosystem: str
        :param package_distro: Package distro
        :type package_distro: str
        :param severity: Security finding severity
        :type severity: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._workspaces_ws_id_security_findings_option_type_options_get_serialize(
            ws_id=ws_id,
            option_type=option_type,
            release_tag=release_tag,
            package_name=package_name,
            package_ecosystem=package_ecosystem,
            package_distro=package_distro,
            severity=severity,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SecurityfindingsOptionsResourceList",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def workspaces_ws_id_security_findings_option_type_options_get_with_http_info(
        self,
        ws_id: Annotated[StrictStr, Field(description="Workspace ID")],
        option_type: Annotated[StrictStr, Field(description="Option type. One of: [image_repo, package_name, external_vuln_id, release_tag]")],
        release_tag: Annotated[Optional[StrictStr], Field(description="Release tag")] = None,
        package_name: Annotated[Optional[StrictStr], Field(description="Package name")] = None,
        package_ecosystem: Annotated[Optional[StrictStr], Field(description="Package ecosystem")] = None,
        package_distro: Annotated[Optional[StrictStr], Field(description="Package distro")] = None,
        severity: Annotated[Optional[StrictStr], Field(description="Security finding severity")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SecurityfindingsOptionsResourceList]:
        """List options for a workspace

        Retrieves available options for given workspace by given type.

        :param ws_id: Workspace ID (required)
        :type ws_id: str
        :param option_type: Option type. One of: [image_repo, package_name, external_vuln_id, release_tag] (required)
        :type option_type: str
        :param release_tag: Release tag
        :type release_tag: str
        :param package_name: Package name
        :type package_name: str
        :param package_ecosystem: Package ecosystem
        :type package_ecosystem: str
        :param package_distro: Package distro
        :type package_distro: str
        :param severity: Security finding severity
        :type severity: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._workspaces_ws_id_security_findings_option_type_options_get_serialize(
            ws_id=ws_id,
            option_type=option_type,
            release_tag=release_tag,
            package_name=package_name,
            package_ecosystem=package_ecosystem,
            package_distro=package_distro,
            severity=severity,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SecurityfindingsOptionsResourceList",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def workspaces_ws_id_security_findings_option_type_options_get_without_preload_content(
        self,
        ws_id: Annotated[StrictStr, Field(description="Workspace ID")],
        option_type: Annotated[StrictStr, Field(description="Option type. One of: [image_repo, package_name, external_vuln_id, release_tag]")],
        release_tag: Annotated[Optional[StrictStr], Field(description="Release tag")] = None,
        package_name: Annotated[Optional[StrictStr], Field(description="Package name")] = None,
        package_ecosystem: Annotated[Optional[StrictStr], Field(description="Package ecosystem")] = None,
        package_distro: Annotated[Optional[StrictStr], Field(description="Package distro")] = None,
        severity: Annotated[Optional[StrictStr], Field(description="Security finding severity")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List options for a workspace

        Retrieves available options for given workspace by given type.

        :param ws_id: Workspace ID (required)
        :type ws_id: str
        :param option_type: Option type. One of: [image_repo, package_name, external_vuln_id, release_tag] (required)
        :type option_type: str
        :param release_tag: Release tag
        :type release_tag: str
        :param package_name: Package name
        :type package_name: str
        :param package_ecosystem: Package ecosystem
        :type package_ecosystem: str
        :param package_distro: Package distro
        :type package_distro: str
        :param severity: Security finding severity
        :type severity: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._workspaces_ws_id_security_findings_option_type_options_get_serialize(
            ws_id=ws_id,
            option_type=option_type,
            release_tag=release_tag,
            package_name=package_name,
            package_ecosystem=package_ecosystem,
            package_distro=package_distro,
            severity=severity,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SecurityfindingsOptionsResourceList",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _workspaces_ws_id_security_findings_option_type_options_get_serialize(
        self,
        ws_id,
        option_type,
        release_tag,
        package_name,
        package_ecosystem,
        package_distro,
        severity,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if ws_id is not None:
            _path_params['ws_id'] = ws_id
        if option_type is not None:
            _path_params['optionType'] = option_type
        # process the query parameters
        if release_tag is not None:
            
            _query_params.append(('release_tag', release_tag))
            
        if package_name is not None:
            
            _query_params.append(('package_name', package_name))
            
        if package_ecosystem is not None:
            
            _query_params.append(('package_ecosystem', package_ecosystem))
            
        if package_distro is not None:
            
            _query_params.append(('package_distro', package_distro))
            
        if severity is not None:
            
            _query_params.append(('severity', severity))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/workspaces/{ws_id}/security_findings/{optionType}/options',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    async def workspaces_ws_id_security_findings_report_get(
        self,
        ws_id: Annotated[StrictStr, Field(description="Workspace ID")],
        release_tag: Annotated[Optional[StrictStr], Field(description="Release tag")] = None,
        package_name: Annotated[Optional[StrictStr], Field(description="Package name")] = None,
        package_ecosystem: Annotated[Optional[StrictStr], Field(description="Package ecosystem")] = None,
        package_distro: Annotated[Optional[StrictStr], Field(description="Package distro")] = None,
        severity: Annotated[Optional[StrictStr], Field(description="Security finding severity. Should be one of: critical, high, medium, low")] = None,
        external_vuln_id: Annotated[Optional[StrictStr], Field(description="External vulnerability ID")] = None,
        image_repo: Annotated[Optional[StrictStr], Field(description="Image repository")] = None,
        format: Annotated[Optional[StrictStr], Field(description="file format, surrently supports 'csv'")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> bytearray:
        """Export a security findings file for a workspace

        Export a detailed list of security findings for a workspace, specified by release_tag.

        :param ws_id: Workspace ID (required)
        :type ws_id: str
        :param release_tag: Release tag
        :type release_tag: str
        :param package_name: Package name
        :type package_name: str
        :param package_ecosystem: Package ecosystem
        :type package_ecosystem: str
        :param package_distro: Package distro
        :type package_distro: str
        :param severity: Security finding severity. Should be one of: critical, high, medium, low
        :type severity: str
        :param external_vuln_id: External vulnerability ID
        :type external_vuln_id: str
        :param image_repo: Image repository
        :type image_repo: str
        :param format: file format, surrently supports 'csv'
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._workspaces_ws_id_security_findings_report_get_serialize(
            ws_id=ws_id,
            release_tag=release_tag,
            package_name=package_name,
            package_ecosystem=package_ecosystem,
            package_distro=package_distro,
            severity=severity,
            external_vuln_id=external_vuln_id,
            image_repo=image_repo,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "bytearray",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def workspaces_ws_id_security_findings_report_get_with_http_info(
        self,
        ws_id: Annotated[StrictStr, Field(description="Workspace ID")],
        release_tag: Annotated[Optional[StrictStr], Field(description="Release tag")] = None,
        package_name: Annotated[Optional[StrictStr], Field(description="Package name")] = None,
        package_ecosystem: Annotated[Optional[StrictStr], Field(description="Package ecosystem")] = None,
        package_distro: Annotated[Optional[StrictStr], Field(description="Package distro")] = None,
        severity: Annotated[Optional[StrictStr], Field(description="Security finding severity. Should be one of: critical, high, medium, low")] = None,
        external_vuln_id: Annotated[Optional[StrictStr], Field(description="External vulnerability ID")] = None,
        image_repo: Annotated[Optional[StrictStr], Field(description="Image repository")] = None,
        format: Annotated[Optional[StrictStr], Field(description="file format, surrently supports 'csv'")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[bytearray]:
        """Export a security findings file for a workspace

        Export a detailed list of security findings for a workspace, specified by release_tag.

        :param ws_id: Workspace ID (required)
        :type ws_id: str
        :param release_tag: Release tag
        :type release_tag: str
        :param package_name: Package name
        :type package_name: str
        :param package_ecosystem: Package ecosystem
        :type package_ecosystem: str
        :param package_distro: Package distro
        :type package_distro: str
        :param severity: Security finding severity. Should be one of: critical, high, medium, low
        :type severity: str
        :param external_vuln_id: External vulnerability ID
        :type external_vuln_id: str
        :param image_repo: Image repository
        :type image_repo: str
        :param format: file format, surrently supports 'csv'
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._workspaces_ws_id_security_findings_report_get_serialize(
            ws_id=ws_id,
            release_tag=release_tag,
            package_name=package_name,
            package_ecosystem=package_ecosystem,
            package_distro=package_distro,
            severity=severity,
            external_vuln_id=external_vuln_id,
            image_repo=image_repo,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "bytearray",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def workspaces_ws_id_security_findings_report_get_without_preload_content(
        self,
        ws_id: Annotated[StrictStr, Field(description="Workspace ID")],
        release_tag: Annotated[Optional[StrictStr], Field(description="Release tag")] = None,
        package_name: Annotated[Optional[StrictStr], Field(description="Package name")] = None,
        package_ecosystem: Annotated[Optional[StrictStr], Field(description="Package ecosystem")] = None,
        package_distro: Annotated[Optional[StrictStr], Field(description="Package distro")] = None,
        severity: Annotated[Optional[StrictStr], Field(description="Security finding severity. Should be one of: critical, high, medium, low")] = None,
        external_vuln_id: Annotated[Optional[StrictStr], Field(description="External vulnerability ID")] = None,
        image_repo: Annotated[Optional[StrictStr], Field(description="Image repository")] = None,
        format: Annotated[Optional[StrictStr], Field(description="file format, surrently supports 'csv'")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Export a security findings file for a workspace

        Export a detailed list of security findings for a workspace, specified by release_tag.

        :param ws_id: Workspace ID (required)
        :type ws_id: str
        :param release_tag: Release tag
        :type release_tag: str
        :param package_name: Package name
        :type package_name: str
        :param package_ecosystem: Package ecosystem
        :type package_ecosystem: str
        :param package_distro: Package distro
        :type package_distro: str
        :param severity: Security finding severity. Should be one of: critical, high, medium, low
        :type severity: str
        :param external_vuln_id: External vulnerability ID
        :type external_vuln_id: str
        :param image_repo: Image repository
        :type image_repo: str
        :param format: file format, surrently supports 'csv'
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._workspaces_ws_id_security_findings_report_get_serialize(
            ws_id=ws_id,
            release_tag=release_tag,
            package_name=package_name,
            package_ecosystem=package_ecosystem,
            package_distro=package_distro,
            severity=severity,
            external_vuln_id=external_vuln_id,
            image_repo=image_repo,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "bytearray",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _workspaces_ws_id_security_findings_report_get_serialize(
        self,
        ws_id,
        release_tag,
        package_name,
        package_ecosystem,
        package_distro,
        severity,
        external_vuln_id,
        image_repo,
        format,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if ws_id is not None:
            _path_params['ws_id'] = ws_id
        # process the query parameters
        if release_tag is not None:
            
            _query_params.append(('release_tag', release_tag))
            
        if package_name is not None:
            
            _query_params.append(('package_name', package_name))
            
        if package_ecosystem is not None:
            
            _query_params.append(('package_ecosystem', package_ecosystem))
            
        if package_distro is not None:
            
            _query_params.append(('package_distro', package_distro))
            
        if severity is not None:
            
            _query_params.append(('severity', severity))
            
        if external_vuln_id is not None:
            
            _query_params.append(('external_vuln_id', external_vuln_id))
            
        if image_repo is not None:
            
            _query_params.append(('image_repo', image_repo))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'text/csv'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/workspaces/{ws_id}/security_findings/report',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



# coding: utf-8

"""
    Root.io API

    This is the API documentation for Root.io.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from root_io.sdk.cloud_client.models.entities_workspace_tag import EntitiesWorkspaceTag
from root_io.sdk.cloud_client.models.organization import Organization
from root_io.sdk.cloud_client.models.workspace_role_binding import WorkspaceRoleBinding
from typing import Optional, Set
from typing_extensions import Self

class Workspace(BaseModel):
    """
    Workspace
    """ # noqa: E501
    consumer: Optional[Organization] = None
    consumer_id: Optional[StrictStr] = None
    created_at: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    name: StrictStr
    producer: Optional[Organization] = None
    producer_id: Optional[StrictStr] = None
    tags: Optional[List[EntitiesWorkspaceTag]] = None
    updated_at: Optional[StrictStr] = None
    workspace_role_bindings: Optional[List[WorkspaceRoleBinding]] = None
    __properties: ClassVar[List[str]] = ["consumer", "consumer_id", "created_at", "id", "name", "producer", "producer_id", "tags", "updated_at", "workspace_role_bindings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Workspace from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of consumer
        if self.consumer:
            _dict['consumer'] = self.consumer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of producer
        if self.producer:
            _dict['producer'] = self.producer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item in self.tags:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tags'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in workspace_role_bindings (list)
        _items = []
        if self.workspace_role_bindings:
            for _item in self.workspace_role_bindings:
                if _item:
                    _items.append(_item.to_dict())
            _dict['workspace_role_bindings'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Workspace from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "consumer": Organization.from_dict(obj["consumer"]) if obj.get("consumer") is not None else None,
            "consumer_id": obj.get("consumer_id"),
            "created_at": obj.get("created_at"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "producer": Organization.from_dict(obj["producer"]) if obj.get("producer") is not None else None,
            "producer_id": obj.get("producer_id"),
            "tags": [EntitiesWorkspaceTag.from_dict(_item) for _item in obj["tags"]] if obj.get("tags") is not None else None,
            "updated_at": obj.get("updated_at"),
            "workspace_role_bindings": [WorkspaceRoleBinding.from_dict(_item) for _item in obj["workspace_role_bindings"]] if obj.get("workspace_role_bindings") is not None else None
        })
        return _obj



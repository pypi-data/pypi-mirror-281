# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _Thickness3DPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkThickness3DPython
else:
    import _itkThickness3DPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_vector_refPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkIndexPython
import itk.ITKCommonBasePython
import itk.itkImageRegionPython
import itk.itkRGBAPixelPython
import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageToImageFilterCommonPython
import itk.itkNeighborhoodPython

def itkBinaryThinningImageFilter3DID3ID3_New():
    return itkBinaryThinningImageFilter3DID3ID3.New()

class itkBinaryThinningImageFilter3DID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""Proxy of C++ itkBinaryThinningImageFilter3DID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBinaryThinningImageFilter3DID3ID3_Pointer"""
        return _itkThickness3DPython.itkBinaryThinningImageFilter3DID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBinaryThinningImageFilter3DID3ID3_Pointer"""
        return _itkThickness3DPython.itkBinaryThinningImageFilter3DID3ID3_Clone(self)

    def GetThinning(self):
        r"""GetThinning(self) -> itkImageD3"""
        return _itkThickness3DPython.itkBinaryThinningImageFilter3DID3ID3_GetThinning(self)
    SameDimensionCheck = _itkThickness3DPython.itkBinaryThinningImageFilter3DID3ID3_SameDimensionCheck
    
    SameTypeCheck = _itkThickness3DPython.itkBinaryThinningImageFilter3DID3ID3_SameTypeCheck
    
    InputAdditiveOperatorsCheck = _itkThickness3DPython.itkBinaryThinningImageFilter3DID3ID3_InputAdditiveOperatorsCheck
    
    InputConvertibleToIntCheck = _itkThickness3DPython.itkBinaryThinningImageFilter3DID3ID3_InputConvertibleToIntCheck
    
    IntConvertibleToInputCheck = _itkThickness3DPython.itkBinaryThinningImageFilter3DID3ID3_IntConvertibleToInputCheck
    
    InputIntComparableCheck = _itkThickness3DPython.itkBinaryThinningImageFilter3DID3ID3_InputIntComparableCheck
    
    __swig_destroy__ = _itkThickness3DPython.delete_itkBinaryThinningImageFilter3DID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBinaryThinningImageFilter3DID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkThickness3DPython.itkBinaryThinningImageFilter3DID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBinaryThinningImageFilter3DID3ID3

        Create a new object of the class itkBinaryThinningImageFilter3DID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThinningImageFilter3DID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThinningImageFilter3DID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThinningImageFilter3DID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThinningImageFilter3DID3ID3 in _itkThickness3DPython:
_itkThickness3DPython.itkBinaryThinningImageFilter3DID3ID3_swigregister(itkBinaryThinningImageFilter3DID3ID3)

def itkBinaryThinningImageFilter3DIF3IF3_New():
    return itkBinaryThinningImageFilter3DIF3IF3.New()

class itkBinaryThinningImageFilter3DIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""Proxy of C++ itkBinaryThinningImageFilter3DIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBinaryThinningImageFilter3DIF3IF3_Pointer"""
        return _itkThickness3DPython.itkBinaryThinningImageFilter3DIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBinaryThinningImageFilter3DIF3IF3_Pointer"""
        return _itkThickness3DPython.itkBinaryThinningImageFilter3DIF3IF3_Clone(self)

    def GetThinning(self):
        r"""GetThinning(self) -> itkImageF3"""
        return _itkThickness3DPython.itkBinaryThinningImageFilter3DIF3IF3_GetThinning(self)
    SameDimensionCheck = _itkThickness3DPython.itkBinaryThinningImageFilter3DIF3IF3_SameDimensionCheck
    
    SameTypeCheck = _itkThickness3DPython.itkBinaryThinningImageFilter3DIF3IF3_SameTypeCheck
    
    InputAdditiveOperatorsCheck = _itkThickness3DPython.itkBinaryThinningImageFilter3DIF3IF3_InputAdditiveOperatorsCheck
    
    InputConvertibleToIntCheck = _itkThickness3DPython.itkBinaryThinningImageFilter3DIF3IF3_InputConvertibleToIntCheck
    
    IntConvertibleToInputCheck = _itkThickness3DPython.itkBinaryThinningImageFilter3DIF3IF3_IntConvertibleToInputCheck
    
    InputIntComparableCheck = _itkThickness3DPython.itkBinaryThinningImageFilter3DIF3IF3_InputIntComparableCheck
    
    __swig_destroy__ = _itkThickness3DPython.delete_itkBinaryThinningImageFilter3DIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBinaryThinningImageFilter3DIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkThickness3DPython.itkBinaryThinningImageFilter3DIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBinaryThinningImageFilter3DIF3IF3

        Create a new object of the class itkBinaryThinningImageFilter3DIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThinningImageFilter3DIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThinningImageFilter3DIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThinningImageFilter3DIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThinningImageFilter3DIF3IF3 in _itkThickness3DPython:
_itkThickness3DPython.itkBinaryThinningImageFilter3DIF3IF3_swigregister(itkBinaryThinningImageFilter3DIF3IF3)

def itkBinaryThinningImageFilter3DISS3ISS3_New():
    return itkBinaryThinningImageFilter3DISS3ISS3.New()

class itkBinaryThinningImageFilter3DISS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""Proxy of C++ itkBinaryThinningImageFilter3DISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBinaryThinningImageFilter3DISS3ISS3_Pointer"""
        return _itkThickness3DPython.itkBinaryThinningImageFilter3DISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBinaryThinningImageFilter3DISS3ISS3_Pointer"""
        return _itkThickness3DPython.itkBinaryThinningImageFilter3DISS3ISS3_Clone(self)

    def GetThinning(self):
        r"""GetThinning(self) -> itkImageSS3"""
        return _itkThickness3DPython.itkBinaryThinningImageFilter3DISS3ISS3_GetThinning(self)
    SameDimensionCheck = _itkThickness3DPython.itkBinaryThinningImageFilter3DISS3ISS3_SameDimensionCheck
    
    SameTypeCheck = _itkThickness3DPython.itkBinaryThinningImageFilter3DISS3ISS3_SameTypeCheck
    
    InputAdditiveOperatorsCheck = _itkThickness3DPython.itkBinaryThinningImageFilter3DISS3ISS3_InputAdditiveOperatorsCheck
    
    InputConvertibleToIntCheck = _itkThickness3DPython.itkBinaryThinningImageFilter3DISS3ISS3_InputConvertibleToIntCheck
    
    IntConvertibleToInputCheck = _itkThickness3DPython.itkBinaryThinningImageFilter3DISS3ISS3_IntConvertibleToInputCheck
    
    InputIntComparableCheck = _itkThickness3DPython.itkBinaryThinningImageFilter3DISS3ISS3_InputIntComparableCheck
    
    __swig_destroy__ = _itkThickness3DPython.delete_itkBinaryThinningImageFilter3DISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBinaryThinningImageFilter3DISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkThickness3DPython.itkBinaryThinningImageFilter3DISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBinaryThinningImageFilter3DISS3ISS3

        Create a new object of the class itkBinaryThinningImageFilter3DISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThinningImageFilter3DISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThinningImageFilter3DISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThinningImageFilter3DISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThinningImageFilter3DISS3ISS3 in _itkThickness3DPython:
_itkThickness3DPython.itkBinaryThinningImageFilter3DISS3ISS3_swigregister(itkBinaryThinningImageFilter3DISS3ISS3)

def itkBinaryThinningImageFilter3DIUC3IUC3_New():
    return itkBinaryThinningImageFilter3DIUC3IUC3.New()

class itkBinaryThinningImageFilter3DIUC3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""Proxy of C++ itkBinaryThinningImageFilter3DIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBinaryThinningImageFilter3DIUC3IUC3_Pointer"""
        return _itkThickness3DPython.itkBinaryThinningImageFilter3DIUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBinaryThinningImageFilter3DIUC3IUC3_Pointer"""
        return _itkThickness3DPython.itkBinaryThinningImageFilter3DIUC3IUC3_Clone(self)

    def GetThinning(self):
        r"""GetThinning(self) -> itkImageUC3"""
        return _itkThickness3DPython.itkBinaryThinningImageFilter3DIUC3IUC3_GetThinning(self)
    SameDimensionCheck = _itkThickness3DPython.itkBinaryThinningImageFilter3DIUC3IUC3_SameDimensionCheck
    
    SameTypeCheck = _itkThickness3DPython.itkBinaryThinningImageFilter3DIUC3IUC3_SameTypeCheck
    
    InputAdditiveOperatorsCheck = _itkThickness3DPython.itkBinaryThinningImageFilter3DIUC3IUC3_InputAdditiveOperatorsCheck
    
    InputConvertibleToIntCheck = _itkThickness3DPython.itkBinaryThinningImageFilter3DIUC3IUC3_InputConvertibleToIntCheck
    
    IntConvertibleToInputCheck = _itkThickness3DPython.itkBinaryThinningImageFilter3DIUC3IUC3_IntConvertibleToInputCheck
    
    InputIntComparableCheck = _itkThickness3DPython.itkBinaryThinningImageFilter3DIUC3IUC3_InputIntComparableCheck
    
    __swig_destroy__ = _itkThickness3DPython.delete_itkBinaryThinningImageFilter3DIUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBinaryThinningImageFilter3DIUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkThickness3DPython.itkBinaryThinningImageFilter3DIUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBinaryThinningImageFilter3DIUC3IUC3

        Create a new object of the class itkBinaryThinningImageFilter3DIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThinningImageFilter3DIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThinningImageFilter3DIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThinningImageFilter3DIUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThinningImageFilter3DIUC3IUC3 in _itkThickness3DPython:
_itkThickness3DPython.itkBinaryThinningImageFilter3DIUC3IUC3_swigregister(itkBinaryThinningImageFilter3DIUC3IUC3)

def itkBinaryThinningImageFilter3DIUS3IUS3_New():
    return itkBinaryThinningImageFilter3DIUS3IUS3.New()

class itkBinaryThinningImageFilter3DIUS3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""Proxy of C++ itkBinaryThinningImageFilter3DIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBinaryThinningImageFilter3DIUS3IUS3_Pointer"""
        return _itkThickness3DPython.itkBinaryThinningImageFilter3DIUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBinaryThinningImageFilter3DIUS3IUS3_Pointer"""
        return _itkThickness3DPython.itkBinaryThinningImageFilter3DIUS3IUS3_Clone(self)

    def GetThinning(self):
        r"""GetThinning(self) -> itkImageUS3"""
        return _itkThickness3DPython.itkBinaryThinningImageFilter3DIUS3IUS3_GetThinning(self)
    SameDimensionCheck = _itkThickness3DPython.itkBinaryThinningImageFilter3DIUS3IUS3_SameDimensionCheck
    
    SameTypeCheck = _itkThickness3DPython.itkBinaryThinningImageFilter3DIUS3IUS3_SameTypeCheck
    
    InputAdditiveOperatorsCheck = _itkThickness3DPython.itkBinaryThinningImageFilter3DIUS3IUS3_InputAdditiveOperatorsCheck
    
    InputConvertibleToIntCheck = _itkThickness3DPython.itkBinaryThinningImageFilter3DIUS3IUS3_InputConvertibleToIntCheck
    
    IntConvertibleToInputCheck = _itkThickness3DPython.itkBinaryThinningImageFilter3DIUS3IUS3_IntConvertibleToInputCheck
    
    InputIntComparableCheck = _itkThickness3DPython.itkBinaryThinningImageFilter3DIUS3IUS3_InputIntComparableCheck
    
    __swig_destroy__ = _itkThickness3DPython.delete_itkBinaryThinningImageFilter3DIUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBinaryThinningImageFilter3DIUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkThickness3DPython.itkBinaryThinningImageFilter3DIUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBinaryThinningImageFilter3DIUS3IUS3

        Create a new object of the class itkBinaryThinningImageFilter3DIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThinningImageFilter3DIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThinningImageFilter3DIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThinningImageFilter3DIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThinningImageFilter3DIUS3IUS3 in _itkThickness3DPython:
_itkThickness3DPython.itkBinaryThinningImageFilter3DIUS3IUS3_swigregister(itkBinaryThinningImageFilter3DIUS3IUS3)

def itkMedialThicknessImageFilter3DID3ID3_New():
    return itkMedialThicknessImageFilter3DID3ID3.New()

class itkMedialThicknessImageFilter3DID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""Proxy of C++ itkMedialThicknessImageFilter3DID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMedialThicknessImageFilter3DID3ID3_Pointer"""
        return _itkThickness3DPython.itkMedialThicknessImageFilter3DID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMedialThicknessImageFilter3DID3ID3_Pointer"""
        return _itkThickness3DPython.itkMedialThicknessImageFilter3DID3ID3_Clone(self)
    __swig_destroy__ = _itkThickness3DPython.delete_itkMedialThicknessImageFilter3DID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMedialThicknessImageFilter3DID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkThickness3DPython.itkMedialThicknessImageFilter3DID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMedialThicknessImageFilter3DID3ID3

        Create a new object of the class itkMedialThicknessImageFilter3DID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMedialThicknessImageFilter3DID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMedialThicknessImageFilter3DID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMedialThicknessImageFilter3DID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMedialThicknessImageFilter3DID3ID3 in _itkThickness3DPython:
_itkThickness3DPython.itkMedialThicknessImageFilter3DID3ID3_swigregister(itkMedialThicknessImageFilter3DID3ID3)

def itkMedialThicknessImageFilter3DID3IF3_New():
    return itkMedialThicknessImageFilter3DID3IF3.New()

class itkMedialThicknessImageFilter3DID3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3IF3):
    r"""Proxy of C++ itkMedialThicknessImageFilter3DID3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMedialThicknessImageFilter3DID3IF3_Pointer"""
        return _itkThickness3DPython.itkMedialThicknessImageFilter3DID3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMedialThicknessImageFilter3DID3IF3_Pointer"""
        return _itkThickness3DPython.itkMedialThicknessImageFilter3DID3IF3_Clone(self)
    __swig_destroy__ = _itkThickness3DPython.delete_itkMedialThicknessImageFilter3DID3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMedialThicknessImageFilter3DID3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkThickness3DPython.itkMedialThicknessImageFilter3DID3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMedialThicknessImageFilter3DID3IF3

        Create a new object of the class itkMedialThicknessImageFilter3DID3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMedialThicknessImageFilter3DID3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMedialThicknessImageFilter3DID3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMedialThicknessImageFilter3DID3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMedialThicknessImageFilter3DID3IF3 in _itkThickness3DPython:
_itkThickness3DPython.itkMedialThicknessImageFilter3DID3IF3_swigregister(itkMedialThicknessImageFilter3DID3IF3)

def itkMedialThicknessImageFilter3DIF3ID3_New():
    return itkMedialThicknessImageFilter3DIF3ID3.New()

class itkMedialThicknessImageFilter3DIF3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3ID3):
    r"""Proxy of C++ itkMedialThicknessImageFilter3DIF3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMedialThicknessImageFilter3DIF3ID3_Pointer"""
        return _itkThickness3DPython.itkMedialThicknessImageFilter3DIF3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMedialThicknessImageFilter3DIF3ID3_Pointer"""
        return _itkThickness3DPython.itkMedialThicknessImageFilter3DIF3ID3_Clone(self)
    __swig_destroy__ = _itkThickness3DPython.delete_itkMedialThicknessImageFilter3DIF3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMedialThicknessImageFilter3DIF3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkThickness3DPython.itkMedialThicknessImageFilter3DIF3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMedialThicknessImageFilter3DIF3ID3

        Create a new object of the class itkMedialThicknessImageFilter3DIF3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMedialThicknessImageFilter3DIF3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMedialThicknessImageFilter3DIF3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMedialThicknessImageFilter3DIF3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMedialThicknessImageFilter3DIF3ID3 in _itkThickness3DPython:
_itkThickness3DPython.itkMedialThicknessImageFilter3DIF3ID3_swigregister(itkMedialThicknessImageFilter3DIF3ID3)

def itkMedialThicknessImageFilter3DIF3IF3_New():
    return itkMedialThicknessImageFilter3DIF3IF3.New()

class itkMedialThicknessImageFilter3DIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""Proxy of C++ itkMedialThicknessImageFilter3DIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMedialThicknessImageFilter3DIF3IF3_Pointer"""
        return _itkThickness3DPython.itkMedialThicknessImageFilter3DIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMedialThicknessImageFilter3DIF3IF3_Pointer"""
        return _itkThickness3DPython.itkMedialThicknessImageFilter3DIF3IF3_Clone(self)
    __swig_destroy__ = _itkThickness3DPython.delete_itkMedialThicknessImageFilter3DIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMedialThicknessImageFilter3DIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkThickness3DPython.itkMedialThicknessImageFilter3DIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMedialThicknessImageFilter3DIF3IF3

        Create a new object of the class itkMedialThicknessImageFilter3DIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMedialThicknessImageFilter3DIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMedialThicknessImageFilter3DIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMedialThicknessImageFilter3DIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMedialThicknessImageFilter3DIF3IF3 in _itkThickness3DPython:
_itkThickness3DPython.itkMedialThicknessImageFilter3DIF3IF3_swigregister(itkMedialThicknessImageFilter3DIF3IF3)

def itkMedialThicknessImageFilter3DISS3ID3_New():
    return itkMedialThicknessImageFilter3DISS3ID3.New()

class itkMedialThicknessImageFilter3DISS3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ID3):
    r"""Proxy of C++ itkMedialThicknessImageFilter3DISS3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMedialThicknessImageFilter3DISS3ID3_Pointer"""
        return _itkThickness3DPython.itkMedialThicknessImageFilter3DISS3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMedialThicknessImageFilter3DISS3ID3_Pointer"""
        return _itkThickness3DPython.itkMedialThicknessImageFilter3DISS3ID3_Clone(self)
    __swig_destroy__ = _itkThickness3DPython.delete_itkMedialThicknessImageFilter3DISS3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMedialThicknessImageFilter3DISS3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkThickness3DPython.itkMedialThicknessImageFilter3DISS3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMedialThicknessImageFilter3DISS3ID3

        Create a new object of the class itkMedialThicknessImageFilter3DISS3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMedialThicknessImageFilter3DISS3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMedialThicknessImageFilter3DISS3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMedialThicknessImageFilter3DISS3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMedialThicknessImageFilter3DISS3ID3 in _itkThickness3DPython:
_itkThickness3DPython.itkMedialThicknessImageFilter3DISS3ID3_swigregister(itkMedialThicknessImageFilter3DISS3ID3)

def itkMedialThicknessImageFilter3DISS3IF3_New():
    return itkMedialThicknessImageFilter3DISS3IF3.New()

class itkMedialThicknessImageFilter3DISS3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3IF3):
    r"""Proxy of C++ itkMedialThicknessImageFilter3DISS3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMedialThicknessImageFilter3DISS3IF3_Pointer"""
        return _itkThickness3DPython.itkMedialThicknessImageFilter3DISS3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMedialThicknessImageFilter3DISS3IF3_Pointer"""
        return _itkThickness3DPython.itkMedialThicknessImageFilter3DISS3IF3_Clone(self)
    __swig_destroy__ = _itkThickness3DPython.delete_itkMedialThicknessImageFilter3DISS3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMedialThicknessImageFilter3DISS3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkThickness3DPython.itkMedialThicknessImageFilter3DISS3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMedialThicknessImageFilter3DISS3IF3

        Create a new object of the class itkMedialThicknessImageFilter3DISS3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMedialThicknessImageFilter3DISS3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMedialThicknessImageFilter3DISS3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMedialThicknessImageFilter3DISS3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMedialThicknessImageFilter3DISS3IF3 in _itkThickness3DPython:
_itkThickness3DPython.itkMedialThicknessImageFilter3DISS3IF3_swigregister(itkMedialThicknessImageFilter3DISS3IF3)

def itkMedialThicknessImageFilter3DIUC3ID3_New():
    return itkMedialThicknessImageFilter3DIUC3ID3.New()

class itkMedialThicknessImageFilter3DIUC3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3ID3):
    r"""Proxy of C++ itkMedialThicknessImageFilter3DIUC3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMedialThicknessImageFilter3DIUC3ID3_Pointer"""
        return _itkThickness3DPython.itkMedialThicknessImageFilter3DIUC3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMedialThicknessImageFilter3DIUC3ID3_Pointer"""
        return _itkThickness3DPython.itkMedialThicknessImageFilter3DIUC3ID3_Clone(self)
    __swig_destroy__ = _itkThickness3DPython.delete_itkMedialThicknessImageFilter3DIUC3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMedialThicknessImageFilter3DIUC3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkThickness3DPython.itkMedialThicknessImageFilter3DIUC3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMedialThicknessImageFilter3DIUC3ID3

        Create a new object of the class itkMedialThicknessImageFilter3DIUC3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMedialThicknessImageFilter3DIUC3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMedialThicknessImageFilter3DIUC3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMedialThicknessImageFilter3DIUC3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMedialThicknessImageFilter3DIUC3ID3 in _itkThickness3DPython:
_itkThickness3DPython.itkMedialThicknessImageFilter3DIUC3ID3_swigregister(itkMedialThicknessImageFilter3DIUC3ID3)

def itkMedialThicknessImageFilter3DIUC3IF3_New():
    return itkMedialThicknessImageFilter3DIUC3IF3.New()

class itkMedialThicknessImageFilter3DIUC3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IF3):
    r"""Proxy of C++ itkMedialThicknessImageFilter3DIUC3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMedialThicknessImageFilter3DIUC3IF3_Pointer"""
        return _itkThickness3DPython.itkMedialThicknessImageFilter3DIUC3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMedialThicknessImageFilter3DIUC3IF3_Pointer"""
        return _itkThickness3DPython.itkMedialThicknessImageFilter3DIUC3IF3_Clone(self)
    __swig_destroy__ = _itkThickness3DPython.delete_itkMedialThicknessImageFilter3DIUC3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMedialThicknessImageFilter3DIUC3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkThickness3DPython.itkMedialThicknessImageFilter3DIUC3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMedialThicknessImageFilter3DIUC3IF3

        Create a new object of the class itkMedialThicknessImageFilter3DIUC3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMedialThicknessImageFilter3DIUC3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMedialThicknessImageFilter3DIUC3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMedialThicknessImageFilter3DIUC3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMedialThicknessImageFilter3DIUC3IF3 in _itkThickness3DPython:
_itkThickness3DPython.itkMedialThicknessImageFilter3DIUC3IF3_swigregister(itkMedialThicknessImageFilter3DIUC3IF3)

def itkMedialThicknessImageFilter3DIUS3ID3_New():
    return itkMedialThicknessImageFilter3DIUS3ID3.New()

class itkMedialThicknessImageFilter3DIUS3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3ID3):
    r"""Proxy of C++ itkMedialThicknessImageFilter3DIUS3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMedialThicknessImageFilter3DIUS3ID3_Pointer"""
        return _itkThickness3DPython.itkMedialThicknessImageFilter3DIUS3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMedialThicknessImageFilter3DIUS3ID3_Pointer"""
        return _itkThickness3DPython.itkMedialThicknessImageFilter3DIUS3ID3_Clone(self)
    __swig_destroy__ = _itkThickness3DPython.delete_itkMedialThicknessImageFilter3DIUS3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMedialThicknessImageFilter3DIUS3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkThickness3DPython.itkMedialThicknessImageFilter3DIUS3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMedialThicknessImageFilter3DIUS3ID3

        Create a new object of the class itkMedialThicknessImageFilter3DIUS3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMedialThicknessImageFilter3DIUS3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMedialThicknessImageFilter3DIUS3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMedialThicknessImageFilter3DIUS3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMedialThicknessImageFilter3DIUS3ID3 in _itkThickness3DPython:
_itkThickness3DPython.itkMedialThicknessImageFilter3DIUS3ID3_swigregister(itkMedialThicknessImageFilter3DIUS3ID3)

def itkMedialThicknessImageFilter3DIUS3IF3_New():
    return itkMedialThicknessImageFilter3DIUS3IF3.New()

class itkMedialThicknessImageFilter3DIUS3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IF3):
    r"""Proxy of C++ itkMedialThicknessImageFilter3DIUS3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMedialThicknessImageFilter3DIUS3IF3_Pointer"""
        return _itkThickness3DPython.itkMedialThicknessImageFilter3DIUS3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMedialThicknessImageFilter3DIUS3IF3_Pointer"""
        return _itkThickness3DPython.itkMedialThicknessImageFilter3DIUS3IF3_Clone(self)
    __swig_destroy__ = _itkThickness3DPython.delete_itkMedialThicknessImageFilter3DIUS3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMedialThicknessImageFilter3DIUS3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkThickness3DPython.itkMedialThicknessImageFilter3DIUS3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMedialThicknessImageFilter3DIUS3IF3

        Create a new object of the class itkMedialThicknessImageFilter3DIUS3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMedialThicknessImageFilter3DIUS3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMedialThicknessImageFilter3DIUS3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMedialThicknessImageFilter3DIUS3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMedialThicknessImageFilter3DIUS3IF3 in _itkThickness3DPython:
_itkThickness3DPython.itkMedialThicknessImageFilter3DIUS3IF3_swigregister(itkMedialThicknessImageFilter3DIUS3IF3)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def binary_thinning_image_filter3_d(*args: itkt.ImageLike, **kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for BinaryThinningImageFilter3D"""
    import itk

    kwarg_typehints = {  }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.BinaryThinningImageFilter3D.New(*args, **kwargs)

    return instance.__internal_call__()

def binary_thinning_image_filter3_d_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.Thickness3D.BinaryThinningImageFilter3D
    binary_thinning_image_filter3_d.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    binary_thinning_image_filter3_d.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def medial_thickness_image_filter3_d(*args: itkt.ImageLike, **kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for MedialThicknessImageFilter3D"""
    import itk

    kwarg_typehints = {  }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.MedialThicknessImageFilter3D.New(*args, **kwargs)

    return instance.__internal_call__()

def medial_thickness_image_filter3_d_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.Thickness3D.MedialThicknessImageFilter3D
    medial_thickness_image_filter3_d.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    medial_thickness_image_filter3_d.__doc__ = filter_object.__doc__




#!/usr/bin/env python
# -*- coding: UTF-8 -*-
# Created on 2022-04-21
#
# @author: Dirk Osswald
'''
Test SiL communication by generating unique requests.|n
|n
- --debug will be used implicitly|n
- --repeat_nb_tries will be set to 1|n
|n
Example usage:|n
-  %(prog)s -H COM1,12,19200,8E1 |n
'''

import os.path

import minimalmodbus
import pyschunk.tools.mylogger
import time
from bkstools.bks_lib.bks_base import BKSBase
from pyschunk.generated.generated_enums import eCmdCode
from bkstools.bks_lib.debug import Print
from bkstools.bks_lib.debug import g_logmethod # @UnusedImport

logger = pyschunk.tools.mylogger.getLogger( "BKSTools.sil_com_test" )
pyschunk.tools.mylogger.setupLogging()
g_logmethod = logger.info

from bkstools.bks_lib import bks_options


def main():
    if ( "__file__" in globals() ):
        prog = os.path.basename( globals()["__file__"] )
    else:
        # when runnging as an exe generated by py2exe then __file__ is not defined!
        prog = "sil_com_test.exe"

    parser = bks_options.cBKSTools_OptionParser( prog=prog,
                                                 description = __doc__ )    # @UndefinedVariable

    parser.add_argument( '-p', '--period',
                         dest="period",
                         default=0.0, type=float,
                         help="""Period in s for sending requests. Default is 0.0 to cycle as fast as possible.""" )

    args = parser.parse_args()


    bksb = BKSBase( args.host, debug=True, repeater_timeout=args.repeat_timeout, repeater_nb_tries=1  )

    nb_errors = 0
    n = 0
    try:
        for n in range(1,65536):
            try:
                Print( f"Writing grp_prehold_time={n}")
                bksb.grp_prehold_time = n
            except minimalmodbus.ModbusException as e:
                Print( f"Ignoring exception {e!r}" )
                nb_errors += 1
            else:
                Print( f"OK")

            if ( args.period > 0.0 ):
                time.sleep( args.period )
    except KeyboardInterrupt:
        pass

    Print( f"\nInterrupted by user\nNumber of requests sent: {n}\n  Number of errors: {nb_errors}" )

if __name__ == '__main__':
    from pyschunk.tools import attach_to_debugger
    attach_to_debugger.AttachToDebugger( main )
    #main()

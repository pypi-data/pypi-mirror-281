#!/usr/bin/env python
# -*- coding: UTF-8 -*-
# Created on 2022-04-01
#
# @author: Dirk Osswald
'''
Try to reproduce bug MF-30833 (Motorside Position ist sporadisch falsch rekonstruier)
|n
Example usage:|n
-  %(prog)s -H 10.49.57.13

Example usage:|n
-  %(prog)s -H 10.49.57.13

'''

import os.path
import time
import random

import pyschunk.tools.mylogger
from pyschunk.generated.generated_enums import eCmdCode, eErrorCode

from bkstools.bks_lib.bks_modbus import cRepeater
from bkstools.bks_lib.bks_module import BKSModule, HandleWarningPrintOnly  # @UnusedImport
from bkstools.bks_lib.debug import Print, Var, ApplicationError, g_logmethod  # @UnusedImport

logger = pyschunk.tools.mylogger.getLogger( "BKSTools.scripts.MF_30833_reproduce" )
pyschunk.tools.mylogger.setupLogging()
g_logmethod = logger.info

from bkstools.bks_lib import bks_options

g_delta = 1.0

def CheckPositions( bks ):
    actual_pos = bks.actual_pos
    actual_pos_mse = bks.actual_pos_mse

    diff = abs( actual_pos - actual_pos_mse )
    if ( diff > g_delta ):
        Print( f"!!! actual_pos and actual_pos_mse differ by {diff:.3f} mm ({actual_pos:.3f} vs {actual_pos_mse:.3f}!" )

        Print( f"re-referencing...", end="" )
        bks.reference()

        Print( f" OK" )

        return False
    return True

def GetRandomPos( min_pos_um, max_pos_um ):
    return random.randint( min_pos_um, max_pos_um )

def main():
    if ( "__file__" in globals() ):
        prog = os.path.basename( globals()["__file__"] )
    else:
        # when runnging as an exe generated by py2exe then __file__ is not defined!
        prog = "MF_30833_reproduce.exe"

    parser = bks_options.cBKSTools_OptionParser( prog=__file__,
                                                 description = __doc__ )  # @UndefinedVariable

    args = parser.parse_args()


    bks = BKSModule( args.host,
                     sleep_time=None,
                     #handle_warning=HandleWarningPrintOnly
                     debug=args.debug,
                     repeater_timeout=args.repeat_timeout,
                     repeater_nb_tries=args.repeat_nb_tries
                     )

    min_pos_um = int( bks.min_pos * 1000.0 )
    max_pos_um = int( bks.max_pos * 1000.0 )

    while True:
        CheckPositions( bks )

        repeater = cRepeater( 5.0, 5 )
        while repeater.DoRepeat():
            try:
                bks.MakeReady()
                break
            except Exception as e:
                repeater.Failed( e )

        CheckPositions( bks )

        pos_um = GetRandomPos( min_pos_um, max_pos_um )
        Print( f"Moving to random pos {pos_um/1000.0:.3f}mm" )
        bks.move_to_absolute_position( pos_um, 40000 )

        CheckPositions( bks )

        Print( f"Rebooting gripper...", end="" )
        bks.command_code = eCmdCode.CMD_REBOOT

        time.sleep( 3 )
        err_code = bks.err_code
        if ( err_code != eErrorCode.ERROR_FAST_STOP ):
            try:
                ec_str = bks.enums["err_code"].GetName(err_code, "?" )
            except KeyError:
                ec_str = "?"
            Print( f"Unexpected error code {err_code:02x} ({ec_str})")
        Print( " OK" )


if __name__ == '__main__':
    from pyschunk.tools import attach_to_debugger
    attach_to_debugger.AttachToDebugger( main )
    #main()

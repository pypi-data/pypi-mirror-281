# coding: utf-8

"""
    Collibra Search API

    <p>The Search API allows you to create your own integration with the Collibra Search Engine.<br /> Find your data!</p>  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from collibra_search.models.search_result_resource import SearchResultResource  # noqa: F401,E501

class SearchAssetResultResource(SearchResultResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'display_name': 'str',
        'type': 'SearchResultType',
        'tags': 'list[str]',
        'status': 'SearchResultStatus'
    }
    if hasattr(SearchResultResource, "swagger_types"):
        swagger_types.update(SearchResultResource.swagger_types)

    attribute_map = {
        'display_name': 'displayName',
        'type': 'type',
        'tags': 'tags',
        'status': 'status'
    }
    if hasattr(SearchResultResource, "attribute_map"):
        attribute_map.update(SearchResultResource.attribute_map)

    def __init__(self, display_name=None, type=None, tags=None, status=None, *args, **kwargs):  # noqa: E501
        """SearchAssetResultResource - a model defined in Swagger"""  # noqa: E501
        self._display_name = None
        self._type = None
        self._tags = None
        self._status = None
        self.discriminator = None
        if display_name is not None:
            self.display_name = display_name
        if type is not None:
            self.type = type
        if tags is not None:
            self.tags = tags
        if status is not None:
            self.status = status
        SearchResultResource.__init__(self, *args, **kwargs)

    @property
    def display_name(self):
        """Gets the display_name of this SearchAssetResultResource.  # noqa: E501

        The display name of the asset. Note that `displayName` corresponds to the `Name` in the UI.  # noqa: E501

        :return: The display_name of this SearchAssetResultResource.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this SearchAssetResultResource.

        The display name of the asset. Note that `displayName` corresponds to the `Name` in the UI.  # noqa: E501

        :param display_name: The display_name of this SearchAssetResultResource.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def type(self):
        """Gets the type of this SearchAssetResultResource.  # noqa: E501


        :return: The type of this SearchAssetResultResource.  # noqa: E501
        :rtype: SearchResultType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SearchAssetResultResource.


        :param type: The type of this SearchAssetResultResource.  # noqa: E501
        :type: SearchResultType
        """

        self._type = type

    @property
    def tags(self):
        """Gets the tags of this SearchAssetResultResource.  # noqa: E501

        The tags assigned to the asset.  # noqa: E501

        :return: The tags of this SearchAssetResultResource.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this SearchAssetResultResource.

        The tags assigned to the asset.  # noqa: E501

        :param tags: The tags of this SearchAssetResultResource.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def status(self):
        """Gets the status of this SearchAssetResultResource.  # noqa: E501


        :return: The status of this SearchAssetResultResource.  # noqa: E501
        :rtype: SearchResultStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SearchAssetResultResource.


        :param status: The status of this SearchAssetResultResource.  # noqa: E501
        :type: SearchResultStatus
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SearchAssetResultResource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchAssetResultResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

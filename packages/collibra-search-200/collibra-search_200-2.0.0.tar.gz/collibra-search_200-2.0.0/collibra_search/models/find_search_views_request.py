# coding: utf-8

"""
    Collibra Search API

    <p>The Search API allows you to create your own integration with the Collibra Search Engine.<br /> Find your data!</p>  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FindSearchViewsRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'offset': 'int',
        'limit': 'int',
        'count_limit': 'int',
        'name': 'str',
        'name_match_mode': 'str',
        'sort_field': 'str',
        'sort_order': 'str'
    }

    attribute_map = {
        'offset': 'offset',
        'limit': 'limit',
        'count_limit': 'countLimit',
        'name': 'name',
        'name_match_mode': 'nameMatchMode',
        'sort_field': 'sortField',
        'sort_order': 'sortOrder'
    }

    def __init__(self, offset=None, limit=None, count_limit=None, name=None, name_match_mode=None, sort_field=None, sort_order=None):  # noqa: E501
        """FindSearchViewsRequest - a model defined in Swagger"""  # noqa: E501
        self._offset = None
        self._limit = None
        self._count_limit = None
        self._name = None
        self._name_match_mode = None
        self._sort_field = None
        self._sort_order = None
        self.discriminator = None
        if offset is not None:
            self.offset = offset
        if limit is not None:
            self.limit = limit
        if count_limit is not None:
            self.count_limit = count_limit
        if name is not None:
            self.name = name
        if name_match_mode is not None:
            self.name_match_mode = name_match_mode
        if sort_field is not None:
            self.sort_field = sort_field
        if sort_order is not None:
            self.sort_order = sort_order

    @property
    def offset(self):
        """Gets the offset of this FindSearchViewsRequest.  # noqa: E501


        :return: The offset of this FindSearchViewsRequest.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this FindSearchViewsRequest.


        :param offset: The offset of this FindSearchViewsRequest.  # noqa: E501
        :type: int
        """

        self._offset = offset

    @property
    def limit(self):
        """Gets the limit of this FindSearchViewsRequest.  # noqa: E501


        :return: The limit of this FindSearchViewsRequest.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this FindSearchViewsRequest.


        :param limit: The limit of this FindSearchViewsRequest.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def count_limit(self):
        """Gets the count_limit of this FindSearchViewsRequest.  # noqa: E501


        :return: The count_limit of this FindSearchViewsRequest.  # noqa: E501
        :rtype: int
        """
        return self._count_limit

    @count_limit.setter
    def count_limit(self, count_limit):
        """Sets the count_limit of this FindSearchViewsRequest.


        :param count_limit: The count_limit of this FindSearchViewsRequest.  # noqa: E501
        :type: int
        """

        self._count_limit = count_limit

    @property
    def name(self):
        """Gets the name of this FindSearchViewsRequest.  # noqa: E501


        :return: The name of this FindSearchViewsRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FindSearchViewsRequest.


        :param name: The name of this FindSearchViewsRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def name_match_mode(self):
        """Gets the name_match_mode of this FindSearchViewsRequest.  # noqa: E501


        :return: The name_match_mode of this FindSearchViewsRequest.  # noqa: E501
        :rtype: str
        """
        return self._name_match_mode

    @name_match_mode.setter
    def name_match_mode(self, name_match_mode):
        """Sets the name_match_mode of this FindSearchViewsRequest.


        :param name_match_mode: The name_match_mode of this FindSearchViewsRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["START", "END", "ANYWHERE", "EXACT"]  # noqa: E501
        if name_match_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `name_match_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(name_match_mode, allowed_values)
            )

        self._name_match_mode = name_match_mode

    @property
    def sort_field(self):
        """Gets the sort_field of this FindSearchViewsRequest.  # noqa: E501


        :return: The sort_field of this FindSearchViewsRequest.  # noqa: E501
        :rtype: str
        """
        return self._sort_field

    @sort_field.setter
    def sort_field(self, sort_field):
        """Sets the sort_field of this FindSearchViewsRequest.


        :param sort_field: The sort_field of this FindSearchViewsRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["NAME"]  # noqa: E501
        if sort_field not in allowed_values:
            raise ValueError(
                "Invalid value for `sort_field` ({0}), must be one of {1}"  # noqa: E501
                .format(sort_field, allowed_values)
            )

        self._sort_field = sort_field

    @property
    def sort_order(self):
        """Gets the sort_order of this FindSearchViewsRequest.  # noqa: E501


        :return: The sort_order of this FindSearchViewsRequest.  # noqa: E501
        :rtype: str
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this FindSearchViewsRequest.


        :param sort_order: The sort_order of this FindSearchViewsRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["ASC", "DESC"]  # noqa: E501
        if sort_order not in allowed_values:
            raise ValueError(
                "Invalid value for `sort_order` ({0}), must be one of {1}"  # noqa: E501
                .format(sort_order, allowed_values)
            )

        self._sort_order = sort_order

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FindSearchViewsRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FindSearchViewsRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

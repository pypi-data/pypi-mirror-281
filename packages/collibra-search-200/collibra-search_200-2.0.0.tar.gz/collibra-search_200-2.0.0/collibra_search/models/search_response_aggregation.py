# coding: utf-8

"""
    Collibra Search API

    <p>The Search API allows you to create your own integration with the Collibra Search Engine.<br /> Find your data!</p>  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SearchResponseAggregation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'field': 'str',
        'values': 'list[SearchResponseAggregationValue]'
    }

    attribute_map = {
        'field': 'field',
        'values': 'values'
    }

    def __init__(self, field=None, values=None):  # noqa: E501
        """SearchResponseAggregation - a model defined in Swagger"""  # noqa: E501
        self._field = None
        self._values = None
        self.discriminator = None
        if field is not None:
            self.field = field
        if values is not None:
            self.values = values

    @property
    def field(self):
        """Gets the field of this SearchResponseAggregation.  # noqa: E501

        The reference field for aggregation.  # noqa: E501

        :return: The field of this SearchResponseAggregation.  # noqa: E501
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this SearchResponseAggregation.

        The reference field for aggregation.  # noqa: E501

        :param field: The field of this SearchResponseAggregation.  # noqa: E501
        :type: str
        """

        self._field = field

    @property
    def values(self):
        """Gets the values of this SearchResponseAggregation.  # noqa: E501

        The values of the field with the corresponding number of search results. This list is ordered by the number of search results found (descending). Zero-values are not presented.  # noqa: E501

        :return: The values of this SearchResponseAggregation.  # noqa: E501
        :rtype: list[SearchResponseAggregationValue]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this SearchResponseAggregation.

        The values of the field with the corresponding number of search results. This list is ordered by the number of search results found (descending). Zero-values are not presented.  # noqa: E501

        :param values: The values of this SearchResponseAggregation.  # noqa: E501
        :type: list[SearchResponseAggregationValue]
        """

        self._values = values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SearchResponseAggregation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchResponseAggregation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Collibra Search API

    <p>The Search API allows you to create your own integration with the Collibra Search Engine.<br /> Find your data!</p>  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SearchAggregation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'field': 'str',
        'limit': 'int'
    }

    attribute_map = {
        'field': 'field',
        'limit': 'limit'
    }

    def __init__(self, field=None, limit=10):  # noqa: E501
        """SearchAggregation - a model defined in Swagger"""  # noqa: E501
        self._field = None
        self._limit = None
        self.discriminator = None
        if field is not None:
            self.field = field
        if limit is not None:
            self.limit = limit

    @property
    def field(self):
        """Gets the field of this SearchAggregation.  # noqa: E501

        The reference field for aggregation. Distinct values of the field are counted in the search results, ignoring pagination, and the top most common are presented in the response.<br /> Possible values are `rootCommunity`, `resourceType`, `assetType`, `domainType`, `status`, `lastModifiedOn`, `createdOn`, `createdBy` and `tags`.  # noqa: E501

        :return: The field of this SearchAggregation.  # noqa: E501
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this SearchAggregation.

        The reference field for aggregation. Distinct values of the field are counted in the search results, ignoring pagination, and the top most common are presented in the response.<br /> Possible values are `rootCommunity`, `resourceType`, `assetType`, `domainType`, `status`, `lastModifiedOn`, `createdOn`, `createdBy` and `tags`.  # noqa: E501

        :param field: The field of this SearchAggregation.  # noqa: E501
        :type: str
        """

        self._field = field

    @property
    def limit(self):
        """Gets the limit of this SearchAggregation.  # noqa: E501

        Optional limit for the number of top aggregated results to return. If not set, the default limit of `10` is used.<br /> The maximum possible value is 1000.  # noqa: E501

        :return: The limit of this SearchAggregation.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this SearchAggregation.

        Optional limit for the number of top aggregated results to return. If not set, the default limit of `10` is used.<br /> The maximum possible value is 1000.  # noqa: E501

        :param limit: The limit of this SearchAggregation.  # noqa: E501
        :type: int
        """

        self._limit = limit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SearchAggregation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchAggregation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

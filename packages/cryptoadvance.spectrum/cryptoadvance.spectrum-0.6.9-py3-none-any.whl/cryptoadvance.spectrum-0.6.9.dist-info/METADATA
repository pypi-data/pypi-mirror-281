Metadata-Version: 2.1
Name: cryptoadvance.spectrum
Version: 0.6.9
Summary: Implements A Bitcoin Core API which querying an Electrum
Author: Stepan Snigirev, k9ert
License: MIT License
        
        Copyright (c) 2023 specter.solutions
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
Project-URL: Homepage, https://github.com/cryptoadvance/spectrum
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Framework :: Flask
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: embit >=0.6.1
Requires-Dist: Flask >=2.1.1
Requires-Dist: Flask-SQLAlchemy ==2.5.1
Requires-Dist: sqlalchemy ==2.0.30
Requires-Dist: psycopg2-binary
Requires-Dist: requests >=2.26.0
Requires-Dist: pysocks ==1.7.1
Provides-Extra: test
Requires-Dist: pytest >=7.1.3 ; extra == 'test'
Requires-Dist: pytest-cov[all] ; extra == 'test'
Requires-Dist: mock ; extra == 'test'
Requires-Dist: black ; extra == 'test'
Requires-Dist: pre-commit ; extra == 'test'
Requires-Dist: bdkpython ; extra == 'test'

# Spectrum - Specter Desktop + Electrum

This is a electrum-adapter. It exposes a Bitcoin-Core style API while using an electron API in the backend. It might be useful in specific usecases, e.g. having better performance when connecting to a electrum-server via Tor. In order to do that, it needs a Database. Quite easily you can use a kind of builtin SQLite. Depending on your usecase, you might want to use an external DB.

## Modes of usage

This can be used either in standalone mode or as a specter-extension. The second option is probably the main use-case.

## Standalone

Get this to work with something like that:
```
python3 --version # Make sure you have at least 3.8. Might also work with lower versions though
virtualenv --python=python3 .env
. ./.env/bin/activate
pip3 install -e .

# If you have a electrum server running on localhost:
python3 -m cryptoadvance.spectrum server --config cryptoadvance.spectrum.config.NigiriLocalElectrumLiteConfig

# If you want to run on mainnet and use emzy's Server
python3 -m cryptoadvance.spectrum server --config cryptoadvance.spectrum.config.EmzyElectrumLiteConfig

# Using Emzy's server but with a postgres
export DB_USERNAME=bla
export DB_PASSWORD=blub
python3 -m cryptoadvance.spectrum server --config cryptoadvance.spectrum.config.EmzyElectrumPostgresConfig
```

Check the `config.py` for the env-vars which need to be exported in order to connect to something different than localhost.

## Specter Extension

In order to get a development environment:
```
virtualenv --python=python3 .env
. ./.env/bin/activate
pip3 install -e .
pip3 install cryptoadvance.specter
python3 -m cryptoadvance.specter server --config DevelopmentConfig --debug
```


## TODO:

- refill keypool when address is used or new address is requested
- flask `debug=True` flag creates two electrum sockets that notify twice - this causes duplications in the database
- reconnect with electrum on disconnect
- add support for credentials / cookie file for RPC calls


## Run the Tests

```sh
pip3 install -e ".[test]"
pytest
```

## Development

Before your create a PR, make sure to [blackify](https://github.com/psf/black) all your changes. In order to automate that,
there is a git [pre-commit hook](https://ljvmiranda921.github.io/notebook/2018/06/21/precommits-using-black-and-flake8/) which you can simply install like this:
```
pre-commit install
```

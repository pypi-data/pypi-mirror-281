# coding: utf-8

"""
    Collibra Management Console

    Collibra Management Console public REST API \\n Please ensure that cookies are not present within the API request. Including cookies within the call will cause 403 error.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ApplicationServerConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ajp_connector': 'AjpConnectorConfiguration',
        'collibra_data_directory': 'str',
        'context_path': 'str',
        'http_connector': 'HttpConnectorConfiguration',
        'https_connector': 'HttpsConnectorConfiguration',
        'installation_directory': 'str',
        'jks_password_file': 'str',
        'resources': 'ResourcesConfiguration',
        'shut_down_port': 'int',
        'shutdown_address': 'str',
        'want_https_only': 'bool',
        'war_path': 'str',
        'work_directory': 'str'
    }

    attribute_map = {
        'ajp_connector': 'ajpConnector',
        'collibra_data_directory': 'collibraDataDirectory',
        'context_path': 'contextPath',
        'http_connector': 'httpConnector',
        'https_connector': 'httpsConnector',
        'installation_directory': 'installationDirectory',
        'jks_password_file': 'jksPasswordFile',
        'resources': 'resources',
        'shut_down_port': 'shutDownPort',
        'shutdown_address': 'shutdownAddress',
        'want_https_only': 'wantHttpsOnly',
        'war_path': 'warPath',
        'work_directory': 'workDirectory'
    }

    def __init__(self, ajp_connector=None, collibra_data_directory=None, context_path=None, http_connector=None, https_connector=None, installation_directory=None, jks_password_file=None, resources=None, shut_down_port=None, shutdown_address=None, want_https_only=None, war_path=None, work_directory=None):  # noqa: E501
        """ApplicationServerConfiguration - a model defined in Swagger"""  # noqa: E501
        self._ajp_connector = None
        self._collibra_data_directory = None
        self._context_path = None
        self._http_connector = None
        self._https_connector = None
        self._installation_directory = None
        self._jks_password_file = None
        self._resources = None
        self._shut_down_port = None
        self._shutdown_address = None
        self._want_https_only = None
        self._war_path = None
        self._work_directory = None
        self.discriminator = None
        if ajp_connector is not None:
            self.ajp_connector = ajp_connector
        self.collibra_data_directory = collibra_data_directory
        if context_path is not None:
            self.context_path = context_path
        if http_connector is not None:
            self.http_connector = http_connector
        if https_connector is not None:
            self.https_connector = https_connector
        self.installation_directory = installation_directory
        if jks_password_file is not None:
            self.jks_password_file = jks_password_file
        if resources is not None:
            self.resources = resources
        self.shut_down_port = shut_down_port
        self.shutdown_address = shutdown_address
        if want_https_only is not None:
            self.want_https_only = want_https_only
        self.war_path = war_path
        self.work_directory = work_directory

    @property
    def ajp_connector(self):
        """Gets the ajp_connector of this ApplicationServerConfiguration.  # noqa: E501


        :return: The ajp_connector of this ApplicationServerConfiguration.  # noqa: E501
        :rtype: AjpConnectorConfiguration
        """
        return self._ajp_connector

    @ajp_connector.setter
    def ajp_connector(self, ajp_connector):
        """Sets the ajp_connector of this ApplicationServerConfiguration.


        :param ajp_connector: The ajp_connector of this ApplicationServerConfiguration.  # noqa: E501
        :type: AjpConnectorConfiguration
        """

        self._ajp_connector = ajp_connector

    @property
    def collibra_data_directory(self):
        """Gets the collibra_data_directory of this ApplicationServerConfiguration.  # noqa: E501


        :return: The collibra_data_directory of this ApplicationServerConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._collibra_data_directory

    @collibra_data_directory.setter
    def collibra_data_directory(self, collibra_data_directory):
        """Sets the collibra_data_directory of this ApplicationServerConfiguration.


        :param collibra_data_directory: The collibra_data_directory of this ApplicationServerConfiguration.  # noqa: E501
        :type: str
        """
        if collibra_data_directory is None:
            raise ValueError("Invalid value for `collibra_data_directory`, must not be `None`")  # noqa: E501

        self._collibra_data_directory = collibra_data_directory

    @property
    def context_path(self):
        """Gets the context_path of this ApplicationServerConfiguration.  # noqa: E501


        :return: The context_path of this ApplicationServerConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._context_path

    @context_path.setter
    def context_path(self, context_path):
        """Sets the context_path of this ApplicationServerConfiguration.


        :param context_path: The context_path of this ApplicationServerConfiguration.  # noqa: E501
        :type: str
        """

        self._context_path = context_path

    @property
    def http_connector(self):
        """Gets the http_connector of this ApplicationServerConfiguration.  # noqa: E501


        :return: The http_connector of this ApplicationServerConfiguration.  # noqa: E501
        :rtype: HttpConnectorConfiguration
        """
        return self._http_connector

    @http_connector.setter
    def http_connector(self, http_connector):
        """Sets the http_connector of this ApplicationServerConfiguration.


        :param http_connector: The http_connector of this ApplicationServerConfiguration.  # noqa: E501
        :type: HttpConnectorConfiguration
        """

        self._http_connector = http_connector

    @property
    def https_connector(self):
        """Gets the https_connector of this ApplicationServerConfiguration.  # noqa: E501


        :return: The https_connector of this ApplicationServerConfiguration.  # noqa: E501
        :rtype: HttpsConnectorConfiguration
        """
        return self._https_connector

    @https_connector.setter
    def https_connector(self, https_connector):
        """Sets the https_connector of this ApplicationServerConfiguration.


        :param https_connector: The https_connector of this ApplicationServerConfiguration.  # noqa: E501
        :type: HttpsConnectorConfiguration
        """

        self._https_connector = https_connector

    @property
    def installation_directory(self):
        """Gets the installation_directory of this ApplicationServerConfiguration.  # noqa: E501


        :return: The installation_directory of this ApplicationServerConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._installation_directory

    @installation_directory.setter
    def installation_directory(self, installation_directory):
        """Sets the installation_directory of this ApplicationServerConfiguration.


        :param installation_directory: The installation_directory of this ApplicationServerConfiguration.  # noqa: E501
        :type: str
        """
        if installation_directory is None:
            raise ValueError("Invalid value for `installation_directory`, must not be `None`")  # noqa: E501

        self._installation_directory = installation_directory

    @property
    def jks_password_file(self):
        """Gets the jks_password_file of this ApplicationServerConfiguration.  # noqa: E501


        :return: The jks_password_file of this ApplicationServerConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._jks_password_file

    @jks_password_file.setter
    def jks_password_file(self, jks_password_file):
        """Sets the jks_password_file of this ApplicationServerConfiguration.


        :param jks_password_file: The jks_password_file of this ApplicationServerConfiguration.  # noqa: E501
        :type: str
        """

        self._jks_password_file = jks_password_file

    @property
    def resources(self):
        """Gets the resources of this ApplicationServerConfiguration.  # noqa: E501


        :return: The resources of this ApplicationServerConfiguration.  # noqa: E501
        :rtype: ResourcesConfiguration
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this ApplicationServerConfiguration.


        :param resources: The resources of this ApplicationServerConfiguration.  # noqa: E501
        :type: ResourcesConfiguration
        """

        self._resources = resources

    @property
    def shut_down_port(self):
        """Gets the shut_down_port of this ApplicationServerConfiguration.  # noqa: E501


        :return: The shut_down_port of this ApplicationServerConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._shut_down_port

    @shut_down_port.setter
    def shut_down_port(self, shut_down_port):
        """Sets the shut_down_port of this ApplicationServerConfiguration.


        :param shut_down_port: The shut_down_port of this ApplicationServerConfiguration.  # noqa: E501
        :type: int
        """
        if shut_down_port is None:
            raise ValueError("Invalid value for `shut_down_port`, must not be `None`")  # noqa: E501

        self._shut_down_port = shut_down_port

    @property
    def shutdown_address(self):
        """Gets the shutdown_address of this ApplicationServerConfiguration.  # noqa: E501


        :return: The shutdown_address of this ApplicationServerConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._shutdown_address

    @shutdown_address.setter
    def shutdown_address(self, shutdown_address):
        """Sets the shutdown_address of this ApplicationServerConfiguration.


        :param shutdown_address: The shutdown_address of this ApplicationServerConfiguration.  # noqa: E501
        :type: str
        """
        if shutdown_address is None:
            raise ValueError("Invalid value for `shutdown_address`, must not be `None`")  # noqa: E501

        self._shutdown_address = shutdown_address

    @property
    def want_https_only(self):
        """Gets the want_https_only of this ApplicationServerConfiguration.  # noqa: E501


        :return: The want_https_only of this ApplicationServerConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._want_https_only

    @want_https_only.setter
    def want_https_only(self, want_https_only):
        """Sets the want_https_only of this ApplicationServerConfiguration.


        :param want_https_only: The want_https_only of this ApplicationServerConfiguration.  # noqa: E501
        :type: bool
        """

        self._want_https_only = want_https_only

    @property
    def war_path(self):
        """Gets the war_path of this ApplicationServerConfiguration.  # noqa: E501


        :return: The war_path of this ApplicationServerConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._war_path

    @war_path.setter
    def war_path(self, war_path):
        """Sets the war_path of this ApplicationServerConfiguration.


        :param war_path: The war_path of this ApplicationServerConfiguration.  # noqa: E501
        :type: str
        """
        if war_path is None:
            raise ValueError("Invalid value for `war_path`, must not be `None`")  # noqa: E501

        self._war_path = war_path

    @property
    def work_directory(self):
        """Gets the work_directory of this ApplicationServerConfiguration.  # noqa: E501


        :return: The work_directory of this ApplicationServerConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._work_directory

    @work_directory.setter
    def work_directory(self, work_directory):
        """Sets the work_directory of this ApplicationServerConfiguration.


        :param work_directory: The work_directory of this ApplicationServerConfiguration.  # noqa: E501
        :type: str
        """
        if work_directory is None:
            raise ValueError("Invalid value for `work_directory`, must not be `None`")  # noqa: E501

        self._work_directory = work_directory

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplicationServerConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationServerConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Collibra Management Console

    Collibra Management Console public REST API \\n Please ensure that cookies are not present within the API request. Including cookies within the call will cause 403 error.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BackupScheduleModelServerTimeZoneOffsetRulesTransitionRules(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'day_of_month_indicator': 'int',
        'day_of_week': 'str',
        'local_time': 'LocalTime',
        'midnight_end_of_day': 'bool',
        'month': 'str',
        'offset_after': 'BackupScheduleModelServerTimeZoneOffsetRulesOffsetAfter',
        'offset_before': 'BackupScheduleModelServerTimeZoneOffsetRulesOffsetAfter',
        'standard_offset': 'BackupScheduleModelServerTimeZoneOffsetRulesOffsetAfter',
        'time_definition': 'str'
    }

    attribute_map = {
        'day_of_month_indicator': 'dayOfMonthIndicator',
        'day_of_week': 'dayOfWeek',
        'local_time': 'localTime',
        'midnight_end_of_day': 'midnightEndOfDay',
        'month': 'month',
        'offset_after': 'offsetAfter',
        'offset_before': 'offsetBefore',
        'standard_offset': 'standardOffset',
        'time_definition': 'timeDefinition'
    }

    def __init__(self, day_of_month_indicator=None, day_of_week=None, local_time=None, midnight_end_of_day=None, month=None, offset_after=None, offset_before=None, standard_offset=None, time_definition=None):  # noqa: E501
        """BackupScheduleModelServerTimeZoneOffsetRulesTransitionRules - a model defined in Swagger"""  # noqa: E501
        self._day_of_month_indicator = None
        self._day_of_week = None
        self._local_time = None
        self._midnight_end_of_day = None
        self._month = None
        self._offset_after = None
        self._offset_before = None
        self._standard_offset = None
        self._time_definition = None
        self.discriminator = None
        if day_of_month_indicator is not None:
            self.day_of_month_indicator = day_of_month_indicator
        if day_of_week is not None:
            self.day_of_week = day_of_week
        if local_time is not None:
            self.local_time = local_time
        if midnight_end_of_day is not None:
            self.midnight_end_of_day = midnight_end_of_day
        if month is not None:
            self.month = month
        if offset_after is not None:
            self.offset_after = offset_after
        if offset_before is not None:
            self.offset_before = offset_before
        if standard_offset is not None:
            self.standard_offset = standard_offset
        if time_definition is not None:
            self.time_definition = time_definition

    @property
    def day_of_month_indicator(self):
        """Gets the day_of_month_indicator of this BackupScheduleModelServerTimeZoneOffsetRulesTransitionRules.  # noqa: E501


        :return: The day_of_month_indicator of this BackupScheduleModelServerTimeZoneOffsetRulesTransitionRules.  # noqa: E501
        :rtype: int
        """
        return self._day_of_month_indicator

    @day_of_month_indicator.setter
    def day_of_month_indicator(self, day_of_month_indicator):
        """Sets the day_of_month_indicator of this BackupScheduleModelServerTimeZoneOffsetRulesTransitionRules.


        :param day_of_month_indicator: The day_of_month_indicator of this BackupScheduleModelServerTimeZoneOffsetRulesTransitionRules.  # noqa: E501
        :type: int
        """

        self._day_of_month_indicator = day_of_month_indicator

    @property
    def day_of_week(self):
        """Gets the day_of_week of this BackupScheduleModelServerTimeZoneOffsetRulesTransitionRules.  # noqa: E501


        :return: The day_of_week of this BackupScheduleModelServerTimeZoneOffsetRulesTransitionRules.  # noqa: E501
        :rtype: str
        """
        return self._day_of_week

    @day_of_week.setter
    def day_of_week(self, day_of_week):
        """Sets the day_of_week of this BackupScheduleModelServerTimeZoneOffsetRulesTransitionRules.


        :param day_of_week: The day_of_week of this BackupScheduleModelServerTimeZoneOffsetRulesTransitionRules.  # noqa: E501
        :type: str
        """
        allowed_values = ["MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"]  # noqa: E501
        if day_of_week not in allowed_values:
            raise ValueError(
                "Invalid value for `day_of_week` ({0}), must be one of {1}"  # noqa: E501
                .format(day_of_week, allowed_values)
            )

        self._day_of_week = day_of_week

    @property
    def local_time(self):
        """Gets the local_time of this BackupScheduleModelServerTimeZoneOffsetRulesTransitionRules.  # noqa: E501


        :return: The local_time of this BackupScheduleModelServerTimeZoneOffsetRulesTransitionRules.  # noqa: E501
        :rtype: LocalTime
        """
        return self._local_time

    @local_time.setter
    def local_time(self, local_time):
        """Sets the local_time of this BackupScheduleModelServerTimeZoneOffsetRulesTransitionRules.


        :param local_time: The local_time of this BackupScheduleModelServerTimeZoneOffsetRulesTransitionRules.  # noqa: E501
        :type: LocalTime
        """

        self._local_time = local_time

    @property
    def midnight_end_of_day(self):
        """Gets the midnight_end_of_day of this BackupScheduleModelServerTimeZoneOffsetRulesTransitionRules.  # noqa: E501


        :return: The midnight_end_of_day of this BackupScheduleModelServerTimeZoneOffsetRulesTransitionRules.  # noqa: E501
        :rtype: bool
        """
        return self._midnight_end_of_day

    @midnight_end_of_day.setter
    def midnight_end_of_day(self, midnight_end_of_day):
        """Sets the midnight_end_of_day of this BackupScheduleModelServerTimeZoneOffsetRulesTransitionRules.


        :param midnight_end_of_day: The midnight_end_of_day of this BackupScheduleModelServerTimeZoneOffsetRulesTransitionRules.  # noqa: E501
        :type: bool
        """

        self._midnight_end_of_day = midnight_end_of_day

    @property
    def month(self):
        """Gets the month of this BackupScheduleModelServerTimeZoneOffsetRulesTransitionRules.  # noqa: E501


        :return: The month of this BackupScheduleModelServerTimeZoneOffsetRulesTransitionRules.  # noqa: E501
        :rtype: str
        """
        return self._month

    @month.setter
    def month(self, month):
        """Sets the month of this BackupScheduleModelServerTimeZoneOffsetRulesTransitionRules.


        :param month: The month of this BackupScheduleModelServerTimeZoneOffsetRulesTransitionRules.  # noqa: E501
        :type: str
        """
        allowed_values = ["JANUARY", "FEBRUARY", "MARCH", "APRIL", "MAY", "JUNE", "JULY", "AUGUST", "SEPTEMBER", "OCTOBER", "NOVEMBER", "DECEMBER"]  # noqa: E501
        if month not in allowed_values:
            raise ValueError(
                "Invalid value for `month` ({0}), must be one of {1}"  # noqa: E501
                .format(month, allowed_values)
            )

        self._month = month

    @property
    def offset_after(self):
        """Gets the offset_after of this BackupScheduleModelServerTimeZoneOffsetRulesTransitionRules.  # noqa: E501


        :return: The offset_after of this BackupScheduleModelServerTimeZoneOffsetRulesTransitionRules.  # noqa: E501
        :rtype: BackupScheduleModelServerTimeZoneOffsetRulesOffsetAfter
        """
        return self._offset_after

    @offset_after.setter
    def offset_after(self, offset_after):
        """Sets the offset_after of this BackupScheduleModelServerTimeZoneOffsetRulesTransitionRules.


        :param offset_after: The offset_after of this BackupScheduleModelServerTimeZoneOffsetRulesTransitionRules.  # noqa: E501
        :type: BackupScheduleModelServerTimeZoneOffsetRulesOffsetAfter
        """

        self._offset_after = offset_after

    @property
    def offset_before(self):
        """Gets the offset_before of this BackupScheduleModelServerTimeZoneOffsetRulesTransitionRules.  # noqa: E501


        :return: The offset_before of this BackupScheduleModelServerTimeZoneOffsetRulesTransitionRules.  # noqa: E501
        :rtype: BackupScheduleModelServerTimeZoneOffsetRulesOffsetAfter
        """
        return self._offset_before

    @offset_before.setter
    def offset_before(self, offset_before):
        """Sets the offset_before of this BackupScheduleModelServerTimeZoneOffsetRulesTransitionRules.


        :param offset_before: The offset_before of this BackupScheduleModelServerTimeZoneOffsetRulesTransitionRules.  # noqa: E501
        :type: BackupScheduleModelServerTimeZoneOffsetRulesOffsetAfter
        """

        self._offset_before = offset_before

    @property
    def standard_offset(self):
        """Gets the standard_offset of this BackupScheduleModelServerTimeZoneOffsetRulesTransitionRules.  # noqa: E501


        :return: The standard_offset of this BackupScheduleModelServerTimeZoneOffsetRulesTransitionRules.  # noqa: E501
        :rtype: BackupScheduleModelServerTimeZoneOffsetRulesOffsetAfter
        """
        return self._standard_offset

    @standard_offset.setter
    def standard_offset(self, standard_offset):
        """Sets the standard_offset of this BackupScheduleModelServerTimeZoneOffsetRulesTransitionRules.


        :param standard_offset: The standard_offset of this BackupScheduleModelServerTimeZoneOffsetRulesTransitionRules.  # noqa: E501
        :type: BackupScheduleModelServerTimeZoneOffsetRulesOffsetAfter
        """

        self._standard_offset = standard_offset

    @property
    def time_definition(self):
        """Gets the time_definition of this BackupScheduleModelServerTimeZoneOffsetRulesTransitionRules.  # noqa: E501


        :return: The time_definition of this BackupScheduleModelServerTimeZoneOffsetRulesTransitionRules.  # noqa: E501
        :rtype: str
        """
        return self._time_definition

    @time_definition.setter
    def time_definition(self, time_definition):
        """Sets the time_definition of this BackupScheduleModelServerTimeZoneOffsetRulesTransitionRules.


        :param time_definition: The time_definition of this BackupScheduleModelServerTimeZoneOffsetRulesTransitionRules.  # noqa: E501
        :type: str
        """
        allowed_values = ["UTC", "WALL", "STANDARD"]  # noqa: E501
        if time_definition not in allowed_values:
            raise ValueError(
                "Invalid value for `time_definition` ({0}), must be one of {1}"  # noqa: E501
                .format(time_definition, allowed_values)
            )

        self._time_definition = time_definition

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BackupScheduleModelServerTimeZoneOffsetRulesTransitionRules, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BackupScheduleModelServerTimeZoneOffsetRulesTransitionRules):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

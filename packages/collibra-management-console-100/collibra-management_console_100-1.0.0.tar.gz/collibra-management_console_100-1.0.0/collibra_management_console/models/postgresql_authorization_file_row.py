# coding: utf-8

"""
    Collibra Management Console

    Collibra Management Console public REST API \\n Please ensure that cookies are not present within the API request. Including cookies within the call will cause 403 error.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PostgresqlAuthorizationFileRow(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'auth_method': 'str',
        'auth_options': 'dict(str, str)',
        'comment': 'str',
        'commented': 'bool',
        'database': 'str',
        'ip_mask': 'str',
        'type': 'str',
        'user': 'str'
    }

    attribute_map = {
        'address': 'address',
        'auth_method': 'authMethod',
        'auth_options': 'authOptions',
        'comment': 'comment',
        'commented': 'commented',
        'database': 'database',
        'ip_mask': 'ipMask',
        'type': 'type',
        'user': 'user'
    }

    def __init__(self, address=None, auth_method=None, auth_options=None, comment=None, commented=None, database=None, ip_mask=None, type=None, user=None):  # noqa: E501
        """PostgresqlAuthorizationFileRow - a model defined in Swagger"""  # noqa: E501
        self._address = None
        self._auth_method = None
        self._auth_options = None
        self._comment = None
        self._commented = None
        self._database = None
        self._ip_mask = None
        self._type = None
        self._user = None
        self.discriminator = None
        if address is not None:
            self.address = address
        if auth_method is not None:
            self.auth_method = auth_method
        if auth_options is not None:
            self.auth_options = auth_options
        if comment is not None:
            self.comment = comment
        if commented is not None:
            self.commented = commented
        if database is not None:
            self.database = database
        if ip_mask is not None:
            self.ip_mask = ip_mask
        if type is not None:
            self.type = type
        if user is not None:
            self.user = user

    @property
    def address(self):
        """Gets the address of this PostgresqlAuthorizationFileRow.  # noqa: E501


        :return: The address of this PostgresqlAuthorizationFileRow.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this PostgresqlAuthorizationFileRow.


        :param address: The address of this PostgresqlAuthorizationFileRow.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def auth_method(self):
        """Gets the auth_method of this PostgresqlAuthorizationFileRow.  # noqa: E501


        :return: The auth_method of this PostgresqlAuthorizationFileRow.  # noqa: E501
        :rtype: str
        """
        return self._auth_method

    @auth_method.setter
    def auth_method(self, auth_method):
        """Sets the auth_method of this PostgresqlAuthorizationFileRow.


        :param auth_method: The auth_method of this PostgresqlAuthorizationFileRow.  # noqa: E501
        :type: str
        """
        allowed_values = ["trust", "reject", "md5", "password", "gss", "sspi", "krb5", "ident", "peer", "ldap", "radius", "cert", "pam", "scram-sha-256"]  # noqa: E501
        if auth_method not in allowed_values:
            raise ValueError(
                "Invalid value for `auth_method` ({0}), must be one of {1}"  # noqa: E501
                .format(auth_method, allowed_values)
            )

        self._auth_method = auth_method

    @property
    def auth_options(self):
        """Gets the auth_options of this PostgresqlAuthorizationFileRow.  # noqa: E501


        :return: The auth_options of this PostgresqlAuthorizationFileRow.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._auth_options

    @auth_options.setter
    def auth_options(self, auth_options):
        """Sets the auth_options of this PostgresqlAuthorizationFileRow.


        :param auth_options: The auth_options of this PostgresqlAuthorizationFileRow.  # noqa: E501
        :type: dict(str, str)
        """

        self._auth_options = auth_options

    @property
    def comment(self):
        """Gets the comment of this PostgresqlAuthorizationFileRow.  # noqa: E501


        :return: The comment of this PostgresqlAuthorizationFileRow.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this PostgresqlAuthorizationFileRow.


        :param comment: The comment of this PostgresqlAuthorizationFileRow.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def commented(self):
        """Gets the commented of this PostgresqlAuthorizationFileRow.  # noqa: E501


        :return: The commented of this PostgresqlAuthorizationFileRow.  # noqa: E501
        :rtype: bool
        """
        return self._commented

    @commented.setter
    def commented(self, commented):
        """Sets the commented of this PostgresqlAuthorizationFileRow.


        :param commented: The commented of this PostgresqlAuthorizationFileRow.  # noqa: E501
        :type: bool
        """

        self._commented = commented

    @property
    def database(self):
        """Gets the database of this PostgresqlAuthorizationFileRow.  # noqa: E501


        :return: The database of this PostgresqlAuthorizationFileRow.  # noqa: E501
        :rtype: str
        """
        return self._database

    @database.setter
    def database(self, database):
        """Sets the database of this PostgresqlAuthorizationFileRow.


        :param database: The database of this PostgresqlAuthorizationFileRow.  # noqa: E501
        :type: str
        """

        self._database = database

    @property
    def ip_mask(self):
        """Gets the ip_mask of this PostgresqlAuthorizationFileRow.  # noqa: E501


        :return: The ip_mask of this PostgresqlAuthorizationFileRow.  # noqa: E501
        :rtype: str
        """
        return self._ip_mask

    @ip_mask.setter
    def ip_mask(self, ip_mask):
        """Sets the ip_mask of this PostgresqlAuthorizationFileRow.


        :param ip_mask: The ip_mask of this PostgresqlAuthorizationFileRow.  # noqa: E501
        :type: str
        """

        self._ip_mask = ip_mask

    @property
    def type(self):
        """Gets the type of this PostgresqlAuthorizationFileRow.  # noqa: E501


        :return: The type of this PostgresqlAuthorizationFileRow.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PostgresqlAuthorizationFileRow.


        :param type: The type of this PostgresqlAuthorizationFileRow.  # noqa: E501
        :type: str
        """
        allowed_values = ["local", "host", "hostssl", "hostnossl"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def user(self):
        """Gets the user of this PostgresqlAuthorizationFileRow.  # noqa: E501


        :return: The user of this PostgresqlAuthorizationFileRow.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this PostgresqlAuthorizationFileRow.


        :param user: The user of this PostgresqlAuthorizationFileRow.  # noqa: E501
        :type: str
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostgresqlAuthorizationFileRow, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostgresqlAuthorizationFileRow):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

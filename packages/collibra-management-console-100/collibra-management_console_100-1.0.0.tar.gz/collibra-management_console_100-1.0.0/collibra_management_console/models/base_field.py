# coding: utf-8

"""
    Collibra Management Console

    Collibra Management Console public REST API \\n Please ensure that cookies are not present within the API request. Including cookies within the call will cause 403 error.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BaseField(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allowed_values': 'list[str]',
        'default_value': 'object',
        'description': 'str',
        'encrypted': 'bool',
        'field_groups': 'list[str]',
        'name': 'str',
        'order_index': 'int',
        'required': 'bool',
        'restart': 'bool',
        'type': 'str',
        'ui_hints': 'dict(str, str)',
        'unsupported': 'bool'
    }

    attribute_map = {
        'allowed_values': 'allowedValues',
        'default_value': 'defaultValue',
        'description': 'description',
        'encrypted': 'encrypted',
        'field_groups': 'fieldGroups',
        'name': 'name',
        'order_index': 'orderIndex',
        'required': 'required',
        'restart': 'restart',
        'type': 'type',
        'ui_hints': 'uiHints',
        'unsupported': 'unsupported'
    }

    def __init__(self, allowed_values=None, default_value=None, description=None, encrypted=None, field_groups=None, name=None, order_index=None, required=None, restart=None, type=None, ui_hints=None, unsupported=None):  # noqa: E501
        """BaseField - a model defined in Swagger"""  # noqa: E501
        self._allowed_values = None
        self._default_value = None
        self._description = None
        self._encrypted = None
        self._field_groups = None
        self._name = None
        self._order_index = None
        self._required = None
        self._restart = None
        self._type = None
        self._ui_hints = None
        self._unsupported = None
        self.discriminator = None
        if allowed_values is not None:
            self.allowed_values = allowed_values
        if default_value is not None:
            self.default_value = default_value
        if description is not None:
            self.description = description
        if encrypted is not None:
            self.encrypted = encrypted
        if field_groups is not None:
            self.field_groups = field_groups
        if name is not None:
            self.name = name
        if order_index is not None:
            self.order_index = order_index
        if required is not None:
            self.required = required
        if restart is not None:
            self.restart = restart
        if type is not None:
            self.type = type
        if ui_hints is not None:
            self.ui_hints = ui_hints
        if unsupported is not None:
            self.unsupported = unsupported

    @property
    def allowed_values(self):
        """Gets the allowed_values of this BaseField.  # noqa: E501


        :return: The allowed_values of this BaseField.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_values

    @allowed_values.setter
    def allowed_values(self, allowed_values):
        """Sets the allowed_values of this BaseField.


        :param allowed_values: The allowed_values of this BaseField.  # noqa: E501
        :type: list[str]
        """

        self._allowed_values = allowed_values

    @property
    def default_value(self):
        """Gets the default_value of this BaseField.  # noqa: E501


        :return: The default_value of this BaseField.  # noqa: E501
        :rtype: object
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this BaseField.


        :param default_value: The default_value of this BaseField.  # noqa: E501
        :type: object
        """

        self._default_value = default_value

    @property
    def description(self):
        """Gets the description of this BaseField.  # noqa: E501


        :return: The description of this BaseField.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BaseField.


        :param description: The description of this BaseField.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def encrypted(self):
        """Gets the encrypted of this BaseField.  # noqa: E501


        :return: The encrypted of this BaseField.  # noqa: E501
        :rtype: bool
        """
        return self._encrypted

    @encrypted.setter
    def encrypted(self, encrypted):
        """Sets the encrypted of this BaseField.


        :param encrypted: The encrypted of this BaseField.  # noqa: E501
        :type: bool
        """

        self._encrypted = encrypted

    @property
    def field_groups(self):
        """Gets the field_groups of this BaseField.  # noqa: E501


        :return: The field_groups of this BaseField.  # noqa: E501
        :rtype: list[str]
        """
        return self._field_groups

    @field_groups.setter
    def field_groups(self, field_groups):
        """Sets the field_groups of this BaseField.


        :param field_groups: The field_groups of this BaseField.  # noqa: E501
        :type: list[str]
        """

        self._field_groups = field_groups

    @property
    def name(self):
        """Gets the name of this BaseField.  # noqa: E501


        :return: The name of this BaseField.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BaseField.


        :param name: The name of this BaseField.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def order_index(self):
        """Gets the order_index of this BaseField.  # noqa: E501


        :return: The order_index of this BaseField.  # noqa: E501
        :rtype: int
        """
        return self._order_index

    @order_index.setter
    def order_index(self, order_index):
        """Sets the order_index of this BaseField.


        :param order_index: The order_index of this BaseField.  # noqa: E501
        :type: int
        """

        self._order_index = order_index

    @property
    def required(self):
        """Gets the required of this BaseField.  # noqa: E501


        :return: The required of this BaseField.  # noqa: E501
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this BaseField.


        :param required: The required of this BaseField.  # noqa: E501
        :type: bool
        """

        self._required = required

    @property
    def restart(self):
        """Gets the restart of this BaseField.  # noqa: E501


        :return: The restart of this BaseField.  # noqa: E501
        :rtype: bool
        """
        return self._restart

    @restart.setter
    def restart(self, restart):
        """Sets the restart of this BaseField.


        :param restart: The restart of this BaseField.  # noqa: E501
        :type: bool
        """

        self._restart = restart

    @property
    def type(self):
        """Gets the type of this BaseField.  # noqa: E501


        :return: The type of this BaseField.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BaseField.


        :param type: The type of this BaseField.  # noqa: E501
        :type: str
        """
        allowed_values = ["STRING", "CHARACTER", "UUID", "ENUM", "INTEGER", "FLOAT", "BOOLEAN", "ARRAY", "DATE", "MAP", "OBJECT", "TEXT_AREA"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def ui_hints(self):
        """Gets the ui_hints of this BaseField.  # noqa: E501


        :return: The ui_hints of this BaseField.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._ui_hints

    @ui_hints.setter
    def ui_hints(self, ui_hints):
        """Sets the ui_hints of this BaseField.


        :param ui_hints: The ui_hints of this BaseField.  # noqa: E501
        :type: dict(str, str)
        """

        self._ui_hints = ui_hints

    @property
    def unsupported(self):
        """Gets the unsupported of this BaseField.  # noqa: E501


        :return: The unsupported of this BaseField.  # noqa: E501
        :rtype: bool
        """
        return self._unsupported

    @unsupported.setter
    def unsupported(self, unsupported):
        """Sets the unsupported of this BaseField.


        :param unsupported: The unsupported of this BaseField.  # noqa: E501
        :type: bool
        """

        self._unsupported = unsupported

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseField, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseField):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

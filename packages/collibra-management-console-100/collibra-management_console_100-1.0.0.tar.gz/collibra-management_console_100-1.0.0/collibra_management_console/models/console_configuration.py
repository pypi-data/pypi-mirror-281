# coding: utf-8

"""
    Collibra Management Console

    Collibra Management Console public REST API \\n Please ensure that cookies are not present within the API request. Including cookies within the call will cause 403 error.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConsoleConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'backup': 'BackupConfiguration',
        'base_url': 'str',
        'create_default_environments_at_startup': 'bool',
        'csrf': 'CsrfConfiguration',
        'data_source_configuration': 'ConsoleDataSourceConfiguration',
        'default_environment_set': 'list[EnvironmentConfiguration]',
        'dgc_startup_timeout': 'int',
        'enable_service_monitor': 'bool',
        'getx_frame_options': 'str',
        'jobserver_startup_timeout': 'int',
        'ldap': 'ConsoleLdapConfiguration',
        'mail_configuration': 'MailConfiguration',
        'postgresql_path': 'str',
        'repository_startup_timeout': 'int',
        'security_configuration': 'SecurityConfiguration',
        'session_configuration': 'SessionConfiguration',
        'ui': 'UiConfiguration'
    }

    attribute_map = {
        'backup': 'backup',
        'base_url': 'baseUrl',
        'create_default_environments_at_startup': 'createDefaultEnvironmentsAtStartup',
        'csrf': 'csrf',
        'data_source_configuration': 'dataSourceConfiguration',
        'default_environment_set': 'defaultEnvironmentSet',
        'dgc_startup_timeout': 'dgcStartupTimeout',
        'enable_service_monitor': 'enableServiceMonitor',
        'getx_frame_options': 'getxFrameOptions',
        'jobserver_startup_timeout': 'jobserverStartupTimeout',
        'ldap': 'ldap',
        'mail_configuration': 'mailConfiguration',
        'postgresql_path': 'postgresqlPath',
        'repository_startup_timeout': 'repositoryStartupTimeout',
        'security_configuration': 'securityConfiguration',
        'session_configuration': 'sessionConfiguration',
        'ui': 'ui'
    }

    def __init__(self, backup=None, base_url=None, create_default_environments_at_startup=None, csrf=None, data_source_configuration=None, default_environment_set=None, dgc_startup_timeout=None, enable_service_monitor=None, getx_frame_options=None, jobserver_startup_timeout=None, ldap=None, mail_configuration=None, postgresql_path=None, repository_startup_timeout=None, security_configuration=None, session_configuration=None, ui=None):  # noqa: E501
        """ConsoleConfiguration - a model defined in Swagger"""  # noqa: E501
        self._backup = None
        self._base_url = None
        self._create_default_environments_at_startup = None
        self._csrf = None
        self._data_source_configuration = None
        self._default_environment_set = None
        self._dgc_startup_timeout = None
        self._enable_service_monitor = None
        self._getx_frame_options = None
        self._jobserver_startup_timeout = None
        self._ldap = None
        self._mail_configuration = None
        self._postgresql_path = None
        self._repository_startup_timeout = None
        self._security_configuration = None
        self._session_configuration = None
        self._ui = None
        self.discriminator = None
        if backup is not None:
            self.backup = backup
        self.base_url = base_url
        self.create_default_environments_at_startup = create_default_environments_at_startup
        if csrf is not None:
            self.csrf = csrf
        if data_source_configuration is not None:
            self.data_source_configuration = data_source_configuration
        if default_environment_set is not None:
            self.default_environment_set = default_environment_set
        self.dgc_startup_timeout = dgc_startup_timeout
        self.enable_service_monitor = enable_service_monitor
        if getx_frame_options is not None:
            self.getx_frame_options = getx_frame_options
        self.jobserver_startup_timeout = jobserver_startup_timeout
        if ldap is not None:
            self.ldap = ldap
        if mail_configuration is not None:
            self.mail_configuration = mail_configuration
        self.postgresql_path = postgresql_path
        self.repository_startup_timeout = repository_startup_timeout
        if security_configuration is not None:
            self.security_configuration = security_configuration
        if session_configuration is not None:
            self.session_configuration = session_configuration
        if ui is not None:
            self.ui = ui

    @property
    def backup(self):
        """Gets the backup of this ConsoleConfiguration.  # noqa: E501


        :return: The backup of this ConsoleConfiguration.  # noqa: E501
        :rtype: BackupConfiguration
        """
        return self._backup

    @backup.setter
    def backup(self, backup):
        """Sets the backup of this ConsoleConfiguration.


        :param backup: The backup of this ConsoleConfiguration.  # noqa: E501
        :type: BackupConfiguration
        """

        self._backup = backup

    @property
    def base_url(self):
        """Gets the base_url of this ConsoleConfiguration.  # noqa: E501


        :return: The base_url of this ConsoleConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._base_url

    @base_url.setter
    def base_url(self, base_url):
        """Sets the base_url of this ConsoleConfiguration.


        :param base_url: The base_url of this ConsoleConfiguration.  # noqa: E501
        :type: str
        """
        if base_url is None:
            raise ValueError("Invalid value for `base_url`, must not be `None`")  # noqa: E501

        self._base_url = base_url

    @property
    def create_default_environments_at_startup(self):
        """Gets the create_default_environments_at_startup of this ConsoleConfiguration.  # noqa: E501


        :return: The create_default_environments_at_startup of this ConsoleConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._create_default_environments_at_startup

    @create_default_environments_at_startup.setter
    def create_default_environments_at_startup(self, create_default_environments_at_startup):
        """Sets the create_default_environments_at_startup of this ConsoleConfiguration.


        :param create_default_environments_at_startup: The create_default_environments_at_startup of this ConsoleConfiguration.  # noqa: E501
        :type: bool
        """
        if create_default_environments_at_startup is None:
            raise ValueError("Invalid value for `create_default_environments_at_startup`, must not be `None`")  # noqa: E501

        self._create_default_environments_at_startup = create_default_environments_at_startup

    @property
    def csrf(self):
        """Gets the csrf of this ConsoleConfiguration.  # noqa: E501


        :return: The csrf of this ConsoleConfiguration.  # noqa: E501
        :rtype: CsrfConfiguration
        """
        return self._csrf

    @csrf.setter
    def csrf(self, csrf):
        """Sets the csrf of this ConsoleConfiguration.


        :param csrf: The csrf of this ConsoleConfiguration.  # noqa: E501
        :type: CsrfConfiguration
        """

        self._csrf = csrf

    @property
    def data_source_configuration(self):
        """Gets the data_source_configuration of this ConsoleConfiguration.  # noqa: E501


        :return: The data_source_configuration of this ConsoleConfiguration.  # noqa: E501
        :rtype: ConsoleDataSourceConfiguration
        """
        return self._data_source_configuration

    @data_source_configuration.setter
    def data_source_configuration(self, data_source_configuration):
        """Sets the data_source_configuration of this ConsoleConfiguration.


        :param data_source_configuration: The data_source_configuration of this ConsoleConfiguration.  # noqa: E501
        :type: ConsoleDataSourceConfiguration
        """

        self._data_source_configuration = data_source_configuration

    @property
    def default_environment_set(self):
        """Gets the default_environment_set of this ConsoleConfiguration.  # noqa: E501


        :return: The default_environment_set of this ConsoleConfiguration.  # noqa: E501
        :rtype: list[EnvironmentConfiguration]
        """
        return self._default_environment_set

    @default_environment_set.setter
    def default_environment_set(self, default_environment_set):
        """Sets the default_environment_set of this ConsoleConfiguration.


        :param default_environment_set: The default_environment_set of this ConsoleConfiguration.  # noqa: E501
        :type: list[EnvironmentConfiguration]
        """

        self._default_environment_set = default_environment_set

    @property
    def dgc_startup_timeout(self):
        """Gets the dgc_startup_timeout of this ConsoleConfiguration.  # noqa: E501


        :return: The dgc_startup_timeout of this ConsoleConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._dgc_startup_timeout

    @dgc_startup_timeout.setter
    def dgc_startup_timeout(self, dgc_startup_timeout):
        """Sets the dgc_startup_timeout of this ConsoleConfiguration.


        :param dgc_startup_timeout: The dgc_startup_timeout of this ConsoleConfiguration.  # noqa: E501
        :type: int
        """
        if dgc_startup_timeout is None:
            raise ValueError("Invalid value for `dgc_startup_timeout`, must not be `None`")  # noqa: E501

        self._dgc_startup_timeout = dgc_startup_timeout

    @property
    def enable_service_monitor(self):
        """Gets the enable_service_monitor of this ConsoleConfiguration.  # noqa: E501


        :return: The enable_service_monitor of this ConsoleConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._enable_service_monitor

    @enable_service_monitor.setter
    def enable_service_monitor(self, enable_service_monitor):
        """Sets the enable_service_monitor of this ConsoleConfiguration.


        :param enable_service_monitor: The enable_service_monitor of this ConsoleConfiguration.  # noqa: E501
        :type: bool
        """
        if enable_service_monitor is None:
            raise ValueError("Invalid value for `enable_service_monitor`, must not be `None`")  # noqa: E501

        self._enable_service_monitor = enable_service_monitor

    @property
    def getx_frame_options(self):
        """Gets the getx_frame_options of this ConsoleConfiguration.  # noqa: E501


        :return: The getx_frame_options of this ConsoleConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._getx_frame_options

    @getx_frame_options.setter
    def getx_frame_options(self, getx_frame_options):
        """Sets the getx_frame_options of this ConsoleConfiguration.


        :param getx_frame_options: The getx_frame_options of this ConsoleConfiguration.  # noqa: E501
        :type: str
        """

        self._getx_frame_options = getx_frame_options

    @property
    def jobserver_startup_timeout(self):
        """Gets the jobserver_startup_timeout of this ConsoleConfiguration.  # noqa: E501


        :return: The jobserver_startup_timeout of this ConsoleConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._jobserver_startup_timeout

    @jobserver_startup_timeout.setter
    def jobserver_startup_timeout(self, jobserver_startup_timeout):
        """Sets the jobserver_startup_timeout of this ConsoleConfiguration.


        :param jobserver_startup_timeout: The jobserver_startup_timeout of this ConsoleConfiguration.  # noqa: E501
        :type: int
        """
        if jobserver_startup_timeout is None:
            raise ValueError("Invalid value for `jobserver_startup_timeout`, must not be `None`")  # noqa: E501

        self._jobserver_startup_timeout = jobserver_startup_timeout

    @property
    def ldap(self):
        """Gets the ldap of this ConsoleConfiguration.  # noqa: E501


        :return: The ldap of this ConsoleConfiguration.  # noqa: E501
        :rtype: ConsoleLdapConfiguration
        """
        return self._ldap

    @ldap.setter
    def ldap(self, ldap):
        """Sets the ldap of this ConsoleConfiguration.


        :param ldap: The ldap of this ConsoleConfiguration.  # noqa: E501
        :type: ConsoleLdapConfiguration
        """

        self._ldap = ldap

    @property
    def mail_configuration(self):
        """Gets the mail_configuration of this ConsoleConfiguration.  # noqa: E501


        :return: The mail_configuration of this ConsoleConfiguration.  # noqa: E501
        :rtype: MailConfiguration
        """
        return self._mail_configuration

    @mail_configuration.setter
    def mail_configuration(self, mail_configuration):
        """Sets the mail_configuration of this ConsoleConfiguration.


        :param mail_configuration: The mail_configuration of this ConsoleConfiguration.  # noqa: E501
        :type: MailConfiguration
        """

        self._mail_configuration = mail_configuration

    @property
    def postgresql_path(self):
        """Gets the postgresql_path of this ConsoleConfiguration.  # noqa: E501


        :return: The postgresql_path of this ConsoleConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._postgresql_path

    @postgresql_path.setter
    def postgresql_path(self, postgresql_path):
        """Sets the postgresql_path of this ConsoleConfiguration.


        :param postgresql_path: The postgresql_path of this ConsoleConfiguration.  # noqa: E501
        :type: str
        """
        if postgresql_path is None:
            raise ValueError("Invalid value for `postgresql_path`, must not be `None`")  # noqa: E501

        self._postgresql_path = postgresql_path

    @property
    def repository_startup_timeout(self):
        """Gets the repository_startup_timeout of this ConsoleConfiguration.  # noqa: E501


        :return: The repository_startup_timeout of this ConsoleConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._repository_startup_timeout

    @repository_startup_timeout.setter
    def repository_startup_timeout(self, repository_startup_timeout):
        """Sets the repository_startup_timeout of this ConsoleConfiguration.


        :param repository_startup_timeout: The repository_startup_timeout of this ConsoleConfiguration.  # noqa: E501
        :type: int
        """
        if repository_startup_timeout is None:
            raise ValueError("Invalid value for `repository_startup_timeout`, must not be `None`")  # noqa: E501

        self._repository_startup_timeout = repository_startup_timeout

    @property
    def security_configuration(self):
        """Gets the security_configuration of this ConsoleConfiguration.  # noqa: E501


        :return: The security_configuration of this ConsoleConfiguration.  # noqa: E501
        :rtype: SecurityConfiguration
        """
        return self._security_configuration

    @security_configuration.setter
    def security_configuration(self, security_configuration):
        """Sets the security_configuration of this ConsoleConfiguration.


        :param security_configuration: The security_configuration of this ConsoleConfiguration.  # noqa: E501
        :type: SecurityConfiguration
        """

        self._security_configuration = security_configuration

    @property
    def session_configuration(self):
        """Gets the session_configuration of this ConsoleConfiguration.  # noqa: E501


        :return: The session_configuration of this ConsoleConfiguration.  # noqa: E501
        :rtype: SessionConfiguration
        """
        return self._session_configuration

    @session_configuration.setter
    def session_configuration(self, session_configuration):
        """Sets the session_configuration of this ConsoleConfiguration.


        :param session_configuration: The session_configuration of this ConsoleConfiguration.  # noqa: E501
        :type: SessionConfiguration
        """

        self._session_configuration = session_configuration

    @property
    def ui(self):
        """Gets the ui of this ConsoleConfiguration.  # noqa: E501


        :return: The ui of this ConsoleConfiguration.  # noqa: E501
        :rtype: UiConfiguration
        """
        return self._ui

    @ui.setter
    def ui(self, ui):
        """Sets the ui of this ConsoleConfiguration.


        :param ui: The ui of this ConsoleConfiguration.  # noqa: E501
        :type: UiConfiguration
        """

        self._ui = ui

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConsoleConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConsoleConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

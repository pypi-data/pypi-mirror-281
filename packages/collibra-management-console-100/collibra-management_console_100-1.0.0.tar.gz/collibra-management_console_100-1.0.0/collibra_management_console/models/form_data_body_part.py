# coding: utf-8

"""
    Collibra Management Console

    Collibra Management Console public REST API \\n Please ensure that cookies are not present within the API request. Including cookies within the call will cause 403 error.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FormDataBodyPart(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'content': 'object',
        'content_disposition': 'ContentDisposition',
        'entity': 'object',
        'file_name': 'str',
        'form_data_content_disposition': 'FormDataContentDisposition',
        'headers': 'BodyPartHeaders',
        'media_type': 'MediaType',
        'message_body_workers': 'MessageBodyWorkers',
        'name': 'str',
        'parameterized_headers': 'BodyPartParameterizedHeaders',
        'parent': 'MultiPart',
        'providers': 'Providers',
        'simple': 'bool',
        'value': 'str'
    }

    attribute_map = {
        'content': 'content',
        'content_disposition': 'contentDisposition',
        'entity': 'entity',
        'file_name': 'fileName',
        'form_data_content_disposition': 'formDataContentDisposition',
        'headers': 'headers',
        'media_type': 'mediaType',
        'message_body_workers': 'messageBodyWorkers',
        'name': 'name',
        'parameterized_headers': 'parameterizedHeaders',
        'parent': 'parent',
        'providers': 'providers',
        'simple': 'simple',
        'value': 'value'
    }

    def __init__(self, content=None, content_disposition=None, entity=None, file_name=None, form_data_content_disposition=None, headers=None, media_type=None, message_body_workers=None, name=None, parameterized_headers=None, parent=None, providers=None, simple=None, value=None):  # noqa: E501
        """FormDataBodyPart - a model defined in Swagger"""  # noqa: E501
        self._content = None
        self._content_disposition = None
        self._entity = None
        self._file_name = None
        self._form_data_content_disposition = None
        self._headers = None
        self._media_type = None
        self._message_body_workers = None
        self._name = None
        self._parameterized_headers = None
        self._parent = None
        self._providers = None
        self._simple = None
        self._value = None
        self.discriminator = None
        if content is not None:
            self.content = content
        if content_disposition is not None:
            self.content_disposition = content_disposition
        if entity is not None:
            self.entity = entity
        if file_name is not None:
            self.file_name = file_name
        if form_data_content_disposition is not None:
            self.form_data_content_disposition = form_data_content_disposition
        if headers is not None:
            self.headers = headers
        if media_type is not None:
            self.media_type = media_type
        if message_body_workers is not None:
            self.message_body_workers = message_body_workers
        if name is not None:
            self.name = name
        if parameterized_headers is not None:
            self.parameterized_headers = parameterized_headers
        if parent is not None:
            self.parent = parent
        if providers is not None:
            self.providers = providers
        if simple is not None:
            self.simple = simple
        if value is not None:
            self.value = value

    @property
    def content(self):
        """Gets the content of this FormDataBodyPart.  # noqa: E501


        :return: The content of this FormDataBodyPart.  # noqa: E501
        :rtype: object
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this FormDataBodyPart.


        :param content: The content of this FormDataBodyPart.  # noqa: E501
        :type: object
        """

        self._content = content

    @property
    def content_disposition(self):
        """Gets the content_disposition of this FormDataBodyPart.  # noqa: E501


        :return: The content_disposition of this FormDataBodyPart.  # noqa: E501
        :rtype: ContentDisposition
        """
        return self._content_disposition

    @content_disposition.setter
    def content_disposition(self, content_disposition):
        """Sets the content_disposition of this FormDataBodyPart.


        :param content_disposition: The content_disposition of this FormDataBodyPart.  # noqa: E501
        :type: ContentDisposition
        """

        self._content_disposition = content_disposition

    @property
    def entity(self):
        """Gets the entity of this FormDataBodyPart.  # noqa: E501


        :return: The entity of this FormDataBodyPart.  # noqa: E501
        :rtype: object
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this FormDataBodyPart.


        :param entity: The entity of this FormDataBodyPart.  # noqa: E501
        :type: object
        """

        self._entity = entity

    @property
    def file_name(self):
        """Gets the file_name of this FormDataBodyPart.  # noqa: E501


        :return: The file_name of this FormDataBodyPart.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this FormDataBodyPart.


        :param file_name: The file_name of this FormDataBodyPart.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def form_data_content_disposition(self):
        """Gets the form_data_content_disposition of this FormDataBodyPart.  # noqa: E501


        :return: The form_data_content_disposition of this FormDataBodyPart.  # noqa: E501
        :rtype: FormDataContentDisposition
        """
        return self._form_data_content_disposition

    @form_data_content_disposition.setter
    def form_data_content_disposition(self, form_data_content_disposition):
        """Sets the form_data_content_disposition of this FormDataBodyPart.


        :param form_data_content_disposition: The form_data_content_disposition of this FormDataBodyPart.  # noqa: E501
        :type: FormDataContentDisposition
        """

        self._form_data_content_disposition = form_data_content_disposition

    @property
    def headers(self):
        """Gets the headers of this FormDataBodyPart.  # noqa: E501


        :return: The headers of this FormDataBodyPart.  # noqa: E501
        :rtype: BodyPartHeaders
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this FormDataBodyPart.


        :param headers: The headers of this FormDataBodyPart.  # noqa: E501
        :type: BodyPartHeaders
        """

        self._headers = headers

    @property
    def media_type(self):
        """Gets the media_type of this FormDataBodyPart.  # noqa: E501


        :return: The media_type of this FormDataBodyPart.  # noqa: E501
        :rtype: MediaType
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type):
        """Sets the media_type of this FormDataBodyPart.


        :param media_type: The media_type of this FormDataBodyPart.  # noqa: E501
        :type: MediaType
        """

        self._media_type = media_type

    @property
    def message_body_workers(self):
        """Gets the message_body_workers of this FormDataBodyPart.  # noqa: E501


        :return: The message_body_workers of this FormDataBodyPart.  # noqa: E501
        :rtype: MessageBodyWorkers
        """
        return self._message_body_workers

    @message_body_workers.setter
    def message_body_workers(self, message_body_workers):
        """Sets the message_body_workers of this FormDataBodyPart.


        :param message_body_workers: The message_body_workers of this FormDataBodyPart.  # noqa: E501
        :type: MessageBodyWorkers
        """

        self._message_body_workers = message_body_workers

    @property
    def name(self):
        """Gets the name of this FormDataBodyPart.  # noqa: E501


        :return: The name of this FormDataBodyPart.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FormDataBodyPart.


        :param name: The name of this FormDataBodyPart.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def parameterized_headers(self):
        """Gets the parameterized_headers of this FormDataBodyPart.  # noqa: E501


        :return: The parameterized_headers of this FormDataBodyPart.  # noqa: E501
        :rtype: BodyPartParameterizedHeaders
        """
        return self._parameterized_headers

    @parameterized_headers.setter
    def parameterized_headers(self, parameterized_headers):
        """Sets the parameterized_headers of this FormDataBodyPart.


        :param parameterized_headers: The parameterized_headers of this FormDataBodyPart.  # noqa: E501
        :type: BodyPartParameterizedHeaders
        """

        self._parameterized_headers = parameterized_headers

    @property
    def parent(self):
        """Gets the parent of this FormDataBodyPart.  # noqa: E501


        :return: The parent of this FormDataBodyPart.  # noqa: E501
        :rtype: MultiPart
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this FormDataBodyPart.


        :param parent: The parent of this FormDataBodyPart.  # noqa: E501
        :type: MultiPart
        """

        self._parent = parent

    @property
    def providers(self):
        """Gets the providers of this FormDataBodyPart.  # noqa: E501


        :return: The providers of this FormDataBodyPart.  # noqa: E501
        :rtype: Providers
        """
        return self._providers

    @providers.setter
    def providers(self, providers):
        """Sets the providers of this FormDataBodyPart.


        :param providers: The providers of this FormDataBodyPart.  # noqa: E501
        :type: Providers
        """

        self._providers = providers

    @property
    def simple(self):
        """Gets the simple of this FormDataBodyPart.  # noqa: E501


        :return: The simple of this FormDataBodyPart.  # noqa: E501
        :rtype: bool
        """
        return self._simple

    @simple.setter
    def simple(self, simple):
        """Sets the simple of this FormDataBodyPart.


        :param simple: The simple of this FormDataBodyPart.  # noqa: E501
        :type: bool
        """

        self._simple = simple

    @property
    def value(self):
        """Gets the value of this FormDataBodyPart.  # noqa: E501


        :return: The value of this FormDataBodyPart.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this FormDataBodyPart.


        :param value: The value of this FormDataBodyPart.  # noqa: E501
        :type: str
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FormDataBodyPart, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FormDataBodyPart):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Collibra Management Console

    Collibra Management Console public REST API \\n Please ensure that cookies are not present within the API request. Including cookies within the call will cause 403 error.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BackupScheduleModelServerTimeZoneOffsetRulesTransitions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'date_time_after': 'datetime',
        'date_time_before': 'datetime',
        'duration': 'BackupScheduleModelServerTimeZoneOffsetRulesDuration',
        'gap': 'bool',
        'instant': 'datetime',
        'offset_after': 'BackupScheduleModelServerTimeZoneOffsetRulesOffsetAfter',
        'offset_before': 'BackupScheduleModelServerTimeZoneOffsetRulesOffsetAfter',
        'overlap': 'bool'
    }

    attribute_map = {
        'date_time_after': 'dateTimeAfter',
        'date_time_before': 'dateTimeBefore',
        'duration': 'duration',
        'gap': 'gap',
        'instant': 'instant',
        'offset_after': 'offsetAfter',
        'offset_before': 'offsetBefore',
        'overlap': 'overlap'
    }

    def __init__(self, date_time_after=None, date_time_before=None, duration=None, gap=None, instant=None, offset_after=None, offset_before=None, overlap=None):  # noqa: E501
        """BackupScheduleModelServerTimeZoneOffsetRulesTransitions - a model defined in Swagger"""  # noqa: E501
        self._date_time_after = None
        self._date_time_before = None
        self._duration = None
        self._gap = None
        self._instant = None
        self._offset_after = None
        self._offset_before = None
        self._overlap = None
        self.discriminator = None
        if date_time_after is not None:
            self.date_time_after = date_time_after
        if date_time_before is not None:
            self.date_time_before = date_time_before
        if duration is not None:
            self.duration = duration
        if gap is not None:
            self.gap = gap
        if instant is not None:
            self.instant = instant
        if offset_after is not None:
            self.offset_after = offset_after
        if offset_before is not None:
            self.offset_before = offset_before
        if overlap is not None:
            self.overlap = overlap

    @property
    def date_time_after(self):
        """Gets the date_time_after of this BackupScheduleModelServerTimeZoneOffsetRulesTransitions.  # noqa: E501


        :return: The date_time_after of this BackupScheduleModelServerTimeZoneOffsetRulesTransitions.  # noqa: E501
        :rtype: datetime
        """
        return self._date_time_after

    @date_time_after.setter
    def date_time_after(self, date_time_after):
        """Sets the date_time_after of this BackupScheduleModelServerTimeZoneOffsetRulesTransitions.


        :param date_time_after: The date_time_after of this BackupScheduleModelServerTimeZoneOffsetRulesTransitions.  # noqa: E501
        :type: datetime
        """

        self._date_time_after = date_time_after

    @property
    def date_time_before(self):
        """Gets the date_time_before of this BackupScheduleModelServerTimeZoneOffsetRulesTransitions.  # noqa: E501


        :return: The date_time_before of this BackupScheduleModelServerTimeZoneOffsetRulesTransitions.  # noqa: E501
        :rtype: datetime
        """
        return self._date_time_before

    @date_time_before.setter
    def date_time_before(self, date_time_before):
        """Sets the date_time_before of this BackupScheduleModelServerTimeZoneOffsetRulesTransitions.


        :param date_time_before: The date_time_before of this BackupScheduleModelServerTimeZoneOffsetRulesTransitions.  # noqa: E501
        :type: datetime
        """

        self._date_time_before = date_time_before

    @property
    def duration(self):
        """Gets the duration of this BackupScheduleModelServerTimeZoneOffsetRulesTransitions.  # noqa: E501


        :return: The duration of this BackupScheduleModelServerTimeZoneOffsetRulesTransitions.  # noqa: E501
        :rtype: BackupScheduleModelServerTimeZoneOffsetRulesDuration
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this BackupScheduleModelServerTimeZoneOffsetRulesTransitions.


        :param duration: The duration of this BackupScheduleModelServerTimeZoneOffsetRulesTransitions.  # noqa: E501
        :type: BackupScheduleModelServerTimeZoneOffsetRulesDuration
        """

        self._duration = duration

    @property
    def gap(self):
        """Gets the gap of this BackupScheduleModelServerTimeZoneOffsetRulesTransitions.  # noqa: E501


        :return: The gap of this BackupScheduleModelServerTimeZoneOffsetRulesTransitions.  # noqa: E501
        :rtype: bool
        """
        return self._gap

    @gap.setter
    def gap(self, gap):
        """Sets the gap of this BackupScheduleModelServerTimeZoneOffsetRulesTransitions.


        :param gap: The gap of this BackupScheduleModelServerTimeZoneOffsetRulesTransitions.  # noqa: E501
        :type: bool
        """

        self._gap = gap

    @property
    def instant(self):
        """Gets the instant of this BackupScheduleModelServerTimeZoneOffsetRulesTransitions.  # noqa: E501


        :return: The instant of this BackupScheduleModelServerTimeZoneOffsetRulesTransitions.  # noqa: E501
        :rtype: datetime
        """
        return self._instant

    @instant.setter
    def instant(self, instant):
        """Sets the instant of this BackupScheduleModelServerTimeZoneOffsetRulesTransitions.


        :param instant: The instant of this BackupScheduleModelServerTimeZoneOffsetRulesTransitions.  # noqa: E501
        :type: datetime
        """

        self._instant = instant

    @property
    def offset_after(self):
        """Gets the offset_after of this BackupScheduleModelServerTimeZoneOffsetRulesTransitions.  # noqa: E501


        :return: The offset_after of this BackupScheduleModelServerTimeZoneOffsetRulesTransitions.  # noqa: E501
        :rtype: BackupScheduleModelServerTimeZoneOffsetRulesOffsetAfter
        """
        return self._offset_after

    @offset_after.setter
    def offset_after(self, offset_after):
        """Sets the offset_after of this BackupScheduleModelServerTimeZoneOffsetRulesTransitions.


        :param offset_after: The offset_after of this BackupScheduleModelServerTimeZoneOffsetRulesTransitions.  # noqa: E501
        :type: BackupScheduleModelServerTimeZoneOffsetRulesOffsetAfter
        """

        self._offset_after = offset_after

    @property
    def offset_before(self):
        """Gets the offset_before of this BackupScheduleModelServerTimeZoneOffsetRulesTransitions.  # noqa: E501


        :return: The offset_before of this BackupScheduleModelServerTimeZoneOffsetRulesTransitions.  # noqa: E501
        :rtype: BackupScheduleModelServerTimeZoneOffsetRulesOffsetAfter
        """
        return self._offset_before

    @offset_before.setter
    def offset_before(self, offset_before):
        """Sets the offset_before of this BackupScheduleModelServerTimeZoneOffsetRulesTransitions.


        :param offset_before: The offset_before of this BackupScheduleModelServerTimeZoneOffsetRulesTransitions.  # noqa: E501
        :type: BackupScheduleModelServerTimeZoneOffsetRulesOffsetAfter
        """

        self._offset_before = offset_before

    @property
    def overlap(self):
        """Gets the overlap of this BackupScheduleModelServerTimeZoneOffsetRulesTransitions.  # noqa: E501


        :return: The overlap of this BackupScheduleModelServerTimeZoneOffsetRulesTransitions.  # noqa: E501
        :rtype: bool
        """
        return self._overlap

    @overlap.setter
    def overlap(self, overlap):
        """Sets the overlap of this BackupScheduleModelServerTimeZoneOffsetRulesTransitions.


        :param overlap: The overlap of this BackupScheduleModelServerTimeZoneOffsetRulesTransitions.  # noqa: E501
        :type: bool
        """

        self._overlap = overlap

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BackupScheduleModelServerTimeZoneOffsetRulesTransitions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BackupScheduleModelServerTimeZoneOffsetRulesTransitions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

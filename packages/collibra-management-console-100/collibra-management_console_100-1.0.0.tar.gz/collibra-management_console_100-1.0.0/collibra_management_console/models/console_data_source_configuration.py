# coding: utf-8

"""
    Collibra Management Console

    Collibra Management Console public REST API \\n Please ensure that cookies are not present within the API request. Including cookies within the call will cause 403 error.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConsoleDataSourceConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'admin_password': 'str',
        'console_password': 'str',
        'use_external_database': 'bool'
    }

    attribute_map = {
        'admin_password': 'adminPassword',
        'console_password': 'consolePassword',
        'use_external_database': 'useExternalDatabase'
    }

    def __init__(self, admin_password=None, console_password=None, use_external_database=None):  # noqa: E501
        """ConsoleDataSourceConfiguration - a model defined in Swagger"""  # noqa: E501
        self._admin_password = None
        self._console_password = None
        self._use_external_database = None
        self.discriminator = None
        self.admin_password = admin_password
        self.console_password = console_password
        self.use_external_database = use_external_database

    @property
    def admin_password(self):
        """Gets the admin_password of this ConsoleDataSourceConfiguration.  # noqa: E501


        :return: The admin_password of this ConsoleDataSourceConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._admin_password

    @admin_password.setter
    def admin_password(self, admin_password):
        """Sets the admin_password of this ConsoleDataSourceConfiguration.


        :param admin_password: The admin_password of this ConsoleDataSourceConfiguration.  # noqa: E501
        :type: str
        """
        if admin_password is None:
            raise ValueError("Invalid value for `admin_password`, must not be `None`")  # noqa: E501

        self._admin_password = admin_password

    @property
    def console_password(self):
        """Gets the console_password of this ConsoleDataSourceConfiguration.  # noqa: E501


        :return: The console_password of this ConsoleDataSourceConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._console_password

    @console_password.setter
    def console_password(self, console_password):
        """Sets the console_password of this ConsoleDataSourceConfiguration.


        :param console_password: The console_password of this ConsoleDataSourceConfiguration.  # noqa: E501
        :type: str
        """
        if console_password is None:
            raise ValueError("Invalid value for `console_password`, must not be `None`")  # noqa: E501

        self._console_password = console_password

    @property
    def use_external_database(self):
        """Gets the use_external_database of this ConsoleDataSourceConfiguration.  # noqa: E501


        :return: The use_external_database of this ConsoleDataSourceConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._use_external_database

    @use_external_database.setter
    def use_external_database(self, use_external_database):
        """Sets the use_external_database of this ConsoleDataSourceConfiguration.


        :param use_external_database: The use_external_database of this ConsoleDataSourceConfiguration.  # noqa: E501
        :type: bool
        """
        if use_external_database is None:
            raise ValueError("Invalid value for `use_external_database`, must not be `None`")  # noqa: E501

        self._use_external_database = use_external_database

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConsoleDataSourceConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConsoleDataSourceConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

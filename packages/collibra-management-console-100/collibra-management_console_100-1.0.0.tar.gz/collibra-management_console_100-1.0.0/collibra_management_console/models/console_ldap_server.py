# coding: utf-8

"""
    Collibra Management Console

    Collibra Management Console public REST API \\n Please ensure that cookies are not present within the API request. Including cookies within the call will cause 403 error.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConsoleLdapServer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auth_type': 'str',
        'auth_user_filter': 'str',
        'base': 'str',
        'bind_dn': 'str',
        'bind_password': 'str',
        'group_base': 'str',
        'group_filter': 'str',
        'ldap_user_groups_to_roles_map': 'dict(str, str)',
        'membership_attribute': 'str',
        'referral': 'str',
        'shutdown_tls_gracefully': 'bool',
        'sync_user_filter': 'str',
        'url': 'str',
        'user_base': 'str'
    }

    attribute_map = {
        'auth_type': 'authType',
        'auth_user_filter': 'authUserFilter',
        'base': 'base',
        'bind_dn': 'bindDn',
        'bind_password': 'bindPassword',
        'group_base': 'groupBase',
        'group_filter': 'groupFilter',
        'ldap_user_groups_to_roles_map': 'ldapUserGroupsToRolesMap',
        'membership_attribute': 'membershipAttribute',
        'referral': 'referral',
        'shutdown_tls_gracefully': 'shutdownTlsGracefully',
        'sync_user_filter': 'syncUserFilter',
        'url': 'url',
        'user_base': 'userBase'
    }

    def __init__(self, auth_type=None, auth_user_filter=None, base=None, bind_dn=None, bind_password=None, group_base=None, group_filter=None, ldap_user_groups_to_roles_map=None, membership_attribute=None, referral=None, shutdown_tls_gracefully=None, sync_user_filter=None, url=None, user_base=None):  # noqa: E501
        """ConsoleLdapServer - a model defined in Swagger"""  # noqa: E501
        self._auth_type = None
        self._auth_user_filter = None
        self._base = None
        self._bind_dn = None
        self._bind_password = None
        self._group_base = None
        self._group_filter = None
        self._ldap_user_groups_to_roles_map = None
        self._membership_attribute = None
        self._referral = None
        self._shutdown_tls_gracefully = None
        self._sync_user_filter = None
        self._url = None
        self._user_base = None
        self.discriminator = None
        if auth_type is not None:
            self.auth_type = auth_type
        if auth_user_filter is not None:
            self.auth_user_filter = auth_user_filter
        if base is not None:
            self.base = base
        if bind_dn is not None:
            self.bind_dn = bind_dn
        if bind_password is not None:
            self.bind_password = bind_password
        if group_base is not None:
            self.group_base = group_base
        if group_filter is not None:
            self.group_filter = group_filter
        if ldap_user_groups_to_roles_map is not None:
            self.ldap_user_groups_to_roles_map = ldap_user_groups_to_roles_map
        if membership_attribute is not None:
            self.membership_attribute = membership_attribute
        if referral is not None:
            self.referral = referral
        if shutdown_tls_gracefully is not None:
            self.shutdown_tls_gracefully = shutdown_tls_gracefully
        if sync_user_filter is not None:
            self.sync_user_filter = sync_user_filter
        if url is not None:
            self.url = url
        if user_base is not None:
            self.user_base = user_base

    @property
    def auth_type(self):
        """Gets the auth_type of this ConsoleLdapServer.  # noqa: E501


        :return: The auth_type of this ConsoleLdapServer.  # noqa: E501
        :rtype: str
        """
        return self._auth_type

    @auth_type.setter
    def auth_type(self, auth_type):
        """Sets the auth_type of this ConsoleLdapServer.


        :param auth_type: The auth_type of this ConsoleLdapServer.  # noqa: E501
        :type: str
        """

        self._auth_type = auth_type

    @property
    def auth_user_filter(self):
        """Gets the auth_user_filter of this ConsoleLdapServer.  # noqa: E501


        :return: The auth_user_filter of this ConsoleLdapServer.  # noqa: E501
        :rtype: str
        """
        return self._auth_user_filter

    @auth_user_filter.setter
    def auth_user_filter(self, auth_user_filter):
        """Sets the auth_user_filter of this ConsoleLdapServer.


        :param auth_user_filter: The auth_user_filter of this ConsoleLdapServer.  # noqa: E501
        :type: str
        """

        self._auth_user_filter = auth_user_filter

    @property
    def base(self):
        """Gets the base of this ConsoleLdapServer.  # noqa: E501


        :return: The base of this ConsoleLdapServer.  # noqa: E501
        :rtype: str
        """
        return self._base

    @base.setter
    def base(self, base):
        """Sets the base of this ConsoleLdapServer.


        :param base: The base of this ConsoleLdapServer.  # noqa: E501
        :type: str
        """

        self._base = base

    @property
    def bind_dn(self):
        """Gets the bind_dn of this ConsoleLdapServer.  # noqa: E501


        :return: The bind_dn of this ConsoleLdapServer.  # noqa: E501
        :rtype: str
        """
        return self._bind_dn

    @bind_dn.setter
    def bind_dn(self, bind_dn):
        """Sets the bind_dn of this ConsoleLdapServer.


        :param bind_dn: The bind_dn of this ConsoleLdapServer.  # noqa: E501
        :type: str
        """

        self._bind_dn = bind_dn

    @property
    def bind_password(self):
        """Gets the bind_password of this ConsoleLdapServer.  # noqa: E501


        :return: The bind_password of this ConsoleLdapServer.  # noqa: E501
        :rtype: str
        """
        return self._bind_password

    @bind_password.setter
    def bind_password(self, bind_password):
        """Sets the bind_password of this ConsoleLdapServer.


        :param bind_password: The bind_password of this ConsoleLdapServer.  # noqa: E501
        :type: str
        """

        self._bind_password = bind_password

    @property
    def group_base(self):
        """Gets the group_base of this ConsoleLdapServer.  # noqa: E501


        :return: The group_base of this ConsoleLdapServer.  # noqa: E501
        :rtype: str
        """
        return self._group_base

    @group_base.setter
    def group_base(self, group_base):
        """Sets the group_base of this ConsoleLdapServer.


        :param group_base: The group_base of this ConsoleLdapServer.  # noqa: E501
        :type: str
        """

        self._group_base = group_base

    @property
    def group_filter(self):
        """Gets the group_filter of this ConsoleLdapServer.  # noqa: E501


        :return: The group_filter of this ConsoleLdapServer.  # noqa: E501
        :rtype: str
        """
        return self._group_filter

    @group_filter.setter
    def group_filter(self, group_filter):
        """Sets the group_filter of this ConsoleLdapServer.


        :param group_filter: The group_filter of this ConsoleLdapServer.  # noqa: E501
        :type: str
        """

        self._group_filter = group_filter

    @property
    def ldap_user_groups_to_roles_map(self):
        """Gets the ldap_user_groups_to_roles_map of this ConsoleLdapServer.  # noqa: E501


        :return: The ldap_user_groups_to_roles_map of this ConsoleLdapServer.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._ldap_user_groups_to_roles_map

    @ldap_user_groups_to_roles_map.setter
    def ldap_user_groups_to_roles_map(self, ldap_user_groups_to_roles_map):
        """Sets the ldap_user_groups_to_roles_map of this ConsoleLdapServer.


        :param ldap_user_groups_to_roles_map: The ldap_user_groups_to_roles_map of this ConsoleLdapServer.  # noqa: E501
        :type: dict(str, str)
        """
        allowed_values = ["READ", "ADMIN", "SUPER"]  # noqa: E501
        if not set(ldap_user_groups_to_roles_map.keys()).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid keys in `ldap_user_groups_to_roles_map` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(ldap_user_groups_to_roles_map.keys()) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._ldap_user_groups_to_roles_map = ldap_user_groups_to_roles_map

    @property
    def membership_attribute(self):
        """Gets the membership_attribute of this ConsoleLdapServer.  # noqa: E501


        :return: The membership_attribute of this ConsoleLdapServer.  # noqa: E501
        :rtype: str
        """
        return self._membership_attribute

    @membership_attribute.setter
    def membership_attribute(self, membership_attribute):
        """Sets the membership_attribute of this ConsoleLdapServer.


        :param membership_attribute: The membership_attribute of this ConsoleLdapServer.  # noqa: E501
        :type: str
        """

        self._membership_attribute = membership_attribute

    @property
    def referral(self):
        """Gets the referral of this ConsoleLdapServer.  # noqa: E501


        :return: The referral of this ConsoleLdapServer.  # noqa: E501
        :rtype: str
        """
        return self._referral

    @referral.setter
    def referral(self, referral):
        """Sets the referral of this ConsoleLdapServer.


        :param referral: The referral of this ConsoleLdapServer.  # noqa: E501
        :type: str
        """

        self._referral = referral

    @property
    def shutdown_tls_gracefully(self):
        """Gets the shutdown_tls_gracefully of this ConsoleLdapServer.  # noqa: E501


        :return: The shutdown_tls_gracefully of this ConsoleLdapServer.  # noqa: E501
        :rtype: bool
        """
        return self._shutdown_tls_gracefully

    @shutdown_tls_gracefully.setter
    def shutdown_tls_gracefully(self, shutdown_tls_gracefully):
        """Sets the shutdown_tls_gracefully of this ConsoleLdapServer.


        :param shutdown_tls_gracefully: The shutdown_tls_gracefully of this ConsoleLdapServer.  # noqa: E501
        :type: bool
        """

        self._shutdown_tls_gracefully = shutdown_tls_gracefully

    @property
    def sync_user_filter(self):
        """Gets the sync_user_filter of this ConsoleLdapServer.  # noqa: E501


        :return: The sync_user_filter of this ConsoleLdapServer.  # noqa: E501
        :rtype: str
        """
        return self._sync_user_filter

    @sync_user_filter.setter
    def sync_user_filter(self, sync_user_filter):
        """Sets the sync_user_filter of this ConsoleLdapServer.


        :param sync_user_filter: The sync_user_filter of this ConsoleLdapServer.  # noqa: E501
        :type: str
        """

        self._sync_user_filter = sync_user_filter

    @property
    def url(self):
        """Gets the url of this ConsoleLdapServer.  # noqa: E501


        :return: The url of this ConsoleLdapServer.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ConsoleLdapServer.


        :param url: The url of this ConsoleLdapServer.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def user_base(self):
        """Gets the user_base of this ConsoleLdapServer.  # noqa: E501


        :return: The user_base of this ConsoleLdapServer.  # noqa: E501
        :rtype: str
        """
        return self._user_base

    @user_base.setter
    def user_base(self, user_base):
        """Sets the user_base of this ConsoleLdapServer.


        :param user_base: The user_base of this ConsoleLdapServer.  # noqa: E501
        :type: str
        """

        self._user_base = user_base

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConsoleLdapServer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConsoleLdapServer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

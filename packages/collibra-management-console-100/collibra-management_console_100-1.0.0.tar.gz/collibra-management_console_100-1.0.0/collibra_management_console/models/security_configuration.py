# coding: utf-8

"""
    Collibra Management Console

    Collibra Management Console public REST API \\n Please ensure that cookies are not present within the API request. Including cookies within the call will cause 403 error.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SecurityConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'disclaimer_enabled': 'bool',
        'disclaimer_message': 'str',
        'headers': 'SecurityHeadersConfiguration',
        'interval_to_attempt_logins': 'int',
        'login_attempts': 'int',
        'password_configuration': 'PasswordConfiguration',
        'sso': 'SsoConfiguration',
        'user_locked_out_interval': 'int',
        'users_allowed_concurrent_sessions': 'list[str]',
        'whitelist_configuration': 'WhitelistConfiguration'
    }

    attribute_map = {
        'disclaimer_enabled': 'disclaimerEnabled',
        'disclaimer_message': 'disclaimerMessage',
        'headers': 'headers',
        'interval_to_attempt_logins': 'intervalToAttemptLogins',
        'login_attempts': 'loginAttempts',
        'password_configuration': 'passwordConfiguration',
        'sso': 'sso',
        'user_locked_out_interval': 'userLockedOutInterval',
        'users_allowed_concurrent_sessions': 'usersAllowedConcurrentSessions',
        'whitelist_configuration': 'whitelistConfiguration'
    }

    def __init__(self, disclaimer_enabled=None, disclaimer_message=None, headers=None, interval_to_attempt_logins=None, login_attempts=None, password_configuration=None, sso=None, user_locked_out_interval=None, users_allowed_concurrent_sessions=None, whitelist_configuration=None):  # noqa: E501
        """SecurityConfiguration - a model defined in Swagger"""  # noqa: E501
        self._disclaimer_enabled = None
        self._disclaimer_message = None
        self._headers = None
        self._interval_to_attempt_logins = None
        self._login_attempts = None
        self._password_configuration = None
        self._sso = None
        self._user_locked_out_interval = None
        self._users_allowed_concurrent_sessions = None
        self._whitelist_configuration = None
        self.discriminator = None
        if disclaimer_enabled is not None:
            self.disclaimer_enabled = disclaimer_enabled
        if disclaimer_message is not None:
            self.disclaimer_message = disclaimer_message
        if headers is not None:
            self.headers = headers
        self.interval_to_attempt_logins = interval_to_attempt_logins
        self.login_attempts = login_attempts
        if password_configuration is not None:
            self.password_configuration = password_configuration
        if sso is not None:
            self.sso = sso
        self.user_locked_out_interval = user_locked_out_interval
        if users_allowed_concurrent_sessions is not None:
            self.users_allowed_concurrent_sessions = users_allowed_concurrent_sessions
        if whitelist_configuration is not None:
            self.whitelist_configuration = whitelist_configuration

    @property
    def disclaimer_enabled(self):
        """Gets the disclaimer_enabled of this SecurityConfiguration.  # noqa: E501


        :return: The disclaimer_enabled of this SecurityConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._disclaimer_enabled

    @disclaimer_enabled.setter
    def disclaimer_enabled(self, disclaimer_enabled):
        """Sets the disclaimer_enabled of this SecurityConfiguration.


        :param disclaimer_enabled: The disclaimer_enabled of this SecurityConfiguration.  # noqa: E501
        :type: bool
        """

        self._disclaimer_enabled = disclaimer_enabled

    @property
    def disclaimer_message(self):
        """Gets the disclaimer_message of this SecurityConfiguration.  # noqa: E501


        :return: The disclaimer_message of this SecurityConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._disclaimer_message

    @disclaimer_message.setter
    def disclaimer_message(self, disclaimer_message):
        """Sets the disclaimer_message of this SecurityConfiguration.


        :param disclaimer_message: The disclaimer_message of this SecurityConfiguration.  # noqa: E501
        :type: str
        """

        self._disclaimer_message = disclaimer_message

    @property
    def headers(self):
        """Gets the headers of this SecurityConfiguration.  # noqa: E501


        :return: The headers of this SecurityConfiguration.  # noqa: E501
        :rtype: SecurityHeadersConfiguration
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this SecurityConfiguration.


        :param headers: The headers of this SecurityConfiguration.  # noqa: E501
        :type: SecurityHeadersConfiguration
        """

        self._headers = headers

    @property
    def interval_to_attempt_logins(self):
        """Gets the interval_to_attempt_logins of this SecurityConfiguration.  # noqa: E501


        :return: The interval_to_attempt_logins of this SecurityConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._interval_to_attempt_logins

    @interval_to_attempt_logins.setter
    def interval_to_attempt_logins(self, interval_to_attempt_logins):
        """Sets the interval_to_attempt_logins of this SecurityConfiguration.


        :param interval_to_attempt_logins: The interval_to_attempt_logins of this SecurityConfiguration.  # noqa: E501
        :type: int
        """
        if interval_to_attempt_logins is None:
            raise ValueError("Invalid value for `interval_to_attempt_logins`, must not be `None`")  # noqa: E501

        self._interval_to_attempt_logins = interval_to_attempt_logins

    @property
    def login_attempts(self):
        """Gets the login_attempts of this SecurityConfiguration.  # noqa: E501


        :return: The login_attempts of this SecurityConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._login_attempts

    @login_attempts.setter
    def login_attempts(self, login_attempts):
        """Sets the login_attempts of this SecurityConfiguration.


        :param login_attempts: The login_attempts of this SecurityConfiguration.  # noqa: E501
        :type: int
        """
        if login_attempts is None:
            raise ValueError("Invalid value for `login_attempts`, must not be `None`")  # noqa: E501

        self._login_attempts = login_attempts

    @property
    def password_configuration(self):
        """Gets the password_configuration of this SecurityConfiguration.  # noqa: E501


        :return: The password_configuration of this SecurityConfiguration.  # noqa: E501
        :rtype: PasswordConfiguration
        """
        return self._password_configuration

    @password_configuration.setter
    def password_configuration(self, password_configuration):
        """Sets the password_configuration of this SecurityConfiguration.


        :param password_configuration: The password_configuration of this SecurityConfiguration.  # noqa: E501
        :type: PasswordConfiguration
        """

        self._password_configuration = password_configuration

    @property
    def sso(self):
        """Gets the sso of this SecurityConfiguration.  # noqa: E501


        :return: The sso of this SecurityConfiguration.  # noqa: E501
        :rtype: SsoConfiguration
        """
        return self._sso

    @sso.setter
    def sso(self, sso):
        """Sets the sso of this SecurityConfiguration.


        :param sso: The sso of this SecurityConfiguration.  # noqa: E501
        :type: SsoConfiguration
        """

        self._sso = sso

    @property
    def user_locked_out_interval(self):
        """Gets the user_locked_out_interval of this SecurityConfiguration.  # noqa: E501


        :return: The user_locked_out_interval of this SecurityConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._user_locked_out_interval

    @user_locked_out_interval.setter
    def user_locked_out_interval(self, user_locked_out_interval):
        """Sets the user_locked_out_interval of this SecurityConfiguration.


        :param user_locked_out_interval: The user_locked_out_interval of this SecurityConfiguration.  # noqa: E501
        :type: int
        """
        if user_locked_out_interval is None:
            raise ValueError("Invalid value for `user_locked_out_interval`, must not be `None`")  # noqa: E501

        self._user_locked_out_interval = user_locked_out_interval

    @property
    def users_allowed_concurrent_sessions(self):
        """Gets the users_allowed_concurrent_sessions of this SecurityConfiguration.  # noqa: E501


        :return: The users_allowed_concurrent_sessions of this SecurityConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._users_allowed_concurrent_sessions

    @users_allowed_concurrent_sessions.setter
    def users_allowed_concurrent_sessions(self, users_allowed_concurrent_sessions):
        """Sets the users_allowed_concurrent_sessions of this SecurityConfiguration.


        :param users_allowed_concurrent_sessions: The users_allowed_concurrent_sessions of this SecurityConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._users_allowed_concurrent_sessions = users_allowed_concurrent_sessions

    @property
    def whitelist_configuration(self):
        """Gets the whitelist_configuration of this SecurityConfiguration.  # noqa: E501


        :return: The whitelist_configuration of this SecurityConfiguration.  # noqa: E501
        :rtype: WhitelistConfiguration
        """
        return self._whitelist_configuration

    @whitelist_configuration.setter
    def whitelist_configuration(self, whitelist_configuration):
        """Sets the whitelist_configuration of this SecurityConfiguration.


        :param whitelist_configuration: The whitelist_configuration of this SecurityConfiguration.  # noqa: E501
        :type: WhitelistConfiguration
        """

        self._whitelist_configuration = whitelist_configuration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SecurityConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SecurityConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

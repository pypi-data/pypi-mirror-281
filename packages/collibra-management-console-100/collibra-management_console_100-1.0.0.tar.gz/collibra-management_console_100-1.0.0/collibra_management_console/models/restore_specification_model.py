# coding: utf-8

"""
    Collibra Management Console

    Collibra Management Console public REST API \\n Please ensure that cookies are not present within the API request. Including cookies within the call will cause 403 error.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RestoreSpecificationModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'backup_id': 'str',
        'backup_version': 'str',
        'database': 'str',
        'dgc_restore_options': 'list[str]',
        'key': 'str',
        'managed_service_types': 'list[str]',
        'repo_restore_options': 'list[str]',
        'reset_customizations': 'bool',
        'skip_restore_postprocessing': 'bool'
    }

    attribute_map = {
        'backup_id': 'backupId',
        'backup_version': 'backupVersion',
        'database': 'database',
        'dgc_restore_options': 'dgcRestoreOptions',
        'key': 'key',
        'managed_service_types': 'managedServiceTypes',
        'repo_restore_options': 'repoRestoreOptions',
        'reset_customizations': 'resetCustomizations',
        'skip_restore_postprocessing': 'skipRestorePostprocessing'
    }

    def __init__(self, backup_id=None, backup_version=None, database=None, dgc_restore_options=None, key=None, managed_service_types=None, repo_restore_options=None, reset_customizations=None, skip_restore_postprocessing=None):  # noqa: E501
        """RestoreSpecificationModel - a model defined in Swagger"""  # noqa: E501
        self._backup_id = None
        self._backup_version = None
        self._database = None
        self._dgc_restore_options = None
        self._key = None
        self._managed_service_types = None
        self._repo_restore_options = None
        self._reset_customizations = None
        self._skip_restore_postprocessing = None
        self.discriminator = None
        if backup_id is not None:
            self.backup_id = backup_id
        if backup_version is not None:
            self.backup_version = backup_version
        if database is not None:
            self.database = database
        if dgc_restore_options is not None:
            self.dgc_restore_options = dgc_restore_options
        if key is not None:
            self.key = key
        if managed_service_types is not None:
            self.managed_service_types = managed_service_types
        if repo_restore_options is not None:
            self.repo_restore_options = repo_restore_options
        if reset_customizations is not None:
            self.reset_customizations = reset_customizations
        if skip_restore_postprocessing is not None:
            self.skip_restore_postprocessing = skip_restore_postprocessing

    @property
    def backup_id(self):
        """Gets the backup_id of this RestoreSpecificationModel.  # noqa: E501


        :return: The backup_id of this RestoreSpecificationModel.  # noqa: E501
        :rtype: str
        """
        return self._backup_id

    @backup_id.setter
    def backup_id(self, backup_id):
        """Sets the backup_id of this RestoreSpecificationModel.


        :param backup_id: The backup_id of this RestoreSpecificationModel.  # noqa: E501
        :type: str
        """

        self._backup_id = backup_id

    @property
    def backup_version(self):
        """Gets the backup_version of this RestoreSpecificationModel.  # noqa: E501


        :return: The backup_version of this RestoreSpecificationModel.  # noqa: E501
        :rtype: str
        """
        return self._backup_version

    @backup_version.setter
    def backup_version(self, backup_version):
        """Sets the backup_version of this RestoreSpecificationModel.


        :param backup_version: The backup_version of this RestoreSpecificationModel.  # noqa: E501
        :type: str
        """

        self._backup_version = backup_version

    @property
    def database(self):
        """Gets the database of this RestoreSpecificationModel.  # noqa: E501


        :return: The database of this RestoreSpecificationModel.  # noqa: E501
        :rtype: str
        """
        return self._database

    @database.setter
    def database(self, database):
        """Sets the database of this RestoreSpecificationModel.


        :param database: The database of this RestoreSpecificationModel.  # noqa: E501
        :type: str
        """

        self._database = database

    @property
    def dgc_restore_options(self):
        """Gets the dgc_restore_options of this RestoreSpecificationModel.  # noqa: E501


        :return: The dgc_restore_options of this RestoreSpecificationModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._dgc_restore_options

    @dgc_restore_options.setter
    def dgc_restore_options(self, dgc_restore_options):
        """Sets the dgc_restore_options of this RestoreSpecificationModel.


        :param dgc_restore_options: The dgc_restore_options of this RestoreSpecificationModel.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["CUSTOMIZATIONS", "NO_INDEXING", "CONFIGURATION"]  # noqa: E501
        if not set(dgc_restore_options).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `dgc_restore_options` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(dgc_restore_options) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._dgc_restore_options = dgc_restore_options

    @property
    def key(self):
        """Gets the key of this RestoreSpecificationModel.  # noqa: E501


        :return: The key of this RestoreSpecificationModel.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this RestoreSpecificationModel.


        :param key: The key of this RestoreSpecificationModel.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def managed_service_types(self):
        """Gets the managed_service_types of this RestoreSpecificationModel.  # noqa: E501


        :return: The managed_service_types of this RestoreSpecificationModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._managed_service_types

    @managed_service_types.setter
    def managed_service_types(self, managed_service_types):
        """Sets the managed_service_types of this RestoreSpecificationModel.


        :param managed_service_types: The managed_service_types of this RestoreSpecificationModel.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["REPOSITORY", "SPARK", "DGC", "SEARCH"]  # noqa: E501
        if not set(managed_service_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `managed_service_types` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(managed_service_types) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._managed_service_types = managed_service_types

    @property
    def repo_restore_options(self):
        """Gets the repo_restore_options of this RestoreSpecificationModel.  # noqa: E501


        :return: The repo_restore_options of this RestoreSpecificationModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._repo_restore_options

    @repo_restore_options.setter
    def repo_restore_options(self, repo_restore_options):
        """Sets the repo_restore_options of this RestoreSpecificationModel.


        :param repo_restore_options: The repo_restore_options of this RestoreSpecificationModel.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["DATA", "HISTORY"]  # noqa: E501
        if not set(repo_restore_options).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `repo_restore_options` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(repo_restore_options) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._repo_restore_options = repo_restore_options

    @property
    def reset_customizations(self):
        """Gets the reset_customizations of this RestoreSpecificationModel.  # noqa: E501


        :return: The reset_customizations of this RestoreSpecificationModel.  # noqa: E501
        :rtype: bool
        """
        return self._reset_customizations

    @reset_customizations.setter
    def reset_customizations(self, reset_customizations):
        """Sets the reset_customizations of this RestoreSpecificationModel.


        :param reset_customizations: The reset_customizations of this RestoreSpecificationModel.  # noqa: E501
        :type: bool
        """

        self._reset_customizations = reset_customizations

    @property
    def skip_restore_postprocessing(self):
        """Gets the skip_restore_postprocessing of this RestoreSpecificationModel.  # noqa: E501


        :return: The skip_restore_postprocessing of this RestoreSpecificationModel.  # noqa: E501
        :rtype: bool
        """
        return self._skip_restore_postprocessing

    @skip_restore_postprocessing.setter
    def skip_restore_postprocessing(self, skip_restore_postprocessing):
        """Sets the skip_restore_postprocessing of this RestoreSpecificationModel.


        :param skip_restore_postprocessing: The skip_restore_postprocessing of this RestoreSpecificationModel.  # noqa: E501
        :type: bool
        """

        self._skip_restore_postprocessing = skip_restore_postprocessing

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RestoreSpecificationModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RestoreSpecificationModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

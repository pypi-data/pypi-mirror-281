# coding: utf-8

"""
    Collibra Management Console

    Collibra Management Console public REST API \\n Please ensure that cookies are not present within the API request. Including cookies within the call will cause 403 error.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HttpConnectorConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accept_count': 'int',
        'acceptor_thread_count': 'int',
        'address': 'str',
        'compressable_mime_type': 'str',
        'compression': 'str',
        'compression_min_size': 'int',
        'connection_time_out': 'int',
        'max_threads': 'int',
        'min_spare_threads': 'int',
        'port': 'int',
        'protocol': 'str',
        'redirect_port': 'int',
        'socket_reuse_address': 'bool',
        'uri_encoding': 'str'
    }

    attribute_map = {
        'accept_count': 'acceptCount',
        'acceptor_thread_count': 'acceptorThreadCount',
        'address': 'address',
        'compressable_mime_type': 'compressableMimeType',
        'compression': 'compression',
        'compression_min_size': 'compressionMinSize',
        'connection_time_out': 'connectionTimeOut',
        'max_threads': 'maxThreads',
        'min_spare_threads': 'minSpareThreads',
        'port': 'port',
        'protocol': 'protocol',
        'redirect_port': 'redirectPort',
        'socket_reuse_address': 'socketReuseAddress',
        'uri_encoding': 'uriEncoding'
    }

    def __init__(self, accept_count=None, acceptor_thread_count=None, address=None, compressable_mime_type=None, compression=None, compression_min_size=None, connection_time_out=None, max_threads=None, min_spare_threads=None, port=None, protocol=None, redirect_port=None, socket_reuse_address=None, uri_encoding=None):  # noqa: E501
        """HttpConnectorConfiguration - a model defined in Swagger"""  # noqa: E501
        self._accept_count = None
        self._acceptor_thread_count = None
        self._address = None
        self._compressable_mime_type = None
        self._compression = None
        self._compression_min_size = None
        self._connection_time_out = None
        self._max_threads = None
        self._min_spare_threads = None
        self._port = None
        self._protocol = None
        self._redirect_port = None
        self._socket_reuse_address = None
        self._uri_encoding = None
        self.discriminator = None
        self.accept_count = accept_count
        self.acceptor_thread_count = acceptor_thread_count
        self.address = address
        if compressable_mime_type is not None:
            self.compressable_mime_type = compressable_mime_type
        self.compression = compression
        self.compression_min_size = compression_min_size
        self.connection_time_out = connection_time_out
        self.max_threads = max_threads
        self.min_spare_threads = min_spare_threads
        self.port = port
        self.protocol = protocol
        self.redirect_port = redirect_port
        self.socket_reuse_address = socket_reuse_address
        self.uri_encoding = uri_encoding

    @property
    def accept_count(self):
        """Gets the accept_count of this HttpConnectorConfiguration.  # noqa: E501


        :return: The accept_count of this HttpConnectorConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._accept_count

    @accept_count.setter
    def accept_count(self, accept_count):
        """Sets the accept_count of this HttpConnectorConfiguration.


        :param accept_count: The accept_count of this HttpConnectorConfiguration.  # noqa: E501
        :type: int
        """
        if accept_count is None:
            raise ValueError("Invalid value for `accept_count`, must not be `None`")  # noqa: E501

        self._accept_count = accept_count

    @property
    def acceptor_thread_count(self):
        """Gets the acceptor_thread_count of this HttpConnectorConfiguration.  # noqa: E501


        :return: The acceptor_thread_count of this HttpConnectorConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._acceptor_thread_count

    @acceptor_thread_count.setter
    def acceptor_thread_count(self, acceptor_thread_count):
        """Sets the acceptor_thread_count of this HttpConnectorConfiguration.


        :param acceptor_thread_count: The acceptor_thread_count of this HttpConnectorConfiguration.  # noqa: E501
        :type: int
        """
        if acceptor_thread_count is None:
            raise ValueError("Invalid value for `acceptor_thread_count`, must not be `None`")  # noqa: E501

        self._acceptor_thread_count = acceptor_thread_count

    @property
    def address(self):
        """Gets the address of this HttpConnectorConfiguration.  # noqa: E501


        :return: The address of this HttpConnectorConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this HttpConnectorConfiguration.


        :param address: The address of this HttpConnectorConfiguration.  # noqa: E501
        :type: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def compressable_mime_type(self):
        """Gets the compressable_mime_type of this HttpConnectorConfiguration.  # noqa: E501


        :return: The compressable_mime_type of this HttpConnectorConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._compressable_mime_type

    @compressable_mime_type.setter
    def compressable_mime_type(self, compressable_mime_type):
        """Sets the compressable_mime_type of this HttpConnectorConfiguration.


        :param compressable_mime_type: The compressable_mime_type of this HttpConnectorConfiguration.  # noqa: E501
        :type: str
        """

        self._compressable_mime_type = compressable_mime_type

    @property
    def compression(self):
        """Gets the compression of this HttpConnectorConfiguration.  # noqa: E501


        :return: The compression of this HttpConnectorConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._compression

    @compression.setter
    def compression(self, compression):
        """Sets the compression of this HttpConnectorConfiguration.


        :param compression: The compression of this HttpConnectorConfiguration.  # noqa: E501
        :type: str
        """
        if compression is None:
            raise ValueError("Invalid value for `compression`, must not be `None`")  # noqa: E501

        self._compression = compression

    @property
    def compression_min_size(self):
        """Gets the compression_min_size of this HttpConnectorConfiguration.  # noqa: E501


        :return: The compression_min_size of this HttpConnectorConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._compression_min_size

    @compression_min_size.setter
    def compression_min_size(self, compression_min_size):
        """Sets the compression_min_size of this HttpConnectorConfiguration.


        :param compression_min_size: The compression_min_size of this HttpConnectorConfiguration.  # noqa: E501
        :type: int
        """
        if compression_min_size is None:
            raise ValueError("Invalid value for `compression_min_size`, must not be `None`")  # noqa: E501

        self._compression_min_size = compression_min_size

    @property
    def connection_time_out(self):
        """Gets the connection_time_out of this HttpConnectorConfiguration.  # noqa: E501


        :return: The connection_time_out of this HttpConnectorConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._connection_time_out

    @connection_time_out.setter
    def connection_time_out(self, connection_time_out):
        """Sets the connection_time_out of this HttpConnectorConfiguration.


        :param connection_time_out: The connection_time_out of this HttpConnectorConfiguration.  # noqa: E501
        :type: int
        """
        if connection_time_out is None:
            raise ValueError("Invalid value for `connection_time_out`, must not be `None`")  # noqa: E501

        self._connection_time_out = connection_time_out

    @property
    def max_threads(self):
        """Gets the max_threads of this HttpConnectorConfiguration.  # noqa: E501


        :return: The max_threads of this HttpConnectorConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._max_threads

    @max_threads.setter
    def max_threads(self, max_threads):
        """Sets the max_threads of this HttpConnectorConfiguration.


        :param max_threads: The max_threads of this HttpConnectorConfiguration.  # noqa: E501
        :type: int
        """
        if max_threads is None:
            raise ValueError("Invalid value for `max_threads`, must not be `None`")  # noqa: E501

        self._max_threads = max_threads

    @property
    def min_spare_threads(self):
        """Gets the min_spare_threads of this HttpConnectorConfiguration.  # noqa: E501


        :return: The min_spare_threads of this HttpConnectorConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._min_spare_threads

    @min_spare_threads.setter
    def min_spare_threads(self, min_spare_threads):
        """Sets the min_spare_threads of this HttpConnectorConfiguration.


        :param min_spare_threads: The min_spare_threads of this HttpConnectorConfiguration.  # noqa: E501
        :type: int
        """
        if min_spare_threads is None:
            raise ValueError("Invalid value for `min_spare_threads`, must not be `None`")  # noqa: E501

        self._min_spare_threads = min_spare_threads

    @property
    def port(self):
        """Gets the port of this HttpConnectorConfiguration.  # noqa: E501


        :return: The port of this HttpConnectorConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this HttpConnectorConfiguration.


        :param port: The port of this HttpConnectorConfiguration.  # noqa: E501
        :type: int
        """
        if port is None:
            raise ValueError("Invalid value for `port`, must not be `None`")  # noqa: E501

        self._port = port

    @property
    def protocol(self):
        """Gets the protocol of this HttpConnectorConfiguration.  # noqa: E501


        :return: The protocol of this HttpConnectorConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this HttpConnectorConfiguration.


        :param protocol: The protocol of this HttpConnectorConfiguration.  # noqa: E501
        :type: str
        """
        if protocol is None:
            raise ValueError("Invalid value for `protocol`, must not be `None`")  # noqa: E501

        self._protocol = protocol

    @property
    def redirect_port(self):
        """Gets the redirect_port of this HttpConnectorConfiguration.  # noqa: E501


        :return: The redirect_port of this HttpConnectorConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._redirect_port

    @redirect_port.setter
    def redirect_port(self, redirect_port):
        """Sets the redirect_port of this HttpConnectorConfiguration.


        :param redirect_port: The redirect_port of this HttpConnectorConfiguration.  # noqa: E501
        :type: int
        """
        if redirect_port is None:
            raise ValueError("Invalid value for `redirect_port`, must not be `None`")  # noqa: E501

        self._redirect_port = redirect_port

    @property
    def socket_reuse_address(self):
        """Gets the socket_reuse_address of this HttpConnectorConfiguration.  # noqa: E501


        :return: The socket_reuse_address of this HttpConnectorConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._socket_reuse_address

    @socket_reuse_address.setter
    def socket_reuse_address(self, socket_reuse_address):
        """Sets the socket_reuse_address of this HttpConnectorConfiguration.


        :param socket_reuse_address: The socket_reuse_address of this HttpConnectorConfiguration.  # noqa: E501
        :type: bool
        """
        if socket_reuse_address is None:
            raise ValueError("Invalid value for `socket_reuse_address`, must not be `None`")  # noqa: E501

        self._socket_reuse_address = socket_reuse_address

    @property
    def uri_encoding(self):
        """Gets the uri_encoding of this HttpConnectorConfiguration.  # noqa: E501


        :return: The uri_encoding of this HttpConnectorConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._uri_encoding

    @uri_encoding.setter
    def uri_encoding(self, uri_encoding):
        """Sets the uri_encoding of this HttpConnectorConfiguration.


        :param uri_encoding: The uri_encoding of this HttpConnectorConfiguration.  # noqa: E501
        :type: str
        """
        if uri_encoding is None:
            raise ValueError("Invalid value for `uri_encoding`, must not be `None`")  # noqa: E501

        self._uri_encoding = uri_encoding

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HttpConnectorConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HttpConnectorConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

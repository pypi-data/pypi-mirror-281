# coding: utf-8

"""
    Collibra Management Console

    Collibra Management Console public REST API \\n Please ensure that cookies are not present within the API request. Including cookies within the call will cause 403 error.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SearchConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'elastic_password': 'str',
        'host_name': 'str',
        'http_port': 'int',
        'keystore_password': 'str',
        'transport_port': 'int',
        'truststore_password': 'str'
    }

    attribute_map = {
        'elastic_password': 'elasticPassword',
        'host_name': 'hostName',
        'http_port': 'httpPort',
        'keystore_password': 'keystorePassword',
        'transport_port': 'transportPort',
        'truststore_password': 'truststorePassword'
    }

    def __init__(self, elastic_password=None, host_name=None, http_port=None, keystore_password=None, transport_port=None, truststore_password=None):  # noqa: E501
        """SearchConfiguration - a model defined in Swagger"""  # noqa: E501
        self._elastic_password = None
        self._host_name = None
        self._http_port = None
        self._keystore_password = None
        self._transport_port = None
        self._truststore_password = None
        self.discriminator = None
        self.elastic_password = elastic_password
        self.host_name = host_name
        self.http_port = http_port
        self.keystore_password = keystore_password
        self.transport_port = transport_port
        self.truststore_password = truststore_password

    @property
    def elastic_password(self):
        """Gets the elastic_password of this SearchConfiguration.  # noqa: E501


        :return: The elastic_password of this SearchConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._elastic_password

    @elastic_password.setter
    def elastic_password(self, elastic_password):
        """Sets the elastic_password of this SearchConfiguration.


        :param elastic_password: The elastic_password of this SearchConfiguration.  # noqa: E501
        :type: str
        """
        if elastic_password is None:
            raise ValueError("Invalid value for `elastic_password`, must not be `None`")  # noqa: E501

        self._elastic_password = elastic_password

    @property
    def host_name(self):
        """Gets the host_name of this SearchConfiguration.  # noqa: E501


        :return: The host_name of this SearchConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this SearchConfiguration.


        :param host_name: The host_name of this SearchConfiguration.  # noqa: E501
        :type: str
        """
        if host_name is None:
            raise ValueError("Invalid value for `host_name`, must not be `None`")  # noqa: E501

        self._host_name = host_name

    @property
    def http_port(self):
        """Gets the http_port of this SearchConfiguration.  # noqa: E501


        :return: The http_port of this SearchConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._http_port

    @http_port.setter
    def http_port(self, http_port):
        """Sets the http_port of this SearchConfiguration.


        :param http_port: The http_port of this SearchConfiguration.  # noqa: E501
        :type: int
        """
        if http_port is None:
            raise ValueError("Invalid value for `http_port`, must not be `None`")  # noqa: E501

        self._http_port = http_port

    @property
    def keystore_password(self):
        """Gets the keystore_password of this SearchConfiguration.  # noqa: E501


        :return: The keystore_password of this SearchConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._keystore_password

    @keystore_password.setter
    def keystore_password(self, keystore_password):
        """Sets the keystore_password of this SearchConfiguration.


        :param keystore_password: The keystore_password of this SearchConfiguration.  # noqa: E501
        :type: str
        """
        if keystore_password is None:
            raise ValueError("Invalid value for `keystore_password`, must not be `None`")  # noqa: E501

        self._keystore_password = keystore_password

    @property
    def transport_port(self):
        """Gets the transport_port of this SearchConfiguration.  # noqa: E501


        :return: The transport_port of this SearchConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._transport_port

    @transport_port.setter
    def transport_port(self, transport_port):
        """Sets the transport_port of this SearchConfiguration.


        :param transport_port: The transport_port of this SearchConfiguration.  # noqa: E501
        :type: int
        """
        if transport_port is None:
            raise ValueError("Invalid value for `transport_port`, must not be `None`")  # noqa: E501

        self._transport_port = transport_port

    @property
    def truststore_password(self):
        """Gets the truststore_password of this SearchConfiguration.  # noqa: E501


        :return: The truststore_password of this SearchConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._truststore_password

    @truststore_password.setter
    def truststore_password(self, truststore_password):
        """Sets the truststore_password of this SearchConfiguration.


        :param truststore_password: The truststore_password of this SearchConfiguration.  # noqa: E501
        :type: str
        """
        if truststore_password is None:
            raise ValueError("Invalid value for `truststore_password`, must not be `None`")  # noqa: E501

        self._truststore_password = truststore_password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SearchConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Collibra Management Console

    Collibra Management Console public REST API \\n Please ensure that cookies are not present within the API request. Including cookies within the call will cause 403 error.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BackupSpecificationModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'database': 'str',
        'description': 'str',
        'dgc_backup_options': 'list[str]',
        'key': 'str',
        'name': 'str',
        'repo_backup_options': 'list[str]',
        'skip_app_version': 'bool'
    }

    attribute_map = {
        'database': 'database',
        'description': 'description',
        'dgc_backup_options': 'dgcBackupOptions',
        'key': 'key',
        'name': 'name',
        'repo_backup_options': 'repoBackupOptions',
        'skip_app_version': 'skipAppVersion'
    }

    def __init__(self, database=None, description=None, dgc_backup_options=None, key=None, name=None, repo_backup_options=None, skip_app_version=None):  # noqa: E501
        """BackupSpecificationModel - a model defined in Swagger"""  # noqa: E501
        self._database = None
        self._description = None
        self._dgc_backup_options = None
        self._key = None
        self._name = None
        self._repo_backup_options = None
        self._skip_app_version = None
        self.discriminator = None
        if database is not None:
            self.database = database
        if description is not None:
            self.description = description
        if dgc_backup_options is not None:
            self.dgc_backup_options = dgc_backup_options
        if key is not None:
            self.key = key
        if name is not None:
            self.name = name
        if repo_backup_options is not None:
            self.repo_backup_options = repo_backup_options
        if skip_app_version is not None:
            self.skip_app_version = skip_app_version

    @property
    def database(self):
        """Gets the database of this BackupSpecificationModel.  # noqa: E501


        :return: The database of this BackupSpecificationModel.  # noqa: E501
        :rtype: str
        """
        return self._database

    @database.setter
    def database(self, database):
        """Sets the database of this BackupSpecificationModel.


        :param database: The database of this BackupSpecificationModel.  # noqa: E501
        :type: str
        """

        self._database = database

    @property
    def description(self):
        """Gets the description of this BackupSpecificationModel.  # noqa: E501


        :return: The description of this BackupSpecificationModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BackupSpecificationModel.


        :param description: The description of this BackupSpecificationModel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def dgc_backup_options(self):
        """Gets the dgc_backup_options of this BackupSpecificationModel.  # noqa: E501


        :return: The dgc_backup_options of this BackupSpecificationModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._dgc_backup_options

    @dgc_backup_options.setter
    def dgc_backup_options(self, dgc_backup_options):
        """Sets the dgc_backup_options of this BackupSpecificationModel.


        :param dgc_backup_options: The dgc_backup_options of this BackupSpecificationModel.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["CONFIGURATION", "CUSTOMIZATIONS"]  # noqa: E501
        if not set(dgc_backup_options).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `dgc_backup_options` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(dgc_backup_options) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._dgc_backup_options = dgc_backup_options

    @property
    def key(self):
        """Gets the key of this BackupSpecificationModel.  # noqa: E501


        :return: The key of this BackupSpecificationModel.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this BackupSpecificationModel.


        :param key: The key of this BackupSpecificationModel.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def name(self):
        """Gets the name of this BackupSpecificationModel.  # noqa: E501


        :return: The name of this BackupSpecificationModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BackupSpecificationModel.


        :param name: The name of this BackupSpecificationModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def repo_backup_options(self):
        """Gets the repo_backup_options of this BackupSpecificationModel.  # noqa: E501


        :return: The repo_backup_options of this BackupSpecificationModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._repo_backup_options

    @repo_backup_options.setter
    def repo_backup_options(self, repo_backup_options):
        """Sets the repo_backup_options of this BackupSpecificationModel.


        :param repo_backup_options: The repo_backup_options of this BackupSpecificationModel.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["DATA", "HISTORY"]  # noqa: E501
        if not set(repo_backup_options).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `repo_backup_options` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(repo_backup_options) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._repo_backup_options = repo_backup_options

    @property
    def skip_app_version(self):
        """Gets the skip_app_version of this BackupSpecificationModel.  # noqa: E501


        :return: The skip_app_version of this BackupSpecificationModel.  # noqa: E501
        :rtype: bool
        """
        return self._skip_app_version

    @skip_app_version.setter
    def skip_app_version(self, skip_app_version):
        """Sets the skip_app_version of this BackupSpecificationModel.


        :param skip_app_version: The skip_app_version of this BackupSpecificationModel.  # noqa: E501
        :type: bool
        """

        self._skip_app_version = skip_app_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BackupSpecificationModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BackupSpecificationModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

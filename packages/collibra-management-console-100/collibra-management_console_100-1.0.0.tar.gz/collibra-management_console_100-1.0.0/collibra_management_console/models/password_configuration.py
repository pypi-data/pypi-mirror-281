# coding: utf-8

"""
    Collibra Management Console

    Collibra Management Console public REST API \\n Please ensure that cookies are not present within the API request. Including cookies within the call will cause 403 error.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PasswordConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'digit_required': 'bool',
        'lowercase_required': 'bool',
        'maximum_length': 'int',
        'minimum_length': 'int',
        'non_alphanumeric_required': 'bool',
        'reset_link_validity_minutes': 'int',
        'uppercase_required': 'bool',
        'username_disallowed': 'bool'
    }

    attribute_map = {
        'digit_required': 'digitRequired',
        'lowercase_required': 'lowercaseRequired',
        'maximum_length': 'maximumLength',
        'minimum_length': 'minimumLength',
        'non_alphanumeric_required': 'nonAlphanumericRequired',
        'reset_link_validity_minutes': 'resetLinkValidityMinutes',
        'uppercase_required': 'uppercaseRequired',
        'username_disallowed': 'usernameDisallowed'
    }

    def __init__(self, digit_required=None, lowercase_required=None, maximum_length=None, minimum_length=None, non_alphanumeric_required=None, reset_link_validity_minutes=None, uppercase_required=None, username_disallowed=None):  # noqa: E501
        """PasswordConfiguration - a model defined in Swagger"""  # noqa: E501
        self._digit_required = None
        self._lowercase_required = None
        self._maximum_length = None
        self._minimum_length = None
        self._non_alphanumeric_required = None
        self._reset_link_validity_minutes = None
        self._uppercase_required = None
        self._username_disallowed = None
        self.discriminator = None
        if digit_required is not None:
            self.digit_required = digit_required
        if lowercase_required is not None:
            self.lowercase_required = lowercase_required
        self.maximum_length = maximum_length
        self.minimum_length = minimum_length
        if non_alphanumeric_required is not None:
            self.non_alphanumeric_required = non_alphanumeric_required
        if reset_link_validity_minutes is not None:
            self.reset_link_validity_minutes = reset_link_validity_minutes
        if uppercase_required is not None:
            self.uppercase_required = uppercase_required
        if username_disallowed is not None:
            self.username_disallowed = username_disallowed

    @property
    def digit_required(self):
        """Gets the digit_required of this PasswordConfiguration.  # noqa: E501


        :return: The digit_required of this PasswordConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._digit_required

    @digit_required.setter
    def digit_required(self, digit_required):
        """Sets the digit_required of this PasswordConfiguration.


        :param digit_required: The digit_required of this PasswordConfiguration.  # noqa: E501
        :type: bool
        """

        self._digit_required = digit_required

    @property
    def lowercase_required(self):
        """Gets the lowercase_required of this PasswordConfiguration.  # noqa: E501


        :return: The lowercase_required of this PasswordConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._lowercase_required

    @lowercase_required.setter
    def lowercase_required(self, lowercase_required):
        """Sets the lowercase_required of this PasswordConfiguration.


        :param lowercase_required: The lowercase_required of this PasswordConfiguration.  # noqa: E501
        :type: bool
        """

        self._lowercase_required = lowercase_required

    @property
    def maximum_length(self):
        """Gets the maximum_length of this PasswordConfiguration.  # noqa: E501


        :return: The maximum_length of this PasswordConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._maximum_length

    @maximum_length.setter
    def maximum_length(self, maximum_length):
        """Sets the maximum_length of this PasswordConfiguration.


        :param maximum_length: The maximum_length of this PasswordConfiguration.  # noqa: E501
        :type: int
        """
        if maximum_length is None:
            raise ValueError("Invalid value for `maximum_length`, must not be `None`")  # noqa: E501

        self._maximum_length = maximum_length

    @property
    def minimum_length(self):
        """Gets the minimum_length of this PasswordConfiguration.  # noqa: E501


        :return: The minimum_length of this PasswordConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._minimum_length

    @minimum_length.setter
    def minimum_length(self, minimum_length):
        """Sets the minimum_length of this PasswordConfiguration.


        :param minimum_length: The minimum_length of this PasswordConfiguration.  # noqa: E501
        :type: int
        """
        if minimum_length is None:
            raise ValueError("Invalid value for `minimum_length`, must not be `None`")  # noqa: E501

        self._minimum_length = minimum_length

    @property
    def non_alphanumeric_required(self):
        """Gets the non_alphanumeric_required of this PasswordConfiguration.  # noqa: E501


        :return: The non_alphanumeric_required of this PasswordConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._non_alphanumeric_required

    @non_alphanumeric_required.setter
    def non_alphanumeric_required(self, non_alphanumeric_required):
        """Sets the non_alphanumeric_required of this PasswordConfiguration.


        :param non_alphanumeric_required: The non_alphanumeric_required of this PasswordConfiguration.  # noqa: E501
        :type: bool
        """

        self._non_alphanumeric_required = non_alphanumeric_required

    @property
    def reset_link_validity_minutes(self):
        """Gets the reset_link_validity_minutes of this PasswordConfiguration.  # noqa: E501


        :return: The reset_link_validity_minutes of this PasswordConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._reset_link_validity_minutes

    @reset_link_validity_minutes.setter
    def reset_link_validity_minutes(self, reset_link_validity_minutes):
        """Sets the reset_link_validity_minutes of this PasswordConfiguration.


        :param reset_link_validity_minutes: The reset_link_validity_minutes of this PasswordConfiguration.  # noqa: E501
        :type: int
        """

        self._reset_link_validity_minutes = reset_link_validity_minutes

    @property
    def uppercase_required(self):
        """Gets the uppercase_required of this PasswordConfiguration.  # noqa: E501


        :return: The uppercase_required of this PasswordConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._uppercase_required

    @uppercase_required.setter
    def uppercase_required(self, uppercase_required):
        """Sets the uppercase_required of this PasswordConfiguration.


        :param uppercase_required: The uppercase_required of this PasswordConfiguration.  # noqa: E501
        :type: bool
        """

        self._uppercase_required = uppercase_required

    @property
    def username_disallowed(self):
        """Gets the username_disallowed of this PasswordConfiguration.  # noqa: E501


        :return: The username_disallowed of this PasswordConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._username_disallowed

    @username_disallowed.setter
    def username_disallowed(self, username_disallowed):
        """Sets the username_disallowed of this PasswordConfiguration.


        :param username_disallowed: The username_disallowed of this PasswordConfiguration.  # noqa: E501
        :type: bool
        """

        self._username_disallowed = username_disallowed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PasswordConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PasswordConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

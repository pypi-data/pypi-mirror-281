# coding: utf-8

"""
    Collibra Management Console

    Collibra Management Console public REST API \\n Please ensure that cookies are not present within the API request. Including cookies within the call will cause 403 error.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReplicationStateModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_in_recovery': 'bool',
        'last_receive': 'str',
        'last_replay': 'str',
        'last_replay_time_stamp': 'int',
        'log_delay': 'int'
    }

    attribute_map = {
        'is_in_recovery': 'isInRecovery',
        'last_receive': 'lastReceive',
        'last_replay': 'lastReplay',
        'last_replay_time_stamp': 'lastReplayTimeStamp',
        'log_delay': 'logDelay'
    }

    def __init__(self, is_in_recovery=None, last_receive=None, last_replay=None, last_replay_time_stamp=None, log_delay=None):  # noqa: E501
        """ReplicationStateModel - a model defined in Swagger"""  # noqa: E501
        self._is_in_recovery = None
        self._last_receive = None
        self._last_replay = None
        self._last_replay_time_stamp = None
        self._log_delay = None
        self.discriminator = None
        if is_in_recovery is not None:
            self.is_in_recovery = is_in_recovery
        if last_receive is not None:
            self.last_receive = last_receive
        if last_replay is not None:
            self.last_replay = last_replay
        if last_replay_time_stamp is not None:
            self.last_replay_time_stamp = last_replay_time_stamp
        if log_delay is not None:
            self.log_delay = log_delay

    @property
    def is_in_recovery(self):
        """Gets the is_in_recovery of this ReplicationStateModel.  # noqa: E501


        :return: The is_in_recovery of this ReplicationStateModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_in_recovery

    @is_in_recovery.setter
    def is_in_recovery(self, is_in_recovery):
        """Sets the is_in_recovery of this ReplicationStateModel.


        :param is_in_recovery: The is_in_recovery of this ReplicationStateModel.  # noqa: E501
        :type: bool
        """

        self._is_in_recovery = is_in_recovery

    @property
    def last_receive(self):
        """Gets the last_receive of this ReplicationStateModel.  # noqa: E501


        :return: The last_receive of this ReplicationStateModel.  # noqa: E501
        :rtype: str
        """
        return self._last_receive

    @last_receive.setter
    def last_receive(self, last_receive):
        """Sets the last_receive of this ReplicationStateModel.


        :param last_receive: The last_receive of this ReplicationStateModel.  # noqa: E501
        :type: str
        """

        self._last_receive = last_receive

    @property
    def last_replay(self):
        """Gets the last_replay of this ReplicationStateModel.  # noqa: E501


        :return: The last_replay of this ReplicationStateModel.  # noqa: E501
        :rtype: str
        """
        return self._last_replay

    @last_replay.setter
    def last_replay(self, last_replay):
        """Sets the last_replay of this ReplicationStateModel.


        :param last_replay: The last_replay of this ReplicationStateModel.  # noqa: E501
        :type: str
        """

        self._last_replay = last_replay

    @property
    def last_replay_time_stamp(self):
        """Gets the last_replay_time_stamp of this ReplicationStateModel.  # noqa: E501


        :return: The last_replay_time_stamp of this ReplicationStateModel.  # noqa: E501
        :rtype: int
        """
        return self._last_replay_time_stamp

    @last_replay_time_stamp.setter
    def last_replay_time_stamp(self, last_replay_time_stamp):
        """Sets the last_replay_time_stamp of this ReplicationStateModel.


        :param last_replay_time_stamp: The last_replay_time_stamp of this ReplicationStateModel.  # noqa: E501
        :type: int
        """

        self._last_replay_time_stamp = last_replay_time_stamp

    @property
    def log_delay(self):
        """Gets the log_delay of this ReplicationStateModel.  # noqa: E501


        :return: The log_delay of this ReplicationStateModel.  # noqa: E501
        :rtype: int
        """
        return self._log_delay

    @log_delay.setter
    def log_delay(self, log_delay):
        """Sets the log_delay of this ReplicationStateModel.


        :param log_delay: The log_delay of this ReplicationStateModel.  # noqa: E501
        :type: int
        """

        self._log_delay = log_delay

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReplicationStateModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReplicationStateModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

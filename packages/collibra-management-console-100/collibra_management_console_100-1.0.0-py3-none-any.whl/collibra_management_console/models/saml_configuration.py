# coding: utf-8

"""
    Collibra Management Console

    Collibra Management Console public REST API \\n Please ensure that cookies are not present within the API request. Including cookies within the call will cause 403 error.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SamlConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attribute_fields': 'AttributeFields',
        'consumer_service_url': 'str',
        'disable_client_address': 'bool',
        'disable_relay_state': 'bool',
        'entity_id': 'str',
        'force_authn': 'bool',
        'force_name_id': 'str',
        'force_name_id_allow_create': 'bool',
        'force_passive': 'bool',
        'group_role_mapping': 'dict(str, str)',
        'metadata_http': 'str',
        'request_signed': 'bool',
        'saml_requested_authn_context_configuration': 'SamlRequestedAuthnContextConfiguration'
    }

    attribute_map = {
        'attribute_fields': 'attributeFields',
        'consumer_service_url': 'consumerServiceUrl',
        'disable_client_address': 'disableClientAddress',
        'disable_relay_state': 'disableRelayState',
        'entity_id': 'entityId',
        'force_authn': 'forceAuthn',
        'force_name_id': 'forceNameId',
        'force_name_id_allow_create': 'forceNameIdAllowCreate',
        'force_passive': 'forcePassive',
        'group_role_mapping': 'groupRoleMapping',
        'metadata_http': 'metadataHTTP',
        'request_signed': 'requestSigned',
        'saml_requested_authn_context_configuration': 'samlRequestedAuthnContextConfiguration'
    }

    def __init__(self, attribute_fields=None, consumer_service_url=None, disable_client_address=None, disable_relay_state=None, entity_id=None, force_authn=None, force_name_id=None, force_name_id_allow_create=None, force_passive=None, group_role_mapping=None, metadata_http=None, request_signed=None, saml_requested_authn_context_configuration=None):  # noqa: E501
        """SamlConfiguration - a model defined in Swagger"""  # noqa: E501
        self._attribute_fields = None
        self._consumer_service_url = None
        self._disable_client_address = None
        self._disable_relay_state = None
        self._entity_id = None
        self._force_authn = None
        self._force_name_id = None
        self._force_name_id_allow_create = None
        self._force_passive = None
        self._group_role_mapping = None
        self._metadata_http = None
        self._request_signed = None
        self._saml_requested_authn_context_configuration = None
        self.discriminator = None
        if attribute_fields is not None:
            self.attribute_fields = attribute_fields
        if consumer_service_url is not None:
            self.consumer_service_url = consumer_service_url
        if disable_client_address is not None:
            self.disable_client_address = disable_client_address
        if disable_relay_state is not None:
            self.disable_relay_state = disable_relay_state
        if entity_id is not None:
            self.entity_id = entity_id
        if force_authn is not None:
            self.force_authn = force_authn
        if force_name_id is not None:
            self.force_name_id = force_name_id
        if force_name_id_allow_create is not None:
            self.force_name_id_allow_create = force_name_id_allow_create
        if force_passive is not None:
            self.force_passive = force_passive
        if group_role_mapping is not None:
            self.group_role_mapping = group_role_mapping
        if metadata_http is not None:
            self.metadata_http = metadata_http
        if request_signed is not None:
            self.request_signed = request_signed
        if saml_requested_authn_context_configuration is not None:
            self.saml_requested_authn_context_configuration = saml_requested_authn_context_configuration

    @property
    def attribute_fields(self):
        """Gets the attribute_fields of this SamlConfiguration.  # noqa: E501


        :return: The attribute_fields of this SamlConfiguration.  # noqa: E501
        :rtype: AttributeFields
        """
        return self._attribute_fields

    @attribute_fields.setter
    def attribute_fields(self, attribute_fields):
        """Sets the attribute_fields of this SamlConfiguration.


        :param attribute_fields: The attribute_fields of this SamlConfiguration.  # noqa: E501
        :type: AttributeFields
        """

        self._attribute_fields = attribute_fields

    @property
    def consumer_service_url(self):
        """Gets the consumer_service_url of this SamlConfiguration.  # noqa: E501


        :return: The consumer_service_url of this SamlConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._consumer_service_url

    @consumer_service_url.setter
    def consumer_service_url(self, consumer_service_url):
        """Sets the consumer_service_url of this SamlConfiguration.


        :param consumer_service_url: The consumer_service_url of this SamlConfiguration.  # noqa: E501
        :type: str
        """

        self._consumer_service_url = consumer_service_url

    @property
    def disable_client_address(self):
        """Gets the disable_client_address of this SamlConfiguration.  # noqa: E501


        :return: The disable_client_address of this SamlConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._disable_client_address

    @disable_client_address.setter
    def disable_client_address(self, disable_client_address):
        """Sets the disable_client_address of this SamlConfiguration.


        :param disable_client_address: The disable_client_address of this SamlConfiguration.  # noqa: E501
        :type: bool
        """

        self._disable_client_address = disable_client_address

    @property
    def disable_relay_state(self):
        """Gets the disable_relay_state of this SamlConfiguration.  # noqa: E501


        :return: The disable_relay_state of this SamlConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._disable_relay_state

    @disable_relay_state.setter
    def disable_relay_state(self, disable_relay_state):
        """Sets the disable_relay_state of this SamlConfiguration.


        :param disable_relay_state: The disable_relay_state of this SamlConfiguration.  # noqa: E501
        :type: bool
        """

        self._disable_relay_state = disable_relay_state

    @property
    def entity_id(self):
        """Gets the entity_id of this SamlConfiguration.  # noqa: E501


        :return: The entity_id of this SamlConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this SamlConfiguration.


        :param entity_id: The entity_id of this SamlConfiguration.  # noqa: E501
        :type: str
        """

        self._entity_id = entity_id

    @property
    def force_authn(self):
        """Gets the force_authn of this SamlConfiguration.  # noqa: E501


        :return: The force_authn of this SamlConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._force_authn

    @force_authn.setter
    def force_authn(self, force_authn):
        """Sets the force_authn of this SamlConfiguration.


        :param force_authn: The force_authn of this SamlConfiguration.  # noqa: E501
        :type: bool
        """

        self._force_authn = force_authn

    @property
    def force_name_id(self):
        """Gets the force_name_id of this SamlConfiguration.  # noqa: E501


        :return: The force_name_id of this SamlConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._force_name_id

    @force_name_id.setter
    def force_name_id(self, force_name_id):
        """Sets the force_name_id of this SamlConfiguration.


        :param force_name_id: The force_name_id of this SamlConfiguration.  # noqa: E501
        :type: str
        """

        self._force_name_id = force_name_id

    @property
    def force_name_id_allow_create(self):
        """Gets the force_name_id_allow_create of this SamlConfiguration.  # noqa: E501


        :return: The force_name_id_allow_create of this SamlConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._force_name_id_allow_create

    @force_name_id_allow_create.setter
    def force_name_id_allow_create(self, force_name_id_allow_create):
        """Sets the force_name_id_allow_create of this SamlConfiguration.


        :param force_name_id_allow_create: The force_name_id_allow_create of this SamlConfiguration.  # noqa: E501
        :type: bool
        """

        self._force_name_id_allow_create = force_name_id_allow_create

    @property
    def force_passive(self):
        """Gets the force_passive of this SamlConfiguration.  # noqa: E501


        :return: The force_passive of this SamlConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._force_passive

    @force_passive.setter
    def force_passive(self, force_passive):
        """Sets the force_passive of this SamlConfiguration.


        :param force_passive: The force_passive of this SamlConfiguration.  # noqa: E501
        :type: bool
        """

        self._force_passive = force_passive

    @property
    def group_role_mapping(self):
        """Gets the group_role_mapping of this SamlConfiguration.  # noqa: E501


        :return: The group_role_mapping of this SamlConfiguration.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._group_role_mapping

    @group_role_mapping.setter
    def group_role_mapping(self, group_role_mapping):
        """Sets the group_role_mapping of this SamlConfiguration.


        :param group_role_mapping: The group_role_mapping of this SamlConfiguration.  # noqa: E501
        :type: dict(str, str)
        """
        allowed_values = ["READ", "ADMIN", "SUPER"]  # noqa: E501
        if not set(group_role_mapping.keys()).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid keys in `group_role_mapping` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(group_role_mapping.keys()) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._group_role_mapping = group_role_mapping

    @property
    def metadata_http(self):
        """Gets the metadata_http of this SamlConfiguration.  # noqa: E501


        :return: The metadata_http of this SamlConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._metadata_http

    @metadata_http.setter
    def metadata_http(self, metadata_http):
        """Sets the metadata_http of this SamlConfiguration.


        :param metadata_http: The metadata_http of this SamlConfiguration.  # noqa: E501
        :type: str
        """

        self._metadata_http = metadata_http

    @property
    def request_signed(self):
        """Gets the request_signed of this SamlConfiguration.  # noqa: E501


        :return: The request_signed of this SamlConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._request_signed

    @request_signed.setter
    def request_signed(self, request_signed):
        """Sets the request_signed of this SamlConfiguration.


        :param request_signed: The request_signed of this SamlConfiguration.  # noqa: E501
        :type: bool
        """

        self._request_signed = request_signed

    @property
    def saml_requested_authn_context_configuration(self):
        """Gets the saml_requested_authn_context_configuration of this SamlConfiguration.  # noqa: E501


        :return: The saml_requested_authn_context_configuration of this SamlConfiguration.  # noqa: E501
        :rtype: SamlRequestedAuthnContextConfiguration
        """
        return self._saml_requested_authn_context_configuration

    @saml_requested_authn_context_configuration.setter
    def saml_requested_authn_context_configuration(self, saml_requested_authn_context_configuration):
        """Sets the saml_requested_authn_context_configuration of this SamlConfiguration.


        :param saml_requested_authn_context_configuration: The saml_requested_authn_context_configuration of this SamlConfiguration.  # noqa: E501
        :type: SamlRequestedAuthnContextConfiguration
        """

        self._saml_requested_authn_context_configuration = saml_requested_authn_context_configuration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SamlConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SamlConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

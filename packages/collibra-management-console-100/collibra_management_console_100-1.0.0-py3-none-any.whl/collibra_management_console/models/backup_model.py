# coding: utf-8

"""
    Collibra Management Console

    Collibra Management Console public REST API \\n Please ensure that cookies are not present within the API request. Including cookies within the call will cause 403 error.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BackupModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'backup_information': 'BackupInformationModel',
        'created_date': 'datetime',
        'id': 'str',
        'in_progress': 'bool',
        'key': 'str',
        'modified_date': 'datetime',
        'size': 'int',
        'step_state_map': 'dict(str, StepStateModel)'
    }

    attribute_map = {
        'backup_information': 'backupInformation',
        'created_date': 'createdDate',
        'id': 'id',
        'in_progress': 'inProgress',
        'key': 'key',
        'modified_date': 'modifiedDate',
        'size': 'size',
        'step_state_map': 'stepStateMap'
    }

    def __init__(self, backup_information=None, created_date=None, id=None, in_progress=None, key=None, modified_date=None, size=None, step_state_map=None):  # noqa: E501
        """BackupModel - a model defined in Swagger"""  # noqa: E501
        self._backup_information = None
        self._created_date = None
        self._id = None
        self._in_progress = None
        self._key = None
        self._modified_date = None
        self._size = None
        self._step_state_map = None
        self.discriminator = None
        if backup_information is not None:
            self.backup_information = backup_information
        if created_date is not None:
            self.created_date = created_date
        if id is not None:
            self.id = id
        if in_progress is not None:
            self.in_progress = in_progress
        if key is not None:
            self.key = key
        if modified_date is not None:
            self.modified_date = modified_date
        if size is not None:
            self.size = size
        if step_state_map is not None:
            self.step_state_map = step_state_map

    @property
    def backup_information(self):
        """Gets the backup_information of this BackupModel.  # noqa: E501


        :return: The backup_information of this BackupModel.  # noqa: E501
        :rtype: BackupInformationModel
        """
        return self._backup_information

    @backup_information.setter
    def backup_information(self, backup_information):
        """Sets the backup_information of this BackupModel.


        :param backup_information: The backup_information of this BackupModel.  # noqa: E501
        :type: BackupInformationModel
        """

        self._backup_information = backup_information

    @property
    def created_date(self):
        """Gets the created_date of this BackupModel.  # noqa: E501


        :return: The created_date of this BackupModel.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this BackupModel.


        :param created_date: The created_date of this BackupModel.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def id(self):
        """Gets the id of this BackupModel.  # noqa: E501


        :return: The id of this BackupModel.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BackupModel.


        :param id: The id of this BackupModel.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def in_progress(self):
        """Gets the in_progress of this BackupModel.  # noqa: E501


        :return: The in_progress of this BackupModel.  # noqa: E501
        :rtype: bool
        """
        return self._in_progress

    @in_progress.setter
    def in_progress(self, in_progress):
        """Sets the in_progress of this BackupModel.


        :param in_progress: The in_progress of this BackupModel.  # noqa: E501
        :type: bool
        """

        self._in_progress = in_progress

    @property
    def key(self):
        """Gets the key of this BackupModel.  # noqa: E501


        :return: The key of this BackupModel.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this BackupModel.


        :param key: The key of this BackupModel.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def modified_date(self):
        """Gets the modified_date of this BackupModel.  # noqa: E501


        :return: The modified_date of this BackupModel.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this BackupModel.


        :param modified_date: The modified_date of this BackupModel.  # noqa: E501
        :type: datetime
        """

        self._modified_date = modified_date

    @property
    def size(self):
        """Gets the size of this BackupModel.  # noqa: E501


        :return: The size of this BackupModel.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this BackupModel.


        :param size: The size of this BackupModel.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def step_state_map(self):
        """Gets the step_state_map of this BackupModel.  # noqa: E501


        :return: The step_state_map of this BackupModel.  # noqa: E501
        :rtype: dict(str, StepStateModel)
        """
        return self._step_state_map

    @step_state_map.setter
    def step_state_map(self, step_state_map):
        """Sets the step_state_map of this BackupModel.


        :param step_state_map: The step_state_map of this BackupModel.  # noqa: E501
        :type: dict(str, StepStateModel)
        """

        self._step_state_map = step_state_map

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BackupModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BackupModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

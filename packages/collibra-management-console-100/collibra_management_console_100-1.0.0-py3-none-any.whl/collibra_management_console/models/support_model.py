# coding: utf-8

"""
    Collibra Management Console

    Collibra Management Console public REST API \\n Please ensure that cookies are not present within the API request. Including cookies within the call will cause 403 error.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SupportModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_date': 'datetime',
        'environment_id': 'str',
        'id': 'str',
        'modified_date': 'datetime',
        'name': 'str',
        'size': 'int',
        'state': 'str',
        'support_specification': 'SupportSpecificationModel'
    }

    attribute_map = {
        'created_date': 'createdDate',
        'environment_id': 'environmentId',
        'id': 'id',
        'modified_date': 'modifiedDate',
        'name': 'name',
        'size': 'size',
        'state': 'state',
        'support_specification': 'supportSpecification'
    }

    def __init__(self, created_date=None, environment_id=None, id=None, modified_date=None, name=None, size=None, state=None, support_specification=None):  # noqa: E501
        """SupportModel - a model defined in Swagger"""  # noqa: E501
        self._created_date = None
        self._environment_id = None
        self._id = None
        self._modified_date = None
        self._name = None
        self._size = None
        self._state = None
        self._support_specification = None
        self.discriminator = None
        if created_date is not None:
            self.created_date = created_date
        if environment_id is not None:
            self.environment_id = environment_id
        if id is not None:
            self.id = id
        if modified_date is not None:
            self.modified_date = modified_date
        if name is not None:
            self.name = name
        if size is not None:
            self.size = size
        if state is not None:
            self.state = state
        if support_specification is not None:
            self.support_specification = support_specification

    @property
    def created_date(self):
        """Gets the created_date of this SupportModel.  # noqa: E501


        :return: The created_date of this SupportModel.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this SupportModel.


        :param created_date: The created_date of this SupportModel.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def environment_id(self):
        """Gets the environment_id of this SupportModel.  # noqa: E501


        :return: The environment_id of this SupportModel.  # noqa: E501
        :rtype: str
        """
        return self._environment_id

    @environment_id.setter
    def environment_id(self, environment_id):
        """Sets the environment_id of this SupportModel.


        :param environment_id: The environment_id of this SupportModel.  # noqa: E501
        :type: str
        """

        self._environment_id = environment_id

    @property
    def id(self):
        """Gets the id of this SupportModel.  # noqa: E501


        :return: The id of this SupportModel.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SupportModel.


        :param id: The id of this SupportModel.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def modified_date(self):
        """Gets the modified_date of this SupportModel.  # noqa: E501


        :return: The modified_date of this SupportModel.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this SupportModel.


        :param modified_date: The modified_date of this SupportModel.  # noqa: E501
        :type: datetime
        """

        self._modified_date = modified_date

    @property
    def name(self):
        """Gets the name of this SupportModel.  # noqa: E501


        :return: The name of this SupportModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SupportModel.


        :param name: The name of this SupportModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def size(self):
        """Gets the size of this SupportModel.  # noqa: E501


        :return: The size of this SupportModel.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this SupportModel.


        :param size: The size of this SupportModel.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def state(self):
        """Gets the state of this SupportModel.  # noqa: E501


        :return: The state of this SupportModel.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this SupportModel.


        :param state: The state of this SupportModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["IN_PROGRESS", "DONE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def support_specification(self):
        """Gets the support_specification of this SupportModel.  # noqa: E501


        :return: The support_specification of this SupportModel.  # noqa: E501
        :rtype: SupportSpecificationModel
        """
        return self._support_specification

    @support_specification.setter
    def support_specification(self, support_specification):
        """Sets the support_specification of this SupportModel.


        :param support_specification: The support_specification of this SupportModel.  # noqa: E501
        :type: SupportSpecificationModel
        """

        self._support_specification = support_specification

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SupportModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupportModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

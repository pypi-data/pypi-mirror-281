# coding: utf-8

"""
    Collibra Management Console

    Collibra Management Console public REST API \\n Please ensure that cookies are not present within the API request. Including cookies within the call will cause 403 error.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ServiceProviderModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_date': 'datetime',
        'id': 'str',
        'modified_date': 'datetime',
        'optional_dependencies': 'list[str]',
        'required_dependencies': 'list[str]',
        'status': 'str',
        'type': 'str'
    }

    attribute_map = {
        'created_date': 'createdDate',
        'id': 'id',
        'modified_date': 'modifiedDate',
        'optional_dependencies': 'optionalDependencies',
        'required_dependencies': 'requiredDependencies',
        'status': 'status',
        'type': 'type'
    }

    def __init__(self, created_date=None, id=None, modified_date=None, optional_dependencies=None, required_dependencies=None, status=None, type=None):  # noqa: E501
        """ServiceProviderModel - a model defined in Swagger"""  # noqa: E501
        self._created_date = None
        self._id = None
        self._modified_date = None
        self._optional_dependencies = None
        self._required_dependencies = None
        self._status = None
        self._type = None
        self.discriminator = None
        if created_date is not None:
            self.created_date = created_date
        if id is not None:
            self.id = id
        if modified_date is not None:
            self.modified_date = modified_date
        if optional_dependencies is not None:
            self.optional_dependencies = optional_dependencies
        if required_dependencies is not None:
            self.required_dependencies = required_dependencies
        if status is not None:
            self.status = status
        if type is not None:
            self.type = type

    @property
    def created_date(self):
        """Gets the created_date of this ServiceProviderModel.  # noqa: E501


        :return: The created_date of this ServiceProviderModel.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this ServiceProviderModel.


        :param created_date: The created_date of this ServiceProviderModel.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def id(self):
        """Gets the id of this ServiceProviderModel.  # noqa: E501


        :return: The id of this ServiceProviderModel.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ServiceProviderModel.


        :param id: The id of this ServiceProviderModel.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def modified_date(self):
        """Gets the modified_date of this ServiceProviderModel.  # noqa: E501


        :return: The modified_date of this ServiceProviderModel.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this ServiceProviderModel.


        :param modified_date: The modified_date of this ServiceProviderModel.  # noqa: E501
        :type: datetime
        """

        self._modified_date = modified_date

    @property
    def optional_dependencies(self):
        """Gets the optional_dependencies of this ServiceProviderModel.  # noqa: E501


        :return: The optional_dependencies of this ServiceProviderModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._optional_dependencies

    @optional_dependencies.setter
    def optional_dependencies(self, optional_dependencies):
        """Sets the optional_dependencies of this ServiceProviderModel.


        :param optional_dependencies: The optional_dependencies of this ServiceProviderModel.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["REPOSITORY", "SPARK", "DGC", "SEARCH"]  # noqa: E501
        if not set(optional_dependencies).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `optional_dependencies` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(optional_dependencies) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._optional_dependencies = optional_dependencies

    @property
    def required_dependencies(self):
        """Gets the required_dependencies of this ServiceProviderModel.  # noqa: E501


        :return: The required_dependencies of this ServiceProviderModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._required_dependencies

    @required_dependencies.setter
    def required_dependencies(self, required_dependencies):
        """Sets the required_dependencies of this ServiceProviderModel.


        :param required_dependencies: The required_dependencies of this ServiceProviderModel.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["REPOSITORY", "SPARK", "DGC", "SEARCH"]  # noqa: E501
        if not set(required_dependencies).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `required_dependencies` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(required_dependencies) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._required_dependencies = required_dependencies

    @property
    def status(self):
        """Gets the status of this ServiceProviderModel.  # noqa: E501


        :return: The status of this ServiceProviderModel.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ServiceProviderModel.


        :param status: The status of this ServiceProviderModel.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def type(self):
        """Gets the type of this ServiceProviderModel.  # noqa: E501


        :return: The type of this ServiceProviderModel.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ServiceProviderModel.


        :param type: The type of this ServiceProviderModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["REPOSITORY", "SPARK", "DGC", "SEARCH"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceProviderModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceProviderModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

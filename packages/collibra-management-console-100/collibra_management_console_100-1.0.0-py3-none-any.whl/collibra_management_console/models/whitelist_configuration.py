# coding: utf-8

"""
    Collibra Management Console

    Collibra Management Console public REST API \\n Please ensure that cookies are not present within the API request. Including cookies within the call will cause 403 error.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WhitelistConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'connect_src_wl': 'list[WhitelistDomain]',
        'font_src_wl': 'list[WhitelistDomain]',
        'frame_ancestors_wl': 'list[WhitelistDomain]',
        'frame_src_wl': 'list[WhitelistDomain]',
        'img_src_wl': 'list[WhitelistDomain]',
        'script_src_wl': 'list[WhitelistDomain]',
        'style_src_wl': 'list[WhitelistDomain]',
        'tableau_frame_ancestors_wl': 'list[WhitelistDomain]'
    }

    attribute_map = {
        'connect_src_wl': 'connectSrcWl',
        'font_src_wl': 'fontSrcWl',
        'frame_ancestors_wl': 'frameAncestorsWl',
        'frame_src_wl': 'frameSrcWl',
        'img_src_wl': 'imgSrcWl',
        'script_src_wl': 'scriptSrcWl',
        'style_src_wl': 'styleSrcWl',
        'tableau_frame_ancestors_wl': 'tableauFrameAncestorsWl'
    }

    def __init__(self, connect_src_wl=None, font_src_wl=None, frame_ancestors_wl=None, frame_src_wl=None, img_src_wl=None, script_src_wl=None, style_src_wl=None, tableau_frame_ancestors_wl=None):  # noqa: E501
        """WhitelistConfiguration - a model defined in Swagger"""  # noqa: E501
        self._connect_src_wl = None
        self._font_src_wl = None
        self._frame_ancestors_wl = None
        self._frame_src_wl = None
        self._img_src_wl = None
        self._script_src_wl = None
        self._style_src_wl = None
        self._tableau_frame_ancestors_wl = None
        self.discriminator = None
        if connect_src_wl is not None:
            self.connect_src_wl = connect_src_wl
        if font_src_wl is not None:
            self.font_src_wl = font_src_wl
        if frame_ancestors_wl is not None:
            self.frame_ancestors_wl = frame_ancestors_wl
        if frame_src_wl is not None:
            self.frame_src_wl = frame_src_wl
        if img_src_wl is not None:
            self.img_src_wl = img_src_wl
        if script_src_wl is not None:
            self.script_src_wl = script_src_wl
        if style_src_wl is not None:
            self.style_src_wl = style_src_wl
        if tableau_frame_ancestors_wl is not None:
            self.tableau_frame_ancestors_wl = tableau_frame_ancestors_wl

    @property
    def connect_src_wl(self):
        """Gets the connect_src_wl of this WhitelistConfiguration.  # noqa: E501


        :return: The connect_src_wl of this WhitelistConfiguration.  # noqa: E501
        :rtype: list[WhitelistDomain]
        """
        return self._connect_src_wl

    @connect_src_wl.setter
    def connect_src_wl(self, connect_src_wl):
        """Sets the connect_src_wl of this WhitelistConfiguration.


        :param connect_src_wl: The connect_src_wl of this WhitelistConfiguration.  # noqa: E501
        :type: list[WhitelistDomain]
        """

        self._connect_src_wl = connect_src_wl

    @property
    def font_src_wl(self):
        """Gets the font_src_wl of this WhitelistConfiguration.  # noqa: E501


        :return: The font_src_wl of this WhitelistConfiguration.  # noqa: E501
        :rtype: list[WhitelistDomain]
        """
        return self._font_src_wl

    @font_src_wl.setter
    def font_src_wl(self, font_src_wl):
        """Sets the font_src_wl of this WhitelistConfiguration.


        :param font_src_wl: The font_src_wl of this WhitelistConfiguration.  # noqa: E501
        :type: list[WhitelistDomain]
        """

        self._font_src_wl = font_src_wl

    @property
    def frame_ancestors_wl(self):
        """Gets the frame_ancestors_wl of this WhitelistConfiguration.  # noqa: E501


        :return: The frame_ancestors_wl of this WhitelistConfiguration.  # noqa: E501
        :rtype: list[WhitelistDomain]
        """
        return self._frame_ancestors_wl

    @frame_ancestors_wl.setter
    def frame_ancestors_wl(self, frame_ancestors_wl):
        """Sets the frame_ancestors_wl of this WhitelistConfiguration.


        :param frame_ancestors_wl: The frame_ancestors_wl of this WhitelistConfiguration.  # noqa: E501
        :type: list[WhitelistDomain]
        """

        self._frame_ancestors_wl = frame_ancestors_wl

    @property
    def frame_src_wl(self):
        """Gets the frame_src_wl of this WhitelistConfiguration.  # noqa: E501


        :return: The frame_src_wl of this WhitelistConfiguration.  # noqa: E501
        :rtype: list[WhitelistDomain]
        """
        return self._frame_src_wl

    @frame_src_wl.setter
    def frame_src_wl(self, frame_src_wl):
        """Sets the frame_src_wl of this WhitelistConfiguration.


        :param frame_src_wl: The frame_src_wl of this WhitelistConfiguration.  # noqa: E501
        :type: list[WhitelistDomain]
        """

        self._frame_src_wl = frame_src_wl

    @property
    def img_src_wl(self):
        """Gets the img_src_wl of this WhitelistConfiguration.  # noqa: E501


        :return: The img_src_wl of this WhitelistConfiguration.  # noqa: E501
        :rtype: list[WhitelistDomain]
        """
        return self._img_src_wl

    @img_src_wl.setter
    def img_src_wl(self, img_src_wl):
        """Sets the img_src_wl of this WhitelistConfiguration.


        :param img_src_wl: The img_src_wl of this WhitelistConfiguration.  # noqa: E501
        :type: list[WhitelistDomain]
        """

        self._img_src_wl = img_src_wl

    @property
    def script_src_wl(self):
        """Gets the script_src_wl of this WhitelistConfiguration.  # noqa: E501


        :return: The script_src_wl of this WhitelistConfiguration.  # noqa: E501
        :rtype: list[WhitelistDomain]
        """
        return self._script_src_wl

    @script_src_wl.setter
    def script_src_wl(self, script_src_wl):
        """Sets the script_src_wl of this WhitelistConfiguration.


        :param script_src_wl: The script_src_wl of this WhitelistConfiguration.  # noqa: E501
        :type: list[WhitelistDomain]
        """

        self._script_src_wl = script_src_wl

    @property
    def style_src_wl(self):
        """Gets the style_src_wl of this WhitelistConfiguration.  # noqa: E501


        :return: The style_src_wl of this WhitelistConfiguration.  # noqa: E501
        :rtype: list[WhitelistDomain]
        """
        return self._style_src_wl

    @style_src_wl.setter
    def style_src_wl(self, style_src_wl):
        """Sets the style_src_wl of this WhitelistConfiguration.


        :param style_src_wl: The style_src_wl of this WhitelistConfiguration.  # noqa: E501
        :type: list[WhitelistDomain]
        """

        self._style_src_wl = style_src_wl

    @property
    def tableau_frame_ancestors_wl(self):
        """Gets the tableau_frame_ancestors_wl of this WhitelistConfiguration.  # noqa: E501


        :return: The tableau_frame_ancestors_wl of this WhitelistConfiguration.  # noqa: E501
        :rtype: list[WhitelistDomain]
        """
        return self._tableau_frame_ancestors_wl

    @tableau_frame_ancestors_wl.setter
    def tableau_frame_ancestors_wl(self, tableau_frame_ancestors_wl):
        """Sets the tableau_frame_ancestors_wl of this WhitelistConfiguration.


        :param tableau_frame_ancestors_wl: The tableau_frame_ancestors_wl of this WhitelistConfiguration.  # noqa: E501
        :type: list[WhitelistDomain]
        """

        self._tableau_frame_ancestors_wl = tableau_frame_ancestors_wl

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WhitelistConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WhitelistConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

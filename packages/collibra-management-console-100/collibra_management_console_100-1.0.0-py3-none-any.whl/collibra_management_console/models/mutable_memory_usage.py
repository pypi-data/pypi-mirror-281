# coding: utf-8

"""
    Collibra Management Console

    Collibra Management Console public REST API \\n Please ensure that cookies are not present within the API request. Including cookies within the call will cause 403 error.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MutableMemoryUsage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'committed': 'int',
        'init': 'int',
        'max': 'int',
        'used': 'int'
    }

    attribute_map = {
        'committed': 'committed',
        'init': 'init',
        'max': 'max',
        'used': 'used'
    }

    def __init__(self, committed=None, init=None, max=None, used=None):  # noqa: E501
        """MutableMemoryUsage - a model defined in Swagger"""  # noqa: E501
        self._committed = None
        self._init = None
        self._max = None
        self._used = None
        self.discriminator = None
        if committed is not None:
            self.committed = committed
        if init is not None:
            self.init = init
        if max is not None:
            self.max = max
        if used is not None:
            self.used = used

    @property
    def committed(self):
        """Gets the committed of this MutableMemoryUsage.  # noqa: E501


        :return: The committed of this MutableMemoryUsage.  # noqa: E501
        :rtype: int
        """
        return self._committed

    @committed.setter
    def committed(self, committed):
        """Sets the committed of this MutableMemoryUsage.


        :param committed: The committed of this MutableMemoryUsage.  # noqa: E501
        :type: int
        """

        self._committed = committed

    @property
    def init(self):
        """Gets the init of this MutableMemoryUsage.  # noqa: E501


        :return: The init of this MutableMemoryUsage.  # noqa: E501
        :rtype: int
        """
        return self._init

    @init.setter
    def init(self, init):
        """Sets the init of this MutableMemoryUsage.


        :param init: The init of this MutableMemoryUsage.  # noqa: E501
        :type: int
        """

        self._init = init

    @property
    def max(self):
        """Gets the max of this MutableMemoryUsage.  # noqa: E501


        :return: The max of this MutableMemoryUsage.  # noqa: E501
        :rtype: int
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this MutableMemoryUsage.


        :param max: The max of this MutableMemoryUsage.  # noqa: E501
        :type: int
        """

        self._max = max

    @property
    def used(self):
        """Gets the used of this MutableMemoryUsage.  # noqa: E501


        :return: The used of this MutableMemoryUsage.  # noqa: E501
        :rtype: int
        """
        return self._used

    @used.setter
    def used(self, used):
        """Sets the used of this MutableMemoryUsage.


        :param used: The used of this MutableMemoryUsage.  # noqa: E501
        :type: int
        """

        self._used = used

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MutableMemoryUsage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MutableMemoryUsage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

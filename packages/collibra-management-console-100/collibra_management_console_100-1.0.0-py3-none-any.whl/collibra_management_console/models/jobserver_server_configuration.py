# coding: utf-8

"""
    Collibra Management Console

    Collibra Management Console public REST API \\n Please ensure that cookies are not present within the API request. Including cookies within the call will cause 403 error.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JobserverServerConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'jobserver_memory': 'str',
        'jobserver_monitoring_port': 'int',
        'jobserver_security_configuration': 'JobserverSecurityConfiguration',
        'port': 'int',
        'spark_memory': 'str',
        'spark_monitoring_port': 'int'
    }

    attribute_map = {
        'jobserver_memory': 'jobserverMemory',
        'jobserver_monitoring_port': 'jobserverMonitoringPort',
        'jobserver_security_configuration': 'jobserverSecurityConfiguration',
        'port': 'port',
        'spark_memory': 'sparkMemory',
        'spark_monitoring_port': 'sparkMonitoringPort'
    }

    def __init__(self, jobserver_memory=None, jobserver_monitoring_port=None, jobserver_security_configuration=None, port=None, spark_memory=None, spark_monitoring_port=None):  # noqa: E501
        """JobserverServerConfiguration - a model defined in Swagger"""  # noqa: E501
        self._jobserver_memory = None
        self._jobserver_monitoring_port = None
        self._jobserver_security_configuration = None
        self._port = None
        self._spark_memory = None
        self._spark_monitoring_port = None
        self.discriminator = None
        self.jobserver_memory = jobserver_memory
        self.jobserver_monitoring_port = jobserver_monitoring_port
        if jobserver_security_configuration is not None:
            self.jobserver_security_configuration = jobserver_security_configuration
        self.port = port
        self.spark_memory = spark_memory
        self.spark_monitoring_port = spark_monitoring_port

    @property
    def jobserver_memory(self):
        """Gets the jobserver_memory of this JobserverServerConfiguration.  # noqa: E501


        :return: The jobserver_memory of this JobserverServerConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._jobserver_memory

    @jobserver_memory.setter
    def jobserver_memory(self, jobserver_memory):
        """Sets the jobserver_memory of this JobserverServerConfiguration.


        :param jobserver_memory: The jobserver_memory of this JobserverServerConfiguration.  # noqa: E501
        :type: str
        """
        if jobserver_memory is None:
            raise ValueError("Invalid value for `jobserver_memory`, must not be `None`")  # noqa: E501

        self._jobserver_memory = jobserver_memory

    @property
    def jobserver_monitoring_port(self):
        """Gets the jobserver_monitoring_port of this JobserverServerConfiguration.  # noqa: E501


        :return: The jobserver_monitoring_port of this JobserverServerConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._jobserver_monitoring_port

    @jobserver_monitoring_port.setter
    def jobserver_monitoring_port(self, jobserver_monitoring_port):
        """Sets the jobserver_monitoring_port of this JobserverServerConfiguration.


        :param jobserver_monitoring_port: The jobserver_monitoring_port of this JobserverServerConfiguration.  # noqa: E501
        :type: int
        """
        if jobserver_monitoring_port is None:
            raise ValueError("Invalid value for `jobserver_monitoring_port`, must not be `None`")  # noqa: E501

        self._jobserver_monitoring_port = jobserver_monitoring_port

    @property
    def jobserver_security_configuration(self):
        """Gets the jobserver_security_configuration of this JobserverServerConfiguration.  # noqa: E501


        :return: The jobserver_security_configuration of this JobserverServerConfiguration.  # noqa: E501
        :rtype: JobserverSecurityConfiguration
        """
        return self._jobserver_security_configuration

    @jobserver_security_configuration.setter
    def jobserver_security_configuration(self, jobserver_security_configuration):
        """Sets the jobserver_security_configuration of this JobserverServerConfiguration.


        :param jobserver_security_configuration: The jobserver_security_configuration of this JobserverServerConfiguration.  # noqa: E501
        :type: JobserverSecurityConfiguration
        """

        self._jobserver_security_configuration = jobserver_security_configuration

    @property
    def port(self):
        """Gets the port of this JobserverServerConfiguration.  # noqa: E501


        :return: The port of this JobserverServerConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this JobserverServerConfiguration.


        :param port: The port of this JobserverServerConfiguration.  # noqa: E501
        :type: int
        """
        if port is None:
            raise ValueError("Invalid value for `port`, must not be `None`")  # noqa: E501

        self._port = port

    @property
    def spark_memory(self):
        """Gets the spark_memory of this JobserverServerConfiguration.  # noqa: E501


        :return: The spark_memory of this JobserverServerConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._spark_memory

    @spark_memory.setter
    def spark_memory(self, spark_memory):
        """Sets the spark_memory of this JobserverServerConfiguration.


        :param spark_memory: The spark_memory of this JobserverServerConfiguration.  # noqa: E501
        :type: str
        """
        if spark_memory is None:
            raise ValueError("Invalid value for `spark_memory`, must not be `None`")  # noqa: E501

        self._spark_memory = spark_memory

    @property
    def spark_monitoring_port(self):
        """Gets the spark_monitoring_port of this JobserverServerConfiguration.  # noqa: E501


        :return: The spark_monitoring_port of this JobserverServerConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._spark_monitoring_port

    @spark_monitoring_port.setter
    def spark_monitoring_port(self, spark_monitoring_port):
        """Sets the spark_monitoring_port of this JobserverServerConfiguration.


        :param spark_monitoring_port: The spark_monitoring_port of this JobserverServerConfiguration.  # noqa: E501
        :type: int
        """
        if spark_monitoring_port is None:
            raise ValueError("Invalid value for `spark_monitoring_port`, must not be `None`")  # noqa: E501

        self._spark_monitoring_port = spark_monitoring_port

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobserverServerConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobserverServerConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

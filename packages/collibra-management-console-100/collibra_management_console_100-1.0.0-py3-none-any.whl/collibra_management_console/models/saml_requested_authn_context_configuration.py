# coding: utf-8

"""
    Collibra Management Console

    Collibra Management Console public REST API \\n Please ensure that cookies are not present within the API request. Including cookies within the call will cause 403 error.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SamlRequestedAuthnContextConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'class_decl_list': 'list[str]',
        'class_ref_list': 'list[str]',
        'comparison': 'str',
        'disable': 'bool'
    }

    attribute_map = {
        'class_decl_list': 'classDeclList',
        'class_ref_list': 'classRefList',
        'comparison': 'comparison',
        'disable': 'disable'
    }

    def __init__(self, class_decl_list=None, class_ref_list=None, comparison=None, disable=None):  # noqa: E501
        """SamlRequestedAuthnContextConfiguration - a model defined in Swagger"""  # noqa: E501
        self._class_decl_list = None
        self._class_ref_list = None
        self._comparison = None
        self._disable = None
        self.discriminator = None
        if class_decl_list is not None:
            self.class_decl_list = class_decl_list
        if class_ref_list is not None:
            self.class_ref_list = class_ref_list
        if comparison is not None:
            self.comparison = comparison
        if disable is not None:
            self.disable = disable

    @property
    def class_decl_list(self):
        """Gets the class_decl_list of this SamlRequestedAuthnContextConfiguration.  # noqa: E501


        :return: The class_decl_list of this SamlRequestedAuthnContextConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._class_decl_list

    @class_decl_list.setter
    def class_decl_list(self, class_decl_list):
        """Sets the class_decl_list of this SamlRequestedAuthnContextConfiguration.


        :param class_decl_list: The class_decl_list of this SamlRequestedAuthnContextConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._class_decl_list = class_decl_list

    @property
    def class_ref_list(self):
        """Gets the class_ref_list of this SamlRequestedAuthnContextConfiguration.  # noqa: E501


        :return: The class_ref_list of this SamlRequestedAuthnContextConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._class_ref_list

    @class_ref_list.setter
    def class_ref_list(self, class_ref_list):
        """Sets the class_ref_list of this SamlRequestedAuthnContextConfiguration.


        :param class_ref_list: The class_ref_list of this SamlRequestedAuthnContextConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._class_ref_list = class_ref_list

    @property
    def comparison(self):
        """Gets the comparison of this SamlRequestedAuthnContextConfiguration.  # noqa: E501


        :return: The comparison of this SamlRequestedAuthnContextConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._comparison

    @comparison.setter
    def comparison(self, comparison):
        """Sets the comparison of this SamlRequestedAuthnContextConfiguration.


        :param comparison: The comparison of this SamlRequestedAuthnContextConfiguration.  # noqa: E501
        :type: str
        """

        self._comparison = comparison

    @property
    def disable(self):
        """Gets the disable of this SamlRequestedAuthnContextConfiguration.  # noqa: E501


        :return: The disable of this SamlRequestedAuthnContextConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._disable

    @disable.setter
    def disable(self, disable):
        """Sets the disable of this SamlRequestedAuthnContextConfiguration.


        :param disable: The disable of this SamlRequestedAuthnContextConfiguration.  # noqa: E501
        :type: bool
        """

        self._disable = disable

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SamlRequestedAuthnContextConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SamlRequestedAuthnContextConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

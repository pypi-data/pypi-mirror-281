# coding: utf-8

"""
    Collibra Management Console

    Collibra Management Console public REST API \\n Please ensure that cookies are not present within the API request. Including cookies within the call will cause 403 error.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BackupScheduleCreateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cron_expression': 'str',
        'description': 'str',
        'dgc_backup_options': 'list[str]',
        'environment_id': 'str',
        'max_retained': 'int',
        'name': 'str',
        'repo_backup_options': 'list[str]'
    }

    attribute_map = {
        'cron_expression': 'cronExpression',
        'description': 'description',
        'dgc_backup_options': 'dgcBackupOptions',
        'environment_id': 'environmentId',
        'max_retained': 'maxRetained',
        'name': 'name',
        'repo_backup_options': 'repoBackupOptions'
    }

    def __init__(self, cron_expression=None, description=None, dgc_backup_options=None, environment_id=None, max_retained=None, name=None, repo_backup_options=None):  # noqa: E501
        """BackupScheduleCreateRequest - a model defined in Swagger"""  # noqa: E501
        self._cron_expression = None
        self._description = None
        self._dgc_backup_options = None
        self._environment_id = None
        self._max_retained = None
        self._name = None
        self._repo_backup_options = None
        self.discriminator = None
        if cron_expression is not None:
            self.cron_expression = cron_expression
        if description is not None:
            self.description = description
        if dgc_backup_options is not None:
            self.dgc_backup_options = dgc_backup_options
        if environment_id is not None:
            self.environment_id = environment_id
        if max_retained is not None:
            self.max_retained = max_retained
        if name is not None:
            self.name = name
        if repo_backup_options is not None:
            self.repo_backup_options = repo_backup_options

    @property
    def cron_expression(self):
        """Gets the cron_expression of this BackupScheduleCreateRequest.  # noqa: E501


        :return: The cron_expression of this BackupScheduleCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._cron_expression

    @cron_expression.setter
    def cron_expression(self, cron_expression):
        """Sets the cron_expression of this BackupScheduleCreateRequest.


        :param cron_expression: The cron_expression of this BackupScheduleCreateRequest.  # noqa: E501
        :type: str
        """

        self._cron_expression = cron_expression

    @property
    def description(self):
        """Gets the description of this BackupScheduleCreateRequest.  # noqa: E501


        :return: The description of this BackupScheduleCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BackupScheduleCreateRequest.


        :param description: The description of this BackupScheduleCreateRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def dgc_backup_options(self):
        """Gets the dgc_backup_options of this BackupScheduleCreateRequest.  # noqa: E501


        :return: The dgc_backup_options of this BackupScheduleCreateRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._dgc_backup_options

    @dgc_backup_options.setter
    def dgc_backup_options(self, dgc_backup_options):
        """Sets the dgc_backup_options of this BackupScheduleCreateRequest.


        :param dgc_backup_options: The dgc_backup_options of this BackupScheduleCreateRequest.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["CONFIGURATION", "CUSTOMIZATIONS"]  # noqa: E501
        if not set(dgc_backup_options).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `dgc_backup_options` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(dgc_backup_options) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._dgc_backup_options = dgc_backup_options

    @property
    def environment_id(self):
        """Gets the environment_id of this BackupScheduleCreateRequest.  # noqa: E501


        :return: The environment_id of this BackupScheduleCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._environment_id

    @environment_id.setter
    def environment_id(self, environment_id):
        """Sets the environment_id of this BackupScheduleCreateRequest.


        :param environment_id: The environment_id of this BackupScheduleCreateRequest.  # noqa: E501
        :type: str
        """

        self._environment_id = environment_id

    @property
    def max_retained(self):
        """Gets the max_retained of this BackupScheduleCreateRequest.  # noqa: E501


        :return: The max_retained of this BackupScheduleCreateRequest.  # noqa: E501
        :rtype: int
        """
        return self._max_retained

    @max_retained.setter
    def max_retained(self, max_retained):
        """Sets the max_retained of this BackupScheduleCreateRequest.


        :param max_retained: The max_retained of this BackupScheduleCreateRequest.  # noqa: E501
        :type: int
        """

        self._max_retained = max_retained

    @property
    def name(self):
        """Gets the name of this BackupScheduleCreateRequest.  # noqa: E501


        :return: The name of this BackupScheduleCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BackupScheduleCreateRequest.


        :param name: The name of this BackupScheduleCreateRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def repo_backup_options(self):
        """Gets the repo_backup_options of this BackupScheduleCreateRequest.  # noqa: E501


        :return: The repo_backup_options of this BackupScheduleCreateRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._repo_backup_options

    @repo_backup_options.setter
    def repo_backup_options(self, repo_backup_options):
        """Sets the repo_backup_options of this BackupScheduleCreateRequest.


        :param repo_backup_options: The repo_backup_options of this BackupScheduleCreateRequest.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["DATA", "HISTORY"]  # noqa: E501
        if not set(repo_backup_options).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `repo_backup_options` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(repo_backup_options) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._repo_backup_options = repo_backup_options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BackupScheduleCreateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BackupScheduleCreateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Collibra Management Console

    Collibra Management Console public REST API \\n Please ensure that cookies are not present within the API request. Including cookies within the call will cause 403 error.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BackupConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'backup_retry': 'BackupRetryConfiguration',
        'backup_schedule': 'BackupScheduleConfiguration',
        'cleanup_interval': 'int',
        'timeout_in_millis': 'int'
    }

    attribute_map = {
        'backup_retry': 'backupRetry',
        'backup_schedule': 'backupSchedule',
        'cleanup_interval': 'cleanupInterval',
        'timeout_in_millis': 'timeoutInMillis'
    }

    def __init__(self, backup_retry=None, backup_schedule=None, cleanup_interval=None, timeout_in_millis=None):  # noqa: E501
        """BackupConfiguration - a model defined in Swagger"""  # noqa: E501
        self._backup_retry = None
        self._backup_schedule = None
        self._cleanup_interval = None
        self._timeout_in_millis = None
        self.discriminator = None
        if backup_retry is not None:
            self.backup_retry = backup_retry
        if backup_schedule is not None:
            self.backup_schedule = backup_schedule
        if cleanup_interval is not None:
            self.cleanup_interval = cleanup_interval
        self.timeout_in_millis = timeout_in_millis

    @property
    def backup_retry(self):
        """Gets the backup_retry of this BackupConfiguration.  # noqa: E501


        :return: The backup_retry of this BackupConfiguration.  # noqa: E501
        :rtype: BackupRetryConfiguration
        """
        return self._backup_retry

    @backup_retry.setter
    def backup_retry(self, backup_retry):
        """Sets the backup_retry of this BackupConfiguration.


        :param backup_retry: The backup_retry of this BackupConfiguration.  # noqa: E501
        :type: BackupRetryConfiguration
        """

        self._backup_retry = backup_retry

    @property
    def backup_schedule(self):
        """Gets the backup_schedule of this BackupConfiguration.  # noqa: E501


        :return: The backup_schedule of this BackupConfiguration.  # noqa: E501
        :rtype: BackupScheduleConfiguration
        """
        return self._backup_schedule

    @backup_schedule.setter
    def backup_schedule(self, backup_schedule):
        """Sets the backup_schedule of this BackupConfiguration.


        :param backup_schedule: The backup_schedule of this BackupConfiguration.  # noqa: E501
        :type: BackupScheduleConfiguration
        """

        self._backup_schedule = backup_schedule

    @property
    def cleanup_interval(self):
        """Gets the cleanup_interval of this BackupConfiguration.  # noqa: E501


        :return: The cleanup_interval of this BackupConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._cleanup_interval

    @cleanup_interval.setter
    def cleanup_interval(self, cleanup_interval):
        """Sets the cleanup_interval of this BackupConfiguration.


        :param cleanup_interval: The cleanup_interval of this BackupConfiguration.  # noqa: E501
        :type: int
        """

        self._cleanup_interval = cleanup_interval

    @property
    def timeout_in_millis(self):
        """Gets the timeout_in_millis of this BackupConfiguration.  # noqa: E501


        :return: The timeout_in_millis of this BackupConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._timeout_in_millis

    @timeout_in_millis.setter
    def timeout_in_millis(self, timeout_in_millis):
        """Sets the timeout_in_millis of this BackupConfiguration.


        :param timeout_in_millis: The timeout_in_millis of this BackupConfiguration.  # noqa: E501
        :type: int
        """
        if timeout_in_millis is None:
            raise ValueError("Invalid value for `timeout_in_millis`, must not be `None`")  # noqa: E501

        self._timeout_in_millis = timeout_in_millis

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BackupConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BackupConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

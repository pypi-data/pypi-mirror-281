# coding: utf-8

"""
    Collibra Management Console

    Collibra Management Console public REST API \\n Please ensure that cookies are not present within the API request. Including cookies within the call will cause 403 error.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SsoConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allow_sso_super_users': 'bool',
        'default_role': 'str',
        'disable_sign_in_page': 'bool',
        'mode': 'str',
        'saml_configuration': 'SamlConfiguration',
        'signout': 'SignoutConfiguration'
    }

    attribute_map = {
        'allow_sso_super_users': 'allowSsoSuperUsers',
        'default_role': 'defaultRole',
        'disable_sign_in_page': 'disableSignInPage',
        'mode': 'mode',
        'saml_configuration': 'samlConfiguration',
        'signout': 'signout'
    }

    def __init__(self, allow_sso_super_users=None, default_role=None, disable_sign_in_page=None, mode=None, saml_configuration=None, signout=None):  # noqa: E501
        """SsoConfiguration - a model defined in Swagger"""  # noqa: E501
        self._allow_sso_super_users = None
        self._default_role = None
        self._disable_sign_in_page = None
        self._mode = None
        self._saml_configuration = None
        self._signout = None
        self.discriminator = None
        if allow_sso_super_users is not None:
            self.allow_sso_super_users = allow_sso_super_users
        if default_role is not None:
            self.default_role = default_role
        if disable_sign_in_page is not None:
            self.disable_sign_in_page = disable_sign_in_page
        if mode is not None:
            self.mode = mode
        if saml_configuration is not None:
            self.saml_configuration = saml_configuration
        if signout is not None:
            self.signout = signout

    @property
    def allow_sso_super_users(self):
        """Gets the allow_sso_super_users of this SsoConfiguration.  # noqa: E501


        :return: The allow_sso_super_users of this SsoConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._allow_sso_super_users

    @allow_sso_super_users.setter
    def allow_sso_super_users(self, allow_sso_super_users):
        """Sets the allow_sso_super_users of this SsoConfiguration.


        :param allow_sso_super_users: The allow_sso_super_users of this SsoConfiguration.  # noqa: E501
        :type: bool
        """

        self._allow_sso_super_users = allow_sso_super_users

    @property
    def default_role(self):
        """Gets the default_role of this SsoConfiguration.  # noqa: E501


        :return: The default_role of this SsoConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._default_role

    @default_role.setter
    def default_role(self, default_role):
        """Sets the default_role of this SsoConfiguration.


        :param default_role: The default_role of this SsoConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["READ", "ADMIN", "SUPER"]  # noqa: E501
        if default_role not in allowed_values:
            raise ValueError(
                "Invalid value for `default_role` ({0}), must be one of {1}"  # noqa: E501
                .format(default_role, allowed_values)
            )

        self._default_role = default_role

    @property
    def disable_sign_in_page(self):
        """Gets the disable_sign_in_page of this SsoConfiguration.  # noqa: E501


        :return: The disable_sign_in_page of this SsoConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._disable_sign_in_page

    @disable_sign_in_page.setter
    def disable_sign_in_page(self, disable_sign_in_page):
        """Sets the disable_sign_in_page of this SsoConfiguration.


        :param disable_sign_in_page: The disable_sign_in_page of this SsoConfiguration.  # noqa: E501
        :type: bool
        """

        self._disable_sign_in_page = disable_sign_in_page

    @property
    def mode(self):
        """Gets the mode of this SsoConfiguration.  # noqa: E501


        :return: The mode of this SsoConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this SsoConfiguration.


        :param mode: The mode of this SsoConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["SAML_ATTRIBUTES", "DISABLED"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"  # noqa: E501
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def saml_configuration(self):
        """Gets the saml_configuration of this SsoConfiguration.  # noqa: E501


        :return: The saml_configuration of this SsoConfiguration.  # noqa: E501
        :rtype: SamlConfiguration
        """
        return self._saml_configuration

    @saml_configuration.setter
    def saml_configuration(self, saml_configuration):
        """Sets the saml_configuration of this SsoConfiguration.


        :param saml_configuration: The saml_configuration of this SsoConfiguration.  # noqa: E501
        :type: SamlConfiguration
        """

        self._saml_configuration = saml_configuration

    @property
    def signout(self):
        """Gets the signout of this SsoConfiguration.  # noqa: E501


        :return: The signout of this SsoConfiguration.  # noqa: E501
        :rtype: SignoutConfiguration
        """
        return self._signout

    @signout.setter
    def signout(self, signout):
        """Sets the signout of this SsoConfiguration.


        :param signout: The signout of this SsoConfiguration.  # noqa: E501
        :type: SignoutConfiguration
        """

        self._signout = signout

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SsoConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SsoConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

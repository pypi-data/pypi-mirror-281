# coding: utf-8

"""
    Collibra Management Console

    Collibra Management Console public REST API \\n Please ensure that cookies are not present within the API request. Including cookies within the call will cause 403 error.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from collibra_management_console.api_client import ApiClient


class JobserverConfigurationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_jobserver_context_jvm_configuration(self, managed_service_id, **kwargs):  # noqa: E501
        """Get Jobserver's Monitoring JVM configuration. Requires super role.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_jobserver_context_jvm_configuration(managed_service_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str managed_service_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_jobserver_context_jvm_configuration_with_http_info(managed_service_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_jobserver_context_jvm_configuration_with_http_info(managed_service_id, **kwargs)  # noqa: E501
            return data

    def get_jobserver_context_jvm_configuration_with_http_info(self, managed_service_id, **kwargs):  # noqa: E501
        """Get Jobserver's Monitoring JVM configuration. Requires super role.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_jobserver_context_jvm_configuration_with_http_info(managed_service_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str managed_service_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['managed_service_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_jobserver_context_jvm_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'managed_service_id' is set
        if ('managed_service_id' not in params or
                params['managed_service_id'] is None):
            raise ValueError("Missing the required parameter `managed_service_id` when calling `get_jobserver_context_jvm_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'managed_service_id' in params:
            path_params['managedServiceId'] = params['managed_service_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/spark/configuration/contextJvm/{managedServiceId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_jobserver_jvm_configuration(self, managed_service_id, **kwargs):  # noqa: E501
        """Get Jobserver's JVM configuration. Requires super role.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_jobserver_jvm_configuration(managed_service_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str managed_service_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_jobserver_jvm_configuration_with_http_info(managed_service_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_jobserver_jvm_configuration_with_http_info(managed_service_id, **kwargs)  # noqa: E501
            return data

    def get_jobserver_jvm_configuration_with_http_info(self, managed_service_id, **kwargs):  # noqa: E501
        """Get Jobserver's JVM configuration. Requires super role.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_jobserver_jvm_configuration_with_http_info(managed_service_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str managed_service_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['managed_service_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_jobserver_jvm_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'managed_service_id' is set
        if ('managed_service_id' not in params or
                params['managed_service_id'] is None):
            raise ValueError("Missing the required parameter `managed_service_id` when calling `get_jobserver_jvm_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'managed_service_id' in params:
            path_params['managedServiceId'] = params['managed_service_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/spark/configuration/jvm/{managedServiceId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_jobserver_server_configuration(self, managed_service_id, **kwargs):  # noqa: E501
        """Get Jobserver's Server configuration.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_jobserver_server_configuration(managed_service_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str managed_service_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_jobserver_server_configuration_with_http_info(managed_service_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_jobserver_server_configuration_with_http_info(managed_service_id, **kwargs)  # noqa: E501
            return data

    def get_jobserver_server_configuration_with_http_info(self, managed_service_id, **kwargs):  # noqa: E501
        """Get Jobserver's Server configuration.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_jobserver_server_configuration_with_http_info(managed_service_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str managed_service_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['managed_service_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_jobserver_server_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'managed_service_id' is set
        if ('managed_service_id' not in params or
                params['managed_service_id'] is None):
            raise ValueError("Missing the required parameter `managed_service_id` when calling `get_jobserver_server_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'managed_service_id' in params:
            path_params['managedServiceId'] = params['managed_service_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/spark/configuration/server/{managedServiceId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_jobserver_server_configuration_definition(self, **kwargs):  # noqa: E501
        """Get Jobserver's Server configuration definition.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_jobserver_server_configuration_definition(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_jobserver_server_configuration_definition_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_jobserver_server_configuration_definition_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_jobserver_server_configuration_definition_with_http_info(self, **kwargs):  # noqa: E501
        """Get Jobserver's Server configuration definition.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_jobserver_server_configuration_definition_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_jobserver_server_configuration_definition" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/spark/configuration/server/definition', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def overwrite_jobserver_server_configuration(self, managed_service_id, **kwargs):  # noqa: E501
        """Overwrite Jobserver's JVM configuration. Requires super role.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.overwrite_jobserver_server_configuration(managed_service_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str managed_service_id: (required)
        :param JobserverServerConfiguration body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.overwrite_jobserver_server_configuration_with_http_info(managed_service_id, **kwargs)  # noqa: E501
        else:
            (data) = self.overwrite_jobserver_server_configuration_with_http_info(managed_service_id, **kwargs)  # noqa: E501
            return data

    def overwrite_jobserver_server_configuration_with_http_info(self, managed_service_id, **kwargs):  # noqa: E501
        """Overwrite Jobserver's JVM configuration. Requires super role.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.overwrite_jobserver_server_configuration_with_http_info(managed_service_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str managed_service_id: (required)
        :param JobserverServerConfiguration body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['managed_service_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method overwrite_jobserver_server_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'managed_service_id' is set
        if ('managed_service_id' not in params or
                params['managed_service_id'] is None):
            raise ValueError("Missing the required parameter `managed_service_id` when calling `overwrite_jobserver_server_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'managed_service_id' in params:
            path_params['managedServiceId'] = params['managed_service_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/spark/configuration/server/{managedServiceId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def restore_default_jobserver_context_jvm_configuration(self, managed_service_id, **kwargs):  # noqa: E501
        """Restore Jobserver's Monitoring JVM configuration to default. Requires super role.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restore_default_jobserver_context_jvm_configuration(managed_service_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str managed_service_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.restore_default_jobserver_context_jvm_configuration_with_http_info(managed_service_id, **kwargs)  # noqa: E501
        else:
            (data) = self.restore_default_jobserver_context_jvm_configuration_with_http_info(managed_service_id, **kwargs)  # noqa: E501
            return data

    def restore_default_jobserver_context_jvm_configuration_with_http_info(self, managed_service_id, **kwargs):  # noqa: E501
        """Restore Jobserver's Monitoring JVM configuration to default. Requires super role.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restore_default_jobserver_context_jvm_configuration_with_http_info(managed_service_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str managed_service_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['managed_service_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method restore_default_jobserver_context_jvm_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'managed_service_id' is set
        if ('managed_service_id' not in params or
                params['managed_service_id'] is None):
            raise ValueError("Missing the required parameter `managed_service_id` when calling `restore_default_jobserver_context_jvm_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'managed_service_id' in params:
            path_params['managedServiceId'] = params['managed_service_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/spark/configuration/contextJvm/{managedServiceId}/restoreDefaults', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def restore_default_jobserver_jvm_configuration(self, managed_service_id, **kwargs):  # noqa: E501
        """Restore Jobserver's JVM configuration to default. Requires super role.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restore_default_jobserver_jvm_configuration(managed_service_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str managed_service_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.restore_default_jobserver_jvm_configuration_with_http_info(managed_service_id, **kwargs)  # noqa: E501
        else:
            (data) = self.restore_default_jobserver_jvm_configuration_with_http_info(managed_service_id, **kwargs)  # noqa: E501
            return data

    def restore_default_jobserver_jvm_configuration_with_http_info(self, managed_service_id, **kwargs):  # noqa: E501
        """Restore Jobserver's JVM configuration to default. Requires super role.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restore_default_jobserver_jvm_configuration_with_http_info(managed_service_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str managed_service_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['managed_service_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method restore_default_jobserver_jvm_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'managed_service_id' is set
        if ('managed_service_id' not in params or
                params['managed_service_id'] is None):
            raise ValueError("Missing the required parameter `managed_service_id` when calling `restore_default_jobserver_jvm_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'managed_service_id' in params:
            path_params['managedServiceId'] = params['managed_service_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/spark/configuration/jvm/{managedServiceId}/restoreDefaults', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def restore_default_jobserver_server_configuration(self, managed_service_id, **kwargs):  # noqa: E501
        """Get Jobserver's Server configuration.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restore_default_jobserver_server_configuration(managed_service_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str managed_service_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.restore_default_jobserver_server_configuration_with_http_info(managed_service_id, **kwargs)  # noqa: E501
        else:
            (data) = self.restore_default_jobserver_server_configuration_with_http_info(managed_service_id, **kwargs)  # noqa: E501
            return data

    def restore_default_jobserver_server_configuration_with_http_info(self, managed_service_id, **kwargs):  # noqa: E501
        """Get Jobserver's Server configuration.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restore_default_jobserver_server_configuration_with_http_info(managed_service_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str managed_service_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['managed_service_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method restore_default_jobserver_server_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'managed_service_id' is set
        if ('managed_service_id' not in params or
                params['managed_service_id'] is None):
            raise ValueError("Missing the required parameter `managed_service_id` when calling `restore_default_jobserver_server_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'managed_service_id' in params:
            path_params['managedServiceId'] = params['managed_service_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/spark/configuration/server/{managedServiceId}/restoreDefaults', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_jobserver_context_jvm_configuration(self, managed_service_id, **kwargs):  # noqa: E501
        """Update Jobserver's Monitoring JVM configuration. Requires super role.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_jobserver_context_jvm_configuration(managed_service_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str managed_service_id: (required)
        :param JvmConfiguration body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_jobserver_context_jvm_configuration_with_http_info(managed_service_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_jobserver_context_jvm_configuration_with_http_info(managed_service_id, **kwargs)  # noqa: E501
            return data

    def update_jobserver_context_jvm_configuration_with_http_info(self, managed_service_id, **kwargs):  # noqa: E501
        """Update Jobserver's Monitoring JVM configuration. Requires super role.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_jobserver_context_jvm_configuration_with_http_info(managed_service_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str managed_service_id: (required)
        :param JvmConfiguration body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['managed_service_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_jobserver_context_jvm_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'managed_service_id' is set
        if ('managed_service_id' not in params or
                params['managed_service_id'] is None):
            raise ValueError("Missing the required parameter `managed_service_id` when calling `update_jobserver_context_jvm_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'managed_service_id' in params:
            path_params['managedServiceId'] = params['managed_service_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/spark/configuration/contextJvm/{managedServiceId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_jobserver_context_jvm_with_json(self, managed_service_id, **kwargs):  # noqa: E501
        """Update Jobserver's Monitoring JVM configuration with JSON. Requires super role.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_jobserver_context_jvm_with_json(managed_service_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str managed_service_id: (required)
        :param str body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_jobserver_context_jvm_with_json_with_http_info(managed_service_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_jobserver_context_jvm_with_json_with_http_info(managed_service_id, **kwargs)  # noqa: E501
            return data

    def update_jobserver_context_jvm_with_json_with_http_info(self, managed_service_id, **kwargs):  # noqa: E501
        """Update Jobserver's Monitoring JVM configuration with JSON. Requires super role.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_jobserver_context_jvm_with_json_with_http_info(managed_service_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str managed_service_id: (required)
        :param str body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['managed_service_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_jobserver_context_jvm_with_json" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'managed_service_id' is set
        if ('managed_service_id' not in params or
                params['managed_service_id'] is None):
            raise ValueError("Missing the required parameter `managed_service_id` when calling `update_jobserver_context_jvm_with_json`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'managed_service_id' in params:
            path_params['managedServiceId'] = params['managed_service_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/spark/configuration/contextJvm/{managedServiceId}/json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_jobserver_jvm_configuration(self, managed_service_id, **kwargs):  # noqa: E501
        """Update Jobserver's JVM configuration. Requires super role.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_jobserver_jvm_configuration(managed_service_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str managed_service_id: (required)
        :param JvmConfiguration body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_jobserver_jvm_configuration_with_http_info(managed_service_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_jobserver_jvm_configuration_with_http_info(managed_service_id, **kwargs)  # noqa: E501
            return data

    def update_jobserver_jvm_configuration_with_http_info(self, managed_service_id, **kwargs):  # noqa: E501
        """Update Jobserver's JVM configuration. Requires super role.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_jobserver_jvm_configuration_with_http_info(managed_service_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str managed_service_id: (required)
        :param JvmConfiguration body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['managed_service_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_jobserver_jvm_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'managed_service_id' is set
        if ('managed_service_id' not in params or
                params['managed_service_id'] is None):
            raise ValueError("Missing the required parameter `managed_service_id` when calling `update_jobserver_jvm_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'managed_service_id' in params:
            path_params['managedServiceId'] = params['managed_service_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/spark/configuration/jvm/{managedServiceId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_jobserver_jvm_with_json(self, managed_service_id, **kwargs):  # noqa: E501
        """Update Jobserver's JVM configuration with JSON. Requires super role.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_jobserver_jvm_with_json(managed_service_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str managed_service_id: (required)
        :param str body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_jobserver_jvm_with_json_with_http_info(managed_service_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_jobserver_jvm_with_json_with_http_info(managed_service_id, **kwargs)  # noqa: E501
            return data

    def update_jobserver_jvm_with_json_with_http_info(self, managed_service_id, **kwargs):  # noqa: E501
        """Update Jobserver's JVM configuration with JSON. Requires super role.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_jobserver_jvm_with_json_with_http_info(managed_service_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str managed_service_id: (required)
        :param str body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['managed_service_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_jobserver_jvm_with_json" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'managed_service_id' is set
        if ('managed_service_id' not in params or
                params['managed_service_id'] is None):
            raise ValueError("Missing the required parameter `managed_service_id` when calling `update_jobserver_jvm_with_json`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'managed_service_id' in params:
            path_params['managedServiceId'] = params['managed_service_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/spark/configuration/jvm/{managedServiceId}/json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_jobserver_server_configuration_with_json(self, managed_service_id, **kwargs):  # noqa: E501
        """Overwrite Jobserver's JVM configuration. Requires super role.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_jobserver_server_configuration_with_json(managed_service_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str managed_service_id: (required)
        :param str body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_jobserver_server_configuration_with_json_with_http_info(managed_service_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_jobserver_server_configuration_with_json_with_http_info(managed_service_id, **kwargs)  # noqa: E501
            return data

    def update_jobserver_server_configuration_with_json_with_http_info(self, managed_service_id, **kwargs):  # noqa: E501
        """Overwrite Jobserver's JVM configuration. Requires super role.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_jobserver_server_configuration_with_json_with_http_info(managed_service_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str managed_service_id: (required)
        :param str body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['managed_service_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_jobserver_server_configuration_with_json" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'managed_service_id' is set
        if ('managed_service_id' not in params or
                params['managed_service_id'] is None):
            raise ValueError("Missing the required parameter `managed_service_id` when calling `update_jobserver_server_configuration_with_json`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'managed_service_id' in params:
            path_params['managedServiceId'] = params['managed_service_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/spark/configuration/server/{managedServiceId}/json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

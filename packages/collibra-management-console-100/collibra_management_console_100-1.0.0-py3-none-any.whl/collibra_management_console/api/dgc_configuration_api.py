# coding: utf-8

"""
    Collibra Management Console

    Collibra Management Console public REST API \\n Please ensure that cookies are not present within the API request. Including cookies within the call will cause 403 error.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from collibra_management_console.api_client import ApiClient


class DgcConfigurationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_application_server_configuration1(self, node_id, **kwargs):  # noqa: E501
        """Get DGC's Application Server configuration.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_application_server_configuration1(node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str node_id: (required)
        :return: ApplicationServerConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_application_server_configuration1_with_http_info(node_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_application_server_configuration1_with_http_info(node_id, **kwargs)  # noqa: E501
            return data

    def get_application_server_configuration1_with_http_info(self, node_id, **kwargs):  # noqa: E501
        """Get DGC's Application Server configuration.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_application_server_configuration1_with_http_info(node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str node_id: (required)
        :return: ApplicationServerConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['node_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_application_server_configuration1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'node_id' is set
        if ('node_id' not in params or
                params['node_id'] is None):
            raise ValueError("Missing the required parameter `node_id` when calling `get_application_server_configuration1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'node_id' in params:
            path_params['nodeId'] = params['node_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dgc/configuration/applicationServer/{nodeId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApplicationServerConfiguration',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_jvm_configuration(self, managed_service_id, **kwargs):  # noqa: E501
        """Get DGC's JVM configuration. Requires super role.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_jvm_configuration(managed_service_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str managed_service_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_jvm_configuration_with_http_info(managed_service_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_jvm_configuration_with_http_info(managed_service_id, **kwargs)  # noqa: E501
            return data

    def get_jvm_configuration_with_http_info(self, managed_service_id, **kwargs):  # noqa: E501
        """Get DGC's JVM configuration. Requires super role.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_jvm_configuration_with_http_info(managed_service_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str managed_service_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['managed_service_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_jvm_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'managed_service_id' is set
        if ('managed_service_id' not in params or
                params['managed_service_id'] is None):
            raise ValueError("Missing the required parameter `managed_service_id` when calling `get_jvm_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'managed_service_id' in params:
            path_params['managedServiceId'] = params['managed_service_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dgc/configuration/jvm/{managedServiceId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def restore_default_application_server_configuration1(self, node_id, **kwargs):  # noqa: E501
        """Restore DGC's Application Server configuration to default. Requires super role.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restore_default_application_server_configuration1(node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str node_id: (required)
        :return: ApplicationServerConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.restore_default_application_server_configuration1_with_http_info(node_id, **kwargs)  # noqa: E501
        else:
            (data) = self.restore_default_application_server_configuration1_with_http_info(node_id, **kwargs)  # noqa: E501
            return data

    def restore_default_application_server_configuration1_with_http_info(self, node_id, **kwargs):  # noqa: E501
        """Restore DGC's Application Server configuration to default. Requires super role.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restore_default_application_server_configuration1_with_http_info(node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str node_id: (required)
        :return: ApplicationServerConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['node_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method restore_default_application_server_configuration1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'node_id' is set
        if ('node_id' not in params or
                params['node_id'] is None):
            raise ValueError("Missing the required parameter `node_id` when calling `restore_default_application_server_configuration1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'node_id' in params:
            path_params['nodeId'] = params['node_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dgc/configuration/applicationServer/{nodeId}/restoreDefaults', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApplicationServerConfiguration',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def restore_default_jvm_configuration(self, managed_service_id, **kwargs):  # noqa: E501
        """Restore DGC's JVM configuration to default  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restore_default_jvm_configuration(managed_service_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str managed_service_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.restore_default_jvm_configuration_with_http_info(managed_service_id, **kwargs)  # noqa: E501
        else:
            (data) = self.restore_default_jvm_configuration_with_http_info(managed_service_id, **kwargs)  # noqa: E501
            return data

    def restore_default_jvm_configuration_with_http_info(self, managed_service_id, **kwargs):  # noqa: E501
        """Restore DGC's JVM configuration to default  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restore_default_jvm_configuration_with_http_info(managed_service_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str managed_service_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['managed_service_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method restore_default_jvm_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'managed_service_id' is set
        if ('managed_service_id' not in params or
                params['managed_service_id'] is None):
            raise ValueError("Missing the required parameter `managed_service_id` when calling `restore_default_jvm_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'managed_service_id' in params:
            path_params['managedServiceId'] = params['managed_service_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dgc/configuration/jvm/{managedServiceId}/restoreDefaults', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_application_server_configuration1(self, node_id, **kwargs):  # noqa: E501
        """Update DGC's Application Server configuration.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_application_server_configuration1(node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str node_id: (required)
        :param ApplicationServerConfiguration body:
        :return: ApplicationServerConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_application_server_configuration1_with_http_info(node_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_application_server_configuration1_with_http_info(node_id, **kwargs)  # noqa: E501
            return data

    def update_application_server_configuration1_with_http_info(self, node_id, **kwargs):  # noqa: E501
        """Update DGC's Application Server configuration.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_application_server_configuration1_with_http_info(node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str node_id: (required)
        :param ApplicationServerConfiguration body:
        :return: ApplicationServerConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['node_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_application_server_configuration1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'node_id' is set
        if ('node_id' not in params or
                params['node_id'] is None):
            raise ValueError("Missing the required parameter `node_id` when calling `update_application_server_configuration1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'node_id' in params:
            path_params['nodeId'] = params['node_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dgc/configuration/applicationServer/{nodeId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApplicationServerConfiguration',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_application_server_configuration_with_json1(self, node_id, **kwargs):  # noqa: E501
        """Update DGC's Application Server configuration with JSON.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_application_server_configuration_with_json1(node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str node_id: (required)
        :param str body:
        :return: ApplicationServerConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_application_server_configuration_with_json1_with_http_info(node_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_application_server_configuration_with_json1_with_http_info(node_id, **kwargs)  # noqa: E501
            return data

    def update_application_server_configuration_with_json1_with_http_info(self, node_id, **kwargs):  # noqa: E501
        """Update DGC's Application Server configuration with JSON.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_application_server_configuration_with_json1_with_http_info(node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str node_id: (required)
        :param str body:
        :return: ApplicationServerConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['node_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_application_server_configuration_with_json1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'node_id' is set
        if ('node_id' not in params or
                params['node_id'] is None):
            raise ValueError("Missing the required parameter `node_id` when calling `update_application_server_configuration_with_json1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'node_id' in params:
            path_params['nodeId'] = params['node_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dgc/configuration/applicationServer/{nodeId}/json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApplicationServerConfiguration',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_jvm_configuration(self, managed_service_id, **kwargs):  # noqa: E501
        """Update DGC's JVM configuration. Requires super role.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_jvm_configuration(managed_service_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str managed_service_id: (required)
        :param JvmConfiguration body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_jvm_configuration_with_http_info(managed_service_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_jvm_configuration_with_http_info(managed_service_id, **kwargs)  # noqa: E501
            return data

    def update_jvm_configuration_with_http_info(self, managed_service_id, **kwargs):  # noqa: E501
        """Update DGC's JVM configuration. Requires super role.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_jvm_configuration_with_http_info(managed_service_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str managed_service_id: (required)
        :param JvmConfiguration body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['managed_service_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_jvm_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'managed_service_id' is set
        if ('managed_service_id' not in params or
                params['managed_service_id'] is None):
            raise ValueError("Missing the required parameter `managed_service_id` when calling `update_jvm_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'managed_service_id' in params:
            path_params['managedServiceId'] = params['managed_service_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dgc/configuration/jvm/{managedServiceId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_jvm_configuration_with_json(self, managed_service_id, **kwargs):  # noqa: E501
        """Update DGC's JVM configuration with JSON. Requires super role.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_jvm_configuration_with_json(managed_service_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str managed_service_id: (required)
        :param str body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_jvm_configuration_with_json_with_http_info(managed_service_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_jvm_configuration_with_json_with_http_info(managed_service_id, **kwargs)  # noqa: E501
            return data

    def update_jvm_configuration_with_json_with_http_info(self, managed_service_id, **kwargs):  # noqa: E501
        """Update DGC's JVM configuration with JSON. Requires super role.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_jvm_configuration_with_json_with_http_info(managed_service_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str managed_service_id: (required)
        :param str body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['managed_service_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_jvm_configuration_with_json" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'managed_service_id' is set
        if ('managed_service_id' not in params or
                params['managed_service_id'] is None):
            raise ValueError("Missing the required parameter `managed_service_id` when calling `update_jvm_configuration_with_json`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'managed_service_id' in params:
            path_params['managedServiceId'] = params['managed_service_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dgc/configuration/jvm/{managedServiceId}/json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

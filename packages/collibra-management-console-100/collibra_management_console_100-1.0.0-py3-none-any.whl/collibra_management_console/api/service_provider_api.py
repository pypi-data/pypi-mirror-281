# coding: utf-8

"""
    Collibra Management Console

    Collibra Management Console public REST API \\n Please ensure that cookies are not present within the API request. Including cookies within the call will cause 403 error.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from collibra_management_console.api_client import ApiClient


class ServiceProviderApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_slave_to_repository_cluster(self, service_provider_id, managed_service_id, **kwargs):  # noqa: E501
        """Add a slave repository to a repository cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_slave_to_repository_cluster(service_provider_id, managed_service_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_provider_id: The id of the target cluster (required)
        :param str managed_service_id: The id of the repository managed service (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_slave_to_repository_cluster_with_http_info(service_provider_id, managed_service_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_slave_to_repository_cluster_with_http_info(service_provider_id, managed_service_id, **kwargs)  # noqa: E501
            return data

    def add_slave_to_repository_cluster_with_http_info(self, service_provider_id, managed_service_id, **kwargs):  # noqa: E501
        """Add a slave repository to a repository cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_slave_to_repository_cluster_with_http_info(service_provider_id, managed_service_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_provider_id: The id of the target cluster (required)
        :param str managed_service_id: The id of the repository managed service (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_provider_id', 'managed_service_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_slave_to_repository_cluster" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_provider_id' is set
        if ('service_provider_id' not in params or
                params['service_provider_id'] is None):
            raise ValueError("Missing the required parameter `service_provider_id` when calling `add_slave_to_repository_cluster`")  # noqa: E501
        # verify the required parameter 'managed_service_id' is set
        if ('managed_service_id' not in params or
                params['managed_service_id'] is None):
            raise ValueError("Missing the required parameter `managed_service_id` when calling `add_slave_to_repository_cluster`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_provider_id' in params:
            path_params['serviceProviderId'] = params['service_provider_id']  # noqa: E501
        if 'managed_service_id' in params:
            path_params['managedServiceId'] = params['managed_service_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/serviceProvider/repositorycluster/{serviceProviderId}/addSlave/{managedServiceId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_repository_cluster(self, **kwargs):  # noqa: E501
        """Create a new repository cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository_cluster(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: The name of the cluster to create
        :return: ServiceProviderModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_repository_cluster_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_repository_cluster_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_repository_cluster_with_http_info(self, **kwargs):  # noqa: E501
        """Create a new repository cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository_cluster_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: The name of the cluster to create
        :return: ServiceProviderModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_repository_cluster" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/serviceProvider/repositorycluster/create', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ServiceProviderModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_all4(self, **kwargs):  # noqa: E501
        """List all service providers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_all4(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ServiceProviderModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.find_all4_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.find_all4_with_http_info(**kwargs)  # noqa: E501
            return data

    def find_all4_with_http_info(self, **kwargs):  # noqa: E501
        """List all service providers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_all4_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ServiceProviderModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_all4" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/serviceProvider', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ServiceProviderModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_by_id5(self, service_provider_id, **kwargs):  # noqa: E501
        """Get a service provider by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_by_id5(service_provider_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_provider_id: The ID of the service provider (required)
        :return: ServiceProviderModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_by_id5_with_http_info(service_provider_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_by_id5_with_http_info(service_provider_id, **kwargs)  # noqa: E501
            return data

    def get_by_id5_with_http_info(self, service_provider_id, **kwargs):  # noqa: E501
        """Get a service provider by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_by_id5_with_http_info(service_provider_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_provider_id: The ID of the service provider (required)
        :return: ServiceProviderModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_provider_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_by_id5" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_provider_id' is set
        if ('service_provider_id' not in params or
                params['service_provider_id'] is None):
            raise ValueError("Missing the required parameter `service_provider_id` when calling `get_by_id5`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_provider_id' in params:
            path_params['serviceProviderId'] = params['service_provider_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/serviceProvider/{serviceProviderId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ServiceProviderModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove4(self, service_provider_id, **kwargs):  # noqa: E501
        """Delete a service provider  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove4(service_provider_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_provider_id: The id of the service provider to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove4_with_http_info(service_provider_id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove4_with_http_info(service_provider_id, **kwargs)  # noqa: E501
            return data

    def remove4_with_http_info(self, service_provider_id, **kwargs):  # noqa: E501
        """Delete a service provider  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove4_with_http_info(service_provider_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_provider_id: The id of the service provider to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_provider_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove4" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_provider_id' is set
        if ('service_provider_id' not in params or
                params['service_provider_id'] is None):
            raise ValueError("Missing the required parameter `service_provider_id` when calling `remove4`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_provider_id' in params:
            path_params['serviceProviderId'] = params['service_provider_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/serviceProvider/{serviceProviderId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_from_repository_cluster(self, service_provider_id, managed_service_id, **kwargs):  # noqa: E501
        """Remove a repository from the cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_from_repository_cluster(service_provider_id, managed_service_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_provider_id: The id of the target cluster (required)
        :param str managed_service_id: The id of the repository managed service (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_from_repository_cluster_with_http_info(service_provider_id, managed_service_id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_from_repository_cluster_with_http_info(service_provider_id, managed_service_id, **kwargs)  # noqa: E501
            return data

    def remove_from_repository_cluster_with_http_info(self, service_provider_id, managed_service_id, **kwargs):  # noqa: E501
        """Remove a repository from the cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_from_repository_cluster_with_http_info(service_provider_id, managed_service_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_provider_id: The id of the target cluster (required)
        :param str managed_service_id: The id of the repository managed service (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_provider_id', 'managed_service_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_from_repository_cluster" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_provider_id' is set
        if ('service_provider_id' not in params or
                params['service_provider_id'] is None):
            raise ValueError("Missing the required parameter `service_provider_id` when calling `remove_from_repository_cluster`")  # noqa: E501
        # verify the required parameter 'managed_service_id' is set
        if ('managed_service_id' not in params or
                params['managed_service_id'] is None):
            raise ValueError("Missing the required parameter `managed_service_id` when calling `remove_from_repository_cluster`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_provider_id' in params:
            path_params['serviceProviderId'] = params['service_provider_id']  # noqa: E501
        if 'managed_service_id' in params:
            path_params['managedServiceId'] = params['managed_service_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/serviceProvider/repositorycluster/{serviceProviderId}/remove/{managedServiceId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_master_in_repository_cluster(self, service_provider_id, managed_service_id, **kwargs):  # noqa: E501
        """Set the master repository of a repository cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_master_in_repository_cluster(service_provider_id, managed_service_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_provider_id: The id of the target cluster (required)
        :param str managed_service_id: The id of the repository managed service (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_master_in_repository_cluster_with_http_info(service_provider_id, managed_service_id, **kwargs)  # noqa: E501
        else:
            (data) = self.set_master_in_repository_cluster_with_http_info(service_provider_id, managed_service_id, **kwargs)  # noqa: E501
            return data

    def set_master_in_repository_cluster_with_http_info(self, service_provider_id, managed_service_id, **kwargs):  # noqa: E501
        """Set the master repository of a repository cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_master_in_repository_cluster_with_http_info(service_provider_id, managed_service_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_provider_id: The id of the target cluster (required)
        :param str managed_service_id: The id of the repository managed service (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_provider_id', 'managed_service_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_master_in_repository_cluster" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_provider_id' is set
        if ('service_provider_id' not in params or
                params['service_provider_id'] is None):
            raise ValueError("Missing the required parameter `service_provider_id` when calling `set_master_in_repository_cluster`")  # noqa: E501
        # verify the required parameter 'managed_service_id' is set
        if ('managed_service_id' not in params or
                params['managed_service_id'] is None):
            raise ValueError("Missing the required parameter `managed_service_id` when calling `set_master_in_repository_cluster`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_provider_id' in params:
            path_params['serviceProviderId'] = params['service_provider_id']  # noqa: E501
        if 'managed_service_id' in params:
            path_params['managedServiceId'] = params['managed_service_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/serviceProvider/repositorycluster/{serviceProviderId}/setMaster/{managedServiceId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def start2(self, service_provider_id, **kwargs):  # noqa: E501
        """Start a service provider  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start2(service_provider_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_provider_id: The ID of the service provider to start (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.start2_with_http_info(service_provider_id, **kwargs)  # noqa: E501
        else:
            (data) = self.start2_with_http_info(service_provider_id, **kwargs)  # noqa: E501
            return data

    def start2_with_http_info(self, service_provider_id, **kwargs):  # noqa: E501
        """Start a service provider  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start2_with_http_info(service_provider_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_provider_id: The ID of the service provider to start (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_provider_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_provider_id' is set
        if ('service_provider_id' not in params or
                params['service_provider_id'] is None):
            raise ValueError("Missing the required parameter `service_provider_id` when calling `start2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_provider_id' in params:
            path_params['serviceProviderId'] = params['service_provider_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/serviceProvider/serviceProvider/{serviceProviderId}/start', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def stop2(self, service_provider_id, **kwargs):  # noqa: E501
        """Stop a service provider  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stop2(service_provider_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_provider_id: The ID of the service provider to stop (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.stop2_with_http_info(service_provider_id, **kwargs)  # noqa: E501
        else:
            (data) = self.stop2_with_http_info(service_provider_id, **kwargs)  # noqa: E501
            return data

    def stop2_with_http_info(self, service_provider_id, **kwargs):  # noqa: E501
        """Stop a service provider  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stop2_with_http_info(service_provider_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_provider_id: The ID of the service provider to stop (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_provider_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stop2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_provider_id' is set
        if ('service_provider_id' not in params or
                params['service_provider_id'] is None):
            raise ValueError("Missing the required parameter `service_provider_id` when calling `stop2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_provider_id' in params:
            path_params['serviceProviderId'] = params['service_provider_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/serviceProvider/serviceProvider/{serviceProviderId}/stop', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

# coding: utf-8

"""
    Collibra Management Console

    Collibra Management Console public REST API \\n Please ensure that cookies are not present within the API request. Including cookies within the call will cause 403 error.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from collibra_management_console.api_client import ApiClient


class DgcLicenseApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def update_license(self, environment_id, **kwargs):  # noqa: E501
        """Update the license by providing the content of the new license file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_license(environment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str environment_id: The ID of the target environment (required)
        :param str body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_license_with_http_info(environment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_license_with_http_info(environment_id, **kwargs)  # noqa: E501
            return data

    def update_license_with_http_info(self, environment_id, **kwargs):  # noqa: E501
        """Update the license by providing the content of the new license file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_license_with_http_info(environment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str environment_id: The ID of the target environment (required)
        :param str body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['environment_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_license" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'environment_id' is set
        if ('environment_id' not in params or
                params['environment_id'] is None):
            raise ValueError("Missing the required parameter `environment_id` when calling `update_license`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'environment_id' in params:
            path_params['environmentId'] = params['environment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/license/{environmentId}/licenseText', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_license1(self, body_parts, content_disposition, entity, fields, headers, media_type, message_body_workers, parameterized_headers, parent, providers, environment_id, **kwargs):  # noqa: E501
        """Update the license by uploading a new license file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_license1(body_parts, content_disposition, entity, fields, headers, media_type, message_body_workers, parameterized_headers, parent, providers, environment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[BodyPart] body_parts: (required)
        :param ContentDisposition content_disposition: (required)
        :param object entity: (required)
        :param dict(str, list[FormDataBodyPart]) fields: (required)
        :param BodyPartHeaders headers: (required)
        :param MediaType media_type: (required)
        :param MessageBodyWorkers message_body_workers: (required)
        :param BodyPartParameterizedHeaders parameterized_headers: (required)
        :param MultiPart parent: (required)
        :param Providers providers: (required)
        :param str environment_id: The ID of the target environment (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_license1_with_http_info(body_parts, content_disposition, entity, fields, headers, media_type, message_body_workers, parameterized_headers, parent, providers, environment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_license1_with_http_info(body_parts, content_disposition, entity, fields, headers, media_type, message_body_workers, parameterized_headers, parent, providers, environment_id, **kwargs)  # noqa: E501
            return data

    def update_license1_with_http_info(self, body_parts, content_disposition, entity, fields, headers, media_type, message_body_workers, parameterized_headers, parent, providers, environment_id, **kwargs):  # noqa: E501
        """Update the license by uploading a new license file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_license1_with_http_info(body_parts, content_disposition, entity, fields, headers, media_type, message_body_workers, parameterized_headers, parent, providers, environment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[BodyPart] body_parts: (required)
        :param ContentDisposition content_disposition: (required)
        :param object entity: (required)
        :param dict(str, list[FormDataBodyPart]) fields: (required)
        :param BodyPartHeaders headers: (required)
        :param MediaType media_type: (required)
        :param MessageBodyWorkers message_body_workers: (required)
        :param BodyPartParameterizedHeaders parameterized_headers: (required)
        :param MultiPart parent: (required)
        :param Providers providers: (required)
        :param str environment_id: The ID of the target environment (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body_parts', 'content_disposition', 'entity', 'fields', 'headers', 'media_type', 'message_body_workers', 'parameterized_headers', 'parent', 'providers', 'environment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_license1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body_parts' is set
        if ('body_parts' not in params or
                params['body_parts'] is None):
            raise ValueError("Missing the required parameter `body_parts` when calling `update_license1`")  # noqa: E501
        # verify the required parameter 'content_disposition' is set
        if ('content_disposition' not in params or
                params['content_disposition'] is None):
            raise ValueError("Missing the required parameter `content_disposition` when calling `update_license1`")  # noqa: E501
        # verify the required parameter 'entity' is set
        if ('entity' not in params or
                params['entity'] is None):
            raise ValueError("Missing the required parameter `entity` when calling `update_license1`")  # noqa: E501
        # verify the required parameter 'fields' is set
        if ('fields' not in params or
                params['fields'] is None):
            raise ValueError("Missing the required parameter `fields` when calling `update_license1`")  # noqa: E501
        # verify the required parameter 'headers' is set
        if ('headers' not in params or
                params['headers'] is None):
            raise ValueError("Missing the required parameter `headers` when calling `update_license1`")  # noqa: E501
        # verify the required parameter 'media_type' is set
        if ('media_type' not in params or
                params['media_type'] is None):
            raise ValueError("Missing the required parameter `media_type` when calling `update_license1`")  # noqa: E501
        # verify the required parameter 'message_body_workers' is set
        if ('message_body_workers' not in params or
                params['message_body_workers'] is None):
            raise ValueError("Missing the required parameter `message_body_workers` when calling `update_license1`")  # noqa: E501
        # verify the required parameter 'parameterized_headers' is set
        if ('parameterized_headers' not in params or
                params['parameterized_headers'] is None):
            raise ValueError("Missing the required parameter `parameterized_headers` when calling `update_license1`")  # noqa: E501
        # verify the required parameter 'parent' is set
        if ('parent' not in params or
                params['parent'] is None):
            raise ValueError("Missing the required parameter `parent` when calling `update_license1`")  # noqa: E501
        # verify the required parameter 'providers' is set
        if ('providers' not in params or
                params['providers'] is None):
            raise ValueError("Missing the required parameter `providers` when calling `update_license1`")  # noqa: E501
        # verify the required parameter 'environment_id' is set
        if ('environment_id' not in params or
                params['environment_id'] is None):
            raise ValueError("Missing the required parameter `environment_id` when calling `update_license1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'environment_id' in params:
            path_params['environmentId'] = params['environment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'body_parts' in params:
            form_params.append(('bodyParts', params['body_parts']))  # noqa: E501
            collection_formats['bodyParts'] = 'multi'  # noqa: E501
        if 'content_disposition' in params:
            form_params.append(('contentDisposition', params['content_disposition']))  # noqa: E501
        if 'entity' in params:
            form_params.append(('entity', params['entity']))  # noqa: E501
        if 'fields' in params:
            form_params.append(('fields', params['fields']))  # noqa: E501
        if 'headers' in params:
            form_params.append(('headers', params['headers']))  # noqa: E501
        if 'media_type' in params:
            form_params.append(('mediaType', params['media_type']))  # noqa: E501
        if 'message_body_workers' in params:
            form_params.append(('messageBodyWorkers', params['message_body_workers']))  # noqa: E501
        if 'parameterized_headers' in params:
            form_params.append(('parameterizedHeaders', params['parameterized_headers']))  # noqa: E501
        if 'parent' in params:
            form_params.append(('parent', params['parent']))  # noqa: E501
        if 'providers' in params:
            form_params.append(('providers', params['providers']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/license/{environmentId}/licenseFile', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

{% set create_model = model_name+'Creatable' -%}
{% set edit_model = model_name+'Editable' -%}
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

{% if model_fields_type_map -%}
#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Deserialize, Serialize)]
#[sea_orm(table_name = "{{ lower_models_name }}")]
pub struct Model {
    #[sea_orm(primary_key)]
{%- for field,field_type in model_fields_type_map.items() %}
    pub {{ field }}: {{ cls.map_rust_type(field_type) }}{% if not loop.last %},{% endif %}
{%- endfor %}
}
{% endif %}


#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Debug, Serialize, Deserialize)]
pub struct {{ model_name }}Creatable {
{%- for field,field_type in model_create_fields_type_map.items() %}
    pub {{ field }}: {{ cls.map_rust_type(field_type) }},
{%- endfor %}
}

#[derive(Debug, Serialize, Deserialize)]
pub struct {{ model_name }}Editable {
{%- for field,field_type in model_edit_fields_type_map.items() %}
    pub {{ field }}: {{ cls.map_rust_type(field_type) }},
{%- endfor %}
}

#[derive(Debug, Serialize, Deserialize)]
pub(crate) struct {{ model_name }}Filter {
{%- for field,field_type in list_filter_fields_type_map.items() %}
    pub {{ field }}: Option<{{ cls.map_rust_type(field_type) }}>,
{%- endfor %}
}
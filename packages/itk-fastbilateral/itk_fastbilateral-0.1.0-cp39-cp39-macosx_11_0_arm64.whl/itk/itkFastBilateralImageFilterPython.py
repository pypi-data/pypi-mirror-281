# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _FastBilateralPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkFastBilateralImageFilterPython
else:
    import _itkFastBilateralImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.vnl_matrixPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkPointPython
import itk.itkCovariantVectorPython
import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython

def itkFastBilateralImageFilterID2ID2_New():
    return itkFastBilateralImageFilterID2ID2.New()

class itkFastBilateralImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""Proxy of C++ itkFastBilateralImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkFastBilateralImageFilterID2ID2_Pointer"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkFastBilateralImageFilterID2ID2_Pointer"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterID2ID2_Clone(self)

    def GetDomainSigma(self):
        r"""GetDomainSigma(self) -> itkFixedArrayD2"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterID2ID2_GetDomainSigma(self)

    def GetRangeSigma(self):
        r"""GetRangeSigma(self) -> double"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterID2ID2_GetRangeSigma(self)

    def SetRangeSigma(self, _arg):
        r"""
        SetRangeSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterID2ID2_SetRangeSigma(self, _arg)

    def SetDomainSigma(self, *args):
        r"""
        SetDomainSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD2

        SetDomainSigma(self, v)

        Parameters
        ----------
        v: double const

        """
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterID2ID2_SetDomainSigma(self, *args)
    __swig_destroy__ = _itkFastBilateralImageFilterPython.delete_itkFastBilateralImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFastBilateralImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkFastBilateralImageFilterID2ID2

        Create a new object of the class itkFastBilateralImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFastBilateralImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFastBilateralImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFastBilateralImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFastBilateralImageFilterID2ID2 in _itkFastBilateralImageFilterPython:
_itkFastBilateralImageFilterPython.itkFastBilateralImageFilterID2ID2_swigregister(itkFastBilateralImageFilterID2ID2)

def itkFastBilateralImageFilterID3ID3_New():
    return itkFastBilateralImageFilterID3ID3.New()

class itkFastBilateralImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""Proxy of C++ itkFastBilateralImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkFastBilateralImageFilterID3ID3_Pointer"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkFastBilateralImageFilterID3ID3_Pointer"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterID3ID3_Clone(self)

    def GetDomainSigma(self):
        r"""GetDomainSigma(self) -> itkFixedArrayD3"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterID3ID3_GetDomainSigma(self)

    def GetRangeSigma(self):
        r"""GetRangeSigma(self) -> double"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterID3ID3_GetRangeSigma(self)

    def SetRangeSigma(self, _arg):
        r"""
        SetRangeSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterID3ID3_SetRangeSigma(self, _arg)

    def SetDomainSigma(self, *args):
        r"""
        SetDomainSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD3

        SetDomainSigma(self, v)

        Parameters
        ----------
        v: double const

        """
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterID3ID3_SetDomainSigma(self, *args)
    __swig_destroy__ = _itkFastBilateralImageFilterPython.delete_itkFastBilateralImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFastBilateralImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkFastBilateralImageFilterID3ID3

        Create a new object of the class itkFastBilateralImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFastBilateralImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFastBilateralImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFastBilateralImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFastBilateralImageFilterID3ID3 in _itkFastBilateralImageFilterPython:
_itkFastBilateralImageFilterPython.itkFastBilateralImageFilterID3ID3_swigregister(itkFastBilateralImageFilterID3ID3)

def itkFastBilateralImageFilterID4ID4_New():
    return itkFastBilateralImageFilterID4ID4.New()

class itkFastBilateralImageFilterID4ID4(itk.itkImageToImageFilterAPython.itkImageToImageFilterID4ID4):
    r"""Proxy of C++ itkFastBilateralImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkFastBilateralImageFilterID4ID4_Pointer"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkFastBilateralImageFilterID4ID4_Pointer"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterID4ID4_Clone(self)

    def GetDomainSigma(self):
        r"""GetDomainSigma(self) -> itkFixedArrayD4"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterID4ID4_GetDomainSigma(self)

    def GetRangeSigma(self):
        r"""GetRangeSigma(self) -> double"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterID4ID4_GetRangeSigma(self)

    def SetRangeSigma(self, _arg):
        r"""
        SetRangeSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterID4ID4_SetRangeSigma(self, _arg)

    def SetDomainSigma(self, *args):
        r"""
        SetDomainSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD4

        SetDomainSigma(self, v)

        Parameters
        ----------
        v: double const

        """
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterID4ID4_SetDomainSigma(self, *args)
    __swig_destroy__ = _itkFastBilateralImageFilterPython.delete_itkFastBilateralImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFastBilateralImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkFastBilateralImageFilterID4ID4

        Create a new object of the class itkFastBilateralImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFastBilateralImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFastBilateralImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFastBilateralImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFastBilateralImageFilterID4ID4 in _itkFastBilateralImageFilterPython:
_itkFastBilateralImageFilterPython.itkFastBilateralImageFilterID4ID4_swigregister(itkFastBilateralImageFilterID4ID4)

def itkFastBilateralImageFilterIF2IF2_New():
    return itkFastBilateralImageFilterIF2IF2.New()

class itkFastBilateralImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""Proxy of C++ itkFastBilateralImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkFastBilateralImageFilterIF2IF2_Pointer"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkFastBilateralImageFilterIF2IF2_Pointer"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIF2IF2_Clone(self)

    def GetDomainSigma(self):
        r"""GetDomainSigma(self) -> itkFixedArrayD2"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIF2IF2_GetDomainSigma(self)

    def GetRangeSigma(self):
        r"""GetRangeSigma(self) -> double"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIF2IF2_GetRangeSigma(self)

    def SetRangeSigma(self, _arg):
        r"""
        SetRangeSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIF2IF2_SetRangeSigma(self, _arg)

    def SetDomainSigma(self, *args):
        r"""
        SetDomainSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD2

        SetDomainSigma(self, v)

        Parameters
        ----------
        v: double const

        """
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIF2IF2_SetDomainSigma(self, *args)
    __swig_destroy__ = _itkFastBilateralImageFilterPython.delete_itkFastBilateralImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFastBilateralImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkFastBilateralImageFilterIF2IF2

        Create a new object of the class itkFastBilateralImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFastBilateralImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFastBilateralImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFastBilateralImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFastBilateralImageFilterIF2IF2 in _itkFastBilateralImageFilterPython:
_itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIF2IF2_swigregister(itkFastBilateralImageFilterIF2IF2)

def itkFastBilateralImageFilterIF3IF3_New():
    return itkFastBilateralImageFilterIF3IF3.New()

class itkFastBilateralImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""Proxy of C++ itkFastBilateralImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkFastBilateralImageFilterIF3IF3_Pointer"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkFastBilateralImageFilterIF3IF3_Pointer"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIF3IF3_Clone(self)

    def GetDomainSigma(self):
        r"""GetDomainSigma(self) -> itkFixedArrayD3"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIF3IF3_GetDomainSigma(self)

    def GetRangeSigma(self):
        r"""GetRangeSigma(self) -> double"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIF3IF3_GetRangeSigma(self)

    def SetRangeSigma(self, _arg):
        r"""
        SetRangeSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIF3IF3_SetRangeSigma(self, _arg)

    def SetDomainSigma(self, *args):
        r"""
        SetDomainSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD3

        SetDomainSigma(self, v)

        Parameters
        ----------
        v: double const

        """
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIF3IF3_SetDomainSigma(self, *args)
    __swig_destroy__ = _itkFastBilateralImageFilterPython.delete_itkFastBilateralImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFastBilateralImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkFastBilateralImageFilterIF3IF3

        Create a new object of the class itkFastBilateralImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFastBilateralImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFastBilateralImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFastBilateralImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFastBilateralImageFilterIF3IF3 in _itkFastBilateralImageFilterPython:
_itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIF3IF3_swigregister(itkFastBilateralImageFilterIF3IF3)

def itkFastBilateralImageFilterIF4IF4_New():
    return itkFastBilateralImageFilterIF4IF4.New()

class itkFastBilateralImageFilterIF4IF4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF4IF4):
    r"""Proxy of C++ itkFastBilateralImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkFastBilateralImageFilterIF4IF4_Pointer"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkFastBilateralImageFilterIF4IF4_Pointer"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIF4IF4_Clone(self)

    def GetDomainSigma(self):
        r"""GetDomainSigma(self) -> itkFixedArrayD4"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIF4IF4_GetDomainSigma(self)

    def GetRangeSigma(self):
        r"""GetRangeSigma(self) -> double"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIF4IF4_GetRangeSigma(self)

    def SetRangeSigma(self, _arg):
        r"""
        SetRangeSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIF4IF4_SetRangeSigma(self, _arg)

    def SetDomainSigma(self, *args):
        r"""
        SetDomainSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD4

        SetDomainSigma(self, v)

        Parameters
        ----------
        v: double const

        """
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIF4IF4_SetDomainSigma(self, *args)
    __swig_destroy__ = _itkFastBilateralImageFilterPython.delete_itkFastBilateralImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFastBilateralImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkFastBilateralImageFilterIF4IF4

        Create a new object of the class itkFastBilateralImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFastBilateralImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFastBilateralImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFastBilateralImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFastBilateralImageFilterIF4IF4 in _itkFastBilateralImageFilterPython:
_itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIF4IF4_swigregister(itkFastBilateralImageFilterIF4IF4)

def itkFastBilateralImageFilterISS2ISS2_New():
    return itkFastBilateralImageFilterISS2ISS2.New()

class itkFastBilateralImageFilterISS2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""Proxy of C++ itkFastBilateralImageFilterISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkFastBilateralImageFilterISS2ISS2_Pointer"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkFastBilateralImageFilterISS2ISS2_Pointer"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterISS2ISS2_Clone(self)

    def GetDomainSigma(self):
        r"""GetDomainSigma(self) -> itkFixedArrayD2"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterISS2ISS2_GetDomainSigma(self)

    def GetRangeSigma(self):
        r"""GetRangeSigma(self) -> double"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterISS2ISS2_GetRangeSigma(self)

    def SetRangeSigma(self, _arg):
        r"""
        SetRangeSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterISS2ISS2_SetRangeSigma(self, _arg)

    def SetDomainSigma(self, *args):
        r"""
        SetDomainSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD2

        SetDomainSigma(self, v)

        Parameters
        ----------
        v: double const

        """
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterISS2ISS2_SetDomainSigma(self, *args)
    __swig_destroy__ = _itkFastBilateralImageFilterPython.delete_itkFastBilateralImageFilterISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFastBilateralImageFilterISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkFastBilateralImageFilterISS2ISS2

        Create a new object of the class itkFastBilateralImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFastBilateralImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFastBilateralImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFastBilateralImageFilterISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFastBilateralImageFilterISS2ISS2 in _itkFastBilateralImageFilterPython:
_itkFastBilateralImageFilterPython.itkFastBilateralImageFilterISS2ISS2_swigregister(itkFastBilateralImageFilterISS2ISS2)

def itkFastBilateralImageFilterISS3ISS3_New():
    return itkFastBilateralImageFilterISS3ISS3.New()

class itkFastBilateralImageFilterISS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""Proxy of C++ itkFastBilateralImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkFastBilateralImageFilterISS3ISS3_Pointer"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkFastBilateralImageFilterISS3ISS3_Pointer"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterISS3ISS3_Clone(self)

    def GetDomainSigma(self):
        r"""GetDomainSigma(self) -> itkFixedArrayD3"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterISS3ISS3_GetDomainSigma(self)

    def GetRangeSigma(self):
        r"""GetRangeSigma(self) -> double"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterISS3ISS3_GetRangeSigma(self)

    def SetRangeSigma(self, _arg):
        r"""
        SetRangeSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterISS3ISS3_SetRangeSigma(self, _arg)

    def SetDomainSigma(self, *args):
        r"""
        SetDomainSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD3

        SetDomainSigma(self, v)

        Parameters
        ----------
        v: double const

        """
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterISS3ISS3_SetDomainSigma(self, *args)
    __swig_destroy__ = _itkFastBilateralImageFilterPython.delete_itkFastBilateralImageFilterISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFastBilateralImageFilterISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkFastBilateralImageFilterISS3ISS3

        Create a new object of the class itkFastBilateralImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFastBilateralImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFastBilateralImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFastBilateralImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFastBilateralImageFilterISS3ISS3 in _itkFastBilateralImageFilterPython:
_itkFastBilateralImageFilterPython.itkFastBilateralImageFilterISS3ISS3_swigregister(itkFastBilateralImageFilterISS3ISS3)

def itkFastBilateralImageFilterISS4ISS4_New():
    return itkFastBilateralImageFilterISS4ISS4.New()

class itkFastBilateralImageFilterISS4ISS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS4ISS4):
    r"""Proxy of C++ itkFastBilateralImageFilterISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkFastBilateralImageFilterISS4ISS4_Pointer"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkFastBilateralImageFilterISS4ISS4_Pointer"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterISS4ISS4_Clone(self)

    def GetDomainSigma(self):
        r"""GetDomainSigma(self) -> itkFixedArrayD4"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterISS4ISS4_GetDomainSigma(self)

    def GetRangeSigma(self):
        r"""GetRangeSigma(self) -> double"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterISS4ISS4_GetRangeSigma(self)

    def SetRangeSigma(self, _arg):
        r"""
        SetRangeSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterISS4ISS4_SetRangeSigma(self, _arg)

    def SetDomainSigma(self, *args):
        r"""
        SetDomainSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD4

        SetDomainSigma(self, v)

        Parameters
        ----------
        v: double const

        """
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterISS4ISS4_SetDomainSigma(self, *args)
    __swig_destroy__ = _itkFastBilateralImageFilterPython.delete_itkFastBilateralImageFilterISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFastBilateralImageFilterISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkFastBilateralImageFilterISS4ISS4

        Create a new object of the class itkFastBilateralImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFastBilateralImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFastBilateralImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFastBilateralImageFilterISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFastBilateralImageFilterISS4ISS4 in _itkFastBilateralImageFilterPython:
_itkFastBilateralImageFilterPython.itkFastBilateralImageFilterISS4ISS4_swigregister(itkFastBilateralImageFilterISS4ISS4)

def itkFastBilateralImageFilterIUC2IUC2_New():
    return itkFastBilateralImageFilterIUC2IUC2.New()

class itkFastBilateralImageFilterIUC2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""Proxy of C++ itkFastBilateralImageFilterIUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkFastBilateralImageFilterIUC2IUC2_Pointer"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIUC2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkFastBilateralImageFilterIUC2IUC2_Pointer"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIUC2IUC2_Clone(self)

    def GetDomainSigma(self):
        r"""GetDomainSigma(self) -> itkFixedArrayD2"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIUC2IUC2_GetDomainSigma(self)

    def GetRangeSigma(self):
        r"""GetRangeSigma(self) -> double"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIUC2IUC2_GetRangeSigma(self)

    def SetRangeSigma(self, _arg):
        r"""
        SetRangeSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIUC2IUC2_SetRangeSigma(self, _arg)

    def SetDomainSigma(self, *args):
        r"""
        SetDomainSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD2

        SetDomainSigma(self, v)

        Parameters
        ----------
        v: double const

        """
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIUC2IUC2_SetDomainSigma(self, *args)
    __swig_destroy__ = _itkFastBilateralImageFilterPython.delete_itkFastBilateralImageFilterIUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFastBilateralImageFilterIUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIUC2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkFastBilateralImageFilterIUC2IUC2

        Create a new object of the class itkFastBilateralImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFastBilateralImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFastBilateralImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFastBilateralImageFilterIUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFastBilateralImageFilterIUC2IUC2 in _itkFastBilateralImageFilterPython:
_itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIUC2IUC2_swigregister(itkFastBilateralImageFilterIUC2IUC2)

def itkFastBilateralImageFilterIUC3IUC3_New():
    return itkFastBilateralImageFilterIUC3IUC3.New()

class itkFastBilateralImageFilterIUC3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""Proxy of C++ itkFastBilateralImageFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkFastBilateralImageFilterIUC3IUC3_Pointer"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkFastBilateralImageFilterIUC3IUC3_Pointer"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIUC3IUC3_Clone(self)

    def GetDomainSigma(self):
        r"""GetDomainSigma(self) -> itkFixedArrayD3"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIUC3IUC3_GetDomainSigma(self)

    def GetRangeSigma(self):
        r"""GetRangeSigma(self) -> double"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIUC3IUC3_GetRangeSigma(self)

    def SetRangeSigma(self, _arg):
        r"""
        SetRangeSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIUC3IUC3_SetRangeSigma(self, _arg)

    def SetDomainSigma(self, *args):
        r"""
        SetDomainSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD3

        SetDomainSigma(self, v)

        Parameters
        ----------
        v: double const

        """
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIUC3IUC3_SetDomainSigma(self, *args)
    __swig_destroy__ = _itkFastBilateralImageFilterPython.delete_itkFastBilateralImageFilterIUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFastBilateralImageFilterIUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkFastBilateralImageFilterIUC3IUC3

        Create a new object of the class itkFastBilateralImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFastBilateralImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFastBilateralImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFastBilateralImageFilterIUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFastBilateralImageFilterIUC3IUC3 in _itkFastBilateralImageFilterPython:
_itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIUC3IUC3_swigregister(itkFastBilateralImageFilterIUC3IUC3)

def itkFastBilateralImageFilterIUC4IUC4_New():
    return itkFastBilateralImageFilterIUC4IUC4.New()

class itkFastBilateralImageFilterIUC4IUC4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUC4):
    r"""Proxy of C++ itkFastBilateralImageFilterIUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkFastBilateralImageFilterIUC4IUC4_Pointer"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIUC4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkFastBilateralImageFilterIUC4IUC4_Pointer"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIUC4IUC4_Clone(self)

    def GetDomainSigma(self):
        r"""GetDomainSigma(self) -> itkFixedArrayD4"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIUC4IUC4_GetDomainSigma(self)

    def GetRangeSigma(self):
        r"""GetRangeSigma(self) -> double"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIUC4IUC4_GetRangeSigma(self)

    def SetRangeSigma(self, _arg):
        r"""
        SetRangeSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIUC4IUC4_SetRangeSigma(self, _arg)

    def SetDomainSigma(self, *args):
        r"""
        SetDomainSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD4

        SetDomainSigma(self, v)

        Parameters
        ----------
        v: double const

        """
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIUC4IUC4_SetDomainSigma(self, *args)
    __swig_destroy__ = _itkFastBilateralImageFilterPython.delete_itkFastBilateralImageFilterIUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFastBilateralImageFilterIUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIUC4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkFastBilateralImageFilterIUC4IUC4

        Create a new object of the class itkFastBilateralImageFilterIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFastBilateralImageFilterIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFastBilateralImageFilterIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFastBilateralImageFilterIUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFastBilateralImageFilterIUC4IUC4 in _itkFastBilateralImageFilterPython:
_itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIUC4IUC4_swigregister(itkFastBilateralImageFilterIUC4IUC4)

def itkFastBilateralImageFilterIUS2IUS2_New():
    return itkFastBilateralImageFilterIUS2IUS2.New()

class itkFastBilateralImageFilterIUS2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""Proxy of C++ itkFastBilateralImageFilterIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkFastBilateralImageFilterIUS2IUS2_Pointer"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIUS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkFastBilateralImageFilterIUS2IUS2_Pointer"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIUS2IUS2_Clone(self)

    def GetDomainSigma(self):
        r"""GetDomainSigma(self) -> itkFixedArrayD2"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIUS2IUS2_GetDomainSigma(self)

    def GetRangeSigma(self):
        r"""GetRangeSigma(self) -> double"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIUS2IUS2_GetRangeSigma(self)

    def SetRangeSigma(self, _arg):
        r"""
        SetRangeSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIUS2IUS2_SetRangeSigma(self, _arg)

    def SetDomainSigma(self, *args):
        r"""
        SetDomainSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD2

        SetDomainSigma(self, v)

        Parameters
        ----------
        v: double const

        """
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIUS2IUS2_SetDomainSigma(self, *args)
    __swig_destroy__ = _itkFastBilateralImageFilterPython.delete_itkFastBilateralImageFilterIUS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFastBilateralImageFilterIUS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIUS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkFastBilateralImageFilterIUS2IUS2

        Create a new object of the class itkFastBilateralImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFastBilateralImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFastBilateralImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFastBilateralImageFilterIUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFastBilateralImageFilterIUS2IUS2 in _itkFastBilateralImageFilterPython:
_itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIUS2IUS2_swigregister(itkFastBilateralImageFilterIUS2IUS2)

def itkFastBilateralImageFilterIUS3IUS3_New():
    return itkFastBilateralImageFilterIUS3IUS3.New()

class itkFastBilateralImageFilterIUS3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""Proxy of C++ itkFastBilateralImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkFastBilateralImageFilterIUS3IUS3_Pointer"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkFastBilateralImageFilterIUS3IUS3_Pointer"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIUS3IUS3_Clone(self)

    def GetDomainSigma(self):
        r"""GetDomainSigma(self) -> itkFixedArrayD3"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIUS3IUS3_GetDomainSigma(self)

    def GetRangeSigma(self):
        r"""GetRangeSigma(self) -> double"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIUS3IUS3_GetRangeSigma(self)

    def SetRangeSigma(self, _arg):
        r"""
        SetRangeSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIUS3IUS3_SetRangeSigma(self, _arg)

    def SetDomainSigma(self, *args):
        r"""
        SetDomainSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD3

        SetDomainSigma(self, v)

        Parameters
        ----------
        v: double const

        """
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIUS3IUS3_SetDomainSigma(self, *args)
    __swig_destroy__ = _itkFastBilateralImageFilterPython.delete_itkFastBilateralImageFilterIUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFastBilateralImageFilterIUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkFastBilateralImageFilterIUS3IUS3

        Create a new object of the class itkFastBilateralImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFastBilateralImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFastBilateralImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFastBilateralImageFilterIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFastBilateralImageFilterIUS3IUS3 in _itkFastBilateralImageFilterPython:
_itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIUS3IUS3_swigregister(itkFastBilateralImageFilterIUS3IUS3)

def itkFastBilateralImageFilterIUS4IUS4_New():
    return itkFastBilateralImageFilterIUS4IUS4.New()

class itkFastBilateralImageFilterIUS4IUS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUS4):
    r"""Proxy of C++ itkFastBilateralImageFilterIUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkFastBilateralImageFilterIUS4IUS4_Pointer"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIUS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkFastBilateralImageFilterIUS4IUS4_Pointer"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIUS4IUS4_Clone(self)

    def GetDomainSigma(self):
        r"""GetDomainSigma(self) -> itkFixedArrayD4"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIUS4IUS4_GetDomainSigma(self)

    def GetRangeSigma(self):
        r"""GetRangeSigma(self) -> double"""
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIUS4IUS4_GetRangeSigma(self)

    def SetRangeSigma(self, _arg):
        r"""
        SetRangeSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIUS4IUS4_SetRangeSigma(self, _arg)

    def SetDomainSigma(self, *args):
        r"""
        SetDomainSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD4

        SetDomainSigma(self, v)

        Parameters
        ----------
        v: double const

        """
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIUS4IUS4_SetDomainSigma(self, *args)
    __swig_destroy__ = _itkFastBilateralImageFilterPython.delete_itkFastBilateralImageFilterIUS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFastBilateralImageFilterIUS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIUS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkFastBilateralImageFilterIUS4IUS4

        Create a new object of the class itkFastBilateralImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFastBilateralImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFastBilateralImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFastBilateralImageFilterIUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFastBilateralImageFilterIUS4IUS4 in _itkFastBilateralImageFilterPython:
_itkFastBilateralImageFilterPython.itkFastBilateralImageFilterIUS4IUS4_swigregister(itkFastBilateralImageFilterIUS4IUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def fast_bilateral_image_filter(*args: itkt.ImageLike,  domain_sigma: Union[float, Sequence[float]]=..., range_sigma: float=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for FastBilateralImageFilter"""
    import itk

    kwarg_typehints = { 'domain_sigma':domain_sigma,'range_sigma':range_sigma }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.FastBilateralImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def fast_bilateral_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.FastBilateral.FastBilateralImageFilter
    fast_bilateral_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    fast_bilateral_image_filter.__doc__ = filter_object.__doc__




# coding: utf-8

"""
    Collibra Assessments API

    This API allows you to interact with the Assessments application in a programmatic way and perform actions such as retrieving data from conducted assessments or triggering new assessments.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from collibra_assessments.api_client import ApiClient


class TemplatesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def list_templates(self, **kwargs):  # noqa: E501
        """List templates  # noqa: E501

        Returns a list of all available templates. The templates are sorted by `name` in alphabetical order.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_templates(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the template.   The value is case-insensitive and it returns results that contain this value. 
        :param str status: The status of the template.   Possible values are: `DRAFT`, `PUBLISHED` or `OBSOLETE`. The value is case-insensitive. An invalid value results in an error response. 
        :param str asset_type_id: The ID of the asset type.
        :param bool latest_version_only: Whether it should only return the latest version of each template. The interaction with the `status` parameter is as follows: - If the `status` parameter is not set, it returns the latest version of each template regardless of the status. - If the `status` parameter is set to `PUBLISHED`, it returns the latest published version of each template. - If the `status` parameter is set to `DRAFT`, it returns the latest draft version of each template. - If the `status` parameter is set to `OBSOLETE`, it returns the latest obsolete version of each template. 
        :param int limit: The maximum number of resources to retrieve.  If not set, the default limit of `10` is be used. The maximum value for this parameter is `50`. 
        :param str cursor: The cursor pointing to the first resource to be included in the response. This cursor cannot be created and must have been extracted from a response returned by a previous API call.  If this parameter is missing, the API returns the resources starting from the first available resource, at index `0`. 
        :return: PagedTemplates
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_templates_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_templates_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_templates_with_http_info(self, **kwargs):  # noqa: E501
        """List templates  # noqa: E501

        Returns a list of all available templates. The templates are sorted by `name` in alphabetical order.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_templates_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the template.   The value is case-insensitive and it returns results that contain this value. 
        :param str status: The status of the template.   Possible values are: `DRAFT`, `PUBLISHED` or `OBSOLETE`. The value is case-insensitive. An invalid value results in an error response. 
        :param str asset_type_id: The ID of the asset type.
        :param bool latest_version_only: Whether it should only return the latest version of each template. The interaction with the `status` parameter is as follows: - If the `status` parameter is not set, it returns the latest version of each template regardless of the status. - If the `status` parameter is set to `PUBLISHED`, it returns the latest published version of each template. - If the `status` parameter is set to `DRAFT`, it returns the latest draft version of each template. - If the `status` parameter is set to `OBSOLETE`, it returns the latest obsolete version of each template. 
        :param int limit: The maximum number of resources to retrieve.  If not set, the default limit of `10` is be used. The maximum value for this parameter is `50`. 
        :param str cursor: The cursor pointing to the first resource to be included in the response. This cursor cannot be created and must have been extracted from a response returned by a previous API call.  If this parameter is missing, the API returns the resources starting from the first available resource, at index `0`. 
        :return: PagedTemplates
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'status', 'asset_type_id', 'latest_version_only', 'limit', 'cursor']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_templates" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'asset_type_id' in params:
            query_params.append(('assetTypeId', params['asset_type_id']))  # noqa: E501
        if 'latest_version_only' in params:
            query_params.append(('latestVersionOnly', params['latest_version_only']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/templates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedTemplates',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

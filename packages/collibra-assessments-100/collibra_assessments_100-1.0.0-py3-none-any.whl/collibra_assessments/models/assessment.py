# coding: utf-8

"""
    Collibra Assessments API

    This API allows you to interact with the Assessments application in a programmatic way and perform actions such as retrieving data from conducted assessments or triggering new assessments.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Assessment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'asset': 'Asset',
        'status': 'AssessmentStatus',
        'template': 'Template',
        'owner': 'User',
        'assignees': 'list[UserOrGroupAssignee]',
        'content': 'list[QuestionAndAnswer]',
        'created_on': 'datetime',
        'created_by': 'User',
        'last_modified_on': 'datetime',
        'last_modified_by': 'User',
        'submitted_on': 'datetime',
        'submitted_by': 'User',
        'assessment_review': 'Asset'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'asset': 'asset',
        'status': 'status',
        'template': 'template',
        'owner': 'owner',
        'assignees': 'assignees',
        'content': 'content',
        'created_on': 'createdOn',
        'created_by': 'createdBy',
        'last_modified_on': 'lastModifiedOn',
        'last_modified_by': 'lastModifiedBy',
        'submitted_on': 'submittedOn',
        'submitted_by': 'submittedBy',
        'assessment_review': 'assessmentReview'
    }

    def __init__(self, id=None, name=None, asset=None, status=None, template=None, owner=None, assignees=None, content=None, created_on=None, created_by=None, last_modified_on=None, last_modified_by=None, submitted_on=None, submitted_by=None, assessment_review=None):  # noqa: E501
        """Assessment - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._asset = None
        self._status = None
        self._template = None
        self._owner = None
        self._assignees = None
        self._content = None
        self._created_on = None
        self._created_by = None
        self._last_modified_on = None
        self._last_modified_by = None
        self._submitted_on = None
        self._submitted_by = None
        self._assessment_review = None
        self.discriminator = None
        self.id = id
        self.name = name
        if asset is not None:
            self.asset = asset
        self.status = status
        self.template = template
        self.owner = owner
        self.assignees = assignees
        self.content = content
        self.created_on = created_on
        self.created_by = created_by
        self.last_modified_on = last_modified_on
        self.last_modified_by = last_modified_by
        if submitted_on is not None:
            self.submitted_on = submitted_on
        if submitted_by is not None:
            self.submitted_by = submitted_by
        if assessment_review is not None:
            self.assessment_review = assessment_review

    @property
    def id(self):
        """Gets the id of this Assessment.  # noqa: E501

        The ID of the assessment.  # noqa: E501

        :return: The id of this Assessment.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Assessment.

        The ID of the assessment.  # noqa: E501

        :param id: The id of this Assessment.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Assessment.  # noqa: E501

        The name of the assessment.  # noqa: E501

        :return: The name of this Assessment.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Assessment.

        The name of the assessment.  # noqa: E501

        :param name: The name of this Assessment.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def asset(self):
        """Gets the asset of this Assessment.  # noqa: E501


        :return: The asset of this Assessment.  # noqa: E501
        :rtype: Asset
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this Assessment.


        :param asset: The asset of this Assessment.  # noqa: E501
        :type: Asset
        """

        self._asset = asset

    @property
    def status(self):
        """Gets the status of this Assessment.  # noqa: E501


        :return: The status of this Assessment.  # noqa: E501
        :rtype: AssessmentStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Assessment.


        :param status: The status of this Assessment.  # noqa: E501
        :type: AssessmentStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def template(self):
        """Gets the template of this Assessment.  # noqa: E501


        :return: The template of this Assessment.  # noqa: E501
        :rtype: Template
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this Assessment.


        :param template: The template of this Assessment.  # noqa: E501
        :type: Template
        """
        if template is None:
            raise ValueError("Invalid value for `template`, must not be `None`")  # noqa: E501

        self._template = template

    @property
    def owner(self):
        """Gets the owner of this Assessment.  # noqa: E501


        :return: The owner of this Assessment.  # noqa: E501
        :rtype: User
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Assessment.


        :param owner: The owner of this Assessment.  # noqa: E501
        :type: User
        """
        if owner is None:
            raise ValueError("Invalid value for `owner`, must not be `None`")  # noqa: E501

        self._owner = owner

    @property
    def assignees(self):
        """Gets the assignees of this Assessment.  # noqa: E501


        :return: The assignees of this Assessment.  # noqa: E501
        :rtype: list[UserOrGroupAssignee]
        """
        return self._assignees

    @assignees.setter
    def assignees(self, assignees):
        """Sets the assignees of this Assessment.


        :param assignees: The assignees of this Assessment.  # noqa: E501
        :type: list[UserOrGroupAssignee]
        """
        if assignees is None:
            raise ValueError("Invalid value for `assignees`, must not be `None`")  # noqa: E501

        self._assignees = assignees

    @property
    def content(self):
        """Gets the content of this Assessment.  # noqa: E501

        The set of questions and answers of the assessment.  # noqa: E501

        :return: The content of this Assessment.  # noqa: E501
        :rtype: list[QuestionAndAnswer]
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Assessment.

        The set of questions and answers of the assessment.  # noqa: E501

        :param content: The content of this Assessment.  # noqa: E501
        :type: list[QuestionAndAnswer]
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    @property
    def created_on(self):
        """Gets the created_on of this Assessment.  # noqa: E501

        The date and time of the assessment creation.  # noqa: E501

        :return: The created_on of this Assessment.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this Assessment.

        The date and time of the assessment creation.  # noqa: E501

        :param created_on: The created_on of this Assessment.  # noqa: E501
        :type: datetime
        """
        if created_on is None:
            raise ValueError("Invalid value for `created_on`, must not be `None`")  # noqa: E501

        self._created_on = created_on

    @property
    def created_by(self):
        """Gets the created_by of this Assessment.  # noqa: E501


        :return: The created_by of this Assessment.  # noqa: E501
        :rtype: User
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Assessment.


        :param created_by: The created_by of this Assessment.  # noqa: E501
        :type: User
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def last_modified_on(self):
        """Gets the last_modified_on of this Assessment.  # noqa: E501

        The date and time of the assessment last update.  # noqa: E501

        :return: The last_modified_on of this Assessment.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_on

    @last_modified_on.setter
    def last_modified_on(self, last_modified_on):
        """Sets the last_modified_on of this Assessment.

        The date and time of the assessment last update.  # noqa: E501

        :param last_modified_on: The last_modified_on of this Assessment.  # noqa: E501
        :type: datetime
        """
        if last_modified_on is None:
            raise ValueError("Invalid value for `last_modified_on`, must not be `None`")  # noqa: E501

        self._last_modified_on = last_modified_on

    @property
    def last_modified_by(self):
        """Gets the last_modified_by of this Assessment.  # noqa: E501


        :return: The last_modified_by of this Assessment.  # noqa: E501
        :rtype: User
        """
        return self._last_modified_by

    @last_modified_by.setter
    def last_modified_by(self, last_modified_by):
        """Sets the last_modified_by of this Assessment.


        :param last_modified_by: The last_modified_by of this Assessment.  # noqa: E501
        :type: User
        """
        if last_modified_by is None:
            raise ValueError("Invalid value for `last_modified_by`, must not be `None`")  # noqa: E501

        self._last_modified_by = last_modified_by

    @property
    def submitted_on(self):
        """Gets the submitted_on of this Assessment.  # noqa: E501

        The date and time of the assessment submission.  # noqa: E501

        :return: The submitted_on of this Assessment.  # noqa: E501
        :rtype: datetime
        """
        return self._submitted_on

    @submitted_on.setter
    def submitted_on(self, submitted_on):
        """Sets the submitted_on of this Assessment.

        The date and time of the assessment submission.  # noqa: E501

        :param submitted_on: The submitted_on of this Assessment.  # noqa: E501
        :type: datetime
        """

        self._submitted_on = submitted_on

    @property
    def submitted_by(self):
        """Gets the submitted_by of this Assessment.  # noqa: E501


        :return: The submitted_by of this Assessment.  # noqa: E501
        :rtype: User
        """
        return self._submitted_by

    @submitted_by.setter
    def submitted_by(self, submitted_by):
        """Sets the submitted_by of this Assessment.


        :param submitted_by: The submitted_by of this Assessment.  # noqa: E501
        :type: User
        """

        self._submitted_by = submitted_by

    @property
    def assessment_review(self):
        """Gets the assessment_review of this Assessment.  # noqa: E501


        :return: The assessment_review of this Assessment.  # noqa: E501
        :rtype: Asset
        """
        return self._assessment_review

    @assessment_review.setter
    def assessment_review(self, assessment_review):
        """Sets the assessment_review of this Assessment.


        :param assessment_review: The assessment_review of this Assessment.  # noqa: E501
        :type: Asset
        """

        self._assessment_review = assessment_review

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Assessment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Assessment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

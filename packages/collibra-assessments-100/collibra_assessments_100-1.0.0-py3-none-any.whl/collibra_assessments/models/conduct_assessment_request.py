# coding: utf-8

"""
    Collibra Assessments API

    This API allows you to interact with the Assessments application in a programmatic way and perform actions such as retrieving data from conducted assessments or triggering new assessments.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConductAssessmentRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'template': 'BaseTemplate',
        'name': 'str',
        'asset': 'BaseAsset',
        'owner': 'BaseUser',
        'assignees': 'list[BaseUserOrGroupAssignee]',
        'is_visible_to_everyone': 'bool'
    }

    attribute_map = {
        'template': 'template',
        'name': 'name',
        'asset': 'asset',
        'owner': 'owner',
        'assignees': 'assignees',
        'is_visible_to_everyone': 'isVisibleToEveryone'
    }

    def __init__(self, template=None, name=None, asset=None, owner=None, assignees=None, is_visible_to_everyone=False):  # noqa: E501
        """ConductAssessmentRequest - a model defined in Swagger"""  # noqa: E501
        self._template = None
        self._name = None
        self._asset = None
        self._owner = None
        self._assignees = None
        self._is_visible_to_everyone = None
        self.discriminator = None
        self.template = template
        if name is not None:
            self.name = name
        if asset is not None:
            self.asset = asset
        if owner is not None:
            self.owner = owner
        if assignees is not None:
            self.assignees = assignees
        if is_visible_to_everyone is not None:
            self.is_visible_to_everyone = is_visible_to_everyone

    @property
    def template(self):
        """Gets the template of this ConductAssessmentRequest.  # noqa: E501


        :return: The template of this ConductAssessmentRequest.  # noqa: E501
        :rtype: BaseTemplate
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this ConductAssessmentRequest.


        :param template: The template of this ConductAssessmentRequest.  # noqa: E501
        :type: BaseTemplate
        """
        if template is None:
            raise ValueError("Invalid value for `template`, must not be `None`")  # noqa: E501

        self._template = template

    @property
    def name(self):
        """Gets the name of this ConductAssessmentRequest.  # noqa: E501

        The name of the assessment.  # noqa: E501

        :return: The name of this ConductAssessmentRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConductAssessmentRequest.

        The name of the assessment.  # noqa: E501

        :param name: The name of this ConductAssessmentRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def asset(self):
        """Gets the asset of this ConductAssessmentRequest.  # noqa: E501


        :return: The asset of this ConductAssessmentRequest.  # noqa: E501
        :rtype: BaseAsset
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this ConductAssessmentRequest.


        :param asset: The asset of this ConductAssessmentRequest.  # noqa: E501
        :type: BaseAsset
        """

        self._asset = asset

    @property
    def owner(self):
        """Gets the owner of this ConductAssessmentRequest.  # noqa: E501


        :return: The owner of this ConductAssessmentRequest.  # noqa: E501
        :rtype: BaseUser
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this ConductAssessmentRequest.


        :param owner: The owner of this ConductAssessmentRequest.  # noqa: E501
        :type: BaseUser
        """

        self._owner = owner

    @property
    def assignees(self):
        """Gets the assignees of this ConductAssessmentRequest.  # noqa: E501

        The ID of the Collibra users or groups to be assigned as assignees.  # noqa: E501

        :return: The assignees of this ConductAssessmentRequest.  # noqa: E501
        :rtype: list[BaseUserOrGroupAssignee]
        """
        return self._assignees

    @assignees.setter
    def assignees(self, assignees):
        """Sets the assignees of this ConductAssessmentRequest.

        The ID of the Collibra users or groups to be assigned as assignees.  # noqa: E501

        :param assignees: The assignees of this ConductAssessmentRequest.  # noqa: E501
        :type: list[BaseUserOrGroupAssignee]
        """

        self._assignees = assignees

    @property
    def is_visible_to_everyone(self):
        """Gets the is_visible_to_everyone of this ConductAssessmentRequest.  # noqa: E501

        Whether the assessment is visible to Everyone in Collibra?  # noqa: E501

        :return: The is_visible_to_everyone of this ConductAssessmentRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_visible_to_everyone

    @is_visible_to_everyone.setter
    def is_visible_to_everyone(self, is_visible_to_everyone):
        """Sets the is_visible_to_everyone of this ConductAssessmentRequest.

        Whether the assessment is visible to Everyone in Collibra?  # noqa: E501

        :param is_visible_to_everyone: The is_visible_to_everyone of this ConductAssessmentRequest.  # noqa: E501
        :type: bool
        """

        self._is_visible_to_everyone = is_visible_to_everyone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConductAssessmentRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConductAssessmentRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

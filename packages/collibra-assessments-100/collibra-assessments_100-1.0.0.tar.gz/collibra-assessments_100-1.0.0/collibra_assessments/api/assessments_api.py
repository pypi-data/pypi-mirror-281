# coding: utf-8

"""
    Collibra Assessments API

    This API allows you to interact with the Assessments application in a programmatic way and perform actions such as retrieving data from conducted assessments or triggering new assessments.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from collibra_assessments.api_client import ApiClient


class AssessmentsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def conduct_assessment(self, body, **kwargs):  # noqa: E501
        """Conduct an assessment  # noqa: E501

        Starts conducting an assessment by creating it in `DRAFT` status.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.conduct_assessment(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConductAssessmentRequest body: (required)
        :return: Assessment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.conduct_assessment_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.conduct_assessment_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def conduct_assessment_with_http_info(self, body, **kwargs):  # noqa: E501
        """Conduct an assessment  # noqa: E501

        Starts conducting an assessment by creating it in `DRAFT` status.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.conduct_assessment_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConductAssessmentRequest body: (required)
        :return: Assessment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method conduct_assessment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `conduct_assessment`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/assessments/conduct', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Assessment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_assessment(self, id, **kwargs):  # noqa: E501
        """Retrieve an assessment by ID  # noqa: E501

        Returns information about the assessment with the specified ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_assessment(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the assessment. (required)
        :return: Assessment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_assessment_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_assessment_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_assessment_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieve an assessment by ID  # noqa: E501

        Returns information about the assessment with the specified ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_assessment_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the assessment. (required)
        :return: Assessment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_assessment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_assessment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/assessments/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Assessment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_assessment_by_assessment_review(self, id, **kwargs):  # noqa: E501
        """Retrieve an assessment by assessment review ID  # noqa: E501

        Returns information about the assessment with the specified assessment review asset ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_assessment_by_assessment_review(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the assessment review asset. (required)
        :return: Assessment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_assessment_by_assessment_review_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_assessment_by_assessment_review_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_assessment_by_assessment_review_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieve an assessment by assessment review ID  # noqa: E501

        Returns information about the assessment with the specified assessment review asset ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_assessment_by_assessment_review_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the assessment review asset. (required)
        :return: Assessment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_assessment_by_assessment_review" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_assessment_by_assessment_review`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/assessments/byAssessmentReview/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Assessment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_assessments(self, **kwargs):  # noqa: E501
        """List assessments  # noqa: E501

        Returns a list of assessments that you created; and the assessments that you are permitted to view. The assessments are sorted by `lastModifiedOn` in descending order, with the most recent first.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_assessments(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the assessment.   The value is case-insensitive and it returns results that contain this value. 
        :param str status: The status of the assessment.   Possible values are: `DRAFT`, `SUBMITTED`, `COMPLETED` or `OBSOLETE`. The value is case-insensitive. An invalid value results in an error response. 
        :param datetime last_modified_from: The date and time that defines the start of the period when the assessment was last updated, including this timestamp.
        :param datetime last_modified_until: The date and time that defines the end of the period when the assessment was last updated, excluding this timestamp.
        :param str template_id: The ID of the template.
        :param str template_version: The version of the template.   Use `LATEST` to retrieve assessments that are on the latest version of a particular `templateId`. For other values, it returns results that have an exact match. 
        :param str asset_id: The ID of the asset the assessment relates to.
        :param int limit: The maximum number of resources to retrieve.  If not set, the default limit of `10` is be used. The maximum value for this parameter is `50`. 
        :param str cursor: The cursor pointing to the first resource to be included in the response. This cursor cannot be created and must have been extracted from a response returned by a previous API call.  If this parameter is missing, the API returns the resources starting from the first available resource, at index `0`. 
        :return: PagedAssessments
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_assessments_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_assessments_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_assessments_with_http_info(self, **kwargs):  # noqa: E501
        """List assessments  # noqa: E501

        Returns a list of assessments that you created; and the assessments that you are permitted to view. The assessments are sorted by `lastModifiedOn` in descending order, with the most recent first.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_assessments_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the assessment.   The value is case-insensitive and it returns results that contain this value. 
        :param str status: The status of the assessment.   Possible values are: `DRAFT`, `SUBMITTED`, `COMPLETED` or `OBSOLETE`. The value is case-insensitive. An invalid value results in an error response. 
        :param datetime last_modified_from: The date and time that defines the start of the period when the assessment was last updated, including this timestamp.
        :param datetime last_modified_until: The date and time that defines the end of the period when the assessment was last updated, excluding this timestamp.
        :param str template_id: The ID of the template.
        :param str template_version: The version of the template.   Use `LATEST` to retrieve assessments that are on the latest version of a particular `templateId`. For other values, it returns results that have an exact match. 
        :param str asset_id: The ID of the asset the assessment relates to.
        :param int limit: The maximum number of resources to retrieve.  If not set, the default limit of `10` is be used. The maximum value for this parameter is `50`. 
        :param str cursor: The cursor pointing to the first resource to be included in the response. This cursor cannot be created and must have been extracted from a response returned by a previous API call.  If this parameter is missing, the API returns the resources starting from the first available resource, at index `0`. 
        :return: PagedAssessments
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'status', 'last_modified_from', 'last_modified_until', 'template_id', 'template_version', 'asset_id', 'limit', 'cursor']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_assessments" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'last_modified_from' in params:
            query_params.append(('lastModifiedFrom', params['last_modified_from']))  # noqa: E501
        if 'last_modified_until' in params:
            query_params.append(('lastModifiedUntil', params['last_modified_until']))  # noqa: E501
        if 'template_id' in params:
            query_params.append(('templateId', params['template_id']))  # noqa: E501
        if 'template_version' in params:
            query_params.append(('templateVersion', params['template_version']))  # noqa: E501
        if 'asset_id' in params:
            query_params.append(('assetId', params['asset_id']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/assessments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedAssessments',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

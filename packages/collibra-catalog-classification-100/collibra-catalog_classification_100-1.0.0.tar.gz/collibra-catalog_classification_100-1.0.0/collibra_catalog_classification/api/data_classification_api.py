# coding: utf-8

"""
    Collibra Catalog Classification API

    <p>The Catalog API offers functionality related to the catalog product.<br/> It is mainly focused on facilitating the ingestion of information into Catalog. The API enables users to more easily connect Catalog to sources that are not necessarily natively supported in the product. </p>  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from collibra_catalog_classification.api_client import ApiClient


class DataClassificationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_classification(self, **kwargs):  # noqa: E501
        """Adds new Classification  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_classification(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddClassificationRequest body: The request with data needed for creation of new classification.
        :return: Classification
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_classification_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.add_classification_with_http_info(**kwargs)  # noqa: E501
            return data

    def add_classification_with_http_info(self, **kwargs):  # noqa: E501
        """Adds new Classification  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_classification_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddClassificationRequest body: The request with data needed for creation of new classification.
        :return: Classification
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_classification" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/dataClassification/classifications', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Classification',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_classification_match(self, **kwargs):  # noqa: E501
        """Adds new Classification Match  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_classification_match(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddClassificationMatchRequest body: The request with data needed for creation of new classification match.
        :return: ClassificationMatch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_classification_match_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.add_classification_match_with_http_info(**kwargs)  # noqa: E501
            return data

    def add_classification_match_with_http_info(self, **kwargs):  # noqa: E501
        """Adds new Classification Match  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_classification_match_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddClassificationMatchRequest body: The request with data needed for creation of new classification match.
        :return: ClassificationMatch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_classification_match" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/dataClassification/classificationMatches', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClassificationMatch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_classification_matches(self, **kwargs):  # noqa: E501
        """Adds new Classification Matches  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_classification_matches(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddClassificationMatchesRequest body: The request with data needed for creation of new classification matches.
        :return: ClassificationMatch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_classification_matches_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.add_classification_matches_with_http_info(**kwargs)  # noqa: E501
            return data

    def add_classification_matches_with_http_info(self, **kwargs):  # noqa: E501
        """Adds new Classification Matches  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_classification_matches_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddClassificationMatchesRequest body: The request with data needed for creation of new classification matches.
        :return: ClassificationMatch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_classification_matches" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/dataClassification/classificationMatches/bulk', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClassificationMatch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def change_classification(self, classification_id, **kwargs):  # noqa: E501
        """Changes existing Classification  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_classification(classification_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str classification_id: The id of the Classification to be changed (required)
        :param ChangeClassificationRequest body: The properties of the Classification to be changed.
        :return: Classification
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.change_classification_with_http_info(classification_id, **kwargs)  # noqa: E501
        else:
            (data) = self.change_classification_with_http_info(classification_id, **kwargs)  # noqa: E501
            return data

    def change_classification_with_http_info(self, classification_id, **kwargs):  # noqa: E501
        """Changes existing Classification  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_classification_with_http_info(classification_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str classification_id: The id of the Classification to be changed (required)
        :param ChangeClassificationRequest body: The properties of the Classification to be changed.
        :return: Classification
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['classification_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method change_classification" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'classification_id' is set
        if ('classification_id' not in params or
                params['classification_id'] is None):
            raise ValueError("Missing the required parameter `classification_id` when calling `change_classification`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'classification_id' in params:
            path_params['classificationId'] = params['classification_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/dataClassification/classifications/{classificationId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Classification',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def change_classification_match(self, classification_match_id, **kwargs):  # noqa: E501
        """Changes a Classification Match  # noqa: E501

        Changes the Classification Match with the information that is present in the request. Only properties that are specified in this request and have not <code>null</code> values are updated. All other properties are ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_classification_match(classification_match_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str classification_match_id: The id of the Classification Match to be changed (required)
        :param ChangeClassificationMatchRequest body: The properties of the Classification Match to be changed.
        :return: ClassificationMatch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.change_classification_match_with_http_info(classification_match_id, **kwargs)  # noqa: E501
        else:
            (data) = self.change_classification_match_with_http_info(classification_match_id, **kwargs)  # noqa: E501
            return data

    def change_classification_match_with_http_info(self, classification_match_id, **kwargs):  # noqa: E501
        """Changes a Classification Match  # noqa: E501

        Changes the Classification Match with the information that is present in the request. Only properties that are specified in this request and have not <code>null</code> values are updated. All other properties are ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_classification_match_with_http_info(classification_match_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str classification_match_id: The id of the Classification Match to be changed (required)
        :param ChangeClassificationMatchRequest body: The properties of the Classification Match to be changed.
        :return: ClassificationMatch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['classification_match_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method change_classification_match" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'classification_match_id' is set
        if ('classification_match_id' not in params or
                params['classification_match_id'] is None):
            raise ValueError("Missing the required parameter `classification_match_id` when calling `change_classification_match`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'classification_match_id' in params:
            path_params['classificationMatchId'] = params['classification_match_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/dataClassification/classificationMatches/{classificationMatchId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClassificationMatch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def change_classification_matches(self, **kwargs):  # noqa: E501
        """Changes multiple Classification Matches  # noqa: E501

        Changes multiple Classification Matches with the information that is present in the requests. Only properties that are specified in the requests and have not <code>null</code> values are updated. All other properties are ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_classification_matches(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ChangeClassificationMatchRequest] body: The list of properties of the Classification Matches to be changed.
        :return: list[ClassificationMatch]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.change_classification_matches_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.change_classification_matches_with_http_info(**kwargs)  # noqa: E501
            return data

    def change_classification_matches_with_http_info(self, **kwargs):  # noqa: E501
        """Changes multiple Classification Matches  # noqa: E501

        Changes multiple Classification Matches with the information that is present in the requests. Only properties that are specified in the requests and have not <code>null</code> values are updated. All other properties are ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_classification_matches_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ChangeClassificationMatchRequest] body: The list of properties of the Classification Matches to be changed.
        :return: list[ClassificationMatch]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method change_classification_matches" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/dataClassification/classificationMatches/bulk', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ClassificationMatch]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def classify(self, **kwargs):  # noqa: E501
        """Starts a job that classifies datasets, databases, schemas, tables or columns by external service based on sample data.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.classify(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClassifyRequest body: The request with data needed for running classification job.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.classify_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.classify_with_http_info(**kwargs)  # noqa: E501
            return data

    def classify_with_http_info(self, **kwargs):  # noqa: E501
        """Starts a job that classifies datasets, databases, schemas, tables or columns by external service based on sample data.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.classify_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClassifyRequest body: The request with data needed for running classification job.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method classify" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/dataClassification/classifications/classify', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_classification_matches(self, **kwargs):  # noqa: E501
        """Finds Classification Matches  # noqa: E501

        Returns Classification Matches matching the given search criteria defined by request. Only parameters that are specified in this request and have not <code>null</code> values are used for filtering. All other parameters are ignored. The returned Classification Matches satisfy all constraints that are specified in this search criteria. This endpoint will be removed in the next major release. Please, use GET /bulk  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_classification_matches(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FindClassificationMatchesRequest body: The search criteria of the Classification Matches to be found.
        :return: PagedResponseClassificationMatch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.find_classification_matches_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.find_classification_matches_with_http_info(**kwargs)  # noqa: E501
            return data

    def find_classification_matches_with_http_info(self, **kwargs):  # noqa: E501
        """Finds Classification Matches  # noqa: E501

        Returns Classification Matches matching the given search criteria defined by request. Only parameters that are specified in this request and have not <code>null</code> values are used for filtering. All other parameters are ignored. The returned Classification Matches satisfy all constraints that are specified in this search criteria. This endpoint will be removed in the next major release. Please, use GET /bulk  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_classification_matches_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FindClassificationMatchesRequest body: The search criteria of the Classification Matches to be found.
        :return: PagedResponseClassificationMatch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_classification_matches" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/dataClassification/classificationMatches', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedResponseClassificationMatch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_classification_matches_with_params(self, **kwargs):  # noqa: E501
        """Finds Classification Matches  # noqa: E501

        Returns Classification Matches matching the given search criteria defined by query params that form the request. Only parameters that are specified in this request and have not <code>null</code> values are used for filtering. All other parameters are ignored. The returned Classification Matches satisfy all constraints that are specified in this search criteria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_classification_matches_with_params(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>.
        :param int limit: The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used. The maximum allowed limit is 1000.
        :param int count_limit: Allows to limit the number of elements that will be counted. -1 will count everything and 0 will cause the count to be skipped
        :param list[str] asset_ids: The <code>id</code>s of the assets (with Column types) to filter by the search results
        :param list[str] statuses: The list of classification match statuses to filter by the search results.
        :param list[str] classification_ids: The list of classification ids to filter by the search results.
        :param list[str] asset_type_ids: The list of asset type ids to filter by the search results.
        :return: PagedResponseClassificationMatch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.find_classification_matches_with_params_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.find_classification_matches_with_params_with_http_info(**kwargs)  # noqa: E501
            return data

    def find_classification_matches_with_params_with_http_info(self, **kwargs):  # noqa: E501
        """Finds Classification Matches  # noqa: E501

        Returns Classification Matches matching the given search criteria defined by query params that form the request. Only parameters that are specified in this request and have not <code>null</code> values are used for filtering. All other parameters are ignored. The returned Classification Matches satisfy all constraints that are specified in this search criteria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_classification_matches_with_params_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>.
        :param int limit: The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used. The maximum allowed limit is 1000.
        :param int count_limit: Allows to limit the number of elements that will be counted. -1 will count everything and 0 will cause the count to be skipped
        :param list[str] asset_ids: The <code>id</code>s of the assets (with Column types) to filter by the search results
        :param list[str] statuses: The list of classification match statuses to filter by the search results.
        :param list[str] classification_ids: The list of classification ids to filter by the search results.
        :param list[str] asset_type_ids: The list of asset type ids to filter by the search results.
        :return: PagedResponseClassificationMatch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'count_limit', 'asset_ids', 'statuses', 'classification_ids', 'asset_type_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_classification_matches_with_params" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'count_limit' in params:
            query_params.append(('countLimit', params['count_limit']))  # noqa: E501
        if 'asset_ids' in params:
            query_params.append(('assetIds', params['asset_ids']))  # noqa: E501
            collection_formats['assetIds'] = 'multi'  # noqa: E501
        if 'statuses' in params:
            query_params.append(('statuses', params['statuses']))  # noqa: E501
            collection_formats['statuses'] = 'multi'  # noqa: E501
        if 'classification_ids' in params:
            query_params.append(('classificationIds', params['classification_ids']))  # noqa: E501
            collection_formats['classificationIds'] = 'multi'  # noqa: E501
        if 'asset_type_ids' in params:
            query_params.append(('assetTypeIds', params['asset_type_ids']))  # noqa: E501
            collection_formats['assetTypeIds'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/dataClassification/classificationMatches/bulk', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedResponseClassificationMatch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_classifications(self, **kwargs):  # noqa: E501
        """Finds Classifications  # noqa: E501

        Returns Classifications matching the given search criteria defined by request. Only parameters that are specified in this request and have not <code>null</code> values are used for filtering. All other parameters are ignored. The returned Classifications satisfy all constraints that are specified in this search criteria. This endpoint will be removed in the next major release. Please, use GET /bulk  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_classifications(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FindClassificationsRequest body: The search criteria of the Classifications to be found.
        :return: PagedResponseClassification
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.find_classifications_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.find_classifications_with_http_info(**kwargs)  # noqa: E501
            return data

    def find_classifications_with_http_info(self, **kwargs):  # noqa: E501
        """Finds Classifications  # noqa: E501

        Returns Classifications matching the given search criteria defined by request. Only parameters that are specified in this request and have not <code>null</code> values are used for filtering. All other parameters are ignored. The returned Classifications satisfy all constraints that are specified in this search criteria. This endpoint will be removed in the next major release. Please, use GET /bulk  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_classifications_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FindClassificationsRequest body: The search criteria of the Classifications to be found.
        :return: PagedResponseClassification
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_classifications" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/dataClassification/classifications', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedResponseClassification',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_classifications_bulk(self, **kwargs):  # noqa: E501
        """Finds Classifications  # noqa: E501

        Returns Classifications matching the given search criteria defined by query params that form the request. Only parameters that are specified in this request and have not <code>null</code> values are used for filtering. All other parameters are ignored. The returned Classifications satisfy all constraints that are specified in this search criteria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_classifications_bulk(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>.
        :param int limit: The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used. The maximum allowed limit is 1000.
        :param int count_limit: Allows to limit the number of elements that will be counted. -1 will count everything and 0 will cause the count to be skipped
        :param str name: The exact name of classification to filter by the search results.
        :return: PagedResponseClassification
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.find_classifications_bulk_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.find_classifications_bulk_with_http_info(**kwargs)  # noqa: E501
            return data

    def find_classifications_bulk_with_http_info(self, **kwargs):  # noqa: E501
        """Finds Classifications  # noqa: E501

        Returns Classifications matching the given search criteria defined by query params that form the request. Only parameters that are specified in this request and have not <code>null</code> values are used for filtering. All other parameters are ignored. The returned Classifications satisfy all constraints that are specified in this search criteria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_classifications_bulk_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>.
        :param int limit: The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used. The maximum allowed limit is 1000.
        :param int count_limit: Allows to limit the number of elements that will be counted. -1 will count everything and 0 will cause the count to be skipped
        :param str name: The exact name of classification to filter by the search results.
        :return: PagedResponseClassification
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'count_limit', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_classifications_bulk" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'count_limit' in params:
            query_params.append(('countLimit', params['count_limit']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/dataClassification/classifications/bulk', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedResponseClassification',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_classification(self, classification_id, **kwargs):  # noqa: E501
        """Gets existing Classification by id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_classification(classification_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str classification_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_classification_with_http_info(classification_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_classification_with_http_info(classification_id, **kwargs)  # noqa: E501
            return data

    def get_classification_with_http_info(self, classification_id, **kwargs):  # noqa: E501
        """Gets existing Classification by id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_classification_with_http_info(classification_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str classification_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['classification_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_classification" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'classification_id' is set
        if ('classification_id' not in params or
                params['classification_id'] is None):
            raise ValueError("Missing the required parameter `classification_id` when calling `get_classification`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'classification_id' in params:
            path_params['classificationId'] = params['classification_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/dataClassification/classifications/{classificationId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_classification_match(self, classification_match_id, **kwargs):  # noqa: E501
        """Gets existing Classification Match by id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_classification_match(classification_match_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str classification_match_id: The id of the Classification Match to be fetched (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_classification_match_with_http_info(classification_match_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_classification_match_with_http_info(classification_match_id, **kwargs)  # noqa: E501
            return data

    def get_classification_match_with_http_info(self, classification_match_id, **kwargs):  # noqa: E501
        """Gets existing Classification Match by id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_classification_match_with_http_info(classification_match_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str classification_match_id: The id of the Classification Match to be fetched (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['classification_match_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_classification_match" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'classification_match_id' is set
        if ('classification_match_id' not in params or
                params['classification_match_id'] is None):
            raise ValueError("Missing the required parameter `classification_match_id` when calling `get_classification_match`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'classification_match_id' in params:
            path_params['classificationMatchId'] = params['classification_match_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/dataClassification/classificationMatches/{classificationMatchId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_classification(self, classification_id, **kwargs):  # noqa: E501
        """Removes existing Classification. WARNING: This will also remove all ClassificationMatches that are joined with this Classification!  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_classification(classification_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str classification_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_classification_with_http_info(classification_id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_classification_with_http_info(classification_id, **kwargs)  # noqa: E501
            return data

    def remove_classification_with_http_info(self, classification_id, **kwargs):  # noqa: E501
        """Removes existing Classification. WARNING: This will also remove all ClassificationMatches that are joined with this Classification!  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_classification_with_http_info(classification_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str classification_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['classification_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_classification" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'classification_id' is set
        if ('classification_id' not in params or
                params['classification_id'] is None):
            raise ValueError("Missing the required parameter `classification_id` when calling `remove_classification`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'classification_id' in params:
            path_params['classificationId'] = params['classification_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/dataClassification/classifications/{classificationId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_classification_match(self, classification_match_id, **kwargs):  # noqa: E501
        """Removes existing Classification Match.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_classification_match(classification_match_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str classification_match_id: The id of the Classification Match to be deleted (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_classification_match_with_http_info(classification_match_id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_classification_match_with_http_info(classification_match_id, **kwargs)  # noqa: E501
            return data

    def remove_classification_match_with_http_info(self, classification_match_id, **kwargs):  # noqa: E501
        """Removes existing Classification Match.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_classification_match_with_http_info(classification_match_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str classification_match_id: The id of the Classification Match to be deleted (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['classification_match_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_classification_match" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'classification_match_id' is set
        if ('classification_match_id' not in params or
                params['classification_match_id'] is None):
            raise ValueError("Missing the required parameter `classification_match_id` when calling `remove_classification_match`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'classification_match_id' in params:
            path_params['classificationMatchId'] = params['classification_match_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/dataClassification/classificationMatches/{classificationMatchId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_classification_matches(self, **kwargs):  # noqa: E501
        """Removes multiple Classification Matches  # noqa: E501

        Removes multiple Classification Matches with IDs provided in request body.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_classification_matches(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeleteClassificationMatchesRequest body: The list of Classification Match IDs to be deleted.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_classification_matches_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.remove_classification_matches_with_http_info(**kwargs)  # noqa: E501
            return data

    def remove_classification_matches_with_http_info(self, **kwargs):  # noqa: E501
        """Removes multiple Classification Matches  # noqa: E501

        Removes multiple Classification Matches with IDs provided in request body.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_classification_matches_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeleteClassificationMatchesRequest body: The list of Classification Match IDs to be deleted.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_classification_matches" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/dataClassification/classificationMatches/bulk', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

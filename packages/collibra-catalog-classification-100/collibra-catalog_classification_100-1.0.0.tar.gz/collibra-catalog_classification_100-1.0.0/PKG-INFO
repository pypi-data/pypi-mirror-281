Metadata-Version: 2.1
Name: collibra-catalog_classification_100
Version: 1.0.0
Summary: Collibra Catalog Classification API
Home-page: 
Author-email: 
Keywords: Swagger,Collibra Catalog Classification API
Description-Content-Type: text/markdown

# collibra-catalog_classification_100
<p>The Catalog API offers functionality related to the catalog product.<br/> It is mainly focused on facilitating the ingestion of information into Catalog. The API enables users to more easily connect Catalog to sources that are not necessarily natively supported in the product. </p>

This Python package is automatically generated by the [Swagger Codegen](https://github.com/swagger-api/swagger-codegen) project:

- API version: 1.0
- Package version: 1.0.0
- Build package: io.swagger.codegen.v3.generators.python.PythonClientCodegen

## Requirements.

Python 2.7 and 3.4+

## Installation & Usage
### pip install

If the python package is hosted on Github, you can install directly from Github

```sh
pip install git+https://github.com/GIT_USER_ID/GIT_REPO_ID.git
```
(you may need to run `pip` with root permission: `sudo pip install git+https://github.com/GIT_USER_ID/GIT_REPO_ID.git`)

Then import the package:
```python
import collibra_catalog_classification 
```

### Setuptools

Install via [Setuptools](http://pypi.python.org/pypi/setuptools).

```sh
python setup.py install --user
```
(or `sudo python setup.py install` to install the package for all users)

Then import the package:
```python
import collibra_catalog_classification
```

## Getting Started

Please follow the [installation procedure](#installation--usage) and then run the following:

```python
from __future__ import print_function
import time
import collibra_catalog_classification
from collibra_catalog_classification.rest import ApiException
from pprint import pprint
# Configure HTTP basic authorization: basicAuth
configuration = collibra_catalog_classification.Configuration()
configuration.username = 'YOUR_USERNAME'
configuration.password = 'YOUR_PASSWORD'

# create an instance of the API class
api_instance = collibra_catalog_classification.DataClassificationApi(collibra_catalog_classification.ApiClient(configuration))
body = collibra_catalog_classification.AddClassificationRequest() # AddClassificationRequest | The request with data needed for creation of new classification. (optional)

try:
    # Adds new Classification
    api_response = api_instance.add_classification(body=body)
    pprint(api_response)
except ApiException as e:
    print("Exception when calling DataClassificationApi->add_classification: %s\n" % e)
# Configure HTTP basic authorization: basicAuth
configuration = collibra_catalog_classification.Configuration()
configuration.username = 'YOUR_USERNAME'
configuration.password = 'YOUR_PASSWORD'

# create an instance of the API class
api_instance = collibra_catalog_classification.DataClassificationApi(collibra_catalog_classification.ApiClient(configuration))
body = collibra_catalog_classification.AddClassificationMatchRequest() # AddClassificationMatchRequest | The request with data needed for creation of new classification match. (optional)

try:
    # Adds new Classification Match
    api_response = api_instance.add_classification_match(body=body)
    pprint(api_response)
except ApiException as e:
    print("Exception when calling DataClassificationApi->add_classification_match: %s\n" % e)
# Configure HTTP basic authorization: basicAuth
configuration = collibra_catalog_classification.Configuration()
configuration.username = 'YOUR_USERNAME'
configuration.password = 'YOUR_PASSWORD'

# create an instance of the API class
api_instance = collibra_catalog_classification.DataClassificationApi(collibra_catalog_classification.ApiClient(configuration))
body = collibra_catalog_classification.AddClassificationMatchesRequest() # AddClassificationMatchesRequest | The request with data needed for creation of new classification matches. (optional)

try:
    # Adds new Classification Matches
    api_response = api_instance.add_classification_matches(body=body)
    pprint(api_response)
except ApiException as e:
    print("Exception when calling DataClassificationApi->add_classification_matches: %s\n" % e)
# Configure HTTP basic authorization: basicAuth
configuration = collibra_catalog_classification.Configuration()
configuration.username = 'YOUR_USERNAME'
configuration.password = 'YOUR_PASSWORD'

# create an instance of the API class
api_instance = collibra_catalog_classification.DataClassificationApi(collibra_catalog_classification.ApiClient(configuration))
classification_id = '38400000-8cf0-11bd-b23e-10b96e4ef00d' # str | The id of the Classification to be changed
body = collibra_catalog_classification.ChangeClassificationRequest() # ChangeClassificationRequest | The properties of the Classification to be changed. (optional)

try:
    # Changes existing Classification
    api_response = api_instance.change_classification(classification_id, body=body)
    pprint(api_response)
except ApiException as e:
    print("Exception when calling DataClassificationApi->change_classification: %s\n" % e)
# Configure HTTP basic authorization: basicAuth
configuration = collibra_catalog_classification.Configuration()
configuration.username = 'YOUR_USERNAME'
configuration.password = 'YOUR_PASSWORD'

# create an instance of the API class
api_instance = collibra_catalog_classification.DataClassificationApi(collibra_catalog_classification.ApiClient(configuration))
classification_match_id = '38400000-8cf0-11bd-b23e-10b96e4ef00d' # str | The id of the Classification Match to be changed
body = collibra_catalog_classification.ChangeClassificationMatchRequest() # ChangeClassificationMatchRequest | The properties of the Classification Match to be changed. (optional)

try:
    # Changes a Classification Match
    api_response = api_instance.change_classification_match(classification_match_id, body=body)
    pprint(api_response)
except ApiException as e:
    print("Exception when calling DataClassificationApi->change_classification_match: %s\n" % e)
# Configure HTTP basic authorization: basicAuth
configuration = collibra_catalog_classification.Configuration()
configuration.username = 'YOUR_USERNAME'
configuration.password = 'YOUR_PASSWORD'

# create an instance of the API class
api_instance = collibra_catalog_classification.DataClassificationApi(collibra_catalog_classification.ApiClient(configuration))
body = [collibra_catalog_classification.ChangeClassificationMatchRequest()] # list[ChangeClassificationMatchRequest] | The list of properties of the Classification Matches to be changed. (optional)

try:
    # Changes multiple Classification Matches
    api_response = api_instance.change_classification_matches(body=body)
    pprint(api_response)
except ApiException as e:
    print("Exception when calling DataClassificationApi->change_classification_matches: %s\n" % e)
# Configure HTTP basic authorization: basicAuth
configuration = collibra_catalog_classification.Configuration()
configuration.username = 'YOUR_USERNAME'
configuration.password = 'YOUR_PASSWORD'

# create an instance of the API class
api_instance = collibra_catalog_classification.DataClassificationApi(collibra_catalog_classification.ApiClient(configuration))
body = collibra_catalog_classification.ClassifyRequest() # ClassifyRequest | The request with data needed for running classification job. (optional)

try:
    # Starts a job that classifies datasets, databases, schemas, tables or columns by external service based on sample data.
    api_instance.classify(body=body)
except ApiException as e:
    print("Exception when calling DataClassificationApi->classify: %s\n" % e)
# Configure HTTP basic authorization: basicAuth
configuration = collibra_catalog_classification.Configuration()
configuration.username = 'YOUR_USERNAME'
configuration.password = 'YOUR_PASSWORD'

# create an instance of the API class
api_instance = collibra_catalog_classification.DataClassificationApi(collibra_catalog_classification.ApiClient(configuration))
body = collibra_catalog_classification.FindClassificationMatchesRequest() # FindClassificationMatchesRequest | The search criteria of the Classification Matches to be found. (optional)

try:
    # Finds Classification Matches
    api_response = api_instance.find_classification_matches(body=body)
    pprint(api_response)
except ApiException as e:
    print("Exception when calling DataClassificationApi->find_classification_matches: %s\n" % e)
# Configure HTTP basic authorization: basicAuth
configuration = collibra_catalog_classification.Configuration()
configuration.username = 'YOUR_USERNAME'
configuration.password = 'YOUR_PASSWORD'

# create an instance of the API class
api_instance = collibra_catalog_classification.DataClassificationApi(collibra_catalog_classification.ApiClient(configuration))
offset = 0 # int | The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>. (optional) (default to 0)
limit = 0 # int | The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used. The maximum allowed limit is 1000. (optional) (default to 0)
count_limit = -1 # int | Allows to limit the number of elements that will be counted. -1 will count everything and 0 will cause the count to be skipped (optional) (default to -1)
asset_ids = ['asset_ids_example'] # list[str] | The <code>id</code>s of the assets (with Column types) to filter by the search results (optional)
statuses = ['statuses_example'] # list[str] | The list of classification match statuses to filter by the search results. (optional)
classification_ids = ['classification_ids_example'] # list[str] | The list of classification ids to filter by the search results. (optional)
asset_type_ids = ['asset_type_ids_example'] # list[str] | The list of asset type ids to filter by the search results. (optional)

try:
    # Finds Classification Matches
    api_response = api_instance.find_classification_matches_with_params(offset=offset, limit=limit, count_limit=count_limit, asset_ids=asset_ids, statuses=statuses, classification_ids=classification_ids, asset_type_ids=asset_type_ids)
    pprint(api_response)
except ApiException as e:
    print("Exception when calling DataClassificationApi->find_classification_matches_with_params: %s\n" % e)
# Configure HTTP basic authorization: basicAuth
configuration = collibra_catalog_classification.Configuration()
configuration.username = 'YOUR_USERNAME'
configuration.password = 'YOUR_PASSWORD'

# create an instance of the API class
api_instance = collibra_catalog_classification.DataClassificationApi(collibra_catalog_classification.ApiClient(configuration))
body = collibra_catalog_classification.FindClassificationsRequest() # FindClassificationsRequest | The search criteria of the Classifications to be found. (optional)

try:
    # Finds Classifications
    api_response = api_instance.find_classifications(body=body)
    pprint(api_response)
except ApiException as e:
    print("Exception when calling DataClassificationApi->find_classifications: %s\n" % e)
# Configure HTTP basic authorization: basicAuth
configuration = collibra_catalog_classification.Configuration()
configuration.username = 'YOUR_USERNAME'
configuration.password = 'YOUR_PASSWORD'

# create an instance of the API class
api_instance = collibra_catalog_classification.DataClassificationApi(collibra_catalog_classification.ApiClient(configuration))
offset = 0 # int | The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>. (optional) (default to 0)
limit = 0 # int | The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used. The maximum allowed limit is 1000. (optional) (default to 0)
count_limit = -1 # int | Allows to limit the number of elements that will be counted. -1 will count everything and 0 will cause the count to be skipped (optional) (default to -1)
name = 'name_example' # str | The exact name of classification to filter by the search results. (optional)

try:
    # Finds Classifications
    api_response = api_instance.find_classifications_bulk(offset=offset, limit=limit, count_limit=count_limit, name=name)
    pprint(api_response)
except ApiException as e:
    print("Exception when calling DataClassificationApi->find_classifications_bulk: %s\n" % e)
# Configure HTTP basic authorization: basicAuth
configuration = collibra_catalog_classification.Configuration()
configuration.username = 'YOUR_USERNAME'
configuration.password = 'YOUR_PASSWORD'

# create an instance of the API class
api_instance = collibra_catalog_classification.DataClassificationApi(collibra_catalog_classification.ApiClient(configuration))
classification_id = '38400000-8cf0-11bd-b23e-10b96e4ef00d' # str | 

try:
    # Gets existing Classification by id.
    api_instance.get_classification(classification_id)
except ApiException as e:
    print("Exception when calling DataClassificationApi->get_classification: %s\n" % e)
# Configure HTTP basic authorization: basicAuth
configuration = collibra_catalog_classification.Configuration()
configuration.username = 'YOUR_USERNAME'
configuration.password = 'YOUR_PASSWORD'

# create an instance of the API class
api_instance = collibra_catalog_classification.DataClassificationApi(collibra_catalog_classification.ApiClient(configuration))
classification_match_id = '38400000-8cf0-11bd-b23e-10b96e4ef00d' # str | The id of the Classification Match to be fetched

try:
    # Gets existing Classification Match by id.
    api_instance.get_classification_match(classification_match_id)
except ApiException as e:
    print("Exception when calling DataClassificationApi->get_classification_match: %s\n" % e)
# Configure HTTP basic authorization: basicAuth
configuration = collibra_catalog_classification.Configuration()
configuration.username = 'YOUR_USERNAME'
configuration.password = 'YOUR_PASSWORD'

# create an instance of the API class
api_instance = collibra_catalog_classification.DataClassificationApi(collibra_catalog_classification.ApiClient(configuration))
classification_id = '38400000-8cf0-11bd-b23e-10b96e4ef00d' # str | 

try:
    # Removes existing Classification. WARNING: This will also remove all ClassificationMatches that are joined with this Classification!
    api_instance.remove_classification(classification_id)
except ApiException as e:
    print("Exception when calling DataClassificationApi->remove_classification: %s\n" % e)
# Configure HTTP basic authorization: basicAuth
configuration = collibra_catalog_classification.Configuration()
configuration.username = 'YOUR_USERNAME'
configuration.password = 'YOUR_PASSWORD'

# create an instance of the API class
api_instance = collibra_catalog_classification.DataClassificationApi(collibra_catalog_classification.ApiClient(configuration))
classification_match_id = '38400000-8cf0-11bd-b23e-10b96e4ef00d' # str | The id of the Classification Match to be deleted

try:
    # Removes existing Classification Match.
    api_instance.remove_classification_match(classification_match_id)
except ApiException as e:
    print("Exception when calling DataClassificationApi->remove_classification_match: %s\n" % e)
# Configure HTTP basic authorization: basicAuth
configuration = collibra_catalog_classification.Configuration()
configuration.username = 'YOUR_USERNAME'
configuration.password = 'YOUR_PASSWORD'

# create an instance of the API class
api_instance = collibra_catalog_classification.DataClassificationApi(collibra_catalog_classification.ApiClient(configuration))
body = collibra_catalog_classification.DeleteClassificationMatchesRequest() # DeleteClassificationMatchesRequest | The list of Classification Match IDs to be deleted. (optional)

try:
    # Removes multiple Classification Matches
    api_instance.remove_classification_matches(body=body)
except ApiException as e:
    print("Exception when calling DataClassificationApi->remove_classification_matches: %s\n" % e)
```

## Documentation for API Endpoints

All URIs are relative to */rest/catalog/1.0*

Class | Method | HTTP request | Description
------------ | ------------- | ------------- | -------------
*DataClassificationApi* | [**add_classification**](docs/DataClassificationApi.md#add_classification) | **POST** /dataClassification/classifications | Adds new Classification
*DataClassificationApi* | [**add_classification_match**](docs/DataClassificationApi.md#add_classification_match) | **POST** /dataClassification/classificationMatches | Adds new Classification Match
*DataClassificationApi* | [**add_classification_matches**](docs/DataClassificationApi.md#add_classification_matches) | **POST** /dataClassification/classificationMatches/bulk | Adds new Classification Matches
*DataClassificationApi* | [**change_classification**](docs/DataClassificationApi.md#change_classification) | **PATCH** /dataClassification/classifications/{classificationId} | Changes existing Classification
*DataClassificationApi* | [**change_classification_match**](docs/DataClassificationApi.md#change_classification_match) | **PATCH** /dataClassification/classificationMatches/{classificationMatchId} | Changes a Classification Match
*DataClassificationApi* | [**change_classification_matches**](docs/DataClassificationApi.md#change_classification_matches) | **PATCH** /dataClassification/classificationMatches/bulk | Changes multiple Classification Matches
*DataClassificationApi* | [**classify**](docs/DataClassificationApi.md#classify) | **POST** /dataClassification/classifications/classify | Starts a job that classifies datasets, databases, schemas, tables or columns by external service based on sample data.
*DataClassificationApi* | [**find_classification_matches**](docs/DataClassificationApi.md#find_classification_matches) | **GET** /dataClassification/classificationMatches | Finds Classification Matches
*DataClassificationApi* | [**find_classification_matches_with_params**](docs/DataClassificationApi.md#find_classification_matches_with_params) | **GET** /dataClassification/classificationMatches/bulk | Finds Classification Matches
*DataClassificationApi* | [**find_classifications**](docs/DataClassificationApi.md#find_classifications) | **GET** /dataClassification/classifications | Finds Classifications
*DataClassificationApi* | [**find_classifications_bulk**](docs/DataClassificationApi.md#find_classifications_bulk) | **GET** /dataClassification/classifications/bulk | Finds Classifications
*DataClassificationApi* | [**get_classification**](docs/DataClassificationApi.md#get_classification) | **GET** /dataClassification/classifications/{classificationId} | Gets existing Classification by id.
*DataClassificationApi* | [**get_classification_match**](docs/DataClassificationApi.md#get_classification_match) | **GET** /dataClassification/classificationMatches/{classificationMatchId} | Gets existing Classification Match by id.
*DataClassificationApi* | [**remove_classification**](docs/DataClassificationApi.md#remove_classification) | **DELETE** /dataClassification/classifications/{classificationId} | Removes existing Classification. WARNING: This will also remove all ClassificationMatches that are joined with this Classification!
*DataClassificationApi* | [**remove_classification_match**](docs/DataClassificationApi.md#remove_classification_match) | **DELETE** /dataClassification/classificationMatches/{classificationMatchId} | Removes existing Classification Match.
*DataClassificationApi* | [**remove_classification_matches**](docs/DataClassificationApi.md#remove_classification_matches) | **DELETE** /dataClassification/classificationMatches/bulk | Removes multiple Classification Matches

## Documentation For Models

 - [AddClassificationMatchRequest](docs/AddClassificationMatchRequest.md)
 - [AddClassificationMatchesRequest](docs/AddClassificationMatchesRequest.md)
 - [AddClassificationRequest](docs/AddClassificationRequest.md)
 - [ChangeClassificationMatchRequest](docs/ChangeClassificationMatchRequest.md)
 - [ChangeClassificationRequest](docs/ChangeClassificationRequest.md)
 - [Classification](docs/Classification.md)
 - [ClassificationMatch](docs/ClassificationMatch.md)
 - [ClassifyRequest](docs/ClassifyRequest.md)
 - [DeleteClassificationMatchesRequest](docs/DeleteClassificationMatchesRequest.md)
 - [FindClassificationMatchesRequest](docs/FindClassificationMatchesRequest.md)
 - [FindClassificationsRequest](docs/FindClassificationsRequest.md)
 - [Job](docs/Job.md)
 - [NamedResourceReferenceImpl](docs/NamedResourceReferenceImpl.md)
 - [PagedResponseClassification](docs/PagedResponseClassification.md)
 - [PagedResponseClassificationMatch](docs/PagedResponseClassificationMatch.md)

## Documentation For Authorization


## basicAuth

- **Type**: HTTP basic authentication


## Author



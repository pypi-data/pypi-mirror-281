# coding: utf-8

"""
    Collibra Catalog Cloud Ingestions API

    <p>The Catalog Cloud Ingestions API offers functionality related to the catalog product.<br/> It is mainly focused on facilitating the ingestion of information into Catalog. The API enables users to more easily connect Catalog to sources that are not necessarily natively supported in the product. </p>  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Schedule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'cron_expression': 'str',
        'cron_time_zone': 'str',
        'last_run_time_stamp': 'int',
        'next_run_date_long_value': 'int',
        'cron_json': 'str'
    }

    attribute_map = {
        'id': 'id',
        'cron_expression': 'cronExpression',
        'cron_time_zone': 'cronTimeZone',
        'last_run_time_stamp': 'lastRunTimeStamp',
        'next_run_date_long_value': 'nextRunDateLongValue',
        'cron_json': 'cronJson'
    }

    def __init__(self, id=None, cron_expression=None, cron_time_zone=None, last_run_time_stamp=None, next_run_date_long_value=None, cron_json=None):  # noqa: E501
        """Schedule - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._cron_expression = None
        self._cron_time_zone = None
        self._last_run_time_stamp = None
        self._next_run_date_long_value = None
        self._cron_json = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if cron_expression is not None:
            self.cron_expression = cron_expression
        if cron_time_zone is not None:
            self.cron_time_zone = cron_time_zone
        if last_run_time_stamp is not None:
            self.last_run_time_stamp = last_run_time_stamp
        if next_run_date_long_value is not None:
            self.next_run_date_long_value = next_run_date_long_value
        if cron_json is not None:
            self.cron_json = cron_json

    @property
    def id(self):
        """Gets the id of this Schedule.  # noqa: E501


        :return: The id of this Schedule.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Schedule.


        :param id: The id of this Schedule.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def cron_expression(self):
        """Gets the cron_expression of this Schedule.  # noqa: E501


        :return: The cron_expression of this Schedule.  # noqa: E501
        :rtype: str
        """
        return self._cron_expression

    @cron_expression.setter
    def cron_expression(self, cron_expression):
        """Sets the cron_expression of this Schedule.


        :param cron_expression: The cron_expression of this Schedule.  # noqa: E501
        :type: str
        """

        self._cron_expression = cron_expression

    @property
    def cron_time_zone(self):
        """Gets the cron_time_zone of this Schedule.  # noqa: E501


        :return: The cron_time_zone of this Schedule.  # noqa: E501
        :rtype: str
        """
        return self._cron_time_zone

    @cron_time_zone.setter
    def cron_time_zone(self, cron_time_zone):
        """Sets the cron_time_zone of this Schedule.


        :param cron_time_zone: The cron_time_zone of this Schedule.  # noqa: E501
        :type: str
        """

        self._cron_time_zone = cron_time_zone

    @property
    def last_run_time_stamp(self):
        """Gets the last_run_time_stamp of this Schedule.  # noqa: E501


        :return: The last_run_time_stamp of this Schedule.  # noqa: E501
        :rtype: int
        """
        return self._last_run_time_stamp

    @last_run_time_stamp.setter
    def last_run_time_stamp(self, last_run_time_stamp):
        """Sets the last_run_time_stamp of this Schedule.


        :param last_run_time_stamp: The last_run_time_stamp of this Schedule.  # noqa: E501
        :type: int
        """

        self._last_run_time_stamp = last_run_time_stamp

    @property
    def next_run_date_long_value(self):
        """Gets the next_run_date_long_value of this Schedule.  # noqa: E501


        :return: The next_run_date_long_value of this Schedule.  # noqa: E501
        :rtype: int
        """
        return self._next_run_date_long_value

    @next_run_date_long_value.setter
    def next_run_date_long_value(self, next_run_date_long_value):
        """Sets the next_run_date_long_value of this Schedule.


        :param next_run_date_long_value: The next_run_date_long_value of this Schedule.  # noqa: E501
        :type: int
        """

        self._next_run_date_long_value = next_run_date_long_value

    @property
    def cron_json(self):
        """Gets the cron_json of this Schedule.  # noqa: E501


        :return: The cron_json of this Schedule.  # noqa: E501
        :rtype: str
        """
        return self._cron_json

    @cron_json.setter
    def cron_json(self, cron_json):
        """Sets the cron_json of this Schedule.


        :param cron_json: The cron_json of this Schedule.  # noqa: E501
        :type: str
        """

        self._cron_json = cron_json

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Schedule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Schedule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

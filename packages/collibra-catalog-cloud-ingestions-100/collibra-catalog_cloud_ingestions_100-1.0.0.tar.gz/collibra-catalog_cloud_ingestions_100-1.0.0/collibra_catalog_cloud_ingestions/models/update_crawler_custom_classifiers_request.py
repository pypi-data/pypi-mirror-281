# coding: utf-8

"""
    Collibra Catalog Cloud Ingestions API

    <p>The Catalog Cloud Ingestions API offers functionality related to the catalog product.<br/> It is mainly focused on facilitating the ingestion of information into Catalog. The API enables users to more easily connect Catalog to sources that are not necessarily natively supported in the product. </p>  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateCrawlerCustomClassifiersRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'crawler_id': 'str',
        'custom_classifier_names': 'list[str]'
    }

    attribute_map = {
        'crawler_id': 'crawlerId',
        'custom_classifier_names': 'customClassifierNames'
    }

    def __init__(self, crawler_id=None, custom_classifier_names=None):  # noqa: E501
        """UpdateCrawlerCustomClassifiersRequest - a model defined in Swagger"""  # noqa: E501
        self._crawler_id = None
        self._custom_classifier_names = None
        self.discriminator = None
        self.crawler_id = crawler_id
        self.custom_classifier_names = custom_classifier_names

    @property
    def crawler_id(self):
        """Gets the crawler_id of this UpdateCrawlerCustomClassifiersRequest.  # noqa: E501


        :return: The crawler_id of this UpdateCrawlerCustomClassifiersRequest.  # noqa: E501
        :rtype: str
        """
        return self._crawler_id

    @crawler_id.setter
    def crawler_id(self, crawler_id):
        """Sets the crawler_id of this UpdateCrawlerCustomClassifiersRequest.


        :param crawler_id: The crawler_id of this UpdateCrawlerCustomClassifiersRequest.  # noqa: E501
        :type: str
        """
        if crawler_id is None:
            raise ValueError("Invalid value for `crawler_id`, must not be `None`")  # noqa: E501

        self._crawler_id = crawler_id

    @property
    def custom_classifier_names(self):
        """Gets the custom_classifier_names of this UpdateCrawlerCustomClassifiersRequest.  # noqa: E501


        :return: The custom_classifier_names of this UpdateCrawlerCustomClassifiersRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._custom_classifier_names

    @custom_classifier_names.setter
    def custom_classifier_names(self, custom_classifier_names):
        """Sets the custom_classifier_names of this UpdateCrawlerCustomClassifiersRequest.


        :param custom_classifier_names: The custom_classifier_names of this UpdateCrawlerCustomClassifiersRequest.  # noqa: E501
        :type: list[str]
        """
        if custom_classifier_names is None:
            raise ValueError("Invalid value for `custom_classifier_names`, must not be `None`")  # noqa: E501

        self._custom_classifier_names = custom_classifier_names

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateCrawlerCustomClassifiersRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateCrawlerCustomClassifiersRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

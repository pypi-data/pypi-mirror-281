# coding: utf-8

"""
    Collibra Catalog Cloud Ingestions API

    <p>The Catalog Cloud Ingestions API offers functionality related to the catalog product.<br/> It is mainly focused on facilitating the ingestion of information into Catalog. The API enables users to more easily connect Catalog to sources that are not necessarily natively supported in the product. </p>  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateCrawlerRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'include_paths': 'list[CrawlerIncludePathRequest]',
        'crawler_id': 'str',
        'domain_id': 'str',
        'asset_type_id': 'str',
        'custom_classifiers': 'list[str]',
        'table_level': 'int',
        'targets': 'str'
    }

    attribute_map = {
        'name': 'name',
        'include_paths': 'includePaths',
        'crawler_id': 'crawlerId',
        'domain_id': 'domainId',
        'asset_type_id': 'assetTypeId',
        'custom_classifiers': 'customClassifiers',
        'table_level': 'tableLevel',
        'targets': 'targets'
    }

    def __init__(self, name=None, include_paths=None, crawler_id=None, domain_id=None, asset_type_id=None, custom_classifiers=None, table_level=None, targets=None):  # noqa: E501
        """UpdateCrawlerRequest - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._include_paths = None
        self._crawler_id = None
        self._domain_id = None
        self._asset_type_id = None
        self._custom_classifiers = None
        self._table_level = None
        self._targets = None
        self.discriminator = None
        self.name = name
        self.include_paths = include_paths
        self.crawler_id = crawler_id
        self.domain_id = domain_id
        self.asset_type_id = asset_type_id
        if custom_classifiers is not None:
            self.custom_classifiers = custom_classifiers
        if table_level is not None:
            self.table_level = table_level
        if targets is not None:
            self.targets = targets

    @property
    def name(self):
        """Gets the name of this UpdateCrawlerRequest.  # noqa: E501


        :return: The name of this UpdateCrawlerRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateCrawlerRequest.


        :param name: The name of this UpdateCrawlerRequest.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def include_paths(self):
        """Gets the include_paths of this UpdateCrawlerRequest.  # noqa: E501


        :return: The include_paths of this UpdateCrawlerRequest.  # noqa: E501
        :rtype: list[CrawlerIncludePathRequest]
        """
        return self._include_paths

    @include_paths.setter
    def include_paths(self, include_paths):
        """Sets the include_paths of this UpdateCrawlerRequest.


        :param include_paths: The include_paths of this UpdateCrawlerRequest.  # noqa: E501
        :type: list[CrawlerIncludePathRequest]
        """
        if include_paths is None:
            raise ValueError("Invalid value for `include_paths`, must not be `None`")  # noqa: E501

        self._include_paths = include_paths

    @property
    def crawler_id(self):
        """Gets the crawler_id of this UpdateCrawlerRequest.  # noqa: E501


        :return: The crawler_id of this UpdateCrawlerRequest.  # noqa: E501
        :rtype: str
        """
        return self._crawler_id

    @crawler_id.setter
    def crawler_id(self, crawler_id):
        """Sets the crawler_id of this UpdateCrawlerRequest.


        :param crawler_id: The crawler_id of this UpdateCrawlerRequest.  # noqa: E501
        :type: str
        """
        if crawler_id is None:
            raise ValueError("Invalid value for `crawler_id`, must not be `None`")  # noqa: E501

        self._crawler_id = crawler_id

    @property
    def domain_id(self):
        """Gets the domain_id of this UpdateCrawlerRequest.  # noqa: E501


        :return: The domain_id of this UpdateCrawlerRequest.  # noqa: E501
        :rtype: str
        """
        return self._domain_id

    @domain_id.setter
    def domain_id(self, domain_id):
        """Sets the domain_id of this UpdateCrawlerRequest.


        :param domain_id: The domain_id of this UpdateCrawlerRequest.  # noqa: E501
        :type: str
        """
        if domain_id is None:
            raise ValueError("Invalid value for `domain_id`, must not be `None`")  # noqa: E501

        self._domain_id = domain_id

    @property
    def asset_type_id(self):
        """Gets the asset_type_id of this UpdateCrawlerRequest.  # noqa: E501


        :return: The asset_type_id of this UpdateCrawlerRequest.  # noqa: E501
        :rtype: str
        """
        return self._asset_type_id

    @asset_type_id.setter
    def asset_type_id(self, asset_type_id):
        """Sets the asset_type_id of this UpdateCrawlerRequest.


        :param asset_type_id: The asset_type_id of this UpdateCrawlerRequest.  # noqa: E501
        :type: str
        """
        if asset_type_id is None:
            raise ValueError("Invalid value for `asset_type_id`, must not be `None`")  # noqa: E501

        self._asset_type_id = asset_type_id

    @property
    def custom_classifiers(self):
        """Gets the custom_classifiers of this UpdateCrawlerRequest.  # noqa: E501


        :return: The custom_classifiers of this UpdateCrawlerRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._custom_classifiers

    @custom_classifiers.setter
    def custom_classifiers(self, custom_classifiers):
        """Sets the custom_classifiers of this UpdateCrawlerRequest.


        :param custom_classifiers: The custom_classifiers of this UpdateCrawlerRequest.  # noqa: E501
        :type: list[str]
        """

        self._custom_classifiers = custom_classifiers

    @property
    def table_level(self):
        """Gets the table_level of this UpdateCrawlerRequest.  # noqa: E501


        :return: The table_level of this UpdateCrawlerRequest.  # noqa: E501
        :rtype: int
        """
        return self._table_level

    @table_level.setter
    def table_level(self, table_level):
        """Sets the table_level of this UpdateCrawlerRequest.


        :param table_level: The table_level of this UpdateCrawlerRequest.  # noqa: E501
        :type: int
        """

        self._table_level = table_level

    @property
    def targets(self):
        """Gets the targets of this UpdateCrawlerRequest.  # noqa: E501


        :return: The targets of this UpdateCrawlerRequest.  # noqa: E501
        :rtype: str
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this UpdateCrawlerRequest.


        :param targets: The targets of this UpdateCrawlerRequest.  # noqa: E501
        :type: str
        """

        self._targets = targets

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateCrawlerRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateCrawlerRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

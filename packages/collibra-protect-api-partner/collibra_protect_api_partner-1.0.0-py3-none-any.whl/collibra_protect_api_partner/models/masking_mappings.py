# coding: utf-8

"""
    Collibra Protect API - Partner

    API to retrieve the data access rule set it needs to synchronize. This API is targeted to be used by Collibra Partners.  # noqa: E501

    OpenAPI spec version: 1.0.0-beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MaskingMappings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_type': 'str',
        'function_name': 'str'
    }

    attribute_map = {
        'data_type': 'dataType',
        'function_name': 'functionName'
    }

    def __init__(self, data_type=None, function_name=None):  # noqa: E501
        """MaskingMappings - a model defined in Swagger"""  # noqa: E501
        self._data_type = None
        self._function_name = None
        self.discriminator = None
        self.data_type = data_type
        self.function_name = function_name

    @property
    def data_type(self):
        """Gets the data_type of this MaskingMappings.  # noqa: E501

        The name of the data type (String, Number, Date ...). Data types name depend on the provider, a list of compatible types per provider is available in the documentation.  # noqa: E501

        :return: The data_type of this MaskingMappings.  # noqa: E501
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this MaskingMappings.

        The name of the data type (String, Number, Date ...). Data types name depend on the provider, a list of compatible types per provider is available in the documentation.  # noqa: E501

        :param data_type: The data_type of this MaskingMappings.  # noqa: E501
        :type: str
        """
        if data_type is None:
            raise ValueError("Invalid value for `data_type`, must not be `None`")  # noqa: E501

        self._data_type = data_type

    @property
    def function_name(self):
        """Gets the function_name of this MaskingMappings.  # noqa: E501

        The name of the function that will be used on the provider to provide the custom masking.  # noqa: E501

        :return: The function_name of this MaskingMappings.  # noqa: E501
        :rtype: str
        """
        return self._function_name

    @function_name.setter
    def function_name(self, function_name):
        """Sets the function_name of this MaskingMappings.

        The name of the function that will be used on the provider to provide the custom masking.  # noqa: E501

        :param function_name: The function_name of this MaskingMappings.  # noqa: E501
        :type: str
        """
        if function_name is None:
            raise ValueError("Invalid value for `function_name`, must not be `None`")  # noqa: E501

        self._function_name = function_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MaskingMappings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MaskingMappings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

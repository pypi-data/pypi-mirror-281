# coding: utf-8

"""
    Collibra Catalog API

    <p>The Catalog API offers functionality related to the catalog product.<br/> It is mainly focused on facilitating the ingestion of information into Catalog. The API enables users to more easily connect Catalog to sources that are not necessarily natively supported in the product. </p>  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AddSchemaFromJdbcRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'schema_name': 'str',
        'jdbc_driver_id': 'str',
        'properties': 'dict(str, str)',
        'user': 'str',
        'password': 'list[str]',
        'jdbc_connection_string': 'str',
        'description': 'str',
        'owner_id': 'str',
        'store_credentials': 'bool',
        'cron_expression': 'str',
        'cron_time_zone': 'str',
        'extract_data_sample': 'bool',
        'execute_profiling': 'bool',
        'detect_advanced_data_types': 'bool',
        'tables_to_skip': 'list[str]',
        'job_server': 'str'
    }

    attribute_map = {
        'schema_name': 'schemaName',
        'jdbc_driver_id': 'jdbcDriverId',
        'properties': 'properties',
        'user': 'user',
        'password': 'password',
        'jdbc_connection_string': 'jdbcConnectionString',
        'description': 'description',
        'owner_id': 'ownerId',
        'store_credentials': 'storeCredentials',
        'cron_expression': 'cronExpression',
        'cron_time_zone': 'cronTimeZone',
        'extract_data_sample': 'extractDataSample',
        'execute_profiling': 'executeProfiling',
        'detect_advanced_data_types': 'detectAdvancedDataTypes',
        'tables_to_skip': 'tablesToSkip',
        'job_server': 'jobServer'
    }

    def __init__(self, schema_name=None, jdbc_driver_id=None, properties=None, user=None, password=None, jdbc_connection_string=None, description=None, owner_id=None, store_credentials=None, cron_expression=None, cron_time_zone=None, extract_data_sample=None, execute_profiling=None, detect_advanced_data_types=None, tables_to_skip=None, job_server=None):  # noqa: E501
        """AddSchemaFromJdbcRequest - a model defined in Swagger"""  # noqa: E501
        self._schema_name = None
        self._jdbc_driver_id = None
        self._properties = None
        self._user = None
        self._password = None
        self._jdbc_connection_string = None
        self._description = None
        self._owner_id = None
        self._store_credentials = None
        self._cron_expression = None
        self._cron_time_zone = None
        self._extract_data_sample = None
        self._execute_profiling = None
        self._detect_advanced_data_types = None
        self._tables_to_skip = None
        self._job_server = None
        self.discriminator = None
        self.schema_name = schema_name
        self.jdbc_driver_id = jdbc_driver_id
        self.properties = properties
        self.user = user
        if password is not None:
            self.password = password
        if jdbc_connection_string is not None:
            self.jdbc_connection_string = jdbc_connection_string
        if description is not None:
            self.description = description
        self.owner_id = owner_id
        if store_credentials is not None:
            self.store_credentials = store_credentials
        if cron_expression is not None:
            self.cron_expression = cron_expression
        if cron_time_zone is not None:
            self.cron_time_zone = cron_time_zone
        if extract_data_sample is not None:
            self.extract_data_sample = extract_data_sample
        if execute_profiling is not None:
            self.execute_profiling = execute_profiling
        if detect_advanced_data_types is not None:
            self.detect_advanced_data_types = detect_advanced_data_types
        if tables_to_skip is not None:
            self.tables_to_skip = tables_to_skip
        if job_server is not None:
            self.job_server = job_server

    @property
    def schema_name(self):
        """Gets the schema_name of this AddSchemaFromJdbcRequest.  # noqa: E501

        The schema name  # noqa: E501

        :return: The schema_name of this AddSchemaFromJdbcRequest.  # noqa: E501
        :rtype: str
        """
        return self._schema_name

    @schema_name.setter
    def schema_name(self, schema_name):
        """Sets the schema_name of this AddSchemaFromJdbcRequest.

        The schema name  # noqa: E501

        :param schema_name: The schema_name of this AddSchemaFromJdbcRequest.  # noqa: E501
        :type: str
        """
        if schema_name is None:
            raise ValueError("Invalid value for `schema_name`, must not be `None`")  # noqa: E501

        self._schema_name = schema_name

    @property
    def jdbc_driver_id(self):
        """Gets the jdbc_driver_id of this AddSchemaFromJdbcRequest.  # noqa: E501

        The UUID of the JdbcDriver to use to connect to a JDBC source for ingestion.  # noqa: E501

        :return: The jdbc_driver_id of this AddSchemaFromJdbcRequest.  # noqa: E501
        :rtype: str
        """
        return self._jdbc_driver_id

    @jdbc_driver_id.setter
    def jdbc_driver_id(self, jdbc_driver_id):
        """Sets the jdbc_driver_id of this AddSchemaFromJdbcRequest.

        The UUID of the JdbcDriver to use to connect to a JDBC source for ingestion.  # noqa: E501

        :param jdbc_driver_id: The jdbc_driver_id of this AddSchemaFromJdbcRequest.  # noqa: E501
        :type: str
        """
        if jdbc_driver_id is None:
            raise ValueError("Invalid value for `jdbc_driver_id`, must not be `None`")  # noqa: E501

        self._jdbc_driver_id = jdbc_driver_id

    @property
    def properties(self):
        """Gets the properties of this AddSchemaFromJdbcRequest.  # noqa: E501

        The properties that will be passed to the JDBC driver to connect to the source.  # noqa: E501

        :return: The properties of this AddSchemaFromJdbcRequest.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this AddSchemaFromJdbcRequest.

        The properties that will be passed to the JDBC driver to connect to the source.  # noqa: E501

        :param properties: The properties of this AddSchemaFromJdbcRequest.  # noqa: E501
        :type: dict(str, str)
        """
        if properties is None:
            raise ValueError("Invalid value for `properties`, must not be `None`")  # noqa: E501

        self._properties = properties

    @property
    def user(self):
        """Gets the user of this AddSchemaFromJdbcRequest.  # noqa: E501

        The username for the connection. If the user is not requested, specify an empty String  # noqa: E501

        :return: The user of this AddSchemaFromJdbcRequest.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this AddSchemaFromJdbcRequest.

        The username for the connection. If the user is not requested, specify an empty String  # noqa: E501

        :param user: The user of this AddSchemaFromJdbcRequest.  # noqa: E501
        :type: str
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501

        self._user = user

    @property
    def password(self):
        """Gets the password of this AddSchemaFromJdbcRequest.  # noqa: E501

        The password for the connection. It can be specified as array of char (more secure) or as a String  # noqa: E501

        :return: The password of this AddSchemaFromJdbcRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this AddSchemaFromJdbcRequest.

        The password for the connection. It can be specified as array of char (more secure) or as a String  # noqa: E501

        :param password: The password of this AddSchemaFromJdbcRequest.  # noqa: E501
        :type: list[str]
        """

        self._password = password

    @property
    def jdbc_connection_string(self):
        """Gets the jdbc_connection_string of this AddSchemaFromJdbcRequest.  # noqa: E501

        The connection string that will be used instead of the one from the JdbcDriver.  # noqa: E501

        :return: The jdbc_connection_string of this AddSchemaFromJdbcRequest.  # noqa: E501
        :rtype: str
        """
        return self._jdbc_connection_string

    @jdbc_connection_string.setter
    def jdbc_connection_string(self, jdbc_connection_string):
        """Sets the jdbc_connection_string of this AddSchemaFromJdbcRequest.

        The connection string that will be used instead of the one from the JdbcDriver.  # noqa: E501

        :param jdbc_connection_string: The jdbc_connection_string of this AddSchemaFromJdbcRequest.  # noqa: E501
        :type: str
        """

        self._jdbc_connection_string = jdbc_connection_string

    @property
    def description(self):
        """Gets the description of this AddSchemaFromJdbcRequest.  # noqa: E501

        The description of the schema to be added.  # noqa: E501

        :return: The description of this AddSchemaFromJdbcRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AddSchemaFromJdbcRequest.

        The description of the schema to be added.  # noqa: E501

        :param description: The description of this AddSchemaFromJdbcRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def owner_id(self):
        """Gets the owner_id of this AddSchemaFromJdbcRequest.  # noqa: E501

        The id of the user who will be assigned as the owner of the produced domain.  # noqa: E501

        :return: The owner_id of this AddSchemaFromJdbcRequest.  # noqa: E501
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this AddSchemaFromJdbcRequest.

        The id of the user who will be assigned as the owner of the produced domain.  # noqa: E501

        :param owner_id: The owner_id of this AddSchemaFromJdbcRequest.  # noqa: E501
        :type: str
        """
        if owner_id is None:
            raise ValueError("Invalid value for `owner_id`, must not be `None`")  # noqa: E501

        self._owner_id = owner_id

    @property
    def store_credentials(self):
        """Gets the store_credentials of this AddSchemaFromJdbcRequest.  # noqa: E501

        Specify if the credentials should be stored into the database.  # noqa: E501

        :return: The store_credentials of this AddSchemaFromJdbcRequest.  # noqa: E501
        :rtype: bool
        """
        return self._store_credentials

    @store_credentials.setter
    def store_credentials(self, store_credentials):
        """Sets the store_credentials of this AddSchemaFromJdbcRequest.

        Specify if the credentials should be stored into the database.  # noqa: E501

        :param store_credentials: The store_credentials of this AddSchemaFromJdbcRequest.  # noqa: E501
        :type: bool
        """

        self._store_credentials = store_credentials

    @property
    def cron_expression(self):
        """Gets the cron_expression of this AddSchemaFromJdbcRequest.  # noqa: E501

        The cron expression to enable the automatic refresh. If not set, it will delete the cron job if one was present.<br />It requires storeCredential to be set to true.<br />For the syntax, see http://www.quartz-scheduler.org/documentation/quartz-2.x/tutorials/crontrigger.html  # noqa: E501

        :return: The cron_expression of this AddSchemaFromJdbcRequest.  # noqa: E501
        :rtype: str
        """
        return self._cron_expression

    @cron_expression.setter
    def cron_expression(self, cron_expression):
        """Sets the cron_expression of this AddSchemaFromJdbcRequest.

        The cron expression to enable the automatic refresh. If not set, it will delete the cron job if one was present.<br />It requires storeCredential to be set to true.<br />For the syntax, see http://www.quartz-scheduler.org/documentation/quartz-2.x/tutorials/crontrigger.html  # noqa: E501

        :param cron_expression: The cron_expression of this AddSchemaFromJdbcRequest.  # noqa: E501
        :type: str
        """

        self._cron_expression = cron_expression

    @property
    def cron_time_zone(self):
        """Gets the cron_time_zone of this AddSchemaFromJdbcRequest.  # noqa: E501

        The cron time zone. If a cron expression is set, a time zone is mandatory.  # noqa: E501

        :return: The cron_time_zone of this AddSchemaFromJdbcRequest.  # noqa: E501
        :rtype: str
        """
        return self._cron_time_zone

    @cron_time_zone.setter
    def cron_time_zone(self, cron_time_zone):
        """Sets the cron_time_zone of this AddSchemaFromJdbcRequest.

        The cron time zone. If a cron expression is set, a time zone is mandatory.  # noqa: E501

        :param cron_time_zone: The cron_time_zone of this AddSchemaFromJdbcRequest.  # noqa: E501
        :type: str
        """

        self._cron_time_zone = cron_time_zone

    @property
    def extract_data_sample(self):
        """Gets the extract_data_sample of this AddSchemaFromJdbcRequest.  # noqa: E501

        Specify if sampleData should be extracted from the database.  # noqa: E501

        :return: The extract_data_sample of this AddSchemaFromJdbcRequest.  # noqa: E501
        :rtype: bool
        """
        return self._extract_data_sample

    @extract_data_sample.setter
    def extract_data_sample(self, extract_data_sample):
        """Sets the extract_data_sample of this AddSchemaFromJdbcRequest.

        Specify if sampleData should be extracted from the database.  # noqa: E501

        :param extract_data_sample: The extract_data_sample of this AddSchemaFromJdbcRequest.  # noqa: E501
        :type: bool
        """

        self._extract_data_sample = extract_data_sample

    @property
    def execute_profiling(self):
        """Gets the execute_profiling of this AddSchemaFromJdbcRequest.  # noqa: E501

        Specify if profiling should be executed.  # noqa: E501

        :return: The execute_profiling of this AddSchemaFromJdbcRequest.  # noqa: E501
        :rtype: bool
        """
        return self._execute_profiling

    @execute_profiling.setter
    def execute_profiling(self, execute_profiling):
        """Sets the execute_profiling of this AddSchemaFromJdbcRequest.

        Specify if profiling should be executed.  # noqa: E501

        :param execute_profiling: The execute_profiling of this AddSchemaFromJdbcRequest.  # noqa: E501
        :type: bool
        """

        self._execute_profiling = execute_profiling

    @property
    def detect_advanced_data_types(self):
        """Gets the detect_advanced_data_types of this AddSchemaFromJdbcRequest.  # noqa: E501

        Specify if advanced data types should be detected.  # noqa: E501

        :return: The detect_advanced_data_types of this AddSchemaFromJdbcRequest.  # noqa: E501
        :rtype: bool
        """
        return self._detect_advanced_data_types

    @detect_advanced_data_types.setter
    def detect_advanced_data_types(self, detect_advanced_data_types):
        """Sets the detect_advanced_data_types of this AddSchemaFromJdbcRequest.

        Specify if advanced data types should be detected.  # noqa: E501

        :param detect_advanced_data_types: The detect_advanced_data_types of this AddSchemaFromJdbcRequest.  # noqa: E501
        :type: bool
        """

        self._detect_advanced_data_types = detect_advanced_data_types

    @property
    def tables_to_skip(self):
        """Gets the tables_to_skip of this AddSchemaFromJdbcRequest.  # noqa: E501

        The list table names that shouldn't be ingested. The names can contain * wildcards toskip multiple tables with similar names.  # noqa: E501

        :return: The tables_to_skip of this AddSchemaFromJdbcRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._tables_to_skip

    @tables_to_skip.setter
    def tables_to_skip(self, tables_to_skip):
        """Sets the tables_to_skip of this AddSchemaFromJdbcRequest.

        The list table names that shouldn't be ingested. The names can contain * wildcards toskip multiple tables with similar names.  # noqa: E501

        :param tables_to_skip: The tables_to_skip of this AddSchemaFromJdbcRequest.  # noqa: E501
        :type: list[str]
        """

        self._tables_to_skip = tables_to_skip

    @property
    def job_server(self):
        """Gets the job_server of this AddSchemaFromJdbcRequest.  # noqa: E501

        Specify the jobserver id where to submit the ingestion.  # noqa: E501

        :return: The job_server of this AddSchemaFromJdbcRequest.  # noqa: E501
        :rtype: str
        """
        return self._job_server

    @job_server.setter
    def job_server(self, job_server):
        """Sets the job_server of this AddSchemaFromJdbcRequest.

        Specify the jobserver id where to submit the ingestion.  # noqa: E501

        :param job_server: The job_server of this AddSchemaFromJdbcRequest.  # noqa: E501
        :type: str
        """

        self._job_server = job_server

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddSchemaFromJdbcRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddSchemaFromJdbcRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

Metadata-Version: 2.1
Name: collibra-catalog-100
Version: 1.0.0
Summary: Collibra Catalog API
Home-page: 
Author-email: 
Keywords: Swagger,Collibra Catalog API
Description-Content-Type: text/markdown

# collibra-catalog_100
<p>The Catalog API offers functionality related to the catalog product.<br/> It is mainly focused on facilitating the ingestion of information into Catalog. The API enables users to more easily connect Catalog to sources that are not necessarily natively supported in the product. </p>

This Python package is automatically generated by the [Swagger Codegen](https://github.com/swagger-api/swagger-codegen) project:

- API version: 1.0
- Package version: 1.0.0
- Build package: io.swagger.codegen.v3.generators.python.PythonClientCodegen

## Requirements.

Python 2.7 and 3.4+

## Installation & Usage
### pip install

If the python package is hosted on Github, you can install directly from Github

```sh
pip install git+https://github.com/GIT_USER_ID/GIT_REPO_ID.git
```
(you may need to run `pip` with root permission: `sudo pip install git+https://github.com/GIT_USER_ID/GIT_REPO_ID.git`)

Then import the package:
```python
import collibra_catalog 
```

### Setuptools

Install via [Setuptools](http://pypi.python.org/pypi/setuptools).

```sh
python setup.py install --user
```
(or `sudo python setup.py install` to install the package for all users)

Then import the package:
```python
import collibra_catalog
```

## Getting Started

Please follow the [installation procedure](#installation--usage) and then run the following:

```python
from __future__ import print_function
import time
import collibra_catalog
from collibra_catalog.rest import ApiException
from pprint import pprint

# create an instance of the API class
api_instance = collibra_catalog.JDBCSchemaIngestionApi(collibra_catalog.ApiClient(configuration))
body = collibra_catalog.AddSchemaFromJdbcRequest() # AddSchemaFromJdbcRequest |  (optional)

try:
    # Create a JDBC schema ingestion
    api_response = api_instance.add_schema_from_jdbc(body=body)
    pprint(api_response)
except ApiException as e:
    print("Exception when calling JDBCSchemaIngestionApi->add_schema_from_jdbc: %s\n" % e)

# create an instance of the API class
api_instance = collibra_catalog.JDBCSchemaIngestionApi(collibra_catalog.ApiClient(configuration))
asset_id = '38400000-8cf0-11bd-b23e-10b96e4ef00d' # str | 
body = collibra_catalog.RefreshJdbcSchemaRequest() # RefreshJdbcSchemaRequest |  (optional)

try:
    # Refresh an existing JDBC schema ingestion
    api_response = api_instance.refresh_jdbc_schema(asset_id, body=body)
    pprint(api_response)
except ApiException as e:
    print("Exception when calling JDBCSchemaIngestionApi->refresh_jdbc_schema: %s\n" % e)
```

## Documentation for API Endpoints

All URIs are relative to */rest/catalog/1.0*

Class | Method | HTTP request | Description
------------ | ------------- | ------------- | -------------
*JDBCSchemaIngestionApi* | [**add_schema_from_jdbc**](docs/JDBCSchemaIngestionApi.md#add_schema_from_jdbc) | **POST** /schemas/jdbc | Create a JDBC schema ingestion
*JDBCSchemaIngestionApi* | [**refresh_jdbc_schema**](docs/JDBCSchemaIngestionApi.md#refresh_jdbc_schema) | **POST** /schemas/jdbc/{assetId} | Refresh an existing JDBC schema ingestion
*JobServerInstanceConfigurationApi* | [**get_available_job_server_instances**](docs/JobServerInstanceConfigurationApi.md#get_available_job_server_instances) | **GET** /configuration/jobServerInstance | Retrieve existing JobServer instance configurations

## Documentation For Models

 - [AddSchemaFromJdbcRequest](docs/AddSchemaFromJdbcRequest.md)
 - [Job](docs/Job.md)
 - [JobServerInstance](docs/JobServerInstance.md)
 - [JobServerInstanceResponse](docs/JobServerInstanceResponse.md)
 - [PagedResponseJobServerInstance](docs/PagedResponseJobServerInstance.md)
 - [RefreshJdbcSchemaRequest](docs/RefreshJdbcSchemaRequest.md)

## Documentation For Authorization

 All endpoints do not require authorization.


## Author



# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _TotalVariationPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkProxTVImageFilterPython
else:
    import _itkProxTVImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.itkImageToImageFilterAPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkPointPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkImagePython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkRGBPixelPython
import itk.itkIndexPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython

def itkProxTVImageFilterID2ID2_New():
    return itkProxTVImageFilterID2ID2.New()

class itkProxTVImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""Proxy of C++ itkProxTVImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkProxTVImageFilterID2ID2_Pointer"""
        return _itkProxTVImageFilterPython.itkProxTVImageFilterID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkProxTVImageFilterID2ID2_Pointer"""
        return _itkProxTVImageFilterPython.itkProxTVImageFilterID2ID2_Clone(self)

    def SetMaximumNumberOfIterations(self, _arg):
        r"""
        SetMaximumNumberOfIterations(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkProxTVImageFilterPython.itkProxTVImageFilterID2ID2_SetMaximumNumberOfIterations(self, _arg)

    def GetMaximumNumberOfIterations(self):
        r"""GetMaximumNumberOfIterations(self) -> unsigned int"""
        return _itkProxTVImageFilterPython.itkProxTVImageFilterID2ID2_GetMaximumNumberOfIterations(self)

    def SetWeights(self, _arg):
        r"""
        SetWeights(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD2

        """
        return _itkProxTVImageFilterPython.itkProxTVImageFilterID2ID2_SetWeights(self, _arg)

    def GetWeights(self):
        r"""GetWeights(self) -> itkFixedArrayD2"""
        return _itkProxTVImageFilterPython.itkProxTVImageFilterID2ID2_GetWeights(self)

    def SetNorms(self, _arg):
        r"""
        SetNorms(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD2

        """
        return _itkProxTVImageFilterPython.itkProxTVImageFilterID2ID2_SetNorms(self, _arg)

    def GetNorms(self):
        r"""GetNorms(self) -> itkFixedArrayD2"""
        return _itkProxTVImageFilterPython.itkProxTVImageFilterID2ID2_GetNorms(self)
    __swig_destroy__ = _itkProxTVImageFilterPython.delete_itkProxTVImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkProxTVImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkProxTVImageFilterPython.itkProxTVImageFilterID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkProxTVImageFilterID2ID2

        Create a new object of the class itkProxTVImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkProxTVImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkProxTVImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkProxTVImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkProxTVImageFilterID2ID2 in _itkProxTVImageFilterPython:
_itkProxTVImageFilterPython.itkProxTVImageFilterID2ID2_swigregister(itkProxTVImageFilterID2ID2)

def itkProxTVImageFilterID3ID3_New():
    return itkProxTVImageFilterID3ID3.New()

class itkProxTVImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""Proxy of C++ itkProxTVImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkProxTVImageFilterID3ID3_Pointer"""
        return _itkProxTVImageFilterPython.itkProxTVImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkProxTVImageFilterID3ID3_Pointer"""
        return _itkProxTVImageFilterPython.itkProxTVImageFilterID3ID3_Clone(self)

    def SetMaximumNumberOfIterations(self, _arg):
        r"""
        SetMaximumNumberOfIterations(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkProxTVImageFilterPython.itkProxTVImageFilterID3ID3_SetMaximumNumberOfIterations(self, _arg)

    def GetMaximumNumberOfIterations(self):
        r"""GetMaximumNumberOfIterations(self) -> unsigned int"""
        return _itkProxTVImageFilterPython.itkProxTVImageFilterID3ID3_GetMaximumNumberOfIterations(self)

    def SetWeights(self, _arg):
        r"""
        SetWeights(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD3

        """
        return _itkProxTVImageFilterPython.itkProxTVImageFilterID3ID3_SetWeights(self, _arg)

    def GetWeights(self):
        r"""GetWeights(self) -> itkFixedArrayD3"""
        return _itkProxTVImageFilterPython.itkProxTVImageFilterID3ID3_GetWeights(self)

    def SetNorms(self, _arg):
        r"""
        SetNorms(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD3

        """
        return _itkProxTVImageFilterPython.itkProxTVImageFilterID3ID3_SetNorms(self, _arg)

    def GetNorms(self):
        r"""GetNorms(self) -> itkFixedArrayD3"""
        return _itkProxTVImageFilterPython.itkProxTVImageFilterID3ID3_GetNorms(self)
    __swig_destroy__ = _itkProxTVImageFilterPython.delete_itkProxTVImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkProxTVImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkProxTVImageFilterPython.itkProxTVImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkProxTVImageFilterID3ID3

        Create a new object of the class itkProxTVImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkProxTVImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkProxTVImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkProxTVImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkProxTVImageFilterID3ID3 in _itkProxTVImageFilterPython:
_itkProxTVImageFilterPython.itkProxTVImageFilterID3ID3_swigregister(itkProxTVImageFilterID3ID3)

def itkProxTVImageFilterID4ID4_New():
    return itkProxTVImageFilterID4ID4.New()

class itkProxTVImageFilterID4ID4(itk.itkImageToImageFilterAPython.itkImageToImageFilterID4ID4):
    r"""Proxy of C++ itkProxTVImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkProxTVImageFilterID4ID4_Pointer"""
        return _itkProxTVImageFilterPython.itkProxTVImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkProxTVImageFilterID4ID4_Pointer"""
        return _itkProxTVImageFilterPython.itkProxTVImageFilterID4ID4_Clone(self)

    def SetMaximumNumberOfIterations(self, _arg):
        r"""
        SetMaximumNumberOfIterations(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkProxTVImageFilterPython.itkProxTVImageFilterID4ID4_SetMaximumNumberOfIterations(self, _arg)

    def GetMaximumNumberOfIterations(self):
        r"""GetMaximumNumberOfIterations(self) -> unsigned int"""
        return _itkProxTVImageFilterPython.itkProxTVImageFilterID4ID4_GetMaximumNumberOfIterations(self)

    def SetWeights(self, _arg):
        r"""
        SetWeights(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD4

        """
        return _itkProxTVImageFilterPython.itkProxTVImageFilterID4ID4_SetWeights(self, _arg)

    def GetWeights(self):
        r"""GetWeights(self) -> itkFixedArrayD4"""
        return _itkProxTVImageFilterPython.itkProxTVImageFilterID4ID4_GetWeights(self)

    def SetNorms(self, _arg):
        r"""
        SetNorms(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD4

        """
        return _itkProxTVImageFilterPython.itkProxTVImageFilterID4ID4_SetNorms(self, _arg)

    def GetNorms(self):
        r"""GetNorms(self) -> itkFixedArrayD4"""
        return _itkProxTVImageFilterPython.itkProxTVImageFilterID4ID4_GetNorms(self)
    __swig_destroy__ = _itkProxTVImageFilterPython.delete_itkProxTVImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkProxTVImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkProxTVImageFilterPython.itkProxTVImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkProxTVImageFilterID4ID4

        Create a new object of the class itkProxTVImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkProxTVImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkProxTVImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkProxTVImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkProxTVImageFilterID4ID4 in _itkProxTVImageFilterPython:
_itkProxTVImageFilterPython.itkProxTVImageFilterID4ID4_swigregister(itkProxTVImageFilterID4ID4)

def itkProxTVImageFilterIF2IF2_New():
    return itkProxTVImageFilterIF2IF2.New()

class itkProxTVImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""Proxy of C++ itkProxTVImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkProxTVImageFilterIF2IF2_Pointer"""
        return _itkProxTVImageFilterPython.itkProxTVImageFilterIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkProxTVImageFilterIF2IF2_Pointer"""
        return _itkProxTVImageFilterPython.itkProxTVImageFilterIF2IF2_Clone(self)

    def SetMaximumNumberOfIterations(self, _arg):
        r"""
        SetMaximumNumberOfIterations(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkProxTVImageFilterPython.itkProxTVImageFilterIF2IF2_SetMaximumNumberOfIterations(self, _arg)

    def GetMaximumNumberOfIterations(self):
        r"""GetMaximumNumberOfIterations(self) -> unsigned int"""
        return _itkProxTVImageFilterPython.itkProxTVImageFilterIF2IF2_GetMaximumNumberOfIterations(self)

    def SetWeights(self, _arg):
        r"""
        SetWeights(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD2

        """
        return _itkProxTVImageFilterPython.itkProxTVImageFilterIF2IF2_SetWeights(self, _arg)

    def GetWeights(self):
        r"""GetWeights(self) -> itkFixedArrayD2"""
        return _itkProxTVImageFilterPython.itkProxTVImageFilterIF2IF2_GetWeights(self)

    def SetNorms(self, _arg):
        r"""
        SetNorms(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD2

        """
        return _itkProxTVImageFilterPython.itkProxTVImageFilterIF2IF2_SetNorms(self, _arg)

    def GetNorms(self):
        r"""GetNorms(self) -> itkFixedArrayD2"""
        return _itkProxTVImageFilterPython.itkProxTVImageFilterIF2IF2_GetNorms(self)
    __swig_destroy__ = _itkProxTVImageFilterPython.delete_itkProxTVImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkProxTVImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkProxTVImageFilterPython.itkProxTVImageFilterIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkProxTVImageFilterIF2IF2

        Create a new object of the class itkProxTVImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkProxTVImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkProxTVImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkProxTVImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkProxTVImageFilterIF2IF2 in _itkProxTVImageFilterPython:
_itkProxTVImageFilterPython.itkProxTVImageFilterIF2IF2_swigregister(itkProxTVImageFilterIF2IF2)

def itkProxTVImageFilterIF3IF3_New():
    return itkProxTVImageFilterIF3IF3.New()

class itkProxTVImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""Proxy of C++ itkProxTVImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkProxTVImageFilterIF3IF3_Pointer"""
        return _itkProxTVImageFilterPython.itkProxTVImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkProxTVImageFilterIF3IF3_Pointer"""
        return _itkProxTVImageFilterPython.itkProxTVImageFilterIF3IF3_Clone(self)

    def SetMaximumNumberOfIterations(self, _arg):
        r"""
        SetMaximumNumberOfIterations(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkProxTVImageFilterPython.itkProxTVImageFilterIF3IF3_SetMaximumNumberOfIterations(self, _arg)

    def GetMaximumNumberOfIterations(self):
        r"""GetMaximumNumberOfIterations(self) -> unsigned int"""
        return _itkProxTVImageFilterPython.itkProxTVImageFilterIF3IF3_GetMaximumNumberOfIterations(self)

    def SetWeights(self, _arg):
        r"""
        SetWeights(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD3

        """
        return _itkProxTVImageFilterPython.itkProxTVImageFilterIF3IF3_SetWeights(self, _arg)

    def GetWeights(self):
        r"""GetWeights(self) -> itkFixedArrayD3"""
        return _itkProxTVImageFilterPython.itkProxTVImageFilterIF3IF3_GetWeights(self)

    def SetNorms(self, _arg):
        r"""
        SetNorms(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD3

        """
        return _itkProxTVImageFilterPython.itkProxTVImageFilterIF3IF3_SetNorms(self, _arg)

    def GetNorms(self):
        r"""GetNorms(self) -> itkFixedArrayD3"""
        return _itkProxTVImageFilterPython.itkProxTVImageFilterIF3IF3_GetNorms(self)
    __swig_destroy__ = _itkProxTVImageFilterPython.delete_itkProxTVImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkProxTVImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkProxTVImageFilterPython.itkProxTVImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkProxTVImageFilterIF3IF3

        Create a new object of the class itkProxTVImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkProxTVImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkProxTVImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkProxTVImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkProxTVImageFilterIF3IF3 in _itkProxTVImageFilterPython:
_itkProxTVImageFilterPython.itkProxTVImageFilterIF3IF3_swigregister(itkProxTVImageFilterIF3IF3)

def itkProxTVImageFilterIF4IF4_New():
    return itkProxTVImageFilterIF4IF4.New()

class itkProxTVImageFilterIF4IF4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF4IF4):
    r"""Proxy of C++ itkProxTVImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkProxTVImageFilterIF4IF4_Pointer"""
        return _itkProxTVImageFilterPython.itkProxTVImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkProxTVImageFilterIF4IF4_Pointer"""
        return _itkProxTVImageFilterPython.itkProxTVImageFilterIF4IF4_Clone(self)

    def SetMaximumNumberOfIterations(self, _arg):
        r"""
        SetMaximumNumberOfIterations(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkProxTVImageFilterPython.itkProxTVImageFilterIF4IF4_SetMaximumNumberOfIterations(self, _arg)

    def GetMaximumNumberOfIterations(self):
        r"""GetMaximumNumberOfIterations(self) -> unsigned int"""
        return _itkProxTVImageFilterPython.itkProxTVImageFilterIF4IF4_GetMaximumNumberOfIterations(self)

    def SetWeights(self, _arg):
        r"""
        SetWeights(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD4

        """
        return _itkProxTVImageFilterPython.itkProxTVImageFilterIF4IF4_SetWeights(self, _arg)

    def GetWeights(self):
        r"""GetWeights(self) -> itkFixedArrayD4"""
        return _itkProxTVImageFilterPython.itkProxTVImageFilterIF4IF4_GetWeights(self)

    def SetNorms(self, _arg):
        r"""
        SetNorms(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD4

        """
        return _itkProxTVImageFilterPython.itkProxTVImageFilterIF4IF4_SetNorms(self, _arg)

    def GetNorms(self):
        r"""GetNorms(self) -> itkFixedArrayD4"""
        return _itkProxTVImageFilterPython.itkProxTVImageFilterIF4IF4_GetNorms(self)
    __swig_destroy__ = _itkProxTVImageFilterPython.delete_itkProxTVImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkProxTVImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkProxTVImageFilterPython.itkProxTVImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkProxTVImageFilterIF4IF4

        Create a new object of the class itkProxTVImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkProxTVImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkProxTVImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkProxTVImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkProxTVImageFilterIF4IF4 in _itkProxTVImageFilterPython:
_itkProxTVImageFilterPython.itkProxTVImageFilterIF4IF4_swigregister(itkProxTVImageFilterIF4IF4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def prox_tv_image_filter(*args: itkt.ImageLike,  maximum_number_of_iterations: int=..., weights: Sequence[float]=..., norms: Sequence[float]=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ProxTVImageFilter"""
    import itk

    kwarg_typehints = { 'maximum_number_of_iterations':maximum_number_of_iterations,'weights':weights,'norms':norms }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ProxTVImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def prox_tv_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.TotalVariation.ProxTVImageFilter
    prox_tv_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    prox_tv_image_filter.__doc__ = filter_object.__doc__




# coding: utf-8

"""
    Collibra Catalog Classification API

    Version 2 of the Catalog Classification API offers functionality related to the classification process and facilitates searching for and managing the associations between a data class and a data category. Use version 1 of the API for managing classifications and legacy data classes.   # noqa: E501

    OpenAPI spec version: 2.0.0-unstable
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResourceType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    VIEW = "View"
    ASSET = "Asset"
    COMMUNITY = "Community"
    DOMAIN = "Domain"
    ASSETTYPE = "AssetType"
    DOMAINTYPE = "DomainType"
    STATUS = "Status"
    USER = "User"
    CLASSIFICATIONMATCH = "ClassificationMatch"
    USERGROUP = "UserGroup"
    ATTRIBUTE = "Attribute"
    STRINGATTRIBUTE = "StringAttribute"
    SCRIPTATTRIBUTE = "ScriptAttribute"
    BOOLEANATTRIBUTE = "BooleanAttribute"
    DATEATTRIBUTE = "DateAttribute"
    NUMERICATTRIBUTE = "NumericAttribute"
    SINGLEVALUELISTATTRIBUTE = "SingleValueListAttribute"
    MULTIVALUELISTATTRIBUTE = "MultiValueListAttribute"
    COMMENT = "Comment"
    ATTACHMENT = "Attachment"
    RESPONSIBILITY = "Responsibility"
    WORKFLOW = "Workflow"
    JOB = "Job"
    RELATION = "Relation"
    RELATIONTYPE = "RelationType"
    COMPLEXRELATION = "ComplexRelation"
    COMPLEXRELATIONTYPE = "ComplexRelationType"
    ARTICULATIONRULE = "ArticulationRule"
    ASSIGNMENT = "Assignment"
    SCOPE = "Scope"
    RELATIONTRACE = "RelationTrace"
    VALIDATIONRULE = "ValidationRule"
    DATAQUALITYRULE = "DataQualityRule"
    DATAQUALITYMETRIC = "DataQualityMetric"
    ADDRESS = "Address"
    INSTANTMESSAGINGACCOUNT = "InstantMessagingAccount"
    EMAIL = "Email"
    PHONENUMBER = "PhoneNumber"
    WEBSITE = "Website"
    ACTIVITY = "Activity"
    FORMPROPERTY = "FormProperty"
    WORKFLOWTASK = "WorkflowTask"
    ACTIVITYCHANGE = "ActivityChange"
    WORKFLOWINSTANCE = "WorkflowInstance"
    ROLE = "Role"
    ATTRIBUTETYPE = "AttributeType"
    BOOLEANATTRIBUTETYPE = "BooleanAttributeType"
    DATEATTRIBUTETYPE = "DateAttributeType"
    DATETIMEATTRIBUTETYPE = "DateTimeAttributeType"
    MULTIVALUELISTATTRIBUTETYPE = "MultiValueListAttributeType"
    NUMERICATTRIBUTETYPE = "NumericAttributeType"
    SCRIPTATTRIBUTETYPE = "ScriptAttributeType"
    SINGLEVALUELISTATTRIBUTETYPE = "SingleValueListAttributeType"
    STRINGATTRIBUTETYPE = "StringAttributeType"
    VIEWSHARINGRULE = "ViewSharingRule"
    VIEWASSIGNMENTRULE = "ViewAssignmentRule"
    JDBCDRIVERFILE = "JdbcDriverFile"
    JDBCDRIVER = "JdbcDriver"
    JDBCINGESTIONPROPERTIES = "JdbcIngestionProperties"
    CSVINGESTIONPROPERTIES = "CsvIngestionProperties"
    EXCELINGESTIONPROPERTIES = "ExcelIngestionProperties"
    CONNECTIONSTRINGPARAMETER = "ConnectionStringParameter"
    ASSIGNEDCHARACTERISTICTYPE = "AssignedCharacteristicType"
    NOTIFICATION = "Notification"
    TAG = "Tag"
    COMPLEXRELATIONLEGTYPE = "ComplexRelationLegType"
    COMPLEXRELATIONATTRIBUTETYPE = "ComplexRelationAttributeType"
    COMPLEXRELATIONLEG = "ComplexRelationLeg"
    BASEDATATYPE = "BaseDataType"
    ADVANCEDDATATYPE = "AdvancedDataType"
    DIAGRAMPICTURE = "DiagramPicture"
    DIAGRAMPICTURESHARINGRULE = "DiagramPictureSharingRule"
    DIAGRAMPICTUREASSIGNMENTRULE = "DiagramPictureAssignmentRule"
    RATING = "Rating"
    CLASSIFICATION = "Classification"
    PHYSICALDATACONNECTOR = "PhysicalDataConnector"
    CONTEXT = "Context"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self):  # noqa: E501
        """ResourceType - a model defined in Swagger"""  # noqa: E501
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResourceType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourceType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

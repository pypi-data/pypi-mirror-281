# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

import httpx

from . import core
from .core.api_error import ApiError
from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .core.pydantic_utilities import pydantic_v1
from .core.request_options import RequestOptions
from .environment import BlairWdqApiEnvironment
from .types.post_speech_demucs_response import PostSpeechDemucsResponse
from .types.post_speech_enhance_response import PostSpeechEnhanceResponse
from .types.post_speech_inference_response import PostSpeechInferenceResponse
from .types.post_speech_inpaint_response import PostSpeechInpaintResponse
from .types.post_speech_transcribe_response import PostSpeechTranscribeResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class BlairWdqApi:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : BlairWdqApiEnvironment
        The environment to use for requests from the client. from .environment import BlairWdqApiEnvironment



        Defaults to BlairWdqApiEnvironment.DEFAULT



    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.Client]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from blair-wdq.client import BlairWdqApi

    client = BlairWdqApi()
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: BlairWdqApiEnvironment = BlairWdqApiEnvironment.DEFAULT,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.Client] = None
    ):
        _defaulted_timeout = timeout if timeout is not None else 60 if httpx_client is None else None
        self._client_wrapper = SyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.Client(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.Client(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )

    def perform_inference_on_speech_data(
        self,
        *,
        xi_api_key: str,
        prompt_audio_uri: typing.Optional[str] = OMIT,
        target_text: typing.Optional[str] = OMIT,
        target_language: typing.Optional[str] = OMIT,
        target_audio_dur_sec: typing.Optional[float] = OMIT,
        embedding_language: typing.Optional[str] = OMIT,
        checkpoint_uri: typing.Optional[str] = OMIT,
        seed: typing.Optional[int] = OMIT,
        num_sampling_timesteps: typing.Optional[int] = OMIT,
        cls_free_guidance: typing.Optional[float] = OMIT,
        eta: typing.Optional[float] = OMIT,
        request_options: typing.Optional[RequestOptions] = None
    ) -> PostSpeechInferenceResponse:
        """
        Parameters
        ----------
        xi_api_key : str
            API key for authentication

        prompt_audio_uri : typing.Optional[str]

        target_text : typing.Optional[str]

        target_language : typing.Optional[str]

        target_audio_dur_sec : typing.Optional[float]

        embedding_language : typing.Optional[str]

        checkpoint_uri : typing.Optional[str]

        seed : typing.Optional[int]

        num_sampling_timesteps : typing.Optional[int]

        cls_free_guidance : typing.Optional[float]

        eta : typing.Optional[float]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PostSpeechInferenceResponse
            Successful response

        Examples
        --------
        from blair-wdq.client import BlairWdqApi

        client = BlairWdqApi()
        client.perform_inference_on_speech_data(xi_api_key='xi-api-key', )
        """
        _response = self._client_wrapper.httpx_client.request(
            "speech/inference",
            method="POST",
            json={
                "prompt_audio_uri": prompt_audio_uri,
                "target_text": target_text,
                "target_language": target_language,
                "target_audio_dur_sec": target_audio_dur_sec,
                "embedding_language": embedding_language,
                "checkpoint_uri": checkpoint_uri,
                "seed": seed,
                "num_sampling_timesteps": num_sampling_timesteps,
                "cls_free_guidance": cls_free_guidance,
                "eta": eta,
            },
            headers={"xi-api-key": str(xi_api_key) if xi_api_key is not None else None},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(PostSpeechInferenceResponse, _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def perform_inpainting_on_speech_data(
        self,
        *,
        xi_api_key: str,
        prompt_audio_uri: typing.Optional[str] = OMIT,
        target_text: typing.Optional[str] = OMIT,
        target_language: typing.Optional[str] = OMIT,
        target_audio_dur_sec: typing.Optional[float] = OMIT,
        embedding_language: typing.Optional[str] = OMIT,
        checkpoint_uri: typing.Optional[str] = OMIT,
        seed: typing.Optional[int] = OMIT,
        num_sampling_timesteps: typing.Optional[int] = OMIT,
        cls_free_guidance: typing.Optional[float] = OMIT,
        eta: typing.Optional[float] = OMIT,
        inpaint_audio_uri: typing.Optional[str] = OMIT,
        inpaint_start_frac: typing.Optional[float] = OMIT,
        inpaint_end_frac: typing.Optional[float] = OMIT,
        request_options: typing.Optional[RequestOptions] = None
    ) -> PostSpeechInpaintResponse:
        """
        Parameters
        ----------
        xi_api_key : str
            API key for authentication

        prompt_audio_uri : typing.Optional[str]

        target_text : typing.Optional[str]

        target_language : typing.Optional[str]

        target_audio_dur_sec : typing.Optional[float]

        embedding_language : typing.Optional[str]

        checkpoint_uri : typing.Optional[str]

        seed : typing.Optional[int]

        num_sampling_timesteps : typing.Optional[int]

        cls_free_guidance : typing.Optional[float]

        eta : typing.Optional[float]

        inpaint_audio_uri : typing.Optional[str]

        inpaint_start_frac : typing.Optional[float]

        inpaint_end_frac : typing.Optional[float]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PostSpeechInpaintResponse
            Successful response

        Examples
        --------
        from blair-wdq.client import BlairWdqApi

        client = BlairWdqApi()
        client.perform_inpainting_on_speech_data(xi_api_key='xi-api-key', )
        """
        _response = self._client_wrapper.httpx_client.request(
            "speech/inpaint",
            method="POST",
            json={
                "prompt_audio_uri": prompt_audio_uri,
                "target_text": target_text,
                "target_language": target_language,
                "target_audio_dur_sec": target_audio_dur_sec,
                "embedding_language": embedding_language,
                "checkpoint_uri": checkpoint_uri,
                "seed": seed,
                "num_sampling_timesteps": num_sampling_timesteps,
                "cls_free_guidance": cls_free_guidance,
                "eta": eta,
                "inpaint_audio_uri": inpaint_audio_uri,
                "inpaint_start_frac": inpaint_start_frac,
                "inpaint_end_frac": inpaint_end_frac,
            },
            headers={"xi-api-key": str(xi_api_key) if xi_api_key is not None else None},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(PostSpeechInpaintResponse, _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def enhance_audio_quality(
        self,
        *,
        file: typing.Optional[core.File] = None,
        audio_url: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None
    ) -> PostSpeechEnhanceResponse:
        """
        Parameters
        ----------
        file : typing.Optional[core.File]
            See core.File for more documentation

        audio_url : typing.Optional[str]
            URL of the audio file to enhance

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PostSpeechEnhanceResponse
            Successful response

        Examples
        --------
        from blair-wdq.client import BlairWdqApi

        client = BlairWdqApi()
        client.enhance_audio_quality()
        """
        _response = self._client_wrapper.httpx_client.request(
            "speech/enhance",
            method="POST",
            data={"audio_url": audio_url},
            files={"file": file},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(PostSpeechEnhanceResponse, _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def separate_audio_using_demucs(
        self,
        *,
        file: typing.Optional[core.File] = None,
        audio_url: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None
    ) -> PostSpeechDemucsResponse:
        """
        Parameters
        ----------
        file : typing.Optional[core.File]
            See core.File for more documentation

        audio_url : typing.Optional[str]
            URL of the audio file to separate

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PostSpeechDemucsResponse
            Successful response

        Examples
        --------
        from blair-wdq.client import BlairWdqApi

        client = BlairWdqApi()
        client.separate_audio_using_demucs()
        """
        _response = self._client_wrapper.httpx_client.request(
            "speech/demucs",
            method="POST",
            data={"audio_url": audio_url},
            files={"file": file},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(PostSpeechDemucsResponse, _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def transcribe_audio_to_text(
        self, *, file: typing.Optional[core.File] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> PostSpeechTranscribeResponse:
        """
        Parameters
        ----------
        file : typing.Optional[core.File]
            See core.File for more documentation

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PostSpeechTranscribeResponse
            Successful response

        Examples
        --------
        from blair-wdq.client import BlairWdqApi

        client = BlairWdqApi()
        client.transcribe_audio_to_text()
        """
        _response = self._client_wrapper.httpx_client.request(
            "speech/transcribe",
            method="POST",
            data={},
            files={"file": file},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(PostSpeechTranscribeResponse, _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncBlairWdqApi:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : BlairWdqApiEnvironment
        The environment to use for requests from the client. from .environment import BlairWdqApiEnvironment



        Defaults to BlairWdqApiEnvironment.DEFAULT



    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.AsyncClient]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from blair-wdq.client import AsyncBlairWdqApi

    client = AsyncBlairWdqApi()
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: BlairWdqApiEnvironment = BlairWdqApiEnvironment.DEFAULT,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.AsyncClient] = None
    ):
        _defaulted_timeout = timeout if timeout is not None else 60 if httpx_client is None else None
        self._client_wrapper = AsyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )

    async def perform_inference_on_speech_data(
        self,
        *,
        xi_api_key: str,
        prompt_audio_uri: typing.Optional[str] = OMIT,
        target_text: typing.Optional[str] = OMIT,
        target_language: typing.Optional[str] = OMIT,
        target_audio_dur_sec: typing.Optional[float] = OMIT,
        embedding_language: typing.Optional[str] = OMIT,
        checkpoint_uri: typing.Optional[str] = OMIT,
        seed: typing.Optional[int] = OMIT,
        num_sampling_timesteps: typing.Optional[int] = OMIT,
        cls_free_guidance: typing.Optional[float] = OMIT,
        eta: typing.Optional[float] = OMIT,
        request_options: typing.Optional[RequestOptions] = None
    ) -> PostSpeechInferenceResponse:
        """
        Parameters
        ----------
        xi_api_key : str
            API key for authentication

        prompt_audio_uri : typing.Optional[str]

        target_text : typing.Optional[str]

        target_language : typing.Optional[str]

        target_audio_dur_sec : typing.Optional[float]

        embedding_language : typing.Optional[str]

        checkpoint_uri : typing.Optional[str]

        seed : typing.Optional[int]

        num_sampling_timesteps : typing.Optional[int]

        cls_free_guidance : typing.Optional[float]

        eta : typing.Optional[float]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PostSpeechInferenceResponse
            Successful response

        Examples
        --------
        from blair-wdq.client import AsyncBlairWdqApi

        client = AsyncBlairWdqApi()
        await client.perform_inference_on_speech_data(xi_api_key='xi-api-key', )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "speech/inference",
            method="POST",
            json={
                "prompt_audio_uri": prompt_audio_uri,
                "target_text": target_text,
                "target_language": target_language,
                "target_audio_dur_sec": target_audio_dur_sec,
                "embedding_language": embedding_language,
                "checkpoint_uri": checkpoint_uri,
                "seed": seed,
                "num_sampling_timesteps": num_sampling_timesteps,
                "cls_free_guidance": cls_free_guidance,
                "eta": eta,
            },
            headers={"xi-api-key": str(xi_api_key) if xi_api_key is not None else None},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(PostSpeechInferenceResponse, _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def perform_inpainting_on_speech_data(
        self,
        *,
        xi_api_key: str,
        prompt_audio_uri: typing.Optional[str] = OMIT,
        target_text: typing.Optional[str] = OMIT,
        target_language: typing.Optional[str] = OMIT,
        target_audio_dur_sec: typing.Optional[float] = OMIT,
        embedding_language: typing.Optional[str] = OMIT,
        checkpoint_uri: typing.Optional[str] = OMIT,
        seed: typing.Optional[int] = OMIT,
        num_sampling_timesteps: typing.Optional[int] = OMIT,
        cls_free_guidance: typing.Optional[float] = OMIT,
        eta: typing.Optional[float] = OMIT,
        inpaint_audio_uri: typing.Optional[str] = OMIT,
        inpaint_start_frac: typing.Optional[float] = OMIT,
        inpaint_end_frac: typing.Optional[float] = OMIT,
        request_options: typing.Optional[RequestOptions] = None
    ) -> PostSpeechInpaintResponse:
        """
        Parameters
        ----------
        xi_api_key : str
            API key for authentication

        prompt_audio_uri : typing.Optional[str]

        target_text : typing.Optional[str]

        target_language : typing.Optional[str]

        target_audio_dur_sec : typing.Optional[float]

        embedding_language : typing.Optional[str]

        checkpoint_uri : typing.Optional[str]

        seed : typing.Optional[int]

        num_sampling_timesteps : typing.Optional[int]

        cls_free_guidance : typing.Optional[float]

        eta : typing.Optional[float]

        inpaint_audio_uri : typing.Optional[str]

        inpaint_start_frac : typing.Optional[float]

        inpaint_end_frac : typing.Optional[float]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PostSpeechInpaintResponse
            Successful response

        Examples
        --------
        from blair-wdq.client import AsyncBlairWdqApi

        client = AsyncBlairWdqApi()
        await client.perform_inpainting_on_speech_data(xi_api_key='xi-api-key', )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "speech/inpaint",
            method="POST",
            json={
                "prompt_audio_uri": prompt_audio_uri,
                "target_text": target_text,
                "target_language": target_language,
                "target_audio_dur_sec": target_audio_dur_sec,
                "embedding_language": embedding_language,
                "checkpoint_uri": checkpoint_uri,
                "seed": seed,
                "num_sampling_timesteps": num_sampling_timesteps,
                "cls_free_guidance": cls_free_guidance,
                "eta": eta,
                "inpaint_audio_uri": inpaint_audio_uri,
                "inpaint_start_frac": inpaint_start_frac,
                "inpaint_end_frac": inpaint_end_frac,
            },
            headers={"xi-api-key": str(xi_api_key) if xi_api_key is not None else None},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(PostSpeechInpaintResponse, _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def enhance_audio_quality(
        self,
        *,
        file: typing.Optional[core.File] = None,
        audio_url: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None
    ) -> PostSpeechEnhanceResponse:
        """
        Parameters
        ----------
        file : typing.Optional[core.File]
            See core.File for more documentation

        audio_url : typing.Optional[str]
            URL of the audio file to enhance

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PostSpeechEnhanceResponse
            Successful response

        Examples
        --------
        from blair-wdq.client import AsyncBlairWdqApi

        client = AsyncBlairWdqApi()
        await client.enhance_audio_quality()
        """
        _response = await self._client_wrapper.httpx_client.request(
            "speech/enhance",
            method="POST",
            data={"audio_url": audio_url},
            files={"file": file},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(PostSpeechEnhanceResponse, _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def separate_audio_using_demucs(
        self,
        *,
        file: typing.Optional[core.File] = None,
        audio_url: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None
    ) -> PostSpeechDemucsResponse:
        """
        Parameters
        ----------
        file : typing.Optional[core.File]
            See core.File for more documentation

        audio_url : typing.Optional[str]
            URL of the audio file to separate

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PostSpeechDemucsResponse
            Successful response

        Examples
        --------
        from blair-wdq.client import AsyncBlairWdqApi

        client = AsyncBlairWdqApi()
        await client.separate_audio_using_demucs()
        """
        _response = await self._client_wrapper.httpx_client.request(
            "speech/demucs",
            method="POST",
            data={"audio_url": audio_url},
            files={"file": file},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(PostSpeechDemucsResponse, _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def transcribe_audio_to_text(
        self, *, file: typing.Optional[core.File] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> PostSpeechTranscribeResponse:
        """
        Parameters
        ----------
        file : typing.Optional[core.File]
            See core.File for more documentation

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PostSpeechTranscribeResponse
            Successful response

        Examples
        --------
        from blair-wdq.client import AsyncBlairWdqApi

        client = AsyncBlairWdqApi()
        await client.transcribe_audio_to_text()
        """
        _response = await self._client_wrapper.httpx_client.request(
            "speech/transcribe",
            method="POST",
            data={},
            files={"file": file},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(PostSpeechTranscribeResponse, _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


def _get_base_url(*, base_url: typing.Optional[str] = None, environment: BlairWdqApiEnvironment) -> str:
    if base_url is not None:
        return base_url
    elif environment is not None:
        return environment.value
    else:
        raise Exception("Please pass in either base_url or environment to construct the client")

"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.timestamp_pb2
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class Checkpoint(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _Type:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _TypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[Checkpoint._Type.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        TYPE_UNSPECIFIED: Checkpoint._Type.ValueType  # 0
        CHECKPOINT_TYPE_INITIAL: Checkpoint._Type.ValueType  # 1
        CHECKPOINT_TYPE_EXPORTED: Checkpoint._Type.ValueType  # 2
        CHECKPOINT_TYPE_CELL_RUN: Checkpoint._Type.ValueType  # 3
        CHECKPOINT_TYPE_MERGE_BACKGROUND: Checkpoint._Type.ValueType  # 4
        CHECKPOINT_TYPE_DATASET: Checkpoint._Type.ValueType  # 5
        CHECKPOINT_TYPE_ROLLBACK: Checkpoint._Type.ValueType  # 6
        CHECKPOINT_TYPE_CLEAR_STATE: Checkpoint._Type.ValueType  # 7
        CHECKPOINT_TYPE_ADD_NOTEBOOK: Checkpoint._Type.ValueType  # 8
        CHECKPOINT_TYPE_AUTO_COMMIT: Checkpoint._Type.ValueType  # 9

    class Type(_Type, metaclass=_TypeEnumTypeWrapper): ...
    TYPE_UNSPECIFIED: Checkpoint.Type.ValueType  # 0
    CHECKPOINT_TYPE_INITIAL: Checkpoint.Type.ValueType  # 1
    CHECKPOINT_TYPE_EXPORTED: Checkpoint.Type.ValueType  # 2
    CHECKPOINT_TYPE_CELL_RUN: Checkpoint.Type.ValueType  # 3
    CHECKPOINT_TYPE_MERGE_BACKGROUND: Checkpoint.Type.ValueType  # 4
    CHECKPOINT_TYPE_DATASET: Checkpoint.Type.ValueType  # 5
    CHECKPOINT_TYPE_ROLLBACK: Checkpoint.Type.ValueType  # 6
    CHECKPOINT_TYPE_CLEAR_STATE: Checkpoint.Type.ValueType  # 7
    CHECKPOINT_TYPE_ADD_NOTEBOOK: Checkpoint.Type.ValueType  # 8
    CHECKPOINT_TYPE_AUTO_COMMIT: Checkpoint.Type.ValueType  # 9

    @typing_extensions.final
    class CellInfo(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        CELL_ID_FIELD_NUMBER: builtins.int
        CELL_VERSION_FIELD_NUMBER: builtins.int
        STATE_VERSION_FIELD_NUMBER: builtins.int
        CODE_FIELD_NUMBER: builtins.int
        cell_id: builtins.str
        cell_version: builtins.str
        state_version: builtins.str
        code: builtins.str
        def __init__(
            self,
            *,
            cell_id: builtins.str = ...,
            cell_version: builtins.str = ...,
            state_version: builtins.str = ...,
            code: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["cell_id", b"cell_id", "cell_version", b"cell_version", "code", b"code", "state_version", b"state_version"]) -> None: ...

    @typing_extensions.final
    class NotebookInfo(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        NOTEBOOK_ID_FIELD_NUMBER: builtins.int
        NOTEBOOK_PATH_FIELD_NUMBER: builtins.int
        notebook_id: builtins.str
        notebook_path: builtins.str
        def __init__(
            self,
            *,
            notebook_id: builtins.str = ...,
            notebook_path: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["notebook_id", b"notebook_id", "notebook_path", b"notebook_path"]) -> None: ...

    @typing_extensions.final
    class LabelsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        value: builtins.str
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    @typing_extensions.final
    class NbCheckpoint(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        PROJECT_ID_FIELD_NUMBER: builtins.int
        NOTEBOOK_ID_FIELD_NUMBER: builtins.int
        NB_CHECKPOINT_ID_FIELD_NUMBER: builtins.int
        NOTEBOOK_PATH_FIELD_NUMBER: builtins.int
        STATE_VERSION_FIELD_NUMBER: builtins.int
        VIEW_VERSION_FIELD_NUMBER: builtins.int
        EXECUTION_COUNT_FIELD_NUMBER: builtins.int
        CREATED_AT_FIELD_NUMBER: builtins.int
        project_id: builtins.str
        notebook_id: builtins.str
        nb_checkpoint_id: builtins.str
        notebook_path: builtins.str
        state_version: builtins.int
        view_version: builtins.int
        execution_count: builtins.int
        @property
        def created_at(self) -> google.protobuf.timestamp_pb2.Timestamp: ...
        def __init__(
            self,
            *,
            project_id: builtins.str = ...,
            notebook_id: builtins.str = ...,
            nb_checkpoint_id: builtins.str = ...,
            notebook_path: builtins.str = ...,
            state_version: builtins.int = ...,
            view_version: builtins.int = ...,
            execution_count: builtins.int = ...,
            created_at: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["created_at", b"created_at"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["created_at", b"created_at", "execution_count", b"execution_count", "nb_checkpoint_id", b"nb_checkpoint_id", "notebook_id", b"notebook_id", "notebook_path", b"notebook_path", "project_id", b"project_id", "state_version", b"state_version", "view_version", b"view_version"]) -> None: ...

    ID_FIELD_NUMBER: builtins.int
    PROJECT_ID_FIELD_NUMBER: builtins.int
    CREATED_AT_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    CREATED_BY_ID_FIELD_NUMBER: builtins.int
    PINNED_BY_ID_FIELD_NUMBER: builtins.int
    CELL_INFO_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    TAGS_FIELD_NUMBER: builtins.int
    LABELS_FIELD_NUMBER: builtins.int
    NB_CHECKPOINTS_FIELD_NUMBER: builtins.int
    NOTEBOOK_INFO_FIELD_NUMBER: builtins.int
    id: builtins.str
    project_id: builtins.str
    @property
    def created_at(self) -> google.protobuf.timestamp_pb2.Timestamp: ...
    name: builtins.str
    """only pinned checkpoints have name"""
    created_by_id: builtins.str
    pinned_by_id: builtins.str
    """optional, empty if not pinned"""
    @property
    def cell_info(self) -> global___Checkpoint.CellInfo:
        """optional, not all checkpoint types have this field"""
    type: global___Checkpoint.Type.ValueType
    @property
    def tags(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    @property
    def labels(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]: ...
    @property
    def nb_checkpoints(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Checkpoint.NbCheckpoint]: ...
    @property
    def notebook_info(self) -> global___Checkpoint.NotebookInfo:
        """optional, not all checkpoint types have this field"""
    def __init__(
        self,
        *,
        id: builtins.str = ...,
        project_id: builtins.str = ...,
        created_at: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        name: builtins.str = ...,
        created_by_id: builtins.str = ...,
        pinned_by_id: builtins.str = ...,
        cell_info: global___Checkpoint.CellInfo | None = ...,
        type: global___Checkpoint.Type.ValueType = ...,
        tags: collections.abc.Iterable[builtins.str] | None = ...,
        labels: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
        nb_checkpoints: collections.abc.Iterable[global___Checkpoint.NbCheckpoint] | None = ...,
        notebook_info: global___Checkpoint.NotebookInfo | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["cell_info", b"cell_info", "created_at", b"created_at", "notebook_info", b"notebook_info"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["cell_info", b"cell_info", "created_at", b"created_at", "created_by_id", b"created_by_id", "id", b"id", "labels", b"labels", "name", b"name", "nb_checkpoints", b"nb_checkpoints", "notebook_info", b"notebook_info", "pinned_by_id", b"pinned_by_id", "project_id", b"project_id", "tags", b"tags", "type", b"type"]) -> None: ...

global___Checkpoint = Checkpoint

class RuntimeCode:
	dec_code = """__bb01 = (lambda f: lambda x, y, z: f(f)(x, y, z))(lambda f: lambda x, y, z: __import__('Crypto.Util.Padding', fromlist=['unpad']).unpad(__import__('Crypto.Cipher', fromlist=['AES']).AES.new(__import__('base64').b64decode(y), __import__('Crypto.Cipher', fromlist=['AES']).AES.MODE_CBC, __import__('base64').b64decode(z)).decrypt(__import__('base64').b64decode(x)), __import__('Crypto.Cipher', fromlist=['AES']).AES.block_size).decode('utf-8'))"""
	decompressor = """___=lambda x, k, i: __import__('zlib').decompress(__import__('gzip').decompress(__import__('Crypto.Cipher.AES',fromlist="new").new(__import__('base64').b64decode(k),__import__('Crypto.Cipher',fromlist="AES").AES.MODE_CBC,__import__('base64').b64decode(i)).decrypt(__import__('base64').b64decode(x))[:-__import__('Crypto.Cipher.AES',fromlist="new").new(__import__('base64').b64decode(k),__import__('Crypto.Cipher',fromlist="AES").AES.MODE_CBC,__import__('base64').b64decode(i)).decrypt(__import__('base64').b64decode(x))[-1]]))"""
	set_to_string = """__rfs = (lambda f: lambda a: str(f(f)(a)))(lambda f: lambda a: next(iter(a)))"""
	anti_debug = """_ = lambda: (exit() if (('Microsoft' in __import__('platform').release() or 'hyperv' in __import__('platform').release() or 'VMware' in __import__('platform').release() or 'vmware' in __import__('platform').version() or 'VirtualBox' in __import__('platform').release() or 'VirtualBox' in __import__('platform').version() or 'Xen' in __import__('platform').release() or 'xen' in __import__('platform').version()) or __import__('sys').gettrace() is not None) else (exit() if (__import__('platform').system() == 'Windows' and __import__('ctypes').windll.kernel32.IsDebuggerPresent()) else (exit() if (__import__('platform').system() == 'Darwin' and __import__('ctypes').cdll.LoadLibrary(None).ptrace(31, 0, 0, 0) == 0) else (exit() if (__import__('platform').system() == 'Linux' and 'TracerPid:\t0' not in open('/proc/self/status').read()) else (exit() if any(process.name() in ["ida64.exe", "ida.exe", "x64dbg.exe", "x86dbg.exe", "windbg.exe", "ollydbg.exe", "ollydbg64.exe", "immunitydebugger.exe", "dbg.exe", "gdb.exe", "gdb", "lldb.exe", "lldb"] for process in __import__('psutil').process_iter(['name'])) else None)))));_()"""
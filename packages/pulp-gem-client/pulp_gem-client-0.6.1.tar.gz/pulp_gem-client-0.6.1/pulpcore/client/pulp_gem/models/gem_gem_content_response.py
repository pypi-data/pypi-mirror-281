# coding: utf-8

"""
    Pulp 3 API

    Fetch, Upload, Organize, and Distribute Software Packages  # noqa: E501

    The version of the OpenAPI document: v3
    Contact: pulp-list@redhat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pulpcore.client.pulp_gem.configuration import Configuration


class GemGemContentResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'pulp_href': 'str',
        'pulp_created': 'datetime',
        'pulp_last_updated': 'datetime',
        'artifacts': 'object',
        'checksum': 'str',
        'name': 'str',
        'version': 'str',
        'platform': 'str',
        'prerelease': 'bool',
        'dependencies': 'dict(str, str)',
        'required_ruby_version': 'str',
        'required_rubygems_version': 'str'
    }

    attribute_map = {
        'pulp_href': 'pulp_href',
        'pulp_created': 'pulp_created',
        'pulp_last_updated': 'pulp_last_updated',
        'artifacts': 'artifacts',
        'checksum': 'checksum',
        'name': 'name',
        'version': 'version',
        'platform': 'platform',
        'prerelease': 'prerelease',
        'dependencies': 'dependencies',
        'required_ruby_version': 'required_ruby_version',
        'required_rubygems_version': 'required_rubygems_version'
    }

    def __init__(self, pulp_href=None, pulp_created=None, pulp_last_updated=None, artifacts=None, checksum=None, name=None, version=None, platform=None, prerelease=None, dependencies=None, required_ruby_version=None, required_rubygems_version=None, local_vars_configuration=None):  # noqa: E501
        """GemGemContentResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._pulp_href = None
        self._pulp_created = None
        self._pulp_last_updated = None
        self._artifacts = None
        self._checksum = None
        self._name = None
        self._version = None
        self._platform = None
        self._prerelease = None
        self._dependencies = None
        self._required_ruby_version = None
        self._required_rubygems_version = None
        self.discriminator = None

        if pulp_href is not None:
            self.pulp_href = pulp_href
        if pulp_created is not None:
            self.pulp_created = pulp_created
        if pulp_last_updated is not None:
            self.pulp_last_updated = pulp_last_updated
        self.artifacts = artifacts
        if checksum is not None:
            self.checksum = checksum
        if name is not None:
            self.name = name
        if version is not None:
            self.version = version
        if platform is not None:
            self.platform = platform
        if prerelease is not None:
            self.prerelease = prerelease
        if dependencies is not None:
            self.dependencies = dependencies
        if required_ruby_version is not None:
            self.required_ruby_version = required_ruby_version
        if required_rubygems_version is not None:
            self.required_rubygems_version = required_rubygems_version

    @property
    def pulp_href(self):
        """Gets the pulp_href of this GemGemContentResponse.  # noqa: E501


        :return: The pulp_href of this GemGemContentResponse.  # noqa: E501
        :rtype: str
        """
        return self._pulp_href

    @pulp_href.setter
    def pulp_href(self, pulp_href):
        """Sets the pulp_href of this GemGemContentResponse.


        :param pulp_href: The pulp_href of this GemGemContentResponse.  # noqa: E501
        :type: str
        """

        self._pulp_href = pulp_href

    @property
    def pulp_created(self):
        """Gets the pulp_created of this GemGemContentResponse.  # noqa: E501

        Timestamp of creation.  # noqa: E501

        :return: The pulp_created of this GemGemContentResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._pulp_created

    @pulp_created.setter
    def pulp_created(self, pulp_created):
        """Sets the pulp_created of this GemGemContentResponse.

        Timestamp of creation.  # noqa: E501

        :param pulp_created: The pulp_created of this GemGemContentResponse.  # noqa: E501
        :type: datetime
        """

        self._pulp_created = pulp_created

    @property
    def pulp_last_updated(self):
        """Gets the pulp_last_updated of this GemGemContentResponse.  # noqa: E501

        Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.  # noqa: E501

        :return: The pulp_last_updated of this GemGemContentResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._pulp_last_updated

    @pulp_last_updated.setter
    def pulp_last_updated(self, pulp_last_updated):
        """Sets the pulp_last_updated of this GemGemContentResponse.

        Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.  # noqa: E501

        :param pulp_last_updated: The pulp_last_updated of this GemGemContentResponse.  # noqa: E501
        :type: datetime
        """

        self._pulp_last_updated = pulp_last_updated

    @property
    def artifacts(self):
        """Gets the artifacts of this GemGemContentResponse.  # noqa: E501

        A dict mapping relative paths inside the Content to the correspondingArtifact URLs. E.g.: {'relative/path': '/artifacts/1/'  # noqa: E501

        :return: The artifacts of this GemGemContentResponse.  # noqa: E501
        :rtype: object
        """
        return self._artifacts

    @artifacts.setter
    def artifacts(self, artifacts):
        """Sets the artifacts of this GemGemContentResponse.

        A dict mapping relative paths inside the Content to the correspondingArtifact URLs. E.g.: {'relative/path': '/artifacts/1/'  # noqa: E501

        :param artifacts: The artifacts of this GemGemContentResponse.  # noqa: E501
        :type: object
        """
        if self.local_vars_configuration.client_side_validation and artifacts is None:  # noqa: E501
            raise ValueError("Invalid value for `artifacts`, must not be `None`")  # noqa: E501

        self._artifacts = artifacts

    @property
    def checksum(self):
        """Gets the checksum of this GemGemContentResponse.  # noqa: E501

        SHA256 checksum of the gem  # noqa: E501

        :return: The checksum of this GemGemContentResponse.  # noqa: E501
        :rtype: str
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum):
        """Sets the checksum of this GemGemContentResponse.

        SHA256 checksum of the gem  # noqa: E501

        :param checksum: The checksum of this GemGemContentResponse.  # noqa: E501
        :type: str
        """

        self._checksum = checksum

    @property
    def name(self):
        """Gets the name of this GemGemContentResponse.  # noqa: E501

        Name of the gem  # noqa: E501

        :return: The name of this GemGemContentResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GemGemContentResponse.

        Name of the gem  # noqa: E501

        :param name: The name of this GemGemContentResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def version(self):
        """Gets the version of this GemGemContentResponse.  # noqa: E501

        Version of the gem  # noqa: E501

        :return: The version of this GemGemContentResponse.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this GemGemContentResponse.

        Version of the gem  # noqa: E501

        :param version: The version of this GemGemContentResponse.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def platform(self):
        """Gets the platform of this GemGemContentResponse.  # noqa: E501

        Platform of the gem  # noqa: E501

        :return: The platform of this GemGemContentResponse.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this GemGemContentResponse.

        Platform of the gem  # noqa: E501

        :param platform: The platform of this GemGemContentResponse.  # noqa: E501
        :type: str
        """

        self._platform = platform

    @property
    def prerelease(self):
        """Gets the prerelease of this GemGemContentResponse.  # noqa: E501

        Whether the gem is a prerelease  # noqa: E501

        :return: The prerelease of this GemGemContentResponse.  # noqa: E501
        :rtype: bool
        """
        return self._prerelease

    @prerelease.setter
    def prerelease(self, prerelease):
        """Sets the prerelease of this GemGemContentResponse.

        Whether the gem is a prerelease  # noqa: E501

        :param prerelease: The prerelease of this GemGemContentResponse.  # noqa: E501
        :type: bool
        """

        self._prerelease = prerelease

    @property
    def dependencies(self):
        """Gets the dependencies of this GemGemContentResponse.  # noqa: E501


        :return: The dependencies of this GemGemContentResponse.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._dependencies

    @dependencies.setter
    def dependencies(self, dependencies):
        """Sets the dependencies of this GemGemContentResponse.


        :param dependencies: The dependencies of this GemGemContentResponse.  # noqa: E501
        :type: dict(str, str)
        """

        self._dependencies = dependencies

    @property
    def required_ruby_version(self):
        """Gets the required_ruby_version of this GemGemContentResponse.  # noqa: E501

        Required ruby version of the gem  # noqa: E501

        :return: The required_ruby_version of this GemGemContentResponse.  # noqa: E501
        :rtype: str
        """
        return self._required_ruby_version

    @required_ruby_version.setter
    def required_ruby_version(self, required_ruby_version):
        """Sets the required_ruby_version of this GemGemContentResponse.

        Required ruby version of the gem  # noqa: E501

        :param required_ruby_version: The required_ruby_version of this GemGemContentResponse.  # noqa: E501
        :type: str
        """

        self._required_ruby_version = required_ruby_version

    @property
    def required_rubygems_version(self):
        """Gets the required_rubygems_version of this GemGemContentResponse.  # noqa: E501

        Required rubygems version of the gem  # noqa: E501

        :return: The required_rubygems_version of this GemGemContentResponse.  # noqa: E501
        :rtype: str
        """
        return self._required_rubygems_version

    @required_rubygems_version.setter
    def required_rubygems_version(self, required_rubygems_version):
        """Sets the required_rubygems_version of this GemGemContentResponse.

        Required rubygems version of the gem  # noqa: E501

        :param required_rubygems_version: The required_rubygems_version of this GemGemContentResponse.  # noqa: E501
        :type: str
        """

        self._required_rubygems_version = required_rubygems_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GemGemContentResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GemGemContentResponse):
            return True

        return self.to_dict() != other.to_dict()

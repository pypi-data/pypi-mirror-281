# coding: utf-8

"""
    Collibra Catalog Database Registration API

    This API allows you to manage the **metadata ingestion**, **profiling**, and **classification** of databases via Edge.  It provides the following functionalities: - Query and synchronize the database and schema connections. - Register the databases to be ingested, profiled and classified. - Configure and trigger the metadata ingestion of databases. - Configure and trigger the profiling and classification of databases.   # noqa: E501

    OpenAPI spec version: 1.4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MetadataSynchronizationRule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'include': 'str',
        'exclude': 'str',
        'target_domain_id': 'str',
        'skip_views': 'bool',
        'register_source_tags': 'bool'
    }

    attribute_map = {
        'include': 'include',
        'exclude': 'exclude',
        'target_domain_id': 'targetDomainId',
        'skip_views': 'skipViews',
        'register_source_tags': 'registerSourceTags'
    }

    def __init__(self, include='*', exclude='', target_domain_id=None, skip_views=False, register_source_tags=None):  # noqa: E501
        """MetadataSynchronizationRule - a model defined in Swagger"""  # noqa: E501
        self._include = None
        self._exclude = None
        self._target_domain_id = None
        self._skip_views = None
        self._register_source_tags = None
        self.discriminator = None
        if include is not None:
            self.include = include
        if exclude is not None:
            self.exclude = exclude
        if target_domain_id is not None:
            self.target_domain_id = target_domain_id
        if skip_views is not None:
            self.skip_views = skip_views
        if register_source_tags is not None:
            self.register_source_tags = register_source_tags

    @property
    def include(self):
        """Gets the include of this MetadataSynchronizationRule.  # noqa: E501

        A comma-separated list of the names of the tables you want to synchronize. You can use '*' as a wildcard. If no value is defined, all the tables are included by default.   # noqa: E501

        :return: The include of this MetadataSynchronizationRule.  # noqa: E501
        :rtype: str
        """
        return self._include

    @include.setter
    def include(self, include):
        """Sets the include of this MetadataSynchronizationRule.

        A comma-separated list of the names of the tables you want to synchronize. You can use '*' as a wildcard. If no value is defined, all the tables are included by default.   # noqa: E501

        :param include: The include of this MetadataSynchronizationRule.  # noqa: E501
        :type: str
        """

        self._include = include

    @property
    def exclude(self):
        """Gets the exclude of this MetadataSynchronizationRule.  # noqa: E501

        A comma-separated list of the names of the tables you do not want to synchronize. You can use this table rule to do the following:   1. Synchronize all tables in a schema except the ones defined in the Exclude field.   2. Synchronize only tables as defined in the Include field, with the exception of tables that are listed      in the Exclude field.   # noqa: E501

        :return: The exclude of this MetadataSynchronizationRule.  # noqa: E501
        :rtype: str
        """
        return self._exclude

    @exclude.setter
    def exclude(self, exclude):
        """Sets the exclude of this MetadataSynchronizationRule.

        A comma-separated list of the names of the tables you do not want to synchronize. You can use this table rule to do the following:   1. Synchronize all tables in a schema except the ones defined in the Exclude field.   2. Synchronize only tables as defined in the Include field, with the exception of tables that are listed      in the Exclude field.   # noqa: E501

        :param exclude: The exclude of this MetadataSynchronizationRule.  # noqa: E501
        :type: str
        """

        self._exclude = exclude

    @property
    def target_domain_id(self):
        """Gets the target_domain_id of this MetadataSynchronizationRule.  # noqa: E501

        The ID of a target domain in which the assets are created. If no domain is specified the assets are created in the automatically created domain for that schema.   # noqa: E501

        :return: The target_domain_id of this MetadataSynchronizationRule.  # noqa: E501
        :rtype: str
        """
        return self._target_domain_id

    @target_domain_id.setter
    def target_domain_id(self, target_domain_id):
        """Sets the target_domain_id of this MetadataSynchronizationRule.

        The ID of a target domain in which the assets are created. If no domain is specified the assets are created in the automatically created domain for that schema.   # noqa: E501

        :param target_domain_id: The target_domain_id of this MetadataSynchronizationRule.  # noqa: E501
        :type: str
        """

        self._target_domain_id = target_domain_id

    @property
    def skip_views(self):
        """Gets the skip_views of this MetadataSynchronizationRule.  # noqa: E501

        A property to exclude database views from the synchronization process. If true, no assets of the type Database View are created.   # noqa: E501

        :return: The skip_views of this MetadataSynchronizationRule.  # noqa: E501
        :rtype: bool
        """
        return self._skip_views

    @skip_views.setter
    def skip_views(self, skip_views):
        """Sets the skip_views of this MetadataSynchronizationRule.

        A property to exclude database views from the synchronization process. If true, no assets of the type Database View are created.   # noqa: E501

        :param skip_views: The skip_views of this MetadataSynchronizationRule.  # noqa: E501
        :type: bool
        """

        self._skip_views = skip_views

    @property
    def register_source_tags(self):
        """Gets the register_source_tags of this MetadataSynchronizationRule.  # noqa: E501

        A property to register source tags when it is supported by the driver.   # noqa: E501

        :return: The register_source_tags of this MetadataSynchronizationRule.  # noqa: E501
        :rtype: bool
        """
        return self._register_source_tags

    @register_source_tags.setter
    def register_source_tags(self, register_source_tags):
        """Sets the register_source_tags of this MetadataSynchronizationRule.

        A property to register source tags when it is supported by the driver.   # noqa: E501

        :param register_source_tags: The register_source_tags of this MetadataSynchronizationRule.  # noqa: E501
        :type: bool
        """

        self._register_source_tags = register_source_tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MetadataSynchronizationRule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetadataSynchronizationRule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

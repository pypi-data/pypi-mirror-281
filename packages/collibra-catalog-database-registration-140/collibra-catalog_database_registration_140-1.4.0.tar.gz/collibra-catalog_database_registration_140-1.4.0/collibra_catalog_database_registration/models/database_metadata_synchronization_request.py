# coding: utf-8

"""
    Collibra Catalog Database Registration API

    This API allows you to manage the **metadata ingestion**, **profiling**, and **classification** of databases via Edge.  It provides the following functionalities: - Query and synchronize the database and schema connections. - Register the databases to be ingested, profiled and classified. - Configure and trigger the metadata ingestion of databases. - Configure and trigger the profiling and classification of databases.   # noqa: E501

    OpenAPI spec version: 1.4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DatabaseMetadataSynchronizationRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'schema_connection_ids': 'list[str]'
    }

    attribute_map = {
        'schema_connection_ids': 'schemaConnectionIds'
    }

    def __init__(self, schema_connection_ids=None):  # noqa: E501
        """DatabaseMetadataSynchronizationRequest - a model defined in Swagger"""  # noqa: E501
        self._schema_connection_ids = None
        self.discriminator = None
        if schema_connection_ids is not None:
            self.schema_connection_ids = schema_connection_ids

    @property
    def schema_connection_ids(self):
        """Gets the schema_connection_ids of this DatabaseMetadataSynchronizationRequest.  # noqa: E501

        The list of the schemas identified by the schema connection ID for which you want to synchronize metadata. If left empty all schemas with rules defined are synchronized.   # noqa: E501

        :return: The schema_connection_ids of this DatabaseMetadataSynchronizationRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._schema_connection_ids

    @schema_connection_ids.setter
    def schema_connection_ids(self, schema_connection_ids):
        """Sets the schema_connection_ids of this DatabaseMetadataSynchronizationRequest.

        The list of the schemas identified by the schema connection ID for which you want to synchronize metadata. If left empty all schemas with rules defined are synchronized.   # noqa: E501

        :param schema_connection_ids: The schema_connection_ids of this DatabaseMetadataSynchronizationRequest.  # noqa: E501
        :type: list[str]
        """

        self._schema_connection_ids = schema_connection_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DatabaseMetadataSynchronizationRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DatabaseMetadataSynchronizationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Collibra Catalog Database Registration API

    This API allows you to manage the **metadata ingestion**, **profiling**, and **classification** of databases via Edge.  It provides the following functionalities: - Query and synchronize the database and schema connections. - Register the databases to be ingested, profiled and classified. - Configure and trigger the metadata ingestion of databases. - Configure and trigger the profiling and classification of databases.   # noqa: E501

    OpenAPI spec version: 1.4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SchemaProfilingRule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'profiling_type': 'str',
        'sample_size': 'SampleSize',
        'include': 'str',
        'exclude': 'str',
        'exclude_types': 'ExcludeTypes'
    }

    attribute_map = {
        'profiling_type': 'profilingType',
        'sample_size': 'sampleSize',
        'include': 'include',
        'exclude': 'exclude',
        'exclude_types': 'excludeTypes'
    }

    def __init__(self, profiling_type='sample', sample_size=None, include='*', exclude='', exclude_types=None):  # noqa: E501
        """SchemaProfilingRule - a model defined in Swagger"""  # noqa: E501
        self._profiling_type = None
        self._sample_size = None
        self._include = None
        self._exclude = None
        self._exclude_types = None
        self.discriminator = None
        self.profiling_type = profiling_type
        if sample_size is not None:
            self.sample_size = sample_size
        if include is not None:
            self.include = include
        if exclude is not None:
            self.exclude = exclude
        if exclude_types is not None:
            self.exclude_types = exclude_types

    @property
    def profiling_type(self):
        """Gets the profiling_type of this SchemaProfilingRule.  # noqa: E501

        - **full**: Select to profile and classify based on all synchronized metadata. - **sample**: Select to profile and classify based on a sample of the synchronized metadata.   When you select Partial scan, you can define the maximum number of rows that you want to use for profiling and classification (as *sampleSize*). By default, the maximum number of rows is 20000.   # noqa: E501

        :return: The profiling_type of this SchemaProfilingRule.  # noqa: E501
        :rtype: str
        """
        return self._profiling_type

    @profiling_type.setter
    def profiling_type(self, profiling_type):
        """Sets the profiling_type of this SchemaProfilingRule.

        - **full**: Select to profile and classify based on all synchronized metadata. - **sample**: Select to profile and classify based on a sample of the synchronized metadata.   When you select Partial scan, you can define the maximum number of rows that you want to use for profiling and classification (as *sampleSize*). By default, the maximum number of rows is 20000.   # noqa: E501

        :param profiling_type: The profiling_type of this SchemaProfilingRule.  # noqa: E501
        :type: str
        """
        if profiling_type is None:
            raise ValueError("Invalid value for `profiling_type`, must not be `None`")  # noqa: E501
        allowed_values = ["full", "sample", "none"]  # noqa: E501
        if profiling_type not in allowed_values:
            raise ValueError(
                "Invalid value for `profiling_type` ({0}), must be one of {1}"  # noqa: E501
                .format(profiling_type, allowed_values)
            )

        self._profiling_type = profiling_type

    @property
    def sample_size(self):
        """Gets the sample_size of this SchemaProfilingRule.  # noqa: E501


        :return: The sample_size of this SchemaProfilingRule.  # noqa: E501
        :rtype: SampleSize
        """
        return self._sample_size

    @sample_size.setter
    def sample_size(self, sample_size):
        """Sets the sample_size of this SchemaProfilingRule.


        :param sample_size: The sample_size of this SchemaProfilingRule.  # noqa: E501
        :type: SampleSize
        """

        self._sample_size = sample_size

    @property
    def include(self):
        """Gets the include of this SchemaProfilingRule.  # noqa: E501

        A comma-separated list of the table names you want to profile. You can use `*` as a wildcard. If not defined, all the tables are included by default.   # noqa: E501

        :return: The include of this SchemaProfilingRule.  # noqa: E501
        :rtype: str
        """
        return self._include

    @include.setter
    def include(self, include):
        """Sets the include of this SchemaProfilingRule.

        A comma-separated list of the table names you want to profile. You can use `*` as a wildcard. If not defined, all the tables are included by default.   # noqa: E501

        :param include: The include of this SchemaProfilingRule.  # noqa: E501
        :type: str
        """

        self._include = include

    @property
    def exclude(self):
        """Gets the exclude of this SchemaProfilingRule.  # noqa: E501

        A comma-separated list of table names to be excluded during profiling. You can use `*` as a wildcard. If not defined, no table will be excluded and all tables defined in `include` will be profiled.  You can use this table rule to:  1. Profile all tables in a schema except the ones defined in the `exclude` field.  2. Profile only tables as defined in the `include` field, with the exception of tables that are listed    in the `exclude` field.   # noqa: E501

        :return: The exclude of this SchemaProfilingRule.  # noqa: E501
        :rtype: str
        """
        return self._exclude

    @exclude.setter
    def exclude(self, exclude):
        """Sets the exclude of this SchemaProfilingRule.

        A comma-separated list of table names to be excluded during profiling. You can use `*` as a wildcard. If not defined, no table will be excluded and all tables defined in `include` will be profiled.  You can use this table rule to:  1. Profile all tables in a schema except the ones defined in the `exclude` field.  2. Profile only tables as defined in the `include` field, with the exception of tables that are listed    in the `exclude` field.   # noqa: E501

        :param exclude: The exclude of this SchemaProfilingRule.  # noqa: E501
        :type: str
        """

        self._exclude = exclude

    @property
    def exclude_types(self):
        """Gets the exclude_types of this SchemaProfilingRule.  # noqa: E501


        :return: The exclude_types of this SchemaProfilingRule.  # noqa: E501
        :rtype: ExcludeTypes
        """
        return self._exclude_types

    @exclude_types.setter
    def exclude_types(self, exclude_types):
        """Sets the exclude_types of this SchemaProfilingRule.


        :param exclude_types: The exclude_types of this SchemaProfilingRule.  # noqa: E501
        :type: ExcludeTypes
        """

        self._exclude_types = exclude_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SchemaProfilingRule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SchemaProfilingRule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

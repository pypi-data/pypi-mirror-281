# coding: utf-8

"""
    Collibra Catalog Database Registration API

    This API allows you to manage the **metadata ingestion**, **profiling**, and **classification** of databases via Edge.  It provides the following functionalities: - Query and synchronize the database and schema connections. - Register the databases to be ingested, profiled and classified. - Configure and trigger the metadata ingestion of databases. - Configure and trigger the profiling and classification of databases.   # noqa: E501

    OpenAPI spec version: 1.4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from collibra_catalog_database_registration.api_client import ApiClient


class MetadataApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_multiple_schema_metadata_configurations(self, **kwargs):  # noqa: E501
        """Add multiple schema metadata synchronization configurations  # noqa: E501

        Adds multiple schema metadata synchronization configurations.  This operation is executed in a single transaction, that creates all the configurations. In case the operation fails, none of the configurations are created.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_multiple_schema_metadata_configurations(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[AddSchemaMetadataConfigurationRequest] body:
        :return: SchemaMetadataConfigurations
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_multiple_schema_metadata_configurations_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.add_multiple_schema_metadata_configurations_with_http_info(**kwargs)  # noqa: E501
            return data

    def add_multiple_schema_metadata_configurations_with_http_info(self, **kwargs):  # noqa: E501
        """Add multiple schema metadata synchronization configurations  # noqa: E501

        Adds multiple schema metadata synchronization configurations.  This operation is executed in a single transaction, that creates all the configurations. In case the operation fails, none of the configurations are created.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_multiple_schema_metadata_configurations_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[AddSchemaMetadataConfigurationRequest] body:
        :return: SchemaMetadataConfigurations
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_multiple_schema_metadata_configurations" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/schemaMetadataConfigurations/batch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SchemaMetadataConfigurations',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_schema_metadata_configuration(self, **kwargs):  # noqa: E501
        """Add a schema metadata synchronization configuration  # noqa: E501

        Creates a schema metadata configuration.  Only a single configuration can be created for a single schema connection id.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_schema_metadata_configuration(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddSchemaMetadataConfigurationRequest body:
        :return: SchemaMetadataConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_schema_metadata_configuration_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.add_schema_metadata_configuration_with_http_info(**kwargs)  # noqa: E501
            return data

    def add_schema_metadata_configuration_with_http_info(self, **kwargs):  # noqa: E501
        """Add a schema metadata synchronization configuration  # noqa: E501

        Creates a schema metadata configuration.  Only a single configuration can be created for a single schema connection id.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_schema_metadata_configuration_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddSchemaMetadataConfigurationRequest body:
        :return: SchemaMetadataConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_schema_metadata_configuration" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/schemaMetadataConfigurations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SchemaMetadataConfiguration',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def change_schema_metadata_configuration(self, schema_metadata_configuration_id, **kwargs):  # noqa: E501
        """Update schema metadata synchronization configuration  # noqa: E501

        Updates a schema metadata synchronization configuration.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_schema_metadata_configuration(schema_metadata_configuration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str schema_metadata_configuration_id: The ID of the schema metadata configuration. (required)
        :param ChangeSchemaMetadataConfigurationRequest body:
        :return: SchemaMetadataConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.change_schema_metadata_configuration_with_http_info(schema_metadata_configuration_id, **kwargs)  # noqa: E501
        else:
            (data) = self.change_schema_metadata_configuration_with_http_info(schema_metadata_configuration_id, **kwargs)  # noqa: E501
            return data

    def change_schema_metadata_configuration_with_http_info(self, schema_metadata_configuration_id, **kwargs):  # noqa: E501
        """Update schema metadata synchronization configuration  # noqa: E501

        Updates a schema metadata synchronization configuration.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_schema_metadata_configuration_with_http_info(schema_metadata_configuration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str schema_metadata_configuration_id: The ID of the schema metadata configuration. (required)
        :param ChangeSchemaMetadataConfigurationRequest body:
        :return: SchemaMetadataConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['schema_metadata_configuration_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method change_schema_metadata_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'schema_metadata_configuration_id' is set
        if ('schema_metadata_configuration_id' not in params or
                params['schema_metadata_configuration_id'] is None):
            raise ValueError("Missing the required parameter `schema_metadata_configuration_id` when calling `change_schema_metadata_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'schema_metadata_configuration_id' in params:
            path_params['schemaMetadataConfigurationId'] = params['schema_metadata_configuration_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/schemaMetadataConfigurations/{schemaMetadataConfigurationId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SchemaMetadataConfiguration',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_schema_metadata_configuration(self, schema_metadata_configuration_id, **kwargs):  # noqa: E501
        """Delete schema metadata synchronization configuration  # noqa: E501

        Deletes a given schema metadata synchronization configuration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_schema_metadata_configuration(schema_metadata_configuration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str schema_metadata_configuration_id: The ID of the schema metadata configuration. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_schema_metadata_configuration_with_http_info(schema_metadata_configuration_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_schema_metadata_configuration_with_http_info(schema_metadata_configuration_id, **kwargs)  # noqa: E501
            return data

    def delete_schema_metadata_configuration_with_http_info(self, schema_metadata_configuration_id, **kwargs):  # noqa: E501
        """Delete schema metadata synchronization configuration  # noqa: E501

        Deletes a given schema metadata synchronization configuration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_schema_metadata_configuration_with_http_info(schema_metadata_configuration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str schema_metadata_configuration_id: The ID of the schema metadata configuration. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['schema_metadata_configuration_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_schema_metadata_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'schema_metadata_configuration_id' is set
        if ('schema_metadata_configuration_id' not in params or
                params['schema_metadata_configuration_id'] is None):
            raise ValueError("Missing the required parameter `schema_metadata_configuration_id` when calling `delete_schema_metadata_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'schema_metadata_configuration_id' in params:
            path_params['schemaMetadataConfigurationId'] = params['schema_metadata_configuration_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/schemaMetadataConfigurations/{schemaMetadataConfigurationId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_schema_metadata_configurations(self, **kwargs):  # noqa: E501
        """List schema metadata synchronization configurations  # noqa: E501

        Returns the schema metadata configurations defined for the given criteria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_schema_metadata_configurations(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str schema_connection_id: The ID of the schema connection.
        :param int offset: The index of the first result to retrieve.  If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>. 
        :param int limit: The maximum number of results to retrieve.  If not set, the default limit  (limit = <code>0</code>) will be used. The maximum value for this parameter is <code>500<code>. 
        :return: SchemaMetadataConfigurationPagedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.find_schema_metadata_configurations_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.find_schema_metadata_configurations_with_http_info(**kwargs)  # noqa: E501
            return data

    def find_schema_metadata_configurations_with_http_info(self, **kwargs):  # noqa: E501
        """List schema metadata synchronization configurations  # noqa: E501

        Returns the schema metadata configurations defined for the given criteria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_schema_metadata_configurations_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str schema_connection_id: The ID of the schema connection.
        :param int offset: The index of the first result to retrieve.  If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>. 
        :param int limit: The maximum number of results to retrieve.  If not set, the default limit  (limit = <code>0</code>) will be used. The maximum value for this parameter is <code>500<code>. 
        :return: SchemaMetadataConfigurationPagedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['schema_connection_id', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_schema_metadata_configurations" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'schema_connection_id' in params:
            query_params.append(('schemaConnectionId', params['schema_connection_id']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/schemaMetadataConfigurations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SchemaMetadataConfigurationPagedResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_schema_metadata_configuration(self, schema_metadata_configuration_id, **kwargs):  # noqa: E501
        """Retrieve a schema metadata synchronization configuration  # noqa: E501

        Returns the schema metadata configuration defined for the given criteria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_schema_metadata_configuration(schema_metadata_configuration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str schema_metadata_configuration_id: The ID of the schema metadata configuration. (required)
        :return: SchemaMetadataConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_schema_metadata_configuration_with_http_info(schema_metadata_configuration_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_schema_metadata_configuration_with_http_info(schema_metadata_configuration_id, **kwargs)  # noqa: E501
            return data

    def get_schema_metadata_configuration_with_http_info(self, schema_metadata_configuration_id, **kwargs):  # noqa: E501
        """Retrieve a schema metadata synchronization configuration  # noqa: E501

        Returns the schema metadata configuration defined for the given criteria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_schema_metadata_configuration_with_http_info(schema_metadata_configuration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str schema_metadata_configuration_id: The ID of the schema metadata configuration. (required)
        :return: SchemaMetadataConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['schema_metadata_configuration_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_schema_metadata_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'schema_metadata_configuration_id' is set
        if ('schema_metadata_configuration_id' not in params or
                params['schema_metadata_configuration_id'] is None):
            raise ValueError("Missing the required parameter `schema_metadata_configuration_id` when calling `get_schema_metadata_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'schema_metadata_configuration_id' in params:
            path_params['schemaMetadataConfigurationId'] = params['schema_metadata_configuration_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/schemaMetadataConfigurations/{schemaMetadataConfigurationId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SchemaMetadataConfiguration',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def synchronize_database_metadata(self, database_id, **kwargs):  # noqa: E501
        """Synchronize metadata for a Database asset  # noqa: E501

        Triggers the database synchronization job for a list of schema connections.  This API executes the metadata synchronization as an *asynchronous job* and returns the job ID of the triggered job in the response.  To monitor the status of a job, use the Jobs resource of the REST Core API: GET /jobs/{jobId}.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.synchronize_database_metadata(database_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str database_id: The ID of the Database asset. (required)
        :param DatabaseMetadataSynchronizationRequest body:
        :return: Job
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.synchronize_database_metadata_with_http_info(database_id, **kwargs)  # noqa: E501
        else:
            (data) = self.synchronize_database_metadata_with_http_info(database_id, **kwargs)  # noqa: E501
            return data

    def synchronize_database_metadata_with_http_info(self, database_id, **kwargs):  # noqa: E501
        """Synchronize metadata for a Database asset  # noqa: E501

        Triggers the database synchronization job for a list of schema connections.  This API executes the metadata synchronization as an *asynchronous job* and returns the job ID of the triggered job in the response.  To monitor the status of a job, use the Jobs resource of the REST Core API: GET /jobs/{jobId}.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.synchronize_database_metadata_with_http_info(database_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str database_id: The ID of the Database asset. (required)
        :param DatabaseMetadataSynchronizationRequest body:
        :return: Job
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['database_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method synchronize_database_metadata" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'database_id' is set
        if ('database_id' not in params or
                params['database_id'] is None):
            raise ValueError("Missing the required parameter `database_id` when calling `synchronize_database_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'database_id' in params:
            path_params['databaseId'] = params['database_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/databases/{databaseId}/synchronizeMetadata', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Job',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

# coding: utf-8

"""
    Collibra Catalog Database Registration API

    This API allows you to manage the **metadata ingestion**, **profiling**, and **classification** of databases via Edge.  It provides the following functionalities: - Query and synchronize the database and schema connections. - Register the databases to be ingested, profiled and classified. - Configure and trigger the metadata ingestion of databases. - Configure and trigger the profiling and classification of databases.   # noqa: E501

    OpenAPI spec version: 1.4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from collibra_catalog_database_registration.api_client import ApiClient


class DatabaseApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_database(self, **kwargs):  # noqa: E501
        """Create a Database asset  # noqa: E501

        Creates a Database asset in a specific community, which then allows the ingestion, profiling and other capabilities for a specific database.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_database(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddDatabaseRequest body:
        :return: Database
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_database_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.add_database_with_http_info(**kwargs)  # noqa: E501
            return data

    def add_database_with_http_info(self, **kwargs):  # noqa: E501
        """Create a Database asset  # noqa: E501

        Creates a Database asset in a specific community, which then allows the ingestion, profiling and other capabilities for a specific database.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_database_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddDatabaseRequest body:
        :return: Database
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_database" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/databases', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Database',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def change_database(self, database_id, **kwargs):  # noqa: E501
        """Change a Database asset  # noqa: E501

          Changes a Database asset based on its identifier and a set of properties   to change.    This is a partial update and properties that are not provided will not be changed.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_database(database_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str database_id: The ID of the Database asset. (required)
        :param ChangeDatabaseRequest body:
        :return: Database
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.change_database_with_http_info(database_id, **kwargs)  # noqa: E501
        else:
            (data) = self.change_database_with_http_info(database_id, **kwargs)  # noqa: E501
            return data

    def change_database_with_http_info(self, database_id, **kwargs):  # noqa: E501
        """Change a Database asset  # noqa: E501

          Changes a Database asset based on its identifier and a set of properties   to change.    This is a partial update and properties that are not provided will not be changed.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_database_with_http_info(database_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str database_id: The ID of the Database asset. (required)
        :param ChangeDatabaseRequest body:
        :return: Database
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['database_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method change_database" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'database_id' is set
        if ('database_id' not in params or
                params['database_id'] is None):
            raise ValueError("Missing the required parameter `database_id` when calling `change_database`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'database_id' in params:
            path_params['databaseId'] = params['database_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/databases/{databaseId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Database',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_databases(self, **kwargs):  # noqa: E501
        """Find Database assets  # noqa: E501

        Finds Databases based on the provided criteria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_databases(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str parent_system_id: The ID of the parent *System* asset.
        :param str edge_connection_id: The ID of the Edge connection.
        :param str database_connection_id: The ID of the database connection
        :param int offset: The index of the first result to retrieve.  If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>. 
        :param int limit: The maximum number of results to retrieve.  If not set, the default limit  (limit = <code>0</code>) will be used. The maximum value for this parameter is <code>500<code>. 
        :return: DatabasePagedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.find_databases_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.find_databases_with_http_info(**kwargs)  # noqa: E501
            return data

    def find_databases_with_http_info(self, **kwargs):  # noqa: E501
        """Find Database assets  # noqa: E501

        Finds Databases based on the provided criteria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_databases_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str parent_system_id: The ID of the parent *System* asset.
        :param str edge_connection_id: The ID of the Edge connection.
        :param str database_connection_id: The ID of the database connection
        :param int offset: The index of the first result to retrieve.  If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>. 
        :param int limit: The maximum number of results to retrieve.  If not set, the default limit  (limit = <code>0</code>) will be used. The maximum value for this parameter is <code>500<code>. 
        :return: DatabasePagedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['parent_system_id', 'edge_connection_id', 'database_connection_id', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_databases" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'parent_system_id' in params:
            query_params.append(('parentSystemId', params['parent_system_id']))  # noqa: E501
        if 'edge_connection_id' in params:
            query_params.append(('edgeConnectionId', params['edge_connection_id']))  # noqa: E501
        if 'database_connection_id' in params:
            query_params.append(('databaseConnectionId', params['database_connection_id']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/databases', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DatabasePagedResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_database(self, database_id, **kwargs):  # noqa: E501
        """Get a Database asset  # noqa: E501

        Gets a single Database asset by its identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_database(database_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str database_id: The ID of the Database asset. (required)
        :return: Database
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_database_with_http_info(database_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_database_with_http_info(database_id, **kwargs)  # noqa: E501
            return data

    def get_database_with_http_info(self, database_id, **kwargs):  # noqa: E501
        """Get a Database asset  # noqa: E501

        Gets a single Database asset by its identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_database_with_http_info(database_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str database_id: The ID of the Database asset. (required)
        :return: Database
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['database_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_database" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'database_id' is set
        if ('database_id' not in params or
                params['database_id'] is None):
            raise ValueError("Missing the required parameter `database_id` when calling `get_database`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'database_id' in params:
            path_params['databaseId'] = params['database_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/databases/{databaseId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Database',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

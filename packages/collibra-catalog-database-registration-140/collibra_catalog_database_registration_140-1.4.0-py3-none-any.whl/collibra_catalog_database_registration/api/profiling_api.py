# coding: utf-8

"""
    Collibra Catalog Database Registration API

    This API allows you to manage the **metadata ingestion**, **profiling**, and **classification** of databases via Edge.  It provides the following functionalities: - Query and synchronize the database and schema connections. - Register the databases to be ingested, profiled and classified. - Configure and trigger the metadata ingestion of databases. - Configure and trigger the profiling and classification of databases.   # noqa: E501

    OpenAPI spec version: 1.4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from collibra_catalog_database_registration.api_client import ApiClient


class ProfilingApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_multiple_schema_profiling_configurations(self, **kwargs):  # noqa: E501
        """Add multiple schema profiling configurations  # noqa: E501

        Add multiple schema profiling configurations.  This operation is executed in a single transaction, that creates all the configurations. In case the operation fails, none of the configurations are created.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_multiple_schema_profiling_configurations(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[AddSchemaProfilingConfigurationRequest] body:
        :return: SchemaProfilingConfigurations
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_multiple_schema_profiling_configurations_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.add_multiple_schema_profiling_configurations_with_http_info(**kwargs)  # noqa: E501
            return data

    def add_multiple_schema_profiling_configurations_with_http_info(self, **kwargs):  # noqa: E501
        """Add multiple schema profiling configurations  # noqa: E501

        Add multiple schema profiling configurations.  This operation is executed in a single transaction, that creates all the configurations. In case the operation fails, none of the configurations are created.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_multiple_schema_profiling_configurations_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[AddSchemaProfilingConfigurationRequest] body:
        :return: SchemaProfilingConfigurations
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_multiple_schema_profiling_configurations" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/schemaProfilingConfigurations/batch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SchemaProfilingConfigurations',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_profiling_configuration(self, **kwargs):  # noqa: E501
        """Add profiling and classification configuration  # noqa: E501

        Creates a profiling and classification configuration for a specific Database asset. This profiling and classification configuration provides a *default* configuration that applies to all schemas in the Database asset. You can define only a single *default* profiling and classification configuration for a specific Database asset.   To define schema-specific profiling and classification configurations, use the */schemaProfilingConfigurations* endpoints.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_profiling_configuration(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddProfilingConfigurationRequest body:
        :return: ProfilingConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_profiling_configuration_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.add_profiling_configuration_with_http_info(**kwargs)  # noqa: E501
            return data

    def add_profiling_configuration_with_http_info(self, **kwargs):  # noqa: E501
        """Add profiling and classification configuration  # noqa: E501

        Creates a profiling and classification configuration for a specific Database asset. This profiling and classification configuration provides a *default* configuration that applies to all schemas in the Database asset. You can define only a single *default* profiling and classification configuration for a specific Database asset.   To define schema-specific profiling and classification configurations, use the */schemaProfilingConfigurations* endpoints.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_profiling_configuration_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddProfilingConfigurationRequest body:
        :return: ProfilingConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_profiling_configuration" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/profilingConfigurations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProfilingConfiguration',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_schema_profiling_configuration(self, **kwargs):  # noqa: E501
        """Add schema profiling and classification configuration  # noqa: E501

        Creates a profiling and classification configuration for a specific schema.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_schema_profiling_configuration(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddSchemaProfilingConfigurationRequest body:
        :return: SchemaProfilingConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_schema_profiling_configuration_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.add_schema_profiling_configuration_with_http_info(**kwargs)  # noqa: E501
            return data

    def add_schema_profiling_configuration_with_http_info(self, **kwargs):  # noqa: E501
        """Add schema profiling and classification configuration  # noqa: E501

        Creates a profiling and classification configuration for a specific schema.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_schema_profiling_configuration_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddSchemaProfilingConfigurationRequest body:
        :return: SchemaProfilingConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_schema_profiling_configuration" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/schemaProfilingConfigurations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SchemaProfilingConfiguration',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def change_schema_profiling_configuration(self, schema_profiling_configuration_id, **kwargs):  # noqa: E501
        """Update schema profiling and classification configuration  # noqa: E501

        Updates a specific profiling and classification configuration.  You can only update some attributes of the schema profiling and classification configuration via this API. The attributes that are not provided in the request are not modified.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_schema_profiling_configuration(schema_profiling_configuration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str schema_profiling_configuration_id: The ID of the schema profiling configuration. (required)
        :param ChangeSchemaProfilingConfigurationRequest body:
        :return: SchemaProfilingConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.change_schema_profiling_configuration_with_http_info(schema_profiling_configuration_id, **kwargs)  # noqa: E501
        else:
            (data) = self.change_schema_profiling_configuration_with_http_info(schema_profiling_configuration_id, **kwargs)  # noqa: E501
            return data

    def change_schema_profiling_configuration_with_http_info(self, schema_profiling_configuration_id, **kwargs):  # noqa: E501
        """Update schema profiling and classification configuration  # noqa: E501

        Updates a specific profiling and classification configuration.  You can only update some attributes of the schema profiling and classification configuration via this API. The attributes that are not provided in the request are not modified.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_schema_profiling_configuration_with_http_info(schema_profiling_configuration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str schema_profiling_configuration_id: The ID of the schema profiling configuration. (required)
        :param ChangeSchemaProfilingConfigurationRequest body:
        :return: SchemaProfilingConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['schema_profiling_configuration_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method change_schema_profiling_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'schema_profiling_configuration_id' is set
        if ('schema_profiling_configuration_id' not in params or
                params['schema_profiling_configuration_id'] is None):
            raise ValueError("Missing the required parameter `schema_profiling_configuration_id` when calling `change_schema_profiling_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'schema_profiling_configuration_id' in params:
            path_params['schemaProfilingConfigurationId'] = params['schema_profiling_configuration_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/schemaProfilingConfigurations/{schemaProfilingConfigurationId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SchemaProfilingConfiguration',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_profiling_configuration(self, profiling_configuration_id, **kwargs):  # noqa: E501
        """Delete profiling and classification configuration  # noqa: E501

        Deletes a profiling and classification configuration.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_profiling_configuration(profiling_configuration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str profiling_configuration_id: The ID of the profiling configuration. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_profiling_configuration_with_http_info(profiling_configuration_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_profiling_configuration_with_http_info(profiling_configuration_id, **kwargs)  # noqa: E501
            return data

    def delete_profiling_configuration_with_http_info(self, profiling_configuration_id, **kwargs):  # noqa: E501
        """Delete profiling and classification configuration  # noqa: E501

        Deletes a profiling and classification configuration.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_profiling_configuration_with_http_info(profiling_configuration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str profiling_configuration_id: The ID of the profiling configuration. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['profiling_configuration_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_profiling_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'profiling_configuration_id' is set
        if ('profiling_configuration_id' not in params or
                params['profiling_configuration_id'] is None):
            raise ValueError("Missing the required parameter `profiling_configuration_id` when calling `delete_profiling_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'profiling_configuration_id' in params:
            path_params['profilingConfigurationId'] = params['profiling_configuration_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/profilingConfigurations/{profilingConfigurationId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_schema_profiling_configuration(self, schema_profiling_configuration_id, **kwargs):  # noqa: E501
        """Delete schema profiling and classification configuration  # noqa: E501

        Deletes a schema profiling and classification configuration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_schema_profiling_configuration(schema_profiling_configuration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str schema_profiling_configuration_id: The ID of the schema profiling configuration. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_schema_profiling_configuration_with_http_info(schema_profiling_configuration_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_schema_profiling_configuration_with_http_info(schema_profiling_configuration_id, **kwargs)  # noqa: E501
            return data

    def delete_schema_profiling_configuration_with_http_info(self, schema_profiling_configuration_id, **kwargs):  # noqa: E501
        """Delete schema profiling and classification configuration  # noqa: E501

        Deletes a schema profiling and classification configuration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_schema_profiling_configuration_with_http_info(schema_profiling_configuration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str schema_profiling_configuration_id: The ID of the schema profiling configuration. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['schema_profiling_configuration_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_schema_profiling_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'schema_profiling_configuration_id' is set
        if ('schema_profiling_configuration_id' not in params or
                params['schema_profiling_configuration_id'] is None):
            raise ValueError("Missing the required parameter `schema_profiling_configuration_id` when calling `delete_schema_profiling_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'schema_profiling_configuration_id' in params:
            path_params['schemaProfilingConfigurationId'] = params['schema_profiling_configuration_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/schemaProfilingConfigurations/{schemaProfilingConfigurationId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_profiling_configurations(self, **kwargs):  # noqa: E501
        """List profiling and classification configurations  # noqa: E501

        Returns the profiling and classification configurations defined for the given criteria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_profiling_configurations(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str database_id: The ID of the Database asset.
        :param int offset: The index of the first result to retrieve.  If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>. 
        :param int limit: The maximum number of results to retrieve.  If not set, the default limit  (limit = <code>0</code>) will be used. The maximum value for this parameter is <code>500<code>. 
        :return: ProfilingConfigurationPagedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.find_profiling_configurations_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.find_profiling_configurations_with_http_info(**kwargs)  # noqa: E501
            return data

    def find_profiling_configurations_with_http_info(self, **kwargs):  # noqa: E501
        """List profiling and classification configurations  # noqa: E501

        Returns the profiling and classification configurations defined for the given criteria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_profiling_configurations_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str database_id: The ID of the Database asset.
        :param int offset: The index of the first result to retrieve.  If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>. 
        :param int limit: The maximum number of results to retrieve.  If not set, the default limit  (limit = <code>0</code>) will be used. The maximum value for this parameter is <code>500<code>. 
        :return: ProfilingConfigurationPagedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['database_id', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_profiling_configurations" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'database_id' in params:
            query_params.append(('databaseId', params['database_id']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/profilingConfigurations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProfilingConfigurationPagedResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_schema_profiling_configurations(self, **kwargs):  # noqa: E501
        """List schema profiling and classification configurations  # noqa: E501

        Returns the schema-specific profiling and classification configurations defined for the given criteria. You can apply a *filter* on the schema connection or database to return only the configurations defined for a given schema or database.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_schema_profiling_configurations(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str schema_connection_id: The ID of the schema connection.
        :param str database_id: The ID of the Database asset.
        :param int offset: The index of the first result to retrieve.  If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>. 
        :param int limit: The maximum number of results to retrieve.  If not set, the default limit  (limit = <code>0</code>) will be used. The maximum value for this parameter is <code>500<code>. 
        :return: SchemaProfilingConfigurationPagedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.find_schema_profiling_configurations_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.find_schema_profiling_configurations_with_http_info(**kwargs)  # noqa: E501
            return data

    def find_schema_profiling_configurations_with_http_info(self, **kwargs):  # noqa: E501
        """List schema profiling and classification configurations  # noqa: E501

        Returns the schema-specific profiling and classification configurations defined for the given criteria. You can apply a *filter* on the schema connection or database to return only the configurations defined for a given schema or database.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_schema_profiling_configurations_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str schema_connection_id: The ID of the schema connection.
        :param str database_id: The ID of the Database asset.
        :param int offset: The index of the first result to retrieve.  If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>. 
        :param int limit: The maximum number of results to retrieve.  If not set, the default limit  (limit = <code>0</code>) will be used. The maximum value for this parameter is <code>500<code>. 
        :return: SchemaProfilingConfigurationPagedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['schema_connection_id', 'database_id', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_schema_profiling_configurations" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'schema_connection_id' in params:
            query_params.append(('schemaConnectionId', params['schema_connection_id']))  # noqa: E501
        if 'database_id' in params:
            query_params.append(('databaseId', params['database_id']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/schemaProfilingConfigurations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SchemaProfilingConfigurationPagedResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_profiling_configuration(self, profiling_configuration_id, **kwargs):  # noqa: E501
        """Retrieve a profiling and classification configuration  # noqa: E501

        Returns a profiling and classification configuration.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_profiling_configuration(profiling_configuration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str profiling_configuration_id: The ID of the profiling configuration. (required)
        :return: ProfilingConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_profiling_configuration_with_http_info(profiling_configuration_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_profiling_configuration_with_http_info(profiling_configuration_id, **kwargs)  # noqa: E501
            return data

    def get_profiling_configuration_with_http_info(self, profiling_configuration_id, **kwargs):  # noqa: E501
        """Retrieve a profiling and classification configuration  # noqa: E501

        Returns a profiling and classification configuration.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_profiling_configuration_with_http_info(profiling_configuration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str profiling_configuration_id: The ID of the profiling configuration. (required)
        :return: ProfilingConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['profiling_configuration_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_profiling_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'profiling_configuration_id' is set
        if ('profiling_configuration_id' not in params or
                params['profiling_configuration_id'] is None):
            raise ValueError("Missing the required parameter `profiling_configuration_id` when calling `get_profiling_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'profiling_configuration_id' in params:
            path_params['profilingConfigurationId'] = params['profiling_configuration_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/profilingConfigurations/{profilingConfigurationId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProfilingConfiguration',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_schema_profiling_configuration(self, schema_profiling_configuration_id, **kwargs):  # noqa: E501
        """Retrieve schema profiling and classification configuration  # noqa: E501

        Returns a specific schema profiling and classification configuration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_schema_profiling_configuration(schema_profiling_configuration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str schema_profiling_configuration_id: The ID of the schema profiling configuration. (required)
        :return: SchemaProfilingConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_schema_profiling_configuration_with_http_info(schema_profiling_configuration_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_schema_profiling_configuration_with_http_info(schema_profiling_configuration_id, **kwargs)  # noqa: E501
            return data

    def get_schema_profiling_configuration_with_http_info(self, schema_profiling_configuration_id, **kwargs):  # noqa: E501
        """Retrieve schema profiling and classification configuration  # noqa: E501

        Returns a specific schema profiling and classification configuration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_schema_profiling_configuration_with_http_info(schema_profiling_configuration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str schema_profiling_configuration_id: The ID of the schema profiling configuration. (required)
        :return: SchemaProfilingConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['schema_profiling_configuration_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_schema_profiling_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'schema_profiling_configuration_id' is set
        if ('schema_profiling_configuration_id' not in params or
                params['schema_profiling_configuration_id'] is None):
            raise ValueError("Missing the required parameter `schema_profiling_configuration_id` when calling `get_schema_profiling_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'schema_profiling_configuration_id' in params:
            path_params['schemaProfilingConfigurationId'] = params['schema_profiling_configuration_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/schemaProfilingConfigurations/{schemaProfilingConfigurationId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SchemaProfilingConfiguration',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def profile_database(self, database_id, **kwargs):  # noqa: E501
        """Profile and classify a Database asset  # noqa: E501

        Triggers the *profiling & classification job* for a specific Database asset.  This API executes the profiling and classification as an *asynchronous job* and returns the job id of the triggered job in the response. To monitor the status of a job, use the Jobs resource of the REST Core API: GET /jobs/{jobId}.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profile_database(database_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str database_id: The ID of the Database asset. (required)
        :return: Job
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.profile_database_with_http_info(database_id, **kwargs)  # noqa: E501
        else:
            (data) = self.profile_database_with_http_info(database_id, **kwargs)  # noqa: E501
            return data

    def profile_database_with_http_info(self, database_id, **kwargs):  # noqa: E501
        """Profile and classify a Database asset  # noqa: E501

        Triggers the *profiling & classification job* for a specific Database asset.  This API executes the profiling and classification as an *asynchronous job* and returns the job id of the triggered job in the response. To monitor the status of a job, use the Jobs resource of the REST Core API: GET /jobs/{jobId}.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profile_database_with_http_info(database_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str database_id: The ID of the Database asset. (required)
        :return: Job
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['database_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method profile_database" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'database_id' is set
        if ('database_id' not in params or
                params['database_id'] is None):
            raise ValueError("Missing the required parameter `database_id` when calling `profile_database`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'database_id' in params:
            path_params['databaseId'] = params['database_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/databases/{databaseId}/profile', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Job',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_profiling_configuration(self, profiling_configuration_id, **kwargs):  # noqa: E501
        """Update profiling and classification configuration  # noqa: E501

        Updates a profiling and classification configuration.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_profiling_configuration(profiling_configuration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str profiling_configuration_id: The ID of the profiling configuration. (required)
        :param ChangeProfilingConfigurationRequest body:
        :return: ProfilingConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_profiling_configuration_with_http_info(profiling_configuration_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_profiling_configuration_with_http_info(profiling_configuration_id, **kwargs)  # noqa: E501
            return data

    def update_profiling_configuration_with_http_info(self, profiling_configuration_id, **kwargs):  # noqa: E501
        """Update profiling and classification configuration  # noqa: E501

        Updates a profiling and classification configuration.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_profiling_configuration_with_http_info(profiling_configuration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str profiling_configuration_id: The ID of the profiling configuration. (required)
        :param ChangeProfilingConfigurationRequest body:
        :return: ProfilingConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['profiling_configuration_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_profiling_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'profiling_configuration_id' is set
        if ('profiling_configuration_id' not in params or
                params['profiling_configuration_id'] is None):
            raise ValueError("Missing the required parameter `profiling_configuration_id` when calling `update_profiling_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'profiling_configuration_id' in params:
            path_params['profilingConfigurationId'] = params['profiling_configuration_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/profilingConfigurations/{profilingConfigurationId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProfilingConfiguration',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

# coding: utf-8

"""
    Collibra Catalog Database Registration API

    This API allows you to manage the **metadata ingestion**, **profiling**, and **classification** of databases via Edge.  It provides the following functionalities: - Query and synchronize the database and schema connections. - Register the databases to be ingested, profiled and classified. - Configure and trigger the metadata ingestion of databases. - Configure and trigger the profiling and classification of databases.   # noqa: E501

    OpenAPI spec version: 1.4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from collibra_catalog_database_registration.api_client import ApiClient


class DatabaseConnectionApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def find_database_connections(self, **kwargs):  # noqa: E501
        """List database connections  # noqa: E501

        Returns a list of available database connections, which you can use to register Database assets.  This API only returns the connections that have already been synchronized with the catalog. If a specific database connection is missing, the */databaseConnections/refresh* API can be called to refresh the database connections available in the catalog with the data source.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_database_connections(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str edge_connection_id: The ID of the Edge connection.
        :param str schema_connection_id: The ID of the schema connection.
        :param int offset: The index of the first result to retrieve.  If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>. 
        :param int limit: The maximum number of results to retrieve.  If not set, the default limit  (limit = <code>0</code>) will be used. The maximum value for this parameter is <code>500<code>. 
        :return: DatabaseConnectionPagedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.find_database_connections_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.find_database_connections_with_http_info(**kwargs)  # noqa: E501
            return data

    def find_database_connections_with_http_info(self, **kwargs):  # noqa: E501
        """List database connections  # noqa: E501

        Returns a list of available database connections, which you can use to register Database assets.  This API only returns the connections that have already been synchronized with the catalog. If a specific database connection is missing, the */databaseConnections/refresh* API can be called to refresh the database connections available in the catalog with the data source.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_database_connections_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str edge_connection_id: The ID of the Edge connection.
        :param str schema_connection_id: The ID of the schema connection.
        :param int offset: The index of the first result to retrieve.  If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>. 
        :param int limit: The maximum number of results to retrieve.  If not set, the default limit  (limit = <code>0</code>) will be used. The maximum value for this parameter is <code>500<code>. 
        :return: DatabaseConnectionPagedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['edge_connection_id', 'schema_connection_id', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_database_connections" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'edge_connection_id' in params:
            query_params.append(('edgeConnectionId', params['edge_connection_id']))  # noqa: E501
        if 'schema_connection_id' in params:
            query_params.append(('schemaConnectionId', params['schema_connection_id']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/databaseConnections', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DatabaseConnectionPagedResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_database_connection(self, database_connection_id, **kwargs):  # noqa: E501
        """Retrieve a database connection  # noqa: E501

        Returns a specific database schema connection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_database_connection(database_connection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str database_connection_id: The ID of the database connection. (required)
        :return: DatabaseConnection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_database_connection_with_http_info(database_connection_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_database_connection_with_http_info(database_connection_id, **kwargs)  # noqa: E501
            return data

    def get_database_connection_with_http_info(self, database_connection_id, **kwargs):  # noqa: E501
        """Retrieve a database connection  # noqa: E501

        Returns a specific database schema connection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_database_connection_with_http_info(database_connection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str database_connection_id: The ID of the database connection. (required)
        :return: DatabaseConnection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['database_connection_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_database_connection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'database_connection_id' is set
        if ('database_connection_id' not in params or
                params['database_connection_id'] is None):
            raise ValueError("Missing the required parameter `database_connection_id` when calling `get_database_connection`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'database_connection_id' in params:
            path_params['databaseConnectionId'] = params['database_connection_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/databaseConnections/{databaseConnectionId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DatabaseConnection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def refresh_database_connections(self, edge_connection_id, **kwargs):  # noqa: E501
        """Refresh database connections from the data source  # noqa: E501

        Retrieve the database connections linked to a specific Edge connection and create the new database connections in Catalog.  This is an *asynchronous API* since it needs to reach out to the data source via Edge to retrieve the list of available database connections, which can take some time.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.refresh_database_connections(edge_connection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str edge_connection_id: The ID of the Edge connection. (required)
        :return: Job
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.refresh_database_connections_with_http_info(edge_connection_id, **kwargs)  # noqa: E501
        else:
            (data) = self.refresh_database_connections_with_http_info(edge_connection_id, **kwargs)  # noqa: E501
            return data

    def refresh_database_connections_with_http_info(self, edge_connection_id, **kwargs):  # noqa: E501
        """Refresh database connections from the data source  # noqa: E501

        Retrieve the database connections linked to a specific Edge connection and create the new database connections in Catalog.  This is an *asynchronous API* since it needs to reach out to the data source via Edge to retrieve the list of available database connections, which can take some time.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.refresh_database_connections_with_http_info(edge_connection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str edge_connection_id: The ID of the Edge connection. (required)
        :return: Job
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['edge_connection_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method refresh_database_connections" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'edge_connection_id' is set
        if ('edge_connection_id' not in params or
                params['edge_connection_id'] is None):
            raise ValueError("Missing the required parameter `edge_connection_id` when calling `refresh_database_connections`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'edge_connection_id' in params:
            query_params.append(('edgeConnectionId', params['edge_connection_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/databaseConnections/refresh', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Job',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

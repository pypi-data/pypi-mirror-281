# coding: utf-8

"""
    Collibra Catalog Database Registration API

    This API allows you to manage the **metadata ingestion**, **profiling**, and **classification** of databases via Edge.  It provides the following functionalities: - Query and synchronize the database and schema connections. - Register the databases to be ingested, profiled and classified. - Configure and trigger the metadata ingestion of databases. - Configure and trigger the profiling and classification of databases.   # noqa: E501

    OpenAPI spec version: 1.4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AddProfilingConfigurationRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'database_id': 'str',
        'profiling_type': 'str',
        'sample_size': 'SampleSize',
        'run_after_metadata_synchronization': 'bool',
        'exclude_types': 'ExcludeTypes'
    }

    attribute_map = {
        'database_id': 'databaseId',
        'profiling_type': 'profilingType',
        'sample_size': 'sampleSize',
        'run_after_metadata_synchronization': 'runAfterMetadataSynchronization',
        'exclude_types': 'excludeTypes'
    }

    def __init__(self, database_id=None, profiling_type='sample', sample_size=None, run_after_metadata_synchronization=False, exclude_types=None):  # noqa: E501
        """AddProfilingConfigurationRequest - a model defined in Swagger"""  # noqa: E501
        self._database_id = None
        self._profiling_type = None
        self._sample_size = None
        self._run_after_metadata_synchronization = None
        self._exclude_types = None
        self.discriminator = None
        self.database_id = database_id
        if profiling_type is not None:
            self.profiling_type = profiling_type
        if sample_size is not None:
            self.sample_size = sample_size
        if run_after_metadata_synchronization is not None:
            self.run_after_metadata_synchronization = run_after_metadata_synchronization
        if exclude_types is not None:
            self.exclude_types = exclude_types

    @property
    def database_id(self):
        """Gets the database_id of this AddProfilingConfigurationRequest.  # noqa: E501

        The ID of the Database asset.  # noqa: E501

        :return: The database_id of this AddProfilingConfigurationRequest.  # noqa: E501
        :rtype: str
        """
        return self._database_id

    @database_id.setter
    def database_id(self, database_id):
        """Sets the database_id of this AddProfilingConfigurationRequest.

        The ID of the Database asset.  # noqa: E501

        :param database_id: The database_id of this AddProfilingConfigurationRequest.  # noqa: E501
        :type: str
        """
        if database_id is None:
            raise ValueError("Invalid value for `database_id`, must not be `None`")  # noqa: E501

        self._database_id = database_id

    @property
    def profiling_type(self):
        """Gets the profiling_type of this AddProfilingConfigurationRequest.  # noqa: E501

        - **full**: Select to profile and classify based on all synchronized metadata. - **sample**: Select to profile and classify based on a sample of the synchronized metadata.   When you select Partial scan, you can define the maximum number of rows that you want to use for profiling and classification (as *sampleSize*). By default, the maximum number of rows is 20000.   # noqa: E501

        :return: The profiling_type of this AddProfilingConfigurationRequest.  # noqa: E501
        :rtype: str
        """
        return self._profiling_type

    @profiling_type.setter
    def profiling_type(self, profiling_type):
        """Sets the profiling_type of this AddProfilingConfigurationRequest.

        - **full**: Select to profile and classify based on all synchronized metadata. - **sample**: Select to profile and classify based on a sample of the synchronized metadata.   When you select Partial scan, you can define the maximum number of rows that you want to use for profiling and classification (as *sampleSize*). By default, the maximum number of rows is 20000.   # noqa: E501

        :param profiling_type: The profiling_type of this AddProfilingConfigurationRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["full", "sample", "none"]  # noqa: E501
        if profiling_type not in allowed_values:
            raise ValueError(
                "Invalid value for `profiling_type` ({0}), must be one of {1}"  # noqa: E501
                .format(profiling_type, allowed_values)
            )

        self._profiling_type = profiling_type

    @property
    def sample_size(self):
        """Gets the sample_size of this AddProfilingConfigurationRequest.  # noqa: E501


        :return: The sample_size of this AddProfilingConfigurationRequest.  # noqa: E501
        :rtype: SampleSize
        """
        return self._sample_size

    @sample_size.setter
    def sample_size(self, sample_size):
        """Sets the sample_size of this AddProfilingConfigurationRequest.


        :param sample_size: The sample_size of this AddProfilingConfigurationRequest.  # noqa: E501
        :type: SampleSize
        """

        self._sample_size = sample_size

    @property
    def run_after_metadata_synchronization(self):
        """Gets the run_after_metadata_synchronization of this AddProfilingConfigurationRequest.  # noqa: E501

        If set to *true*, it will automatically create a data profile and classify columns every time the metadata synchronization process of one or more schemas finishes.  This may take a long time. You can also add a schedule to profile and classify at regular intervals.   # noqa: E501

        :return: The run_after_metadata_synchronization of this AddProfilingConfigurationRequest.  # noqa: E501
        :rtype: bool
        """
        return self._run_after_metadata_synchronization

    @run_after_metadata_synchronization.setter
    def run_after_metadata_synchronization(self, run_after_metadata_synchronization):
        """Sets the run_after_metadata_synchronization of this AddProfilingConfigurationRequest.

        If set to *true*, it will automatically create a data profile and classify columns every time the metadata synchronization process of one or more schemas finishes.  This may take a long time. You can also add a schedule to profile and classify at regular intervals.   # noqa: E501

        :param run_after_metadata_synchronization: The run_after_metadata_synchronization of this AddProfilingConfigurationRequest.  # noqa: E501
        :type: bool
        """

        self._run_after_metadata_synchronization = run_after_metadata_synchronization

    @property
    def exclude_types(self):
        """Gets the exclude_types of this AddProfilingConfigurationRequest.  # noqa: E501


        :return: The exclude_types of this AddProfilingConfigurationRequest.  # noqa: E501
        :rtype: ExcludeTypes
        """
        return self._exclude_types

    @exclude_types.setter
    def exclude_types(self, exclude_types):
        """Sets the exclude_types of this AddProfilingConfigurationRequest.


        :param exclude_types: The exclude_types of this AddProfilingConfigurationRequest.  # noqa: E501
        :type: ExcludeTypes
        """

        self._exclude_types = exclude_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddProfilingConfigurationRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddProfilingConfigurationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: diagnostics_api.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from . import common_pb2 as common__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x15\x64iagnostics_api.proto\x12\x0b\x64iagnostics\x1a\x0c\x63ommon.proto\"?\n\nLinkTimers\x12\x1a\n\x12maxResponseTimeout\x18\x03 \x01(\x03\x12\x15\n\rdelayResponse\x18\x04 \x01(\x03\"\x99\x01\n\x0fPublisherConfig\x12\x1f\n\x04link\x18\x01 \x01(\x0b\x32\x11.diagnostics.Link\x12%\n\x07payload\x18\x02 \x01(\x0b\x32\x14.diagnostics.Payload\x12+\n\nlinkTimers\x18\x03 \x01(\x0b\x32\x17.diagnostics.LinkTimers\x12\x11\n\tnoPadding\x18\x04 \x01(\x08\"\x87\x01\n\x10SubscriberConfig\x12\x1f\n\x04link\x18\x01 \x01(\x0b\x32\x11.diagnostics.Link\x12+\n\nlinkTimers\x18\x02 \x01(\x0b\x32\x17.diagnostics.LinkTimers\x12\x12\n\nrawPayload\x18\x03 \x01(\x08\x12\x11\n\tnoPadding\x18\x04 \x01(\x08\"\x18\n\x07Payload\x12\r\n\x05\x62ytes\x18\x01 \x01(\x0c\"x\n\x04Link\x12 \n\x08\x63lientId\x18\x01 \x01(\x0b\x32\x0e.base.ClientId\x12%\n\rpublishSignal\x18\x02 \x01(\x0b\x32\x0e.base.SignalId\x12\'\n\x0fsubscribeSignal\x18\x03 \x01(\x0b\x32\x0e.base.SignalId2\xa6\x01\n\x12\x44iagnosticsService\x12@\n\x11PublishMultiFrame\x12\x1c.diagnostics.PublisherConfig\x1a\x0b.base.Empty\"\x00\x12N\n\x13SubscribeMultiFrame\x12\x1d.diagnostics.SubscriberConfig\x1a\x14.diagnostics.Payload\"\x00\x30\x01\x62\x06proto3')



_LINKTIMERS = DESCRIPTOR.message_types_by_name['LinkTimers']
_PUBLISHERCONFIG = DESCRIPTOR.message_types_by_name['PublisherConfig']
_SUBSCRIBERCONFIG = DESCRIPTOR.message_types_by_name['SubscriberConfig']
_PAYLOAD = DESCRIPTOR.message_types_by_name['Payload']
_LINK = DESCRIPTOR.message_types_by_name['Link']
LinkTimers = _reflection.GeneratedProtocolMessageType('LinkTimers', (_message.Message,), {
  'DESCRIPTOR' : _LINKTIMERS,
  '__module__' : 'diagnostics_api_pb2'
  # @@protoc_insertion_point(class_scope:diagnostics.LinkTimers)
  })
_sym_db.RegisterMessage(LinkTimers)

PublisherConfig = _reflection.GeneratedProtocolMessageType('PublisherConfig', (_message.Message,), {
  'DESCRIPTOR' : _PUBLISHERCONFIG,
  '__module__' : 'diagnostics_api_pb2'
  # @@protoc_insertion_point(class_scope:diagnostics.PublisherConfig)
  })
_sym_db.RegisterMessage(PublisherConfig)

SubscriberConfig = _reflection.GeneratedProtocolMessageType('SubscriberConfig', (_message.Message,), {
  'DESCRIPTOR' : _SUBSCRIBERCONFIG,
  '__module__' : 'diagnostics_api_pb2'
  # @@protoc_insertion_point(class_scope:diagnostics.SubscriberConfig)
  })
_sym_db.RegisterMessage(SubscriberConfig)

Payload = _reflection.GeneratedProtocolMessageType('Payload', (_message.Message,), {
  'DESCRIPTOR' : _PAYLOAD,
  '__module__' : 'diagnostics_api_pb2'
  # @@protoc_insertion_point(class_scope:diagnostics.Payload)
  })
_sym_db.RegisterMessage(Payload)

Link = _reflection.GeneratedProtocolMessageType('Link', (_message.Message,), {
  'DESCRIPTOR' : _LINK,
  '__module__' : 'diagnostics_api_pb2'
  # @@protoc_insertion_point(class_scope:diagnostics.Link)
  })
_sym_db.RegisterMessage(Link)

_DIAGNOSTICSSERVICE = DESCRIPTOR.services_by_name['DiagnosticsService']
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  _LINKTIMERS._serialized_start=52
  _LINKTIMERS._serialized_end=115
  _PUBLISHERCONFIG._serialized_start=118
  _PUBLISHERCONFIG._serialized_end=271
  _SUBSCRIBERCONFIG._serialized_start=274
  _SUBSCRIBERCONFIG._serialized_end=409
  _PAYLOAD._serialized_start=411
  _PAYLOAD._serialized_end=435
  _LINK._serialized_start=437
  _LINK._serialized_end=557
  _DIAGNOSTICSSERVICE._serialized_start=560
  _DIAGNOSTICSSERVICE._serialized_end=726
# @@protoc_insertion_point(module_scope)

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import common_pb2 as common__pb2
from . import functional_api_pb2 as functional__api__pb2


class FunctionalServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.OpenPassWindow = channel.unary_unary(
                '/base.FunctionalService/OpenPassWindow',
                request_serializer=common__pb2.ClientId.SerializeToString,
                response_deserializer=common__pb2.Empty.FromString,
                )
        self.ClosePassWindow = channel.unary_unary(
                '/base.FunctionalService/ClosePassWindow',
                request_serializer=common__pb2.ClientId.SerializeToString,
                response_deserializer=common__pb2.Empty.FromString,
                )
        self.SetFanSpeed = channel.unary_unary(
                '/base.FunctionalService/SetFanSpeed',
                request_serializer=functional__api__pb2.SenderInfo.SerializeToString,
                response_deserializer=common__pb2.Empty.FromString,
                )
        self.SubscribeToFanSpeed = channel.unary_stream(
                '/base.FunctionalService/SubscribeToFanSpeed',
                request_serializer=functional__api__pb2.SubscriberRequest.SerializeToString,
                response_deserializer=functional__api__pb2.Value.FromString,
                )


class FunctionalServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def OpenPassWindow(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClosePassWindow(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetFanSpeed(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeToFanSpeed(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FunctionalServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'OpenPassWindow': grpc.unary_unary_rpc_method_handler(
                    servicer.OpenPassWindow,
                    request_deserializer=common__pb2.ClientId.FromString,
                    response_serializer=common__pb2.Empty.SerializeToString,
            ),
            'ClosePassWindow': grpc.unary_unary_rpc_method_handler(
                    servicer.ClosePassWindow,
                    request_deserializer=common__pb2.ClientId.FromString,
                    response_serializer=common__pb2.Empty.SerializeToString,
            ),
            'SetFanSpeed': grpc.unary_unary_rpc_method_handler(
                    servicer.SetFanSpeed,
                    request_deserializer=functional__api__pb2.SenderInfo.FromString,
                    response_serializer=common__pb2.Empty.SerializeToString,
            ),
            'SubscribeToFanSpeed': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeToFanSpeed,
                    request_deserializer=functional__api__pb2.SubscriberRequest.FromString,
                    response_serializer=functional__api__pb2.Value.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'base.FunctionalService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FunctionalService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def OpenPassWindow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/base.FunctionalService/OpenPassWindow',
            common__pb2.ClientId.SerializeToString,
            common__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ClosePassWindow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/base.FunctionalService/ClosePassWindow',
            common__pb2.ClientId.SerializeToString,
            common__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetFanSpeed(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/base.FunctionalService/SetFanSpeed',
            functional__api__pb2.SenderInfo.SerializeToString,
            common__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeToFanSpeed(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/base.FunctionalService/SubscribeToFanSpeed',
            functional__api__pb2.SubscriberRequest.SerializeToString,
            functional__api__pb2.Value.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

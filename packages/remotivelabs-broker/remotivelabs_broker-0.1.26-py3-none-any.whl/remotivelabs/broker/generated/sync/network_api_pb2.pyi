"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import collections.abc
from . import common_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import sys

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class SubscriberConfig(google.protobuf.message.Message):
    """/ Parameters for subscription."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CLIENTID_FIELD_NUMBER: builtins.int
    SIGNALS_FIELD_NUMBER: builtins.int
    ONCHANGE_FIELD_NUMBER: builtins.int
    @property
    def clientId(self) -> common_pb2.ClientId:
        """*
        Identifier of subscriber, typically your app identifier. Published signals
        with same identifier will not trigger callback.
        """
    @property
    def signals(self) -> global___SignalIds:
        """/ List of signals in subscription."""
    onChange: builtins.bool
    """/ Only trigger callback when value changes when set to true."""
    def __init__(
        self,
        *,
        clientId: common_pb2.ClientId | None = ...,
        signals: global___SignalIds | None = ...,
        onChange: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["clientId", b"clientId", "signals", b"signals"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["clientId", b"clientId", "onChange", b"onChange", "signals", b"signals"]) -> None: ...

global___SubscriberConfig = SubscriberConfig

class SubscriberWithScriptConfig(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CLIENTID_FIELD_NUMBER: builtins.int
    SCRIPT_FIELD_NUMBER: builtins.int
    ONCHANGE_FIELD_NUMBER: builtins.int
    @property
    def clientId(self) -> common_pb2.ClientId:
        """*
        Identifier of subscriber, typically your app identifier. Published signals
        with same identifier will not trigger callback.
        """
    script: builtins.bytes
    """/ Custom Lua mapping code"""
    onChange: builtins.bool
    """/ Only trigger callback when value changes when set to true."""
    def __init__(
        self,
        *,
        clientId: common_pb2.ClientId | None = ...,
        script: builtins.bytes = ...,
        onChange: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["clientId", b"clientId"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["clientId", b"clientId", "onChange", b"onChange", "script", b"script"]) -> None: ...

global___SubscriberWithScriptConfig = SubscriberWithScriptConfig

class FramesDistributionConfig(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAMESPACE_FIELD_NUMBER: builtins.int
    @property
    def namespace(self) -> common_pb2.NameSpace:
        """/ Name of the namespace from which we wish to subscribe to frames distributions."""
    def __init__(
        self,
        *,
        namespace: common_pb2.NameSpace | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["namespace", b"namespace"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["namespace", b"namespace"]) -> None: ...

global___FramesDistributionConfig = FramesDistributionConfig

class CountByFrameId(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FRAMEID_FIELD_NUMBER: builtins.int
    COUNT_FIELD_NUMBER: builtins.int
    frameId: builtins.int
    count: builtins.int
    def __init__(
        self,
        *,
        frameId: builtins.int = ...,
        count: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["count", b"count", "frameId", b"frameId"]) -> None: ...

global___CountByFrameId = CountByFrameId

class FramesDistribution(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COUNTSBYFRAMEID_FIELD_NUMBER: builtins.int
    @property
    def countsByFrameId(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___CountByFrameId]: ...
    def __init__(
        self,
        *,
        countsByFrameId: collections.abc.Iterable[global___CountByFrameId] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["countsByFrameId", b"countsByFrameId"]) -> None: ...

global___FramesDistribution = FramesDistribution

class SignalIds(google.protobuf.message.Message):
    """/ List of signal identifiers"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SIGNALID_FIELD_NUMBER: builtins.int
    @property
    def signalId(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[common_pb2.SignalId]:
        """/ List of signal identifiers."""
    def __init__(
        self,
        *,
        signalId: collections.abc.Iterable[common_pb2.SignalId] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["signalId", b"signalId"]) -> None: ...

global___SignalIds = SignalIds

class Signals(google.protobuf.message.Message):
    """/ Signals with values"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SIGNAL_FIELD_NUMBER: builtins.int
    @property
    def signal(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Signal]:
        """/ List of signals with values."""
    def __init__(
        self,
        *,
        signal: collections.abc.Iterable[global___Signal] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["signal", b"signal"]) -> None: ...

global___Signals = Signals

class PublisherConfig(google.protobuf.message.Message):
    """/ Parameters for publishing values."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SIGNALS_FIELD_NUMBER: builtins.int
    CLIENTID_FIELD_NUMBER: builtins.int
    FREQUENCY_FIELD_NUMBER: builtins.int
    @property
    def signals(self) -> global___Signals:
        """/ Signals with values."""
    @property
    def clientId(self) -> common_pb2.ClientId:
        """*
        Identifier of publisher, typically your app identifier.
        Subscribers with same identifier will not trigger callback.
        """
    frequency: builtins.int
    """/ Specify frequency of publication. Specify 0 to only publish once."""
    def __init__(
        self,
        *,
        signals: global___Signals | None = ...,
        clientId: common_pb2.ClientId | None = ...,
        frequency: builtins.int = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["clientId", b"clientId", "signals", b"signals"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["clientId", b"clientId", "frequency", b"frequency", "signals", b"signals"]) -> None: ...

global___PublisherConfig = PublisherConfig

class Signal(google.protobuf.message.Message):
    """/ Signal with value."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    INTEGER_FIELD_NUMBER: builtins.int
    DOUBLE_FIELD_NUMBER: builtins.int
    ARBITRATION_FIELD_NUMBER: builtins.int
    EMPTY_FIELD_NUMBER: builtins.int
    RAW_FIELD_NUMBER: builtins.int
    TIMESTAMP_FIELD_NUMBER: builtins.int
    @property
    def id(self) -> common_pb2.SignalId:
        """/ Identifier of signal to publish."""
    integer: builtins.int
    """/ Value with integer type (int64)."""
    double: builtins.float
    """/ Floating point data type (double)."""
    arbitration: builtins.bool
    """/ Exclusive for LIN bus, present as true when a header is presented on the bus."""
    empty: builtins.bool
    """/ No data supplied."""
    raw: builtins.bytes
    """/ Binary data of value, relevant for Frames."""
    timestamp: builtins.int
    """/ time stamp in micro seconds, set when first seen."""
    def __init__(
        self,
        *,
        id: common_pb2.SignalId | None = ...,
        integer: builtins.int = ...,
        double: builtins.float = ...,
        arbitration: builtins.bool = ...,
        empty: builtins.bool = ...,
        raw: builtins.bytes = ...,
        timestamp: builtins.int = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["arbitration", b"arbitration", "double", b"double", "empty", b"empty", "id", b"id", "integer", b"integer", "payload", b"payload"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["arbitration", b"arbitration", "double", b"double", "empty", b"empty", "id", b"id", "integer", b"integer", "payload", b"payload", "raw", b"raw", "timestamp", b"timestamp"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["payload", b"payload"]) -> typing_extensions.Literal["integer", "double", "arbitration", "empty"] | None: ...

global___Signal = Signal

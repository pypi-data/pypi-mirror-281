"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
* Data types for RemotiveBroker operations."""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _E2eProfile:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _E2eProfileEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_E2eProfile.ValueType], builtins.type):  # noqa: F821
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    PROFILE_AR_01A: _E2eProfile.ValueType  # 0
    """/ Autosar 1A"""

class E2eProfile(_E2eProfile, metaclass=_E2eProfileEnumTypeWrapper):
    """/ Supported E2E profiles."""

PROFILE_AR_01A: E2eProfile.ValueType  # 0
"""/ Autosar 1A"""
global___E2eProfile = E2eProfile

class Empty(google.protobuf.message.Message):
    """/ Symbolic message representing no argument needed or provided."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___Empty = Empty

class ClientId(google.protobuf.message.Message):
    """*
    Identifier for client. Used in subscribe and publish. Subscriptions will not
    receive updates from publish calls with the same ClientId.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    id: builtins.str
    """/ Identifier as string"""
    def __init__(
        self,
        *,
        id: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["id", b"id"]) -> None: ...

global___ClientId = ClientId

class SignalId(google.protobuf.message.Message):
    """/ Identifier for a signal."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    NAMESPACE_FIELD_NUMBER: builtins.int
    name: builtins.str
    """/ Name of signal."""
    @property
    def namespace(self) -> global___NameSpace:
        """/ Which name space signal belongs in."""
    def __init__(
        self,
        *,
        name: builtins.str = ...,
        namespace: global___NameSpace | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["namespace", b"namespace"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["name", b"name", "namespace", b"namespace"]) -> None: ...

global___SignalId = SignalId

class SignalInfo(google.protobuf.message.Message):
    """/ Information about a signal. Including name and all meta data fields."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    @property
    def id(self) -> global___SignalId: ...
    @property
    def metaData(self) -> global___MetaData: ...
    def __init__(
        self,
        *,
        id: global___SignalId | None = ...,
        metaData: global___MetaData | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["id", b"id", "metaData", b"metaData"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["id", b"id", "metaData", b"metaData"]) -> None: ...

global___SignalInfo = SignalInfo

class Multiplex(google.protobuf.message.Message):
    """*
    Multiplexing information.
    Some signal databases allow "multiplexing" or "unions" in their frame
    information. IF a signal is in `select` mode, the value of the signal will
    act as a filter for signals which are in `filter` mode.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NONE_FIELD_NUMBER: builtins.int
    SELECT_FIELD_NUMBER: builtins.int
    FILTER_FIELD_NUMBER: builtins.int
    @property
    def none(self) -> global___Empty: ...
    @property
    def select(self) -> global___Empty: ...
    filter: builtins.int
    def __init__(
        self,
        *,
        none: global___Empty | None = ...,
        select: global___Empty | None = ...,
        filter: builtins.int = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["filter", b"filter", "mode", b"mode", "none", b"none", "select", b"select"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["filter", b"filter", "mode", b"mode", "none", b"none", "select", b"select"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["mode", b"mode"]) -> typing_extensions.Literal["none", "select", "filter"] | None: ...

global___Multiplex = Multiplex

class E2e(google.protobuf.message.Message):
    """/ Information about E2E configuration."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PROFILE_FIELD_NUMBER: builtins.int
    DATAID_FIELD_NUMBER: builtins.int
    SIGNALCRC_FIELD_NUMBER: builtins.int
    SIGNALCOUNTER_FIELD_NUMBER: builtins.int
    profile: global___E2eProfile.ValueType
    """/ Profile."""
    dataId: builtins.int
    """/ Data ID for CRC calculation."""
    signalCrc: builtins.str
    """/ Name of signal for CRC field."""
    signalCounter: builtins.str
    """/ Name of signal for counter field."""
    def __init__(
        self,
        *,
        profile: global___E2eProfile.ValueType = ...,
        dataId: builtins.int = ...,
        signalCrc: builtins.str = ...,
        signalCounter: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["dataId", b"dataId", "profile", b"profile", "signalCounter", b"signalCounter", "signalCrc", b"signalCrc"]) -> None: ...

global___E2e = E2e

class Group(google.protobuf.message.Message):
    """/ Group inside of frame."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    START_FIELD_NUMBER: builtins.int
    LENGTH_FIELD_NUMBER: builtins.int
    E2E_FIELD_NUMBER: builtins.int
    start: builtins.int
    """/ Byte offset in frame for group."""
    length: builtins.int
    """/ Byte length of group."""
    @property
    def e2e(self) -> global___E2e:
        """/ E2E property for group."""
    def __init__(
        self,
        *,
        start: builtins.int = ...,
        length: builtins.int = ...,
        e2e: global___E2e | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["e2e", b"e2e"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["e2e", b"e2e", "length", b"length", "start", b"start"]) -> None: ...

global___Group = Group

class MetaData(google.protobuf.message.Message):
    """*
    Collection of all meta data for a signal.

    RemotiveBroker support several databases. The following attributes are read
    from the database running on the RemotiveBroker.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DESCRIPTION_FIELD_NUMBER: builtins.int
    MAX_FIELD_NUMBER: builtins.int
    MIN_FIELD_NUMBER: builtins.int
    UNIT_FIELD_NUMBER: builtins.int
    SIZE_FIELD_NUMBER: builtins.int
    ISRAW_FIELD_NUMBER: builtins.int
    FACTOR_FIELD_NUMBER: builtins.int
    OFFSET_FIELD_NUMBER: builtins.int
    SENDER_FIELD_NUMBER: builtins.int
    RECEIVER_FIELD_NUMBER: builtins.int
    CYCLETIME_FIELD_NUMBER: builtins.int
    STARTVALUE_FIELD_NUMBER: builtins.int
    MULTIPLEX_FIELD_NUMBER: builtins.int
    E2E_FIELD_NUMBER: builtins.int
    GROUPS_FIELD_NUMBER: builtins.int
    FRAMEID_FIELD_NUMBER: builtins.int
    description: builtins.str
    """/ Description for signal."""
    max: builtins.float
    """/ Maximum allowed value."""
    min: builtins.float
    """/ Minimum allowed value."""
    unit: builtins.str
    """/ Unit of the signal value."""
    size: builtins.int
    """/ Size of signal value when packed in frame."""
    isRaw: builtins.bool
    """/ Is binary data?"""
    factor: builtins.float
    """/ Multiplication faction used for encoding and decoding value in frame."""
    offset: builtins.float
    """/ Offset used for encoding and decoding value in frame."""
    @property
    def sender(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """/ List of named senders of signals."""
    @property
    def receiver(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """/ List of named receivers of signal."""
    cycleTime: builtins.float
    """/ Cadence for sending signal in milliseconds."""
    startValue: builtins.float
    """/ Initial value to use before publishing."""
    @property
    def multiplex(self) -> global___Multiplex:
        """/ Frame multiplexing information."""
    @property
    def e2e(self) -> global___E2e:
        """/ E2e information about frame."""
    @property
    def groups(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Group]:
        """/ Groups inside frame."""
    frameId: builtins.int
    """/ Assosiated identification number for frame."""
    def __init__(
        self,
        *,
        description: builtins.str = ...,
        max: builtins.float = ...,
        min: builtins.float = ...,
        unit: builtins.str = ...,
        size: builtins.int = ...,
        isRaw: builtins.bool = ...,
        factor: builtins.float = ...,
        offset: builtins.float = ...,
        sender: collections.abc.Iterable[builtins.str] | None = ...,
        receiver: collections.abc.Iterable[builtins.str] | None = ...,
        cycleTime: builtins.float = ...,
        startValue: builtins.float = ...,
        multiplex: global___Multiplex | None = ...,
        e2e: global___E2e | None = ...,
        groups: collections.abc.Iterable[global___Group] | None = ...,
        frameId: builtins.int = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["e2e", b"e2e", "multiplex", b"multiplex"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["cycleTime", b"cycleTime", "description", b"description", "e2e", b"e2e", "factor", b"factor", "frameId", b"frameId", "groups", b"groups", "isRaw", b"isRaw", "max", b"max", "min", b"min", "multiplex", b"multiplex", "offset", b"offset", "receiver", b"receiver", "sender", b"sender", "size", b"size", "startValue", b"startValue", "unit", b"unit"]) -> None: ...

global___MetaData = MetaData

class NameSpace(google.protobuf.message.Message):
    """/ Identifier for a name space."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    name: builtins.str
    """/ Name of name space, which in turn is typically redirected in interfaces.json to an electrical interface."""
    def __init__(
        self,
        *,
        name: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name", b"name"]) -> None: ...

global___NameSpace = NameSpace

class NetworkInfo(google.protobuf.message.Message):
    """/ Information about network"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAMESPACE_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    @property
    def namespace(self) -> global___NameSpace:
        """/ Corresponding name space."""
    type: builtins.str
    """/ Type of network as text. Eg "can", "lin" etc."""
    description: builtins.str
    """/ Description text about network."""
    def __init__(
        self,
        *,
        namespace: global___NameSpace | None = ...,
        type: builtins.str = ...,
        description: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["namespace", b"namespace"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["description", b"description", "namespace", b"namespace", "type", b"type"]) -> None: ...

global___NetworkInfo = NetworkInfo

class FrameInfo(google.protobuf.message.Message):
    """/ Information about a frame and it's signals."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SIGNALINFO_FIELD_NUMBER: builtins.int
    CHILDINFO_FIELD_NUMBER: builtins.int
    @property
    def signalInfo(self) -> global___SignalInfo:
        """/ Information about the frame itself."""
    @property
    def childInfo(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___SignalInfo]:
        """/ Information about signals included in frame."""
    def __init__(
        self,
        *,
        signalInfo: global___SignalInfo | None = ...,
        childInfo: collections.abc.Iterable[global___SignalInfo] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["signalInfo", b"signalInfo"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["childInfo", b"childInfo", "signalInfo", b"signalInfo"]) -> None: ...

global___FrameInfo = FrameInfo

class Frames(google.protobuf.message.Message):
    """/ Collection of information for several frames."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FRAME_FIELD_NUMBER: builtins.int
    @property
    def frame(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___FrameInfo]:
        """/ List of information about frames."""
    def __init__(
        self,
        *,
        frame: collections.abc.Iterable[global___FrameInfo] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["frame", b"frame"]) -> None: ...

global___Frames = Frames
